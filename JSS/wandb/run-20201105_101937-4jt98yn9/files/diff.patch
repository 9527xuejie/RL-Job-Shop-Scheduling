diff --git a/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb b/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb
index 4ec3a0c..9879da6 100644
--- a/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb
+++ b/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 14,
    "metadata": {},
    "outputs": [
     {
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta40', '/JSS/JSS/env/instances/ta41', '/JSS/JSS/env/instances/ta42', '/JSS/JSS/env/instances/ta43', '/JSS/JSS/env/instances/ta44',\n",
+    "                           '/JSS/JSS/env/instances/ta45', '/JSS/JSS/env/instances/ta46', '/JSS/JSS/env/instances/ta47', '/JSS/JSS/env/instances/ta48',\n",
+    "                           '/JSS/JSS/env/instances/ta49', '/JSS/JSS/env/instances/ta50']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -74,25 +74,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 15,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: 1x8v92mc\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/1x8v92mc\n"
+      "Create sweep with ID: 9xhkl8my\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\n"
      ]
     }
    ],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_2\")"
+    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_3\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 16,
    "metadata": {},
    "outputs": [
     {
@@ -100,67 +100,13616 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-13 11:45:51,946 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-13 11:45:52,259 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-13 11:45:52,260 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-13 11:45:52,261 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python RandomGreedy.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-01 11:53:51,776 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-01 11:53:52,086 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 11:53:52,086 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la11.txt\n",
+      "2020-11-01 11:53:52,088 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la11.txt\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mrandom\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/1x8v92mc\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3qwfavbb\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201013_114553-3qwfavbb\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mmisty-sweep-1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/kqo0l7if\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_115353-kqo0l7if\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-13 11:45:57,278 - wandb.wandb_agent - INFO - Running runs: ['3qwfavbb']\n",
+      "2020-11-01 11:53:57,102 - wandb.wandb_agent - INFO - Running runs: ['kqo0l7if']\n",
+      "2020-11-01 11:53:57,683\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 39394\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=20230)\u001b[0m 2020-11-01 11:54:00,466\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=20215)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20215)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20191)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20191)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20206)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20206)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20222)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20222)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20202)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20202)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20171)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20171)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20193)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20193)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20199)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20199)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20235)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20235)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20233)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20233)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20232)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20232)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20198)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20198)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20211)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20211)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20205)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20205)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20226)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20226)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20187)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20187)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20207)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20207)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20216)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20216)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20237)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20237)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20166)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20166)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20236)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20236)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20247)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20247)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20151)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20151)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20175)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20175)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20138)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20138)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20174)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20174)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20178)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20178)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20116)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20116)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20128)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20128)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20181)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20181)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20123)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20123)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20142)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20142)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20169)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20169)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20196)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20196)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20209)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20209)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20188)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20188)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20112)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20112)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20120)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20120)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20210)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20210)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20131)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20131)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20127)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20127)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20134)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20134)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20170)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20170)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20125)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20125)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20129)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20129)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20212)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20212)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20203)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20203)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20180)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20180)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20194)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20194)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20150)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20150)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20219)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20219)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20197)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20197)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20176)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20176)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20192)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20192)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20130)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20130)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20149)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20149)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20195)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20195)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20124)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20124)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20132)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20132)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20240)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20240)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20200)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20200)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20117)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20117)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20173)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20173)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20183)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20183)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20184)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20184)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20145)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20145)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20141)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20141)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20148)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20148)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20122)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20122)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20118)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20118)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20115)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20115)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20214)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20214)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20147)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20147)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20135)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20135)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20114)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20114)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20119)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20119)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20241)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20241)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20113)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20113)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20225)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20225)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1434.4832653061223\n",
+      "    time_step_min: 1245\n",
+      "  date: 2020-11-01_11-54-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.93913043478261\n",
+      "  episode_reward_max: 45.68367346938774\n",
+      "  episode_reward_mean: 35.80144389771718\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1265\n",
+      "  episodes_total: 1265\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1484567523002625\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006624576014777024\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007466505475652714\n",
+      "        total_loss: 52.51902961730957\n",
+      "        vf_explained_var: 0.7593300342559814\n",
+      "        vf_loss: 52.52574666341146\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 31.92222222222222\n",
+      "    gpu_util_percent0: 0.3044444444444444\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4370370370370376\n",
+      "    vram_util_percent0: 0.0819728386963546\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.17175637313856013\n",
+      "    mean_env_wait_ms: 0.6787065283307273\n",
+      "    mean_inference_ms: 5.169812775871786\n",
+      "    mean_raw_obs_processing_ms: 0.45531381926816505\n",
+      "  time_since_restore: 22.264521837234497\n",
+      "  time_this_iter_s: 22.264521837234497\n",
+      "  time_total_s: 22.264521837234497\n",
+      "  timers:\n",
+      "    learn_throughput: 11076.145\n",
+      "    learn_time_ms: 14607.249\n",
+      "    sample_throughput: 21315.374\n",
+      "    sample_time_ms: 7590.39\n",
+      "    update_time_ms: 20.181\n",
+      "  timestamp: 1604231667\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      1 |          22.2645 | 161792 |  35.8014 |              45.6837 |              15.7347 |            116.939 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1426.9196226415095\n",
+      "    time_step_min: 1245\n",
+      "  date: 2020-11-01_11-54-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 115.78401486988848\n",
+      "  episode_reward_max: 45.68367346938774\n",
+      "  episode_reward_mean: 36.37903042257795\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1425\n",
+      "  episodes_total: 2690\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.130055993795395\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00956034411986669\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011216347149456851\n",
+      "        total_loss: 10.385109821955362\n",
+      "        vf_explained_var: 0.894355058670044\n",
+      "        vf_loss: 10.394978761672974\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.388\n",
+      "    gpu_util_percent0: 0.3824\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16652532875458848\n",
+      "    mean_env_wait_ms: 0.6684123457284149\n",
+      "    mean_inference_ms: 4.952915318761355\n",
+      "    mean_raw_obs_processing_ms: 0.44064388796599707\n",
+      "  time_since_restore: 43.21846151351929\n",
+      "  time_this_iter_s: 20.95393967628479\n",
+      "  time_total_s: 43.21846151351929\n",
+      "  timers:\n",
+      "    learn_throughput: 11096.611\n",
+      "    learn_time_ms: 14580.307\n",
+      "    sample_throughput: 23271.686\n",
+      "    sample_time_ms: 6952.311\n",
+      "    update_time_ms: 21.999\n",
+      "  timestamp: 1604231689\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      2 |          43.2185 | 323584 |   36.379 |              45.6837 |              15.7347 |            115.784 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1408.408178256611\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-55-09\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.67119301648884\n",
+      "  episode_reward_max: 46.85714285714286\n",
+      "  episode_reward_mean: 37.28042419683683\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1434\n",
+      "  episodes_total: 4124\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1140848398208618\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009810077414537469\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015473847355072698\n",
+      "        total_loss: 7.254512945810954\n",
+      "        vf_explained_var: 0.9246422648429871\n",
+      "        vf_loss: 7.2685816287994385\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.775000000000002\n",
+      "    gpu_util_percent0: 0.34500000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516666666666667\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16318379996682947\n",
+      "    mean_env_wait_ms: 0.662199655734115\n",
+      "    mean_inference_ms: 4.788160816000921\n",
+      "    mean_raw_obs_processing_ms: 0.43056477316095654\n",
+      "  time_since_restore: 63.56497097015381\n",
+      "  time_this_iter_s: 20.34650945663452\n",
+      "  time_total_s: 63.56497097015381\n",
+      "  timers:\n",
+      "    learn_throughput: 11127.786\n",
+      "    learn_time_ms: 14539.46\n",
+      "    sample_throughput: 24626.159\n",
+      "    sample_time_ms: 6569.924\n",
+      "    update_time_ms: 21.5\n",
+      "  timestamp: 1604231709\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      3 |           63.565 | 485376 |  37.2804 |              46.8571 |              15.7347 |            114.671 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1389.7721856660146\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-55-30\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.25304608864559\n",
+      "  episode_reward_max: 46.857142857142875\n",
+      "  episode_reward_mean: 38.234928122758895\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1539\n",
+      "  episodes_total: 5663\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0880944629510243\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009488985563317934\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01440603454830125\n",
+      "        total_loss: 5.48736047744751\n",
+      "        vf_explained_var: 0.9440011978149414\n",
+      "        vf_loss: 5.500412583351135\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.516666666666666\n",
+      "    gpu_util_percent0: 0.34874999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5125000000000006\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16068983053902333\n",
+      "    mean_env_wait_ms: 0.6583389151369388\n",
+      "    mean_inference_ms: 4.664128900411232\n",
+      "    mean_raw_obs_processing_ms: 0.42299876801925573\n",
+      "  time_since_restore: 84.06657981872559\n",
+      "  time_this_iter_s: 20.501608848571777\n",
+      "  time_total_s: 84.06657981872559\n",
+      "  timers:\n",
+      "    learn_throughput: 11095.44\n",
+      "    learn_time_ms: 14581.846\n",
+      "    sample_throughput: 25479.527\n",
+      "    sample_time_ms: 6349.882\n",
+      "    update_time_ms: 24.143\n",
+      "  timestamp: 1604231730\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      4 |          84.0666 | 647168 |  38.2349 |              46.8571 |              15.7347 |            113.253 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1374.424760022586\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-55-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.05460415496911\n",
+      "  episode_reward_max: 46.857142857142875\n",
+      "  episode_reward_mean: 39.03776398262842\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1461\n",
+      "  episodes_total: 7124\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0627730786800385\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009283728742351135\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015454331073366726\n",
+      "        total_loss: 4.347856322924296\n",
+      "        vf_explained_var: 0.9541513323783875\n",
+      "        vf_loss: 4.3619853258132935\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.604166666666668\n",
+      "    gpu_util_percent0: 0.3541666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5124999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15895058912495744\n",
+      "    mean_env_wait_ms: 0.6558977259961688\n",
+      "    mean_inference_ms: 4.577574740810779\n",
+      "    mean_raw_obs_processing_ms: 0.4175203436251983\n",
+      "  time_since_restore: 104.25312542915344\n",
+      "  time_this_iter_s: 20.186545610427856\n",
+      "  time_total_s: 104.25312542915344\n",
+      "  timers:\n",
+      "    learn_throughput: 11116.23\n",
+      "    learn_time_ms: 14554.575\n",
+      "    sample_throughput: 26067.237\n",
+      "    sample_time_ms: 6206.718\n",
+      "    update_time_ms: 26.186\n",
+      "  timestamp: 1604231750\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      5 |          104.253 | 808960 |  39.0378 |              46.8571 |              15.7347 |            112.055 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1360.2383485601943\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-56-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.9338091400944\n",
+      "  episode_reward_max: 46.85714285714288\n",
+      "  episode_reward_mean: 39.78162771958098\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1563\n",
+      "  episodes_total: 8687\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0209535757700603\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009677846527968844\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013495485666984072\n",
+      "        total_loss: 3.3039915561676025\n",
+      "        vf_explained_var: 0.9663781523704529\n",
+      "        vf_loss: 3.3160619735717773\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.1\n",
+      "    gpu_util_percent0: 0.3948\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.52\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15752045783718058\n",
+      "    mean_env_wait_ms: 0.6540636684528683\n",
+      "    mean_inference_ms: 4.50681489407211\n",
+      "    mean_raw_obs_processing_ms: 0.4129356375354034\n",
+      "  time_since_restore: 124.68163776397705\n",
+      "  time_this_iter_s: 20.42851233482361\n",
+      "  time_total_s: 124.68163776397705\n",
+      "  timers:\n",
+      "    learn_throughput: 11114.998\n",
+      "    learn_time_ms: 14556.188\n",
+      "    sample_throughput: 26385.183\n",
+      "    sample_time_ms: 6131.926\n",
+      "    update_time_ms: 25.903\n",
+      "  timestamp: 1604231771\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      6 |          124.682 | 970752 |  39.7816 |              46.8571 |              15.7347 |            110.934 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1346.8549304058029\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-56-31\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.96026166764304\n",
+      "  episode_reward_max: 46.85714285714288\n",
+      "  episode_reward_mean: 40.448761402627824\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1555\n",
+      "  episodes_total: 10242\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9796850432952245\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008622131776064634\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012602110786247067\n",
+      "        total_loss: 2.7198241551717124\n",
+      "        vf_explained_var: 0.9723749160766602\n",
+      "        vf_loss: 2.731191635131836\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.520833333333332\n",
+      "    gpu_util_percent0: 0.36541666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5208333333333335\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15640676678928592\n",
+      "    mean_env_wait_ms: 0.6528313389539068\n",
+      "    mean_inference_ms: 4.45161866768078\n",
+      "    mean_raw_obs_processing_ms: 0.40931756815016995\n",
+      "  time_since_restore: 145.21865725517273\n",
+      "  time_this_iter_s: 20.53701949119568\n",
+      "  time_total_s: 145.21865725517273\n",
+      "  timers:\n",
+      "    learn_throughput: 11103.013\n",
+      "    learn_time_ms: 14571.9\n",
+      "    sample_throughput: 26614.769\n",
+      "    sample_time_ms: 6079.031\n",
+      "    update_time_ms: 25.131\n",
+      "  timestamp: 1604231791\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      7 |          145.219 | 1132544 |  40.4488 |              46.8571 |              15.7347 |             109.96 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1335.6309301139263\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-56-52\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.09913573970513\n",
+      "  episode_reward_max: 46.8571428571429\n",
+      "  episode_reward_mean: 41.02892366911177\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 11802\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.937453493475914\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007955724994341532\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01194375741033582\n",
+      "        total_loss: 2.2597323656082153\n",
+      "        vf_explained_var: 0.9770286083221436\n",
+      "        vf_loss: 2.2705536683400473\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.436000000000003\n",
+      "    gpu_util_percent0: 0.3632\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1554915965562696\n",
+      "    mean_env_wait_ms: 0.6518904790353526\n",
+      "    mean_inference_ms: 4.406507393012131\n",
+      "    mean_raw_obs_processing_ms: 0.40631830746764874\n",
+      "  time_since_restore: 166.04925441741943\n",
+      "  time_this_iter_s: 20.830597162246704\n",
+      "  time_total_s: 166.04925441741943\n",
+      "  timers:\n",
+      "    learn_throughput: 11082.871\n",
+      "    learn_time_ms: 14598.383\n",
+      "    sample_throughput: 26705.585\n",
+      "    sample_time_ms: 6058.358\n",
+      "    update_time_ms: 26.617\n",
+      "  timestamp: 1604231812\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      8 |          166.049 | 1294336 |  41.0289 |              46.8571 |              15.7347 |            109.099 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1325.960990247562\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-57-13\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.36514584891549\n",
+      "  episode_reward_max: 46.8571428571429\n",
+      "  episode_reward_mean: 41.523987605513405\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1568\n",
+      "  episodes_total: 13370\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8931734959284464\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007821322418749332\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011547995522657098\n",
+      "        total_loss: 1.8110616604487102\n",
+      "        vf_explained_var: 0.9818581938743591\n",
+      "        vf_loss: 1.8214919765790303\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.3625\n",
+      "    gpu_util_percent0: 0.34625\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15472443847934\n",
+      "    mean_env_wait_ms: 0.6512116120864969\n",
+      "    mean_inference_ms: 4.368900491259558\n",
+      "    mean_raw_obs_processing_ms: 0.40380683055783845\n",
+      "  time_since_restore: 186.4968512058258\n",
+      "  time_this_iter_s: 20.447596788406372\n",
+      "  time_total_s: 186.4968512058258\n",
+      "  timers:\n",
+      "    learn_throughput: 11083.852\n",
+      "    learn_time_ms: 14597.092\n",
+      "    sample_throughput: 26872.567\n",
+      "    sample_time_ms: 6020.713\n",
+      "    update_time_ms: 27.945\n",
+      "  timestamp: 1604231833\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      9 |          186.497 | 1456128 |   41.524 |              46.8571 |              15.7347 |            108.365 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1317.3690564013145\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-57-34\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.72182462711524\n",
+      "  episode_reward_max: 46.8571428571429\n",
+      "  episode_reward_mean: 41.96634652790953\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1581\n",
+      "  episodes_total: 14951\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8531899998585383\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007403539726510644\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011224584576363364\n",
+      "        total_loss: 1.351464072863261\n",
+      "        vf_explained_var: 0.9865902066230774\n",
+      "        vf_loss: 1.3616345326105754\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.612\n",
+      "    gpu_util_percent0: 0.37999999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.572\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15406610086889994\n",
+      "    mean_env_wait_ms: 0.6506878167628722\n",
+      "    mean_inference_ms: 4.336866675743429\n",
+      "    mean_raw_obs_processing_ms: 0.4016399376622533\n",
+      "  time_since_restore: 207.11356925964355\n",
+      "  time_this_iter_s: 20.61671805381775\n",
+      "  time_total_s: 207.11356925964355\n",
+      "  timers:\n",
+      "    learn_throughput: 11075.434\n",
+      "    learn_time_ms: 14608.186\n",
+      "    sample_throughput: 27020.124\n",
+      "    sample_time_ms: 5987.833\n",
+      "    update_time_ms: 29.042\n",
+      "  timestamp: 1604231854\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     10 |          207.114 | 1617920 |  41.9663 |              46.8571 |              15.7347 |            107.722 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1309.7214852504694\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-57-55\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.15910326907971\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 42.36176364315742\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 16549\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8141860415538152\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006707225965025525\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011368195065491212\n",
+      "        total_loss: 1.1314103106657665\n",
+      "        vf_explained_var: 0.9888380169868469\n",
+      "        vf_loss: 1.1418441633383434\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.291666666666668\n",
+      "    gpu_util_percent0: 0.38208333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15349391695430212\n",
+      "    mean_env_wait_ms: 0.6503003794675789\n",
+      "    mean_inference_ms: 4.309108284972775\n",
+      "    mean_raw_obs_processing_ms: 0.3997656568156822\n",
+      "  time_since_restore: 227.4893569946289\n",
+      "  time_this_iter_s: 20.37578773498535\n",
+      "  time_total_s: 227.4893569946289\n",
+      "  timers:\n",
+      "    learn_throughput: 11080.893\n",
+      "    learn_time_ms: 14600.989\n",
+      "    sample_throughput: 27896.222\n",
+      "    sample_time_ms: 5799.782\n",
+      "    update_time_ms: 29.058\n",
+      "  timestamp: 1604231875\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     11 |          227.489 | 1779712 |  42.3618 |              46.8571 |              15.7347 |            107.159 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1303.0352388842862\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-58-16\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.65836318545054\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 42.7044331097002\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1596\n",
+      "  episodes_total: 18145\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7753126074870428\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006863077365172406\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012638252902737198\n",
+      "        total_loss: 0.8784026602904002\n",
+      "        vf_explained_var: 0.9913859963417053\n",
+      "        vf_loss: 0.8900559494892756\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.460000000000004\n",
+      "    gpu_util_percent0: 0.35159999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15300041083206697\n",
+      "    mean_env_wait_ms: 0.6500163020439707\n",
+      "    mean_inference_ms: 4.28507024712119\n",
+      "    mean_raw_obs_processing_ms: 0.39814727184542376\n",
+      "  time_since_restore: 248.12101984024048\n",
+      "  time_this_iter_s: 20.631662845611572\n",
+      "  time_total_s: 248.12101984024048\n",
+      "  timers:\n",
+      "    learn_throughput: 11075.423\n",
+      "    learn_time_ms: 14608.2\n",
+      "    sample_throughput: 28116.695\n",
+      "    sample_time_ms: 5754.304\n",
+      "    update_time_ms: 29.472\n",
+      "  timestamp: 1604231896\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     12 |          248.121 | 1941504 |  42.7044 |              46.8571 |              15.7347 |            106.658 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1297.1705583756345\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-58-37\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.2274062816616\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.00436542398114\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1595\n",
+      "  episodes_total: 19740\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7383754253387451\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006651315527657668\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010724902463455996\n",
+      "        total_loss: 0.7107721914847692\n",
+      "        vf_explained_var: 0.9930524230003357\n",
+      "        vf_loss: 0.720536028345426\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.279166666666665\n",
+      "    gpu_util_percent0: 0.3491666666666666\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15256633452651727\n",
+      "    mean_env_wait_ms: 0.649802245161823\n",
+      "    mean_inference_ms: 4.264010160654567\n",
+      "    mean_raw_obs_processing_ms: 0.39671502855945817\n",
+      "  time_since_restore: 268.6334173679352\n",
+      "  time_this_iter_s: 20.512397527694702\n",
+      "  time_total_s: 268.6334173679352\n",
+      "  timers:\n",
+      "    learn_throughput: 11061.736\n",
+      "    learn_time_ms: 14626.276\n",
+      "    sample_throughput: 28152.503\n",
+      "    sample_time_ms: 5746.985\n",
+      "    update_time_ms: 29.255\n",
+      "  timestamp: 1604231917\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     13 |          268.633 | 2103296 |  43.0044 |              46.8571 |              15.7347 |            106.227 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1292.0809922014469\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-58-58\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.85140204445278\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.26472333282933\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1586\n",
+      "  episodes_total: 21326\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7001272787650427\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0061410532022515936\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010832997679244727\n",
+      "        total_loss: 0.6119682043790817\n",
+      "        vf_explained_var: 0.9940410256385803\n",
+      "        vf_loss: 0.621923049290975\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.02\n",
+      "    gpu_util_percent0: 0.368\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15218124195639093\n",
+      "    mean_env_wait_ms: 0.6496403257727554\n",
+      "    mean_inference_ms: 4.245421485662705\n",
+      "    mean_raw_obs_processing_ms: 0.3954453584998017\n",
+      "  time_since_restore: 289.35663652420044\n",
+      "  time_this_iter_s: 20.72321915626526\n",
+      "  time_total_s: 289.35663652420044\n",
+      "  timers:\n",
+      "    learn_throughput: 11062.187\n",
+      "    learn_time_ms: 14625.679\n",
+      "    sample_throughput: 28102.045\n",
+      "    sample_time_ms: 5757.304\n",
+      "    update_time_ms: 34.762\n",
+      "  timestamp: 1604231938\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     14 |          289.357 | 2265088 |  43.2647 |              46.8571 |              15.7347 |            105.851 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1287.5182239314745\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-59-18\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.5031847133758\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.497414924437614\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1596\n",
+      "  episodes_total: 22922\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6637579500675201\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005367214015374581\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009309418620735718\n",
+      "        total_loss: 0.47650496910015744\n",
+      "        vf_explained_var: 0.9953997731208801\n",
+      "        vf_loss: 0.4850728213787079\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.845833333333335\n",
+      "    gpu_util_percent0: 0.40166666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15183678083046764\n",
+      "    mean_env_wait_ms: 0.6495392872625815\n",
+      "    mean_inference_ms: 4.2286469238398325\n",
+      "    mean_raw_obs_processing_ms: 0.39431499646823304\n",
+      "  time_since_restore: 309.672310590744\n",
+      "  time_this_iter_s: 20.31567406654358\n",
+      "  time_total_s: 309.672310590744\n",
+      "  timers:\n",
+      "    learn_throughput: 11054.878\n",
+      "    learn_time_ms: 14635.35\n",
+      "    sample_throughput: 28119.821\n",
+      "    sample_time_ms: 5753.664\n",
+      "    update_time_ms: 33.135\n",
+      "  timestamp: 1604231958\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     15 |          309.672 | 2426880 |  43.4974 |              46.8571 |              15.7347 |            105.503 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1283.4805964052287\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-59-39\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.19265905383361\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.70432092086426\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 24520\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6296272675196329\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0055771675348902745\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009812832868192345\n",
+      "        total_loss: 0.3527320822079976\n",
+      "        vf_explained_var: 0.9965917468070984\n",
+      "        vf_loss: 0.3617442895968755\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.162500000000005\n",
+      "    gpu_util_percent0: 0.42416666666666664\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1515236024097143\n",
+      "    mean_env_wait_ms: 0.6494728987544927\n",
+      "    mean_inference_ms: 4.213501380549204\n",
+      "    mean_raw_obs_processing_ms: 0.3932868129355243\n",
+      "  time_since_restore: 330.0610761642456\n",
+      "  time_this_iter_s: 20.388765573501587\n",
+      "  time_total_s: 330.0610761642456\n",
+      "  timers:\n",
+      "    learn_throughput: 11058.672\n",
+      "    learn_time_ms: 14630.328\n",
+      "    sample_throughput: 28143.68\n",
+      "    sample_time_ms: 5748.786\n",
+      "    update_time_ms: 32.726\n",
+      "  timestamp: 1604231979\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     16 |          330.061 | 2588672 |  43.7043 |              46.8571 |              15.7347 |            105.193 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1279.8473329245862\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-00-00\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.910927456382\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.890595815920484\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1616\n",
+      "  episodes_total: 26136\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5843918571869532\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005636528095540901\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009946482673209781\n",
+      "        total_loss: 0.2803831646839778\n",
+      "        vf_explained_var: 0.9972963333129883\n",
+      "        vf_loss: 0.28949454923470813\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.984\n",
+      "    gpu_util_percent0: 0.36920000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15123654271663214\n",
+      "    mean_env_wait_ms: 0.6494373187304042\n",
+      "    mean_inference_ms: 4.199623866436883\n",
+      "    mean_raw_obs_processing_ms: 0.3923463354120984\n",
+      "  time_since_restore: 350.56322145462036\n",
+      "  time_this_iter_s: 20.502145290374756\n",
+      "  time_total_s: 350.56322145462036\n",
+      "  timers:\n",
+      "    learn_throughput: 11060.535\n",
+      "    learn_time_ms: 14627.863\n",
+      "    sample_throughput: 28221.412\n",
+      "    sample_time_ms: 5732.952\n",
+      "    update_time_ms: 40.383\n",
+      "  timestamp: 1604232000\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     17 |          350.563 | 2750464 |  43.8906 |              46.8571 |              15.7347 |            104.911 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1276.563322872705\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-00-21\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.65475633036776\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.05809376302477\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1627\n",
+      "  episodes_total: 27763\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5512450536092123\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0052360318368300796\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00858212105807373\n",
+      "        total_loss: 0.2300113836924235\n",
+      "        vf_explained_var: 0.997800350189209\n",
+      "        vf_loss: 0.2378219154973825\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.133333333333336\n",
+      "    gpu_util_percent0: 0.3545833333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15097539441634178\n",
+      "    mean_env_wait_ms: 0.649425583111441\n",
+      "    mean_inference_ms: 4.186930579711764\n",
+      "    mean_raw_obs_processing_ms: 0.3914892612304368\n",
+      "  time_since_restore: 371.091876745224\n",
+      "  time_this_iter_s: 20.528655290603638\n",
+      "  time_total_s: 371.091876745224\n",
+      "  timers:\n",
+      "    learn_throughput: 11066.918\n",
+      "    learn_time_ms: 14619.428\n",
+      "    sample_throughput: 28359.109\n",
+      "    sample_time_ms: 5705.116\n",
+      "    update_time_ms: 40.411\n",
+      "  timestamp: 1604232021\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     18 |          371.092 | 2912256 |  44.0581 |              46.8571 |              15.7347 |            104.655 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1273.6519278628166\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-00-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.42508426105607\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.20715088200534\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 29373\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.525387316942215\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004920089112905164\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008422184953815304\n",
+      "        total_loss: 0.1757721391816934\n",
+      "        vf_explained_var: 0.9983048439025879\n",
+      "        vf_loss: 0.1834729996820291\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.212000000000003\n",
+      "    gpu_util_percent0: 0.336\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15073736984322064\n",
+      "    mean_env_wait_ms: 0.649427266881627\n",
+      "    mean_inference_ms: 4.175450336968136\n",
+      "    mean_raw_obs_processing_ms: 0.3907110068982923\n",
+      "  time_since_restore: 391.7044517993927\n",
+      "  time_this_iter_s: 20.6125750541687\n",
+      "  time_total_s: 391.7044517993927\n",
+      "  timers:\n",
+      "    learn_throughput: 11052.788\n",
+      "    learn_time_ms: 14638.117\n",
+      "    sample_throughput: 28425.972\n",
+      "    sample_time_ms: 5691.696\n",
+      "    update_time_ms: 45.734\n",
+      "  timestamp: 1604232043\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     19 |          391.704 | 3074048 |  44.2072 |              46.8571 |              15.7347 |            104.425 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1271.0431296475913\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-01-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.21682273167582\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.34093230446844\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 30970\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.49314410984516144\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005798064754344523\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009414856787770987\n",
+      "        total_loss: 0.13895704535146555\n",
+      "        vf_explained_var: 0.9986486434936523\n",
+      "        vf_loss: 0.1480386642118295\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.116666666666664\n",
+      "    gpu_util_percent0: 0.35833333333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15052181952677304\n",
+      "    mean_env_wait_ms: 0.649438443211961\n",
+      "    mean_inference_ms: 4.164995515225137\n",
+      "    mean_raw_obs_processing_ms: 0.3900008446460127\n",
+      "  time_since_restore: 412.16121435165405\n",
+      "  time_this_iter_s: 20.456762552261353\n",
+      "  time_total_s: 412.16121435165405\n",
+      "  timers:\n",
+      "    learn_throughput: 11057.384\n",
+      "    learn_time_ms: 14632.032\n",
+      "    sample_throughput: 28470.363\n",
+      "    sample_time_ms: 5682.822\n",
+      "    update_time_ms: 44.871\n",
+      "  timestamp: 1604232064\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     20 |          412.161 | 3235840 |  44.3409 |              46.8571 |              15.7347 |            104.217 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1268.6647814593964\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-01-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.02566464051084\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.4626028897468\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1604\n",
+      "  episodes_total: 32574\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.46102594832579297\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005838079610839486\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00808940147787022\n",
+      "        total_loss: 0.11789208464324474\n",
+      "        vf_explained_var: 0.9988470077514648\n",
+      "        vf_loss: 0.12562819197773933\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.463999999999995\n",
+      "    gpu_util_percent0: 0.3728\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15032141681707573\n",
+      "    mean_env_wait_ms: 0.6494592765291238\n",
+      "    mean_inference_ms: 4.155300920389142\n",
+      "    mean_raw_obs_processing_ms: 0.3893410843403339\n",
+      "  time_since_restore: 432.50473642349243\n",
+      "  time_this_iter_s: 20.34352207183838\n",
+      "  time_total_s: 432.50473642349243\n",
+      "  timers:\n",
+      "    learn_throughput: 11057.81\n",
+      "    learn_time_ms: 14631.468\n",
+      "    sample_throughput: 28523.95\n",
+      "    sample_time_ms: 5672.146\n",
+      "    update_time_ms: 46.215\n",
+      "  timestamp: 1604232084\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     21 |          432.505 | 3397632 |  44.4626 |              46.8571 |              15.7347 |            104.026 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1266.4863559173157\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-01-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.8470199450196\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.57447720270771\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1620\n",
+      "  episodes_total: 34194\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.43294235815604526\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005431869920964043\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009014388362023359\n",
+      "        total_loss: 0.08529840596020222\n",
+      "        vf_explained_var: 0.9991478323936462\n",
+      "        vf_loss: 0.09398608033855756\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.592\n",
+      "    gpu_util_percent0: 0.35\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.572\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1501333983360748\n",
+      "    mean_env_wait_ms: 0.6494934869624449\n",
+      "    mean_inference_ms: 4.146224608744544\n",
+      "    mean_raw_obs_processing_ms: 0.3887246826845676\n",
+      "  time_since_restore: 453.3322539329529\n",
+      "  time_this_iter_s: 20.82751750946045\n",
+      "  time_total_s: 453.3322539329529\n",
+      "  timers:\n",
+      "    learn_throughput: 11039.758\n",
+      "    learn_time_ms: 14655.394\n",
+      "    sample_throughput: 28584.579\n",
+      "    sample_time_ms: 5660.115\n",
+      "    update_time_ms: 47.568\n",
+      "  timestamp: 1604232106\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     22 |          453.332 | 3559424 |  44.5745 |              46.8571 |              15.7347 |            103.847 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1264.481222756231\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-02-07\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.68064083956682\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.67719666296796\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1634\n",
+      "  episodes_total: 35828\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4028966749707858\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0056398319235692424\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010392234045866644\n",
+      "        total_loss: 0.08119491549829642\n",
+      "        vf_explained_var: 0.9991843700408936\n",
+      "        vf_loss: 0.0912246151516835\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.024999999999995\n",
+      "    gpu_util_percent0: 0.36624999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14995601669875397\n",
+      "    mean_env_wait_ms: 0.6495352227224097\n",
+      "    mean_inference_ms: 4.137711997351269\n",
+      "    mean_raw_obs_processing_ms: 0.38814230126504\n",
+      "  time_since_restore: 473.85256695747375\n",
+      "  time_this_iter_s: 20.520313024520874\n",
+      "  time_total_s: 473.85256695747375\n",
+      "  timers:\n",
+      "    learn_throughput: 11045.845\n",
+      "    learn_time_ms: 14647.318\n",
+      "    sample_throughput: 28580.616\n",
+      "    sample_time_ms: 5660.9\n",
+      "    update_time_ms: 49.009\n",
+      "  timestamp: 1604232127\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     23 |          473.853 | 3721216 |  44.6772 |              46.8571 |              15.7347 |            103.681 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1262.6683067707777\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-02-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.53063895715354\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.77006117651676\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1608\n",
+      "  episodes_total: 37436\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3745071937640508\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005321652473260959\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007234078652497071\n",
+      "        total_loss: 0.05749547202140093\n",
+      "        vf_explained_var: 0.9994208812713623\n",
+      "        vf_loss: 0.06438463802138965\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.864\n",
+      "    gpu_util_percent0: 0.39199999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14979390065628823\n",
+      "    mean_env_wait_ms: 0.649588420666768\n",
+      "    mean_inference_ms: 4.1299192587977664\n",
+      "    mean_raw_obs_processing_ms: 0.38760946260698614\n",
+      "  time_since_restore: 494.24922704696655\n",
+      "  time_this_iter_s: 20.396660089492798\n",
+      "  time_total_s: 494.24922704696655\n",
+      "  timers:\n",
+      "    learn_throughput: 11054.341\n",
+      "    learn_time_ms: 14636.061\n",
+      "    sample_throughput: 28685.318\n",
+      "    sample_time_ms: 5640.237\n",
+      "    update_time_ms: 42.265\n",
+      "  timestamp: 1604232148\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:02:29,652\tWARNING util.py:136 -- The `process_trial` operation took 0.5228226184844971 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     24 |          494.249 | 3883008 |  44.7701 |              46.8571 |              15.7347 |            103.531 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1261.0109236371095\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-02-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.39151595880936\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.854644767892296\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1602\n",
+      "  episodes_total: 39038\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3481475959221522\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004828551318496466\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0070124387663478656\n",
+      "        total_loss: 0.06740419659763575\n",
+      "        vf_explained_var: 0.9993410706520081\n",
+      "        vf_loss: 0.07410785431663196\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.944000000000003\n",
+      "    gpu_util_percent0: 0.3452\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14964195104865902\n",
+      "    mean_env_wait_ms: 0.6496402901027807\n",
+      "    mean_inference_ms: 4.122656867380491\n",
+      "    mean_raw_obs_processing_ms: 0.3871109943323948\n",
+      "  time_since_restore: 514.7466752529144\n",
+      "  time_this_iter_s: 20.497448205947876\n",
+      "  time_total_s: 514.7466752529144\n",
+      "  timers:\n",
+      "    learn_throughput: 11049.552\n",
+      "    learn_time_ms: 14642.403\n",
+      "    sample_throughput: 28661.043\n",
+      "    sample_time_ms: 5645.014\n",
+      "    update_time_ms: 44.89\n",
+      "  timestamp: 1604232170\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:02:51,023\tWARNING util.py:136 -- The `process_trial` operation took 0.5479519367218018 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     25 |          514.747 | 4044800 |  44.8546 |              46.8571 |              15.7347 |            103.392 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1259.4838947990543\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-03-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.26077543790592\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.933213572774115\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 40648\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.32285959521929425\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005153231516790886\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006437089536727096\n",
+      "        total_loss: 0.04760071821510792\n",
+      "        vf_explained_var: 0.9995192885398865\n",
+      "        vf_loss: 0.05394157860428095\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.183333333333334\n",
+      "    gpu_util_percent0: 0.30583333333333335\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14949842842548025\n",
+      "    mean_env_wait_ms: 0.6496982049535759\n",
+      "    mean_inference_ms: 4.115822249881849\n",
+      "    mean_raw_obs_processing_ms: 0.3866408622949027\n",
+      "  time_since_restore: 535.2055022716522\n",
+      "  time_this_iter_s: 20.458827018737793\n",
+      "  time_total_s: 535.2055022716522\n",
+      "  timers:\n",
+      "    learn_throughput: 11044.133\n",
+      "    learn_time_ms: 14649.588\n",
+      "    sample_throughput: 28693.76\n",
+      "    sample_time_ms: 5638.578\n",
+      "    update_time_ms: 44.672\n",
+      "  timestamp: 1604232191\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:03:12,271\tWARNING util.py:136 -- The `process_trial` operation took 0.5345759391784668 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     26 |          535.206 | 4206592 |  44.9332 |              46.8571 |              15.7347 |            103.261 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1258.0401912516568\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-03-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.137958758986\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.007320067641125\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1640\n",
+      "  episodes_total: 42288\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2982073624928792\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004597992869094014\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007848733845700432\n",
+      "        total_loss: 0.03614849457517266\n",
+      "        vf_explained_var: 0.9996141791343689\n",
+      "        vf_loss: 0.043916432497402035\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.736\n",
+      "    gpu_util_percent0: 0.4024000000000001\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14936013846680316\n",
+      "    mean_env_wait_ms: 0.6497567301190108\n",
+      "    mean_inference_ms: 4.109265721932972\n",
+      "    mean_raw_obs_processing_ms: 0.38618524014647837\n",
+      "  time_since_restore: 555.6780240535736\n",
+      "  time_this_iter_s: 20.472521781921387\n",
+      "  time_total_s: 555.6780240535736\n",
+      "  timers:\n",
+      "    learn_throughput: 11047.092\n",
+      "    learn_time_ms: 14645.664\n",
+      "    sample_throughput: 28676.643\n",
+      "    sample_time_ms: 5641.943\n",
+      "    update_time_ms: 36.998\n",
+      "  timestamp: 1604232212\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:03:33,510\tWARNING util.py:136 -- The `process_trial` operation took 0.567908525466919 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     27 |          555.678 | 4368384 |  45.0073 |              46.8571 |              15.7347 |            103.138 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1256.7130644903914\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-03-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.02484797412713\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.07519232440738\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 43907\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.27154965202013653\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004386523951931546\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006109707096281151\n",
+      "        total_loss: 0.029498847822348278\n",
+      "        vf_explained_var: 0.9996840357780457\n",
+      "        vf_loss: 0.03563466699173053\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.215999999999998\n",
+      "    gpu_util_percent0: 0.35719999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14923164336873793\n",
+      "    mean_env_wait_ms: 0.6498215067723312\n",
+      "    mean_inference_ms: 4.103192802934885\n",
+      "    mean_raw_obs_processing_ms: 0.3857616555198185\n",
+      "  time_since_restore: 576.108469247818\n",
+      "  time_this_iter_s: 20.430445194244385\n",
+      "  time_total_s: 576.108469247818\n",
+      "  timers:\n",
+      "    learn_throughput: 11053.539\n",
+      "    learn_time_ms: 14637.122\n",
+      "    sample_throughput: 28704.812\n",
+      "    sample_time_ms: 5636.407\n",
+      "    update_time_ms: 34.761\n",
+      "  timestamp: 1604232233\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:03:54,833\tWARNING util.py:136 -- The `process_trial` operation took 0.5623390674591064 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     28 |          576.108 | 4530176 |  45.0752 |              46.8571 |              15.7347 |            103.025 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1255.498240520806\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-04-15\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.92078315900501\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.13765263071036\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 45508\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.012500000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.25443976496656734\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004423999693244696\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005417319412420814\n",
+      "        total_loss: 0.024296301572273176\n",
+      "        vf_explained_var: 0.9997418522834778\n",
+      "        vf_loss: 0.02978554057578246\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.112\n",
+      "    gpu_util_percent0: 0.33520000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1491126560484596\n",
+      "    mean_env_wait_ms: 0.6498944683718904\n",
+      "    mean_inference_ms: 4.097513752031446\n",
+      "    mean_raw_obs_processing_ms: 0.38536978766235913\n",
+      "  time_since_restore: 596.6098058223724\n",
+      "  time_this_iter_s: 20.501336574554443\n",
+      "  time_total_s: 596.6098058223724\n",
+      "  timers:\n",
+      "    learn_throughput: 11066.443\n",
+      "    learn_time_ms: 14620.054\n",
+      "    sample_throughput: 28671.129\n",
+      "    sample_time_ms: 5643.029\n",
+      "    update_time_ms: 27.975\n",
+      "  timestamp: 1604232255\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:04:16,277\tWARNING util.py:136 -- The `process_trial` operation took 0.5899343490600586 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     29 |           596.61 | 4691968 |  45.1377 |              46.8571 |              15.7347 |            102.921 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1254.3588893845729\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-04-36\n",
+      "  done: true\n",
+      "  episode_len_mean: 102.82308492348184\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.196090857543105\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 47113\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.006250000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.23119975750645003\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004294859090199073\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006582304151379503\n",
+      "        total_loss: 0.016346099126773577\n",
+      "        vf_explained_var: 0.9998031258583069\n",
+      "        vf_loss: 0.02301716012880206\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.433333333333334\n",
+      "    gpu_util_percent0: 0.3558333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1489996674476156\n",
+      "    mean_env_wait_ms: 0.6499679628512286\n",
+      "    mean_inference_ms: 4.0921381946019215\n",
+      "    mean_raw_obs_processing_ms: 0.38499719572571234\n",
+      "  time_since_restore: 616.9446895122528\n",
+      "  time_this_iter_s: 20.33488368988037\n",
+      "  time_total_s: 616.9446895122528\n",
+      "  timers:\n",
+      "    learn_throughput: 11076.785\n",
+      "    learn_time_ms: 14606.404\n",
+      "    sample_throughput: 28687.763\n",
+      "    sample_time_ms: 5639.757\n",
+      "    update_time_ms: 27.238\n",
+      "  timestamp: 1604232276\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:04:37,528\tWARNING util.py:136 -- The `process_trial` operation took 0.6967248916625977 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | TERMINATED |       |     30 |          616.945 | 4853760 |  45.1961 |              46.8571 |              15.7347 |            102.823 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | TERMINATED |       |     30 |          616.945 | 4853760 |  45.1961 |              46.8571 |              15.7347 |            102.823 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 20006\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_115353-kqo0l7if/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_115353-kqo0l7if/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1222\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 645\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604232278\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1737\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1254.35889\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 46.85714\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 15.73469\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 45.19609\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 47113\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mmisty-sweep-1\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/kqo0l7if\u001b[0m\n",
+      "2020-11-01 12:04:48,722 - wandb.wandb_agent - INFO - Cleaning up finished run: kqo0l7if\n",
+      "2020-11-01 12:04:49,030 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:04:49,030 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la12.txt\n",
+      "2020-11-01 12:04:49,033 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la12.txt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:04:54,049 - wandb.wandb_agent - INFO - Running runs: ['tkx2xsoj']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdecent-sweep-2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/tkx2xsoj\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_120450-tkx2xsoj\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\n",
+      "2020-11-01 12:04:54,756\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=52265)\u001b[0m 2020-11-01 12:04:57,569\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=52167)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52167)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52239)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52239)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52176)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52176)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52249)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52249)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52260)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52260)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52258)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52258)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52169)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52169)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52253)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52253)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52221)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52221)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52215)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52215)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52275)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52275)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52158)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52158)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52224)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52224)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52256)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52256)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52219)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52219)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52231)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52231)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52262)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52262)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52209)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52209)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52236)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52236)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52151)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52151)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52269)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52269)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52220)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52220)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52161)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52161)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52156)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52156)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52229)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52229)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52153)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52153)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52279)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52279)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52267)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52267)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52243)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52243)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52172)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52172)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52235)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52235)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52154)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52154)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52233)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52233)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52164)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52164)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52250)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52250)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52202)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52202)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52166)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52166)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52242)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52242)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52150)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52150)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52225)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52225)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52148)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52148)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52162)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52162)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52163)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52163)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52149)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52149)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52177)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52177)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52261)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52261)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52155)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52155)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52157)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52157)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52270)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52270)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52234)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52234)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52173)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52173)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52181)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52181)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52230)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52230)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52168)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52168)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52218)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52218)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52223)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52223)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52171)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52171)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52180)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52180)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52228)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52228)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52251)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52251)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52226)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52226)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52216)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52216)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52184)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52184)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52237)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52237)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52227)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52227)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52206)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52206)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52259)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52259)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52152)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52152)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52273)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52273)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52212)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52212)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52204)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52204)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52247)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52247)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52165)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52165)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52222)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52222)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52257)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52257)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52147)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52147)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52277)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52277)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52255)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52255)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52160)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52160)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1270.6712550607288\n",
+      "    time_step_min: 1054\n",
+      "  date: 2020-11-01_12-05-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.74350904799371\n",
+      "  episode_reward_max: 41.65306122448979\n",
+      "  episode_reward_mean: 30.6028275983879\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1271\n",
+      "  episodes_total: 1271\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1384523808956146\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006007326611628135\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006815222654646884\n",
+      "        total_loss: 36.897240002950035\n",
+      "        vf_explained_var: 0.7482123374938965\n",
+      "        vf_loss: 36.903422355651855\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 32.62222222222222\n",
+      "    gpu_util_percent0: 0.40222222222222226\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4333333333333336\n",
+      "    vram_util_percent0: 0.08172381958869332\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16969461340934525\n",
+      "    mean_env_wait_ms: 0.6709388448442125\n",
+      "    mean_inference_ms: 5.213710332296094\n",
+      "    mean_raw_obs_processing_ms: 0.4500044725167772\n",
+      "  time_since_restore: 22.275667190551758\n",
+      "  time_this_iter_s: 22.275667190551758\n",
+      "  time_total_s: 22.275667190551758\n",
+      "  timers:\n",
+      "    learn_throughput: 11194.703\n",
+      "    learn_time_ms: 14452.55\n",
+      "    sample_throughput: 20900.055\n",
+      "    sample_time_ms: 7741.224\n",
+      "    update_time_ms: 42.347\n",
+      "  timestamp: 1604232325\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      1 |          22.2757 | 161792 |  30.6028 |              41.6531 |              10.2755 |            116.744 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1252.1281568036186\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-05-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.04722945332837\n",
+      "  episode_reward_max: 42.41836734693876\n",
+      "  episode_reward_mean: 31.48901419995294\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1418\n",
+      "  episodes_total: 2689\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1159119109312694\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010711442679166794\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012819082303982062\n",
+      "        total_loss: 9.95718256632487\n",
+      "        vf_explained_var: 0.8801858425140381\n",
+      "        vf_loss: 9.968417485555014\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 29.4\n",
+      "    gpu_util_percent0: 0.3830769230769231\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5076923076923077\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1663996838490878\n",
+      "    mean_env_wait_ms: 0.6661199624654368\n",
+      "    mean_inference_ms: 5.065247663215141\n",
+      "    mean_raw_obs_processing_ms: 0.443431096131331\n",
+      "  time_since_restore: 43.45249390602112\n",
+      "  time_this_iter_s: 21.17682671546936\n",
+      "  time_total_s: 43.45249390602112\n",
+      "  timers:\n",
+      "    learn_throughput: 11200.574\n",
+      "    learn_time_ms: 14444.974\n",
+      "    sample_throughput: 22507.211\n",
+      "    sample_time_ms: 7188.452\n",
+      "    update_time_ms: 40.119\n",
+      "  timestamp: 1604232346\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      2 |          43.4525 | 323584 |   31.489 |              42.4184 |              10.2755 |            116.047 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1229.5523227383862\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-06-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.94789142026175\n",
+      "  episode_reward_max: 42.41836734693877\n",
+      "  episode_reward_mean: 32.67046455033783\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1437\n",
+      "  episodes_total: 4126\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0916709005832672\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.011045165204753479\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012844632374860035\n",
+      "        total_loss: 6.921001553535461\n",
+      "        vf_explained_var: 0.9159042239189148\n",
+      "        vf_loss: 6.9321829080581665\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.06\n",
+      "    gpu_util_percent0: 0.4312\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16376589972908362\n",
+      "    mean_env_wait_ms: 0.6617033666285996\n",
+      "    mean_inference_ms: 4.920294910569432\n",
+      "    mean_raw_obs_processing_ms: 0.43664206722952675\n",
+      "  time_since_restore: 63.84919023513794\n",
+      "  time_this_iter_s: 20.39669632911682\n",
+      "  time_total_s: 63.84919023513794\n",
+      "  timers:\n",
+      "    learn_throughput: 11232.084\n",
+      "    learn_time_ms: 14404.451\n",
+      "    sample_throughput: 23846.064\n",
+      "    sample_time_ms: 6784.851\n",
+      "    update_time_ms: 37.748\n",
+      "  timestamp: 1604232366\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      3 |          63.8492 | 485376 |  32.6705 |              42.4184 |              10.2755 |            114.948 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1208.264137437366\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-06-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.67087482219061\n",
+      "  episode_reward_max: 42.41836734693879\n",
+      "  episode_reward_mean: 33.766906406944\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1498\n",
+      "  episodes_total: 5624\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.064699391523997\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010414493580659231\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015563213809703788\n",
+      "        total_loss: 5.088392059008281\n",
+      "        vf_explained_var: 0.9388461709022522\n",
+      "        vf_loss: 5.102404753367106\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.656000000000002\n",
+      "    gpu_util_percent0: 0.4268\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16163926361569136\n",
+      "    mean_env_wait_ms: 0.6582592695889212\n",
+      "    mean_inference_ms: 4.803322913432019\n",
+      "    mean_raw_obs_processing_ms: 0.43060689585891204\n",
+      "  time_since_restore: 84.06805443763733\n",
+      "  time_this_iter_s: 20.21886420249939\n",
+      "  time_total_s: 84.06805443763733\n",
+      "  timers:\n",
+      "    learn_throughput: 11266.122\n",
+      "    learn_time_ms: 14360.931\n",
+      "    sample_throughput: 24659.344\n",
+      "    sample_time_ms: 6561.083\n",
+      "    update_time_ms: 34.947\n",
+      "  timestamp: 1604232387\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      4 |          84.0681 | 647168 |  33.7669 |              42.4184 |              10.2755 |            113.671 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1189.914229193161\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-06-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.46028398706594\n",
+      "  episode_reward_max: 42.4183673469388\n",
+      "  episode_reward_mean: 34.71768564026201\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1489\n",
+      "  episodes_total: 7113\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0440024832884471\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009285129917164644\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013422702313012755\n",
+      "        total_loss: 3.5668797492980957\n",
+      "        vf_explained_var: 0.956657886505127\n",
+      "        vf_loss: 3.5789673924446106\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.128\n",
+      "    gpu_util_percent0: 0.3836\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15996949149852113\n",
+      "    mean_env_wait_ms: 0.6557683164407656\n",
+      "    mean_inference_ms: 4.714004318455946\n",
+      "    mean_raw_obs_processing_ms: 0.42569876525023526\n",
+      "  time_since_restore: 104.25618076324463\n",
+      "  time_this_iter_s: 20.1881263256073\n",
+      "  time_total_s: 104.25618076324463\n",
+      "  timers:\n",
+      "    learn_throughput: 11286.122\n",
+      "    learn_time_ms: 14335.482\n",
+      "    sample_throughput: 25221.502\n",
+      "    sample_time_ms: 6414.844\n",
+      "    update_time_ms: 36.706\n",
+      "  timestamp: 1604232407\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      5 |          104.256 | 808960 |  34.7177 |              42.4184 |              10.2755 |             112.46 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1173.5402272200324\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-07-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.30085430616485\n",
+      "  episode_reward_max: 42.4183673469388\n",
+      "  episode_reward_mean: 35.54994369024451\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 8662\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.00481882194678\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00909763171027104\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013866825815057382\n",
+      "        total_loss: 2.7730772693951926\n",
+      "        vf_explained_var: 0.9670748114585876\n",
+      "        vf_loss: 2.785626987616221\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.65416666666667\n",
+      "    gpu_util_percent0: 0.4445833333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5083333333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1585845452097359\n",
+      "    mean_env_wait_ms: 0.6539711743603752\n",
+      "    mean_inference_ms: 4.639796008274598\n",
+      "    mean_raw_obs_processing_ms: 0.4215553460221708\n",
+      "  time_since_restore: 124.31111264228821\n",
+      "  time_this_iter_s: 20.05493187904358\n",
+      "  time_total_s: 124.31111264228821\n",
+      "  timers:\n",
+      "    learn_throughput: 11300.348\n",
+      "    learn_time_ms: 14317.435\n",
+      "    sample_throughput: 25694.821\n",
+      "    sample_time_ms: 6296.677\n",
+      "    update_time_ms: 36.949\n",
+      "  timestamp: 1604232428\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      6 |          124.311 | 970752 |  35.5499 |              42.4184 |              10.2755 |            111.301 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1160.6071287908626\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-07-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.30445447409733\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 36.22964990548809\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1530\n",
+      "  episodes_total: 10192\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9723203877607981\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008056929800659418\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013902826050374037\n",
+      "        total_loss: 2.177985966205597\n",
+      "        vf_explained_var: 0.9740824103355408\n",
+      "        vf_loss: 2.1907635927200317\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.691999999999997\n",
+      "    gpu_util_percent0: 0.4035999999999999\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15747431107692764\n",
+      "    mean_env_wait_ms: 0.652680726552872\n",
+      "    mean_inference_ms: 4.58049716107533\n",
+      "    mean_raw_obs_processing_ms: 0.4181133612914104\n",
+      "  time_since_restore: 144.8035752773285\n",
+      "  time_this_iter_s: 20.492462635040283\n",
+      "  time_total_s: 144.8035752773285\n",
+      "  timers:\n",
+      "    learn_throughput: 11282.551\n",
+      "    learn_time_ms: 14340.019\n",
+      "    sample_throughput: 25937.899\n",
+      "    sample_time_ms: 6237.668\n",
+      "    update_time_ms: 37.177\n",
+      "  timestamp: 1604232448\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      7 |          144.804 | 1132544 |  36.2296 |              42.4184 |              10.2755 |            110.304 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1148.888252883383\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-07-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.45600885784856\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 36.816230060715206\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 11741\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9466134955485662\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007931554379562536\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013606403217030069\n",
+      "        total_loss: 1.6076118151346843\n",
+      "        vf_explained_var: 0.9807720184326172\n",
+      "        vf_loss: 1.6201052069664001\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.764000000000006\n",
+      "    gpu_util_percent0: 0.38\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15654498685345614\n",
+      "    mean_env_wait_ms: 0.6516967139634099\n",
+      "    mean_inference_ms: 4.530832158888852\n",
+      "    mean_raw_obs_processing_ms: 0.4150856418377815\n",
+      "  time_since_restore: 165.37314867973328\n",
+      "  time_this_iter_s: 20.569573402404785\n",
+      "  time_total_s: 165.37314867973328\n",
+      "  timers:\n",
+      "    learn_throughput: 11279.608\n",
+      "    learn_time_ms: 14343.761\n",
+      "    sample_throughput: 26039.205\n",
+      "    sample_time_ms: 6213.4\n",
+      "    update_time_ms: 37.773\n",
+      "  timestamp: 1604232469\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      8 |          165.373 | 1294336 |  36.8162 |              42.4184 |              10.2755 |            109.456 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1139.0165774998115\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-08-10\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.7133839332682\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 37.319474329147006\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1566\n",
+      "  episodes_total: 13307\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9164896359046301\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007841601696175834\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011578070591591919\n",
+      "        total_loss: 1.2525162895520527\n",
+      "        vf_explained_var: 0.985228955745697\n",
+      "        vf_loss: 1.262984275817871\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.692000000000004\n",
+      "    gpu_util_percent0: 0.4428\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15575594110735325\n",
+      "    mean_env_wait_ms: 0.6509075806283173\n",
+      "    mean_inference_ms: 4.488645311807507\n",
+      "    mean_raw_obs_processing_ms: 0.41243497179424105\n",
+      "  time_since_restore: 185.73600935935974\n",
+      "  time_this_iter_s: 20.362860679626465\n",
+      "  time_total_s: 185.73600935935974\n",
+      "  timers:\n",
+      "    learn_throughput: 11283.252\n",
+      "    learn_time_ms: 14339.128\n",
+      "    sample_throughput: 26176.544\n",
+      "    sample_time_ms: 6180.801\n",
+      "    update_time_ms: 37.693\n",
+      "  timestamp: 1604232490\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      9 |          185.736 | 1456128 |  37.3195 |              42.4184 |              10.2755 |            108.713 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1130.5417816982022\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-08-30\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.05662658695506\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 37.75363452292987\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1580\n",
+      "  episodes_total: 14887\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.879222497344017\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007466738965983192\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010042240721910881\n",
+      "        total_loss: 1.0435242255528767\n",
+      "        vf_explained_var: 0.9878211617469788\n",
+      "        vf_loss: 1.0525127152601879\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.332000000000004\n",
+      "    gpu_util_percent0: 0.3956\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15508348116310283\n",
+      "    mean_env_wait_ms: 0.6503758051109494\n",
+      "    mean_inference_ms: 4.452355943495541\n",
+      "    mean_raw_obs_processing_ms: 0.41015056238268827\n",
+      "  time_since_restore: 206.0984218120575\n",
+      "  time_this_iter_s: 20.362412452697754\n",
+      "  time_total_s: 206.0984218120575\n",
+      "  timers:\n",
+      "    learn_throughput: 11288.763\n",
+      "    learn_time_ms: 14332.129\n",
+      "    sample_throughput: 26298.441\n",
+      "    sample_time_ms: 6152.152\n",
+      "    update_time_ms: 42.189\n",
+      "  timestamp: 1604232510\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     10 |          206.098 | 1617920 |  37.7536 |              42.4184 |              10.2755 |            108.057 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1123.1655117918795\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-08-51\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.44680980106745\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 38.12998569151096\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 16488\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.852480560541153\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006807499914430082\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010430590346610794\n",
+      "        total_loss: 0.7860654095808665\n",
+      "        vf_explained_var: 0.9908618927001953\n",
+      "        vf_loss: 0.7955607374509176\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.468000000000004\n",
+      "    gpu_util_percent0: 0.3796\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15448994642998015\n",
+      "    mean_env_wait_ms: 0.6499845600676837\n",
+      "    mean_inference_ms: 4.420542043950926\n",
+      "    mean_raw_obs_processing_ms: 0.408110786931221\n",
+      "  time_since_restore: 226.6547131538391\n",
+      "  time_this_iter_s: 20.556291341781616\n",
+      "  time_total_s: 226.6547131538391\n",
+      "  timers:\n",
+      "    learn_throughput: 11290.905\n",
+      "    learn_time_ms: 14329.409\n",
+      "    sample_throughput: 27104.621\n",
+      "    sample_time_ms: 5969.167\n",
+      "    update_time_ms: 41.488\n",
+      "  timestamp: 1604232531\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     11 |          226.655 | 1779712 |    38.13 |              42.4184 |              10.2755 |            107.447 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1116.8649711879432\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-09-12\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.92020570670206\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 38.44685289510628\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1596\n",
+      "  episodes_total: 18084\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8233269800742468\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00662518401319782\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011712064248664925\n",
+      "        total_loss: 0.6785962084929148\n",
+      "        vf_explained_var: 0.9921655654907227\n",
+      "        vf_loss: 0.6893948912620544\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.354166666666668\n",
+      "    gpu_util_percent0: 0.39875\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15396759428958923\n",
+      "    mean_env_wait_ms: 0.6497269679106826\n",
+      "    mean_inference_ms: 4.392758580495196\n",
+      "    mean_raw_obs_processing_ms: 0.4063257369659057\n",
+      "  time_since_restore: 247.07435011863708\n",
+      "  time_this_iter_s: 20.419636964797974\n",
+      "  time_total_s: 247.07435011863708\n",
+      "  timers:\n",
+      "    learn_throughput: 11289.741\n",
+      "    learn_time_ms: 14330.887\n",
+      "    sample_throughput: 27482.894\n",
+      "    sample_time_ms: 5887.007\n",
+      "    update_time_ms: 40.889\n",
+      "  timestamp: 1604232552\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     12 |          247.074 | 1941504 |  38.4469 |              42.4184 |              10.2755 |             106.92 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1111.391848572737\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-09-33\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.44390268677942\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 38.727613885718846\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 19689\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7883199751377106\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006895307102240622\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01035230930817003\n",
+      "        total_loss: 0.501528188586235\n",
+      "        vf_explained_var: 0.9942240118980408\n",
+      "        vf_loss: 0.5108955974380175\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.084\n",
+      "    gpu_util_percent0: 0.40480000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15350402726485754\n",
+      "    mean_env_wait_ms: 0.6495522826808918\n",
+      "    mean_inference_ms: 4.367981018992163\n",
+      "    mean_raw_obs_processing_ms: 0.40472308429202836\n",
+      "  time_since_restore: 267.40077471733093\n",
+      "  time_this_iter_s: 20.326424598693848\n",
+      "  time_total_s: 267.40077471733093\n",
+      "  timers:\n",
+      "    learn_throughput: 11287.514\n",
+      "    learn_time_ms: 14333.714\n",
+      "    sample_throughput: 27563.917\n",
+      "    sample_time_ms: 5869.703\n",
+      "    update_time_ms: 41.691\n",
+      "  timestamp: 1604232573\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     13 |          267.401 | 2103296 |  38.7276 |              42.4184 |              10.2755 |            106.444 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1106.5129543424084\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-09-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.01774397972116\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 38.97570046184929\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1614\n",
+      "  episodes_total: 21303\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7583291182915369\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006845557557729383\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010322557670103075\n",
+      "        total_loss: 0.39304836342732113\n",
+      "        vf_explained_var: 0.9954751133918762\n",
+      "        vf_loss: 0.40238098055124283\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.124000000000002\n",
+      "    gpu_util_percent0: 0.4536\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15309019602292354\n",
+      "    mean_env_wait_ms: 0.6494461564466915\n",
+      "    mean_inference_ms: 4.34582608361679\n",
+      "    mean_raw_obs_processing_ms: 0.40327786899763196\n",
+      "  time_since_restore: 287.4316370487213\n",
+      "  time_this_iter_s: 20.03086233139038\n",
+      "  time_total_s: 287.4316370487213\n",
+      "  timers:\n",
+      "    learn_throughput: 11292.259\n",
+      "    learn_time_ms: 14327.692\n",
+      "    sample_throughput: 27660.58\n",
+      "    sample_time_ms: 5849.19\n",
+      "    update_time_ms: 42.894\n",
+      "  timestamp: 1604232593\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     14 |          287.432 | 2265088 |  38.9757 |              42.4184 |              10.2755 |            106.018 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1102.2523617914626\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-10-14\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.64558951965066\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 39.19350548079495\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 22900\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7275536010662714\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006344522737587492\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01266244207120811\n",
+      "        total_loss: 0.31657364467779797\n",
+      "        vf_explained_var: 0.9963433742523193\n",
+      "        vf_loss: 0.32833095143238705\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.668000000000003\n",
+      "    gpu_util_percent0: 0.4212\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15272256161153888\n",
+      "    mean_env_wait_ms: 0.6493956761565493\n",
+      "    mean_inference_ms: 4.3261627778248455\n",
+      "    mean_raw_obs_processing_ms: 0.40199333508455115\n",
+      "  time_since_restore: 308.00055265426636\n",
+      "  time_this_iter_s: 20.568915605545044\n",
+      "  time_total_s: 308.00055265426636\n",
+      "  timers:\n",
+      "    learn_throughput: 11279.674\n",
+      "    learn_time_ms: 14343.677\n",
+      "    sample_throughput: 27657.34\n",
+      "    sample_time_ms: 5849.876\n",
+      "    update_time_ms: 42.541\n",
+      "  timestamp: 1604232614\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     15 |          308.001 | 2426880 |  39.1935 |              42.4184 |              10.2755 |            105.646 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1098.492356115108\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-10-35\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.31371428571428\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 39.386209912536444\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1600\n",
+      "  episodes_total: 24500\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6992116371790568\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00605107715819031\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010152409401295396\n",
+      "        total_loss: 0.2749015986919403\n",
+      "        vf_explained_var: 0.9968383312225342\n",
+      "        vf_loss: 0.28419339408477146\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.163999999999998\n",
+      "    gpu_util_percent0: 0.4179999999999999\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1523902557025731\n",
+      "    mean_env_wait_ms: 0.6493845108910767\n",
+      "    mean_inference_ms: 4.308344642074162\n",
+      "    mean_raw_obs_processing_ms: 0.4008263717279235\n",
+      "  time_since_restore: 328.0859045982361\n",
+      "  time_this_iter_s: 20.085351943969727\n",
+      "  time_total_s: 328.0859045982361\n",
+      "  timers:\n",
+      "    learn_throughput: 11277.087\n",
+      "    learn_time_ms: 14346.967\n",
+      "    sample_throughput: 27688.425\n",
+      "    sample_time_ms: 5843.308\n",
+      "    update_time_ms: 42.686\n",
+      "  timestamp: 1604232635\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     16 |          328.086 | 2588672 |  39.3862 |              42.4184 |              10.2755 |            105.314 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1095.0764746490756\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-10-55\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.01325162772883\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 39.561036900397845\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 26110\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6637826611598333\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006695269180151324\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012259619931379953\n",
+      "        total_loss: 0.2071586512029171\n",
+      "        vf_explained_var: 0.9976064562797546\n",
+      "        vf_loss: 0.21841111406683922\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.967999999999996\n",
+      "    gpu_util_percent0: 0.3992\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15208441102089912\n",
+      "    mean_env_wait_ms: 0.649415271515101\n",
+      "    mean_inference_ms: 4.292010650770931\n",
+      "    mean_raw_obs_processing_ms: 0.3997617754479261\n",
+      "  time_since_restore: 348.3640911579132\n",
+      "  time_this_iter_s: 20.278186559677124\n",
+      "  time_total_s: 348.3640911579132\n",
+      "  timers:\n",
+      "    learn_throughput: 11280.385\n",
+      "    learn_time_ms: 14342.773\n",
+      "    sample_throughput: 27802.66\n",
+      "    sample_time_ms: 5819.299\n",
+      "    update_time_ms: 42.587\n",
+      "  timestamp: 1604232655\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     17 |          348.364 | 2750464 |   39.561 |              42.4184 |              10.2755 |            105.013 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1091.992488262911\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-11-16\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.74269638606363\n",
+      "  episode_reward_max: 42.41836734693882\n",
+      "  episode_reward_mean: 39.71753728541839\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1616\n",
+      "  episodes_total: 27726\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6395211120446523\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005430514691397548\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008808797846237818\n",
+      "        total_loss: 0.18516152476270994\n",
+      "        vf_explained_var: 0.9978885650634766\n",
+      "        vf_loss: 0.19320398072401682\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.428\n",
+      "    gpu_util_percent0: 0.4108\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15180253257231568\n",
+      "    mean_env_wait_ms: 0.6494706645035929\n",
+      "    mean_inference_ms: 4.277042903419588\n",
+      "    mean_raw_obs_processing_ms: 0.3987841767593947\n",
+      "  time_since_restore: 368.70942068099976\n",
+      "  time_this_iter_s: 20.345329523086548\n",
+      "  time_total_s: 368.70942068099976\n",
+      "  timers:\n",
+      "    learn_throughput: 11277.054\n",
+      "    learn_time_ms: 14347.01\n",
+      "    sample_throughput: 27960.312\n",
+      "    sample_time_ms: 5786.488\n",
+      "    update_time_ms: 42.249\n",
+      "  timestamp: 1604232676\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     18 |          368.709 | 2912256 |  39.7175 |              42.4184 |              10.2755 |            104.743 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1089.2314356857796\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-11-37\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.499846693694\n",
+      "  episode_reward_max: 42.41836734693882\n",
+      "  episode_reward_mean: 39.85814856041556\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1627\n",
+      "  episodes_total: 29353\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6059375007947286\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006107187946327031\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009194978279992938\n",
+      "        total_loss: 0.15118268628915152\n",
+      "        vf_explained_var: 0.9982755184173584\n",
+      "        vf_loss: 0.15945919354756674\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.02\n",
+      "    gpu_util_percent0: 0.35119999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15154050336998873\n",
+      "    mean_env_wait_ms: 0.6495464583308167\n",
+      "    mean_inference_ms: 4.263205291197448\n",
+      "    mean_raw_obs_processing_ms: 0.39787967312168704\n",
+      "  time_since_restore: 389.13511419296265\n",
+      "  time_this_iter_s: 20.42569351196289\n",
+      "  time_total_s: 389.13511419296265\n",
+      "  timers:\n",
+      "    learn_throughput: 11265.913\n",
+      "    learn_time_ms: 14361.197\n",
+      "    sample_throughput: 28034.364\n",
+      "    sample_time_ms: 5771.203\n",
+      "    update_time_ms: 43.0\n",
+      "  timestamp: 1604232697\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     19 |          389.135 | 3074048 |  39.8581 |              42.4184 |              10.2755 |              104.5 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1086.7530964007374\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-11-58\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.28143673891276\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 39.98449496404396\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1606\n",
+      "  episodes_total: 30959\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5802051573991776\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006146465195342898\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010908293537795544\n",
+      "        total_loss: 0.12315286882221699\n",
+      "        vf_explained_var: 0.9985630512237549\n",
+      "        vf_loss: 0.13312197600801787\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.708000000000002\n",
+      "    gpu_util_percent0: 0.35119999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15130250937481887\n",
+      "    mean_env_wait_ms: 0.649629966463628\n",
+      "    mean_inference_ms: 4.25060756388231\n",
+      "    mean_raw_obs_processing_ms: 0.39705657157981417\n",
+      "  time_since_restore: 409.49588918685913\n",
+      "  time_this_iter_s: 20.360774993896484\n",
+      "  time_total_s: 409.49588918685913\n",
+      "  timers:\n",
+      "    learn_throughput: 11247.919\n",
+      "    learn_time_ms: 14384.172\n",
+      "    sample_throughput: 28152.747\n",
+      "    sample_time_ms: 5746.935\n",
+      "    update_time_ms: 38.327\n",
+      "  timestamp: 1604232718\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     20 |          409.496 | 3235840 |  39.9845 |              42.4184 |              10.2755 |            104.281 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1084.4941429669484\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-12-19\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.08316697890113\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.09885276551578\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1602\n",
+      "  episodes_total: 32561\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5567689687013626\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0057975016146277385\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010689061540081942\n",
+      "        total_loss: 0.10724692543347676\n",
+      "        vf_explained_var: 0.9987431168556213\n",
+      "        vf_loss: 0.11705487407743931\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.752000000000002\n",
+      "    gpu_util_percent0: 0.2972\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15108181784508506\n",
+      "    mean_env_wait_ms: 0.6497188533760437\n",
+      "    mean_inference_ms: 4.2389675381303915\n",
+      "    mean_raw_obs_processing_ms: 0.3962976370894028\n",
+      "  time_since_restore: 429.649621963501\n",
+      "  time_this_iter_s: 20.153732776641846\n",
+      "  time_total_s: 429.649621963501\n",
+      "  timers:\n",
+      "    learn_throughput: 11259.927\n",
+      "    learn_time_ms: 14368.833\n",
+      "    sample_throughput: 28275.485\n",
+      "    sample_time_ms: 5721.988\n",
+      "    update_time_ms: 38.431\n",
+      "  timestamp: 1604232739\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     21 |           429.65 | 3397632 |  40.0989 |              42.4184 |              10.2755 |            104.083 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1082.431136496778\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-12-40\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.90098314606742\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.20364481818009\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1615\n",
+      "  episodes_total: 34176\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5254394511381785\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005307760516492029\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007776977017783793\n",
+      "        total_loss: 0.0964116957038641\n",
+      "        vf_explained_var: 0.9988983273506165\n",
+      "        vf_loss: 0.10338984616100788\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.846153846153847\n",
+      "    gpu_util_percent0: 0.39384615384615385\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15087377501627616\n",
+      "    mean_env_wait_ms: 0.6498094517683312\n",
+      "    mean_inference_ms: 4.22804968427196\n",
+      "    mean_raw_obs_processing_ms: 0.3955819072644963\n",
+      "  time_since_restore: 449.9894530773163\n",
+      "  time_this_iter_s: 20.339831113815308\n",
+      "  time_total_s: 449.9894530773163\n",
+      "  timers:\n",
+      "    learn_throughput: 11271.985\n",
+      "    learn_time_ms: 14353.461\n",
+      "    sample_throughput: 28273.456\n",
+      "    sample_time_ms: 5722.399\n",
+      "    update_time_ms: 39.023\n",
+      "  timestamp: 1604232760\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     22 |          449.989 | 3559424 |  40.2036 |              42.4184 |              10.2755 |            103.901 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1080.5109731890743\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-13-01\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.7305683563748\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.301032520255696\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1629\n",
+      "  episodes_total: 35805\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5021042550603548\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0054971032465497656\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00953363478280759\n",
+      "        total_loss: 0.06499722289542358\n",
+      "        vf_explained_var: 0.9992148876190186\n",
+      "        vf_loss: 0.07368248887360096\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.044\n",
+      "    gpu_util_percent0: 0.4084\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15067991150821478\n",
+      "    mean_env_wait_ms: 0.649905891759336\n",
+      "    mean_inference_ms: 4.2178278275443795\n",
+      "    mean_raw_obs_processing_ms: 0.39491348951426497\n",
+      "  time_since_restore: 470.5632412433624\n",
+      "  time_this_iter_s: 20.573788166046143\n",
+      "  time_total_s: 470.5632412433624\n",
+      "  timers:\n",
+      "    learn_throughput: 11273.798\n",
+      "    learn_time_ms: 14351.154\n",
+      "    sample_throughput: 28167.439\n",
+      "    sample_time_ms: 5743.937\n",
+      "    update_time_ms: 38.419\n",
+      "  timestamp: 1604232781\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     23 |          470.563 | 3721216 |   40.301 |              42.4184 |              10.2755 |            103.731 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1078.7812073715463\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-13-22\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.57635678593378\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.38915989130335\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1618\n",
+      "  episodes_total: 37423\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.47640378028154373\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005069411902998884\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007647299599436034\n",
+      "        total_loss: 0.07074602444966634\n",
+      "        vf_explained_var: 0.9991908073425293\n",
+      "        vf_loss: 0.07761764402190845\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.191999999999997\n",
+      "    gpu_util_percent0: 0.3423999999999999\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1505016968490393\n",
+      "    mean_env_wait_ms: 0.6500103427408599\n",
+      "    mean_inference_ms: 4.208361564693216\n",
+      "    mean_raw_obs_processing_ms: 0.39429321916174187\n",
+      "  time_since_restore: 490.8706216812134\n",
+      "  time_this_iter_s: 20.307380437850952\n",
+      "  time_total_s: 490.8706216812134\n",
+      "  timers:\n",
+      "    learn_throughput: 11268.008\n",
+      "    learn_time_ms: 14358.528\n",
+      "    sample_throughput: 28090.142\n",
+      "    sample_time_ms: 5759.743\n",
+      "    update_time_ms: 37.55\n",
+      "  timestamp: 1604232802\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:13:23,494\tWARNING util.py:136 -- The `process_trial` operation took 0.5319008827209473 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     24 |          490.871 | 3883008 |  40.3892 |              42.4184 |              10.2755 |            103.576 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1077.1880225698897\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-13-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.43532516783682\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.4702521709755\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 39026\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4569598063826561\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005172949323120217\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008714882539303895\n",
+      "        total_loss: 0.04905764168749253\n",
+      "        vf_explained_var: 0.999389111995697\n",
+      "        vf_loss: 0.056966414054234825\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.62\n",
+      "    gpu_util_percent0: 0.41119999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15033752613342766\n",
+      "    mean_env_wait_ms: 0.6501147929596541\n",
+      "    mean_inference_ms: 4.199582565004314\n",
+      "    mean_raw_obs_processing_ms: 0.3937192610273736\n",
+      "  time_since_restore: 511.1436126232147\n",
+      "  time_this_iter_s: 20.272990942001343\n",
+      "  time_total_s: 511.1436126232147\n",
+      "  timers:\n",
+      "    learn_throughput: 11277.804\n",
+      "    learn_time_ms: 14346.056\n",
+      "    sample_throughput: 28126.832\n",
+      "    sample_time_ms: 5752.23\n",
+      "    update_time_ms: 37.351\n",
+      "  timestamp: 1604232823\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:13:44,581\tWARNING util.py:136 -- The `process_trial` operation took 0.5550427436828613 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     25 |          511.144 | 4044800 |  40.4703 |              42.4184 |              10.2755 |            103.435 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1075.718860070445\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-14-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.30375292235757\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.545045112914124\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1609\n",
+      "  episodes_total: 40635\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4321967264016469\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0049026469544818\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00738874361559283\n",
+      "        total_loss: 0.0522269361341993\n",
+      "        vf_explained_var: 0.9993705749511719\n",
+      "        vf_loss: 0.058851247653365135\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.028000000000002\n",
+      "    gpu_util_percent0: 0.35119999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15018377726680818\n",
+      "    mean_env_wait_ms: 0.650226839982744\n",
+      "    mean_inference_ms: 4.191307577339299\n",
+      "    mean_raw_obs_processing_ms: 0.39318264874410647\n",
+      "  time_since_restore: 531.2994961738586\n",
+      "  time_this_iter_s: 20.15588355064392\n",
+      "  time_total_s: 531.2994961738586\n",
+      "  timers:\n",
+      "    learn_throughput: 11281.716\n",
+      "    learn_time_ms: 14341.08\n",
+      "    sample_throughput: 28095.697\n",
+      "    sample_time_ms: 5758.604\n",
+      "    update_time_ms: 36.136\n",
+      "  timestamp: 1604232844\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:14:05,496\tWARNING util.py:136 -- The `process_trial` operation took 0.5645184516906738 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     26 |          531.299 | 4206592 |   40.545 |              42.4184 |              10.2755 |            103.304 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1074.3374860851236\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-14-26\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.18162671273399\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.61544301559989\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1622\n",
+      "  episodes_total: 42257\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.41156937927007675\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005988262050474684\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0108474350903028\n",
+      "        total_loss: 0.03666358132613823\n",
+      "        vf_explained_var: 0.9995186924934387\n",
+      "        vf_loss: 0.04711797585090002\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.450000000000003\n",
+      "    gpu_util_percent0: 0.37384615384615383\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15003777931603987\n",
+      "    mean_env_wait_ms: 0.6503388710349208\n",
+      "    mean_inference_ms: 4.1834680864066325\n",
+      "    mean_raw_obs_processing_ms: 0.39267008619808885\n",
+      "  time_since_restore: 551.8160552978516\n",
+      "  time_this_iter_s: 20.51655912399292\n",
+      "  time_total_s: 551.8160552978516\n",
+      "  timers:\n",
+      "    learn_throughput: 11287.466\n",
+      "    learn_time_ms: 14333.775\n",
+      "    sample_throughput: 28001.168\n",
+      "    sample_time_ms: 5778.045\n",
+      "    update_time_ms: 35.1\n",
+      "  timestamp: 1604232866\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:14:26,878\tWARNING util.py:136 -- The `process_trial` operation took 0.603750467300415 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     27 |          551.816 | 4368384 |  40.6154 |              42.4184 |              10.2755 |            103.182 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1073.064150513113\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-14-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.0678804174452\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.68016949294415\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1629\n",
+      "  episodes_total: 43886\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.38193487375974655\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0054754362208768725\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007502093746249254\n",
+      "        total_loss: 0.052860286086797714\n",
+      "        vf_explained_var: 0.999366819858551\n",
+      "        vf_loss: 0.06000580328206221\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.916000000000004\n",
+      "    gpu_util_percent0: 0.35960000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1498996451948512\n",
+      "    mean_env_wait_ms: 0.6504529892483883\n",
+      "    mean_inference_ms: 4.176045627745146\n",
+      "    mean_raw_obs_processing_ms: 0.3921857888681881\n",
+      "  time_since_restore: 572.0441946983337\n",
+      "  time_this_iter_s: 20.228139400482178\n",
+      "  time_total_s: 572.0441946983337\n",
+      "  timers:\n",
+      "    learn_throughput: 11297.604\n",
+      "    learn_time_ms: 14320.912\n",
+      "    sample_throughput: 28005.61\n",
+      "    sample_time_ms: 5777.128\n",
+      "    update_time_ms: 32.987\n",
+      "  timestamp: 1604232887\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:14:47,924\tWARNING util.py:136 -- The `process_trial` operation took 0.6126041412353516 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     28 |          572.044 | 4530176 |  40.6802 |              42.4184 |              10.2755 |            103.068 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1071.8849808631385\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-15-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.9628774891204\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.74035570973741\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1612\n",
+      "  episodes_total: 45498\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3544607609510422\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005010240633661549\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006979774484837738\n",
+      "        total_loss: 0.030745272990316153\n",
+      "        vf_explained_var: 0.999602735042572\n",
+      "        vf_loss: 0.037401253978411354\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.657692307692308\n",
+      "    gpu_util_percent0: 0.32384615384615384\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1497713859875804\n",
+      "    mean_env_wait_ms: 0.650569464769825\n",
+      "    mean_inference_ms: 4.169137947749732\n",
+      "    mean_raw_obs_processing_ms: 0.39173452138746384\n",
+      "  time_since_restore: 592.6739168167114\n",
+      "  time_this_iter_s: 20.629722118377686\n",
+      "  time_total_s: 592.6739168167114\n",
+      "  timers:\n",
+      "    learn_throughput: 11299.681\n",
+      "    learn_time_ms: 14318.28\n",
+      "    sample_throughput: 27922.916\n",
+      "    sample_time_ms: 5794.237\n",
+      "    update_time_ms: 30.389\n",
+      "  timestamp: 1604232908\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:15:09,523\tWARNING util.py:136 -- The `process_trial` operation took 0.6120882034301758 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     29 |          592.674 | 4691968 |  40.7404 |              42.4184 |              10.2755 |            102.963 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1070.7854881546798\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-15-29\n",
+      "  done: true\n",
+      "  episode_len_mean: 102.86573533470627\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.79621711744931\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 47101\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3281017740567525\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005293768752987186\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007335715092873822\n",
+      "        total_loss: 0.022672869653130572\n",
+      "        vf_explained_var: 0.9996854662895203\n",
+      "        vf_loss: 0.029643258700768154\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.851999999999997\n",
+      "    gpu_util_percent0: 0.41879999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1496498957417332\n",
+      "    mean_env_wait_ms: 0.6506846363524779\n",
+      "    mean_inference_ms: 4.162635555621303\n",
+      "    mean_raw_obs_processing_ms: 0.39130720698712607\n",
+      "  time_since_restore: 613.0474860668182\n",
+      "  time_this_iter_s: 20.37356925010681\n",
+      "  time_total_s: 613.0474860668182\n",
+      "  timers:\n",
+      "    learn_throughput: 11310.582\n",
+      "    learn_time_ms: 14304.481\n",
+      "    sample_throughput: 27887.371\n",
+      "    sample_time_ms: 5801.623\n",
+      "    update_time_ms: 30.76\n",
+      "  timestamp: 1604232929\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:15:30,803\tWARNING util.py:136 -- The `process_trial` operation took 0.6821863651275635 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | TERMINATED |       |     30 |          613.047 | 4853760 |  40.7962 |              42.4184 |              10.2755 |            102.866 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.1/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | TERMINATED |       |     30 |          613.047 | 4853760 |  40.7962 |              42.4184 |              10.2755 |            102.866 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 52047\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_120450-tkx2xsoj/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_120450-tkx2xsoj/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1039\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 641\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604232931\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1669\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1070.78549\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 42.41837\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 10.27551\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 40.79622\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 47101\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdecent-sweep-2\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/tkx2xsoj\u001b[0m\n",
+      "2020-11-01 12:15:40,799 - wandb.wandb_agent - INFO - Cleaning up finished run: tkx2xsoj\n",
+      "2020-11-01 12:15:41,119 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:15:41,119 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la13.txt\n",
+      "2020-11-01 12:15:41,121 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la13.txt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:15:46,139 - wandb.wandb_agent - INFO - Running runs: ['dcx4y6ut']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdaily-sweep-3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/dcx4y6ut\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_121542-dcx4y6ut\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\n",
+      "2020-11-01 12:15:46,749\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=2614)\u001b[0m 2020-11-01 12:15:49,495\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=2570)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2570)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2590)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2590)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2557)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2557)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2589)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2589)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2599)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2599)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2591)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2591)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2583)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2583)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2625)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2625)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2573)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2573)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2595)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2595)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2597)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2597)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2587)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2587)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2582)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2582)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2621)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2621)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2600)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2600)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2615)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2615)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2594)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2594)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2554)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2554)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2560)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2560)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2561)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2561)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2562)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2562)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2511)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2511)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2556)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2556)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2501)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2501)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2553)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2553)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2571)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2571)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2612)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2612)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2508)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2508)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2493)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2493)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2565)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2565)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2605)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2605)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2566)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2566)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2518)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2518)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2502)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2502)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2503)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2503)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2507)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2507)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2576)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2576)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2567)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2567)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2610)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2610)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2487)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2487)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2603)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2603)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2488)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2488)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2492)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2492)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2497)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2497)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2552)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2552)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2504)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2504)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2563)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2563)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2500)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2500)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2558)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2558)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2555)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2555)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2496)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2496)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2579)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2579)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2564)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2564)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2523)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2523)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2598)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2598)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2572)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2572)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2551)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2551)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2505)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2505)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2592)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2592)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2514)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2514)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2498)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2498)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2580)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2580)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2495)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2495)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2568)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2568)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2490)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2490)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2602)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2602)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2489)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2489)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2491)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2491)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2596)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2596)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2577)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2577)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1589\n",
+      "    time_step_mean: 1337.9852140077821\n",
+      "    time_step_min: 1155\n",
+      "  date: 2020-11-01_12-16-16\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.43149129447389\n",
+      "  episode_reward_max: 47.39175257731958\n",
+      "  episode_reward_mean: 38.01323583352193\n",
+      "  episode_reward_min: 22.08247422680411\n",
+      "  episodes_this_iter: 1321\n",
+      "  episodes_total: 1321\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1485573450724285\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005282467735620837\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007238074458048989\n",
+      "        total_loss: 63.078263918558754\n",
+      "        vf_explained_var: 0.7385819554328918\n",
+      "        vf_loss: 63.0850191116333\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 30.44814814814815\n",
+      "    gpu_util_percent0: 0.3718518518518519\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4370370370370376\n",
+      "    vram_util_percent0: 0.08366130971903357\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16663877415658362\n",
+      "    mean_env_wait_ms: 0.6660098682308551\n",
+      "    mean_inference_ms: 4.715280418736184\n",
+      "    mean_raw_obs_processing_ms: 0.42943359101439976\n",
+      "  time_since_restore: 21.794464588165283\n",
+      "  time_this_iter_s: 21.794464588165283\n",
+      "  time_total_s: 21.794464588165283\n",
+      "  timers:\n",
+      "    learn_throughput: 11044.835\n",
+      "    learn_time_ms: 14648.658\n",
+      "    sample_throughput: 22922.781\n",
+      "    sample_time_ms: 7058.131\n",
+      "    update_time_ms: 38.538\n",
+      "  timestamp: 1604232976\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      1 |          21.7945 | 161792 |  38.0132 |              47.3918 |              22.0825 |            114.431 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1326.7179115300942\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-16-37\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.38081603435934\n",
+      "  episode_reward_max: 47.64948453608249\n",
+      "  episode_reward_mean: 38.63342287228155\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1473\n",
+      "  episodes_total: 2794\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1314232647418976\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009286719684799513\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01014851212191085\n",
+      "        total_loss: 10.35303783416748\n",
+      "        vf_explained_var: 0.901028573513031\n",
+      "        vf_loss: 10.361894766489664\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 30.084615384615383\n",
+      "    gpu_util_percent0: 0.4496153846153846\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5076923076923077\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16450090814338433\n",
+      "    mean_env_wait_ms: 0.6642577249066655\n",
+      "    mean_inference_ms: 4.744188369781305\n",
+      "    mean_raw_obs_processing_ms: 0.42877125861262844\n",
+      "  time_since_restore: 43.1419882774353\n",
+      "  time_this_iter_s: 21.34752368927002\n",
+      "  time_total_s: 43.1419882774353\n",
+      "  timers:\n",
+      "    learn_throughput: 11211.024\n",
+      "    learn_time_ms: 14431.51\n",
+      "    sample_throughput: 23059.328\n",
+      "    sample_time_ms: 7016.336\n",
+      "    update_time_ms: 41.882\n",
+      "  timestamp: 1604232997\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      2 |           43.142 | 323584 |  38.6334 |              47.6495 |              21.2577 |            113.381 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1309.3502958579882\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-16-58\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.32527575686458\n",
+      "  episode_reward_max: 47.64948453608249\n",
+      "  episode_reward_mean: 39.48478286641973\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1467\n",
+      "  episodes_total: 4261\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1132993400096893\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010391402058303356\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014095689790944258\n",
+      "        total_loss: 6.80802857875824\n",
+      "        vf_explained_var: 0.9351071715354919\n",
+      "        vf_loss: 6.820602655410767\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.832000000000004\n",
+      "    gpu_util_percent0: 0.4172\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16256613873280876\n",
+      "    mean_env_wait_ms: 0.6625184290389695\n",
+      "    mean_inference_ms: 4.69345067144062\n",
+      "    mean_raw_obs_processing_ms: 0.4260658546666288\n",
+      "  time_since_restore: 63.90490484237671\n",
+      "  time_this_iter_s: 20.762916564941406\n",
+      "  time_total_s: 63.90490484237671\n",
+      "  timers:\n",
+      "    learn_throughput: 11227.805\n",
+      "    learn_time_ms: 14409.94\n",
+      "    sample_throughput: 23883.846\n",
+      "    sample_time_ms: 6774.118\n",
+      "    update_time_ms: 41.076\n",
+      "  timestamp: 1604233018\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      3 |          63.9049 | 485376 |  39.4848 |              47.6495 |              21.2577 |            112.325 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1293.2727912706794\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-17-19\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.25918153200419\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 40.30362789959723\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1457\n",
+      "  episodes_total: 5718\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.084079662958781\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009383795782923698\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013835826587940877\n",
+      "        total_loss: 4.933180093765259\n",
+      "        vf_explained_var: 0.9529300332069397\n",
+      "        vf_loss: 4.94568133354187\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.936\n",
+      "    gpu_util_percent0: 0.4576\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16088212665214047\n",
+      "    mean_env_wait_ms: 0.660815453354488\n",
+      "    mean_inference_ms: 4.632879361030093\n",
+      "    mean_raw_obs_processing_ms: 0.42268288067938126\n",
+      "  time_since_restore: 84.33310127258301\n",
+      "  time_this_iter_s: 20.4281964302063\n",
+      "  time_total_s: 84.33310127258301\n",
+      "  timers:\n",
+      "    learn_throughput: 11238.354\n",
+      "    learn_time_ms: 14396.415\n",
+      "    sample_throughput: 24616.712\n",
+      "    sample_time_ms: 6572.446\n",
+      "    update_time_ms: 38.648\n",
+      "  timestamp: 1604233039\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      4 |          84.3331 | 647168 |  40.3036 |              47.6495 |              21.2577 |            111.259 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1278.2911882694702\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-17-39\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.2100481761872\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 41.07122129117859\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1547\n",
+      "  episodes_total: 7265\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0668250819047291\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008654051227495074\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015438533756726732\n",
+      "        total_loss: 3.750304361184438\n",
+      "        vf_explained_var: 0.9650198817253113\n",
+      "        vf_loss: 3.764545480410258\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.02\n",
+      "    gpu_util_percent0: 0.3504\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1594046299420155\n",
+      "    mean_env_wait_ms: 0.6591918943938871\n",
+      "    mean_inference_ms: 4.572498944569763\n",
+      "    mean_raw_obs_processing_ms: 0.4190994577823986\n",
+      "  time_since_restore: 104.45204615592957\n",
+      "  time_this_iter_s: 20.118944883346558\n",
+      "  time_total_s: 104.45204615592957\n",
+      "  timers:\n",
+      "    learn_throughput: 11259.021\n",
+      "    learn_time_ms: 14369.989\n",
+      "    sample_throughput: 25254.408\n",
+      "    sample_time_ms: 6406.486\n",
+      "    update_time_ms: 37.632\n",
+      "  timestamp: 1604233059\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      5 |          104.452 | 808960 |  41.0712 |              47.6495 |              21.2577 |             110.21 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1266.0983158852982\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-18-00\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.32014959202176\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 41.69816035928256\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1559\n",
+      "  episodes_total: 8824\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.034409632285436\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008218800959487757\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015976834343746305\n",
+      "        total_loss: 3.275542378425598\n",
+      "        vf_explained_var: 0.9698309898376465\n",
+      "        vf_loss: 3.2903926372528076\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.4375\n",
+      "    gpu_util_percent0: 0.43624999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5208333333333335\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15817094139921792\n",
+      "    mean_env_wait_ms: 0.6579144407066476\n",
+      "    mean_inference_ms: 4.520312188626085\n",
+      "    mean_raw_obs_processing_ms: 0.41585575516420453\n",
+      "  time_since_restore: 124.74504113197327\n",
+      "  time_this_iter_s: 20.2929949760437\n",
+      "  time_total_s: 124.74504113197327\n",
+      "  timers:\n",
+      "    learn_throughput: 11268.321\n",
+      "    learn_time_ms: 14358.128\n",
+      "    sample_throughput: 25609.299\n",
+      "    sample_time_ms: 6317.705\n",
+      "    update_time_ms: 37.615\n",
+      "  timestamp: 1604233080\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      6 |          124.745 | 970752 |  41.6982 |              47.6495 |              21.2577 |             109.32 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1255.5475730032877\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-18-20\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.51175563692426\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 42.23890644960692\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1554\n",
+      "  episodes_total: 10378\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9993852277596792\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008948890104268989\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011871834401972592\n",
+      "        total_loss: 2.572846511999766\n",
+      "        vf_explained_var: 0.9761440753936768\n",
+      "        vf_loss: 2.5834282437960305\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.36\n",
+      "    gpu_util_percent0: 0.3956\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15713379589800733\n",
+      "    mean_env_wait_ms: 0.6568649191044983\n",
+      "    mean_inference_ms: 4.475812919755018\n",
+      "    mean_raw_obs_processing_ms: 0.4129610571474045\n",
+      "  time_since_restore: 144.9028398990631\n",
+      "  time_this_iter_s: 20.157798767089844\n",
+      "  time_total_s: 144.9028398990631\n",
+      "  timers:\n",
+      "    learn_throughput: 11276.333\n",
+      "    learn_time_ms: 14347.927\n",
+      "    sample_throughput: 25944.994\n",
+      "    sample_time_ms: 6235.962\n",
+      "    update_time_ms: 37.126\n",
+      "  timestamp: 1604233100\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      7 |          144.903 | 1132544 |  42.2389 |              47.6495 |              21.2577 |            108.512 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1246.681210592686\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-18-41\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.82323359316068\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 42.700832190594205\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1553\n",
+      "  episodes_total: 11931\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9713874608278275\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00811462321629127\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013652926543727517\n",
+      "        total_loss: 2.0792956252892814\n",
+      "        vf_explained_var: 0.9808939099311829\n",
+      "        vf_loss: 2.0918113390604653\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.708000000000002\n",
+      "    gpu_util_percent0: 0.412\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.52\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15626045608420333\n",
+      "    mean_env_wait_ms: 0.6560445478078366\n",
+      "    mean_inference_ms: 4.437668893602004\n",
+      "    mean_raw_obs_processing_ms: 0.41044660220855933\n",
+      "  time_since_restore: 165.08657550811768\n",
+      "  time_this_iter_s: 20.183735609054565\n",
+      "  time_total_s: 165.08657550811768\n",
+      "  timers:\n",
+      "    learn_throughput: 11297.099\n",
+      "    learn_time_ms: 14321.553\n",
+      "    sample_throughput: 26119.381\n",
+      "    sample_time_ms: 6194.327\n",
+      "    update_time_ms: 35.89\n",
+      "  timestamp: 1604233121\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      8 |          165.087 | 1294336 |  42.7008 |              47.6495 |              21.2577 |            107.823 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1238.4053151213718\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-19-01\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.21781298585918\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 43.115104119360794\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1576\n",
+      "  episodes_total: 13507\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9416759212811788\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0077835753715286655\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013627580524674462\n",
+      "        total_loss: 1.650565932194392\n",
+      "        vf_explained_var: 0.9848251938819885\n",
+      "        vf_loss: 1.663107653458913\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.308000000000003\n",
+      "    gpu_util_percent0: 0.392\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15550241078926047\n",
+      "    mean_env_wait_ms: 0.6554019389170324\n",
+      "    mean_inference_ms: 4.404255773765493\n",
+      "    mean_raw_obs_processing_ms: 0.40821271351444455\n",
+      "  time_since_restore: 185.5122389793396\n",
+      "  time_this_iter_s: 20.425663471221924\n",
+      "  time_total_s: 185.5122389793396\n",
+      "  timers:\n",
+      "    learn_throughput: 11288.215\n",
+      "    learn_time_ms: 14332.825\n",
+      "    sample_throughput: 26270.178\n",
+      "    sample_time_ms: 6158.771\n",
+      "    update_time_ms: 34.616\n",
+      "  timestamp: 1604233141\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      9 |          185.512 | 1456128 |  43.1151 |              47.6495 |              21.2577 |            107.218 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1231.2265303412562\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-19-22\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.66975758378594\n",
+      "  episode_reward_max: 47.64948453608253\n",
+      "  episode_reward_mean: 43.48257774293858\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1591\n",
+      "  episodes_total: 15098\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9080682247877121\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007657797929520409\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010565590860399729\n",
+      "        total_loss: 1.296636829773585\n",
+      "        vf_explained_var: 0.988224446773529\n",
+      "        vf_loss: 1.3061249554157257\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.03333333333333\n",
+      "    gpu_util_percent0: 0.4579166666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15484288964237733\n",
+      "    mean_env_wait_ms: 0.6549145589836158\n",
+      "    mean_inference_ms: 4.3750244337617135\n",
+      "    mean_raw_obs_processing_ms: 0.4062248434702486\n",
+      "  time_since_restore: 205.5452425479889\n",
+      "  time_this_iter_s: 20.033003568649292\n",
+      "  time_total_s: 205.5452425479889\n",
+      "  timers:\n",
+      "    learn_throughput: 11294.037\n",
+      "    learn_time_ms: 14325.435\n",
+      "    sample_throughput: 26494.427\n",
+      "    sample_time_ms: 6106.643\n",
+      "    update_time_ms: 33.514\n",
+      "  timestamp: 1604233162\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     10 |          205.545 | 1617920 |  43.4826 |              47.6495 |              21.2577 |             106.67 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1224.8779111644658\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-19-42\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.19435793004313\n",
+      "  episode_reward_max: 47.64948453608253\n",
+      "  episode_reward_mean: 43.804279931238554\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 16696\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8727221091588339\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007556108757853508\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012766734405886382\n",
+      "        total_loss: 1.0635682841142018\n",
+      "        vf_explained_var: 0.9903334975242615\n",
+      "        vf_loss: 1.0752601623535156\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.6375\n",
+      "    gpu_util_percent0: 0.4445833333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1542607271772269\n",
+      "    mean_env_wait_ms: 0.6545202251025621\n",
+      "    mean_inference_ms: 4.349215320409436\n",
+      "    mean_raw_obs_processing_ms: 0.4044561449167446\n",
+      "  time_since_restore: 225.5202054977417\n",
+      "  time_this_iter_s: 19.974962949752808\n",
+      "  time_total_s: 225.5202054977417\n",
+      "  timers:\n",
+      "    learn_throughput: 11330.871\n",
+      "    learn_time_ms: 14278.867\n",
+      "    sample_throughput: 27121.909\n",
+      "    sample_time_ms: 5965.362\n",
+      "    update_time_ms: 33.265\n",
+      "  timestamp: 1604233182\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     11 |           225.52 | 1779712 |  43.8043 |              47.6495 |              21.2577 |            106.194 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1219.3561336254106\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-20-02\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.77831219938784\n",
+      "  episode_reward_max: 47.64948453608253\n",
+      "  episode_reward_mean: 44.08295937594382\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1600\n",
+      "  episodes_total: 18296\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8348831733067831\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007376410067081451\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009320069143238166\n",
+      "        total_loss: 0.8637631287177404\n",
+      "        vf_explained_var: 0.99216228723526\n",
+      "        vf_loss: 0.8720253507296244\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.623999999999995\n",
+      "    gpu_util_percent0: 0.364\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15375450185882147\n",
+      "    mean_env_wait_ms: 0.6542416074847509\n",
+      "    mean_inference_ms: 4.326388244632185\n",
+      "    mean_raw_obs_processing_ms: 0.4028915881034749\n",
+      "  time_since_restore: 245.75802636146545\n",
+      "  time_this_iter_s: 20.237820863723755\n",
+      "  time_total_s: 245.75802636146545\n",
+      "  timers:\n",
+      "    learn_throughput: 11325.614\n",
+      "    learn_time_ms: 14285.495\n",
+      "    sample_throughput: 27660.054\n",
+      "    sample_time_ms: 5849.302\n",
+      "    update_time_ms: 30.809\n",
+      "  timestamp: 1604233202\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     12 |          245.758 | 1941504 |   44.083 |              47.6495 |              21.2577 |            105.778 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1214.5580739397603\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-20-23\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.4173956762192\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.32935526840925\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1594\n",
+      "  episodes_total: 19890\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7998430083195368\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006828729490128656\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011044965135321641\n",
+      "        total_loss: 0.67805515229702\n",
+      "        vf_explained_var: 0.9938119053840637\n",
+      "        vf_loss: 0.6881343126296997\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.831999999999997\n",
+      "    gpu_util_percent0: 0.43200000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.153302992513867\n",
+      "    mean_env_wait_ms: 0.6540089232561519\n",
+      "    mean_inference_ms: 4.306101213317678\n",
+      "    mean_raw_obs_processing_ms: 0.40148742506884494\n",
+      "  time_since_restore: 266.1050407886505\n",
+      "  time_this_iter_s: 20.34701442718506\n",
+      "  time_total_s: 266.1050407886505\n",
+      "  timers:\n",
+      "    learn_throughput: 11312.078\n",
+      "    learn_time_ms: 14302.589\n",
+      "    sample_throughput: 27960.684\n",
+      "    sample_time_ms: 5786.411\n",
+      "    update_time_ms: 28.901\n",
+      "  timestamp: 1604233223\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     13 |          266.105 | 2103296 |  44.3294 |              47.6495 |              21.2577 |            105.417 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1210.317556539986\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-20-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.1013919277501\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.54546357677872\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1591\n",
+      "  episodes_total: 21481\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7677376766999563\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00645853765308857\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009221890567763088\n",
+      "        total_loss: 0.5704321513573328\n",
+      "        vf_explained_var: 0.9948087334632874\n",
+      "        vf_loss: 0.5787462194760641\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.299999999999997\n",
+      "    gpu_util_percent0: 0.3692\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15289862610010913\n",
+      "    mean_env_wait_ms: 0.6538353499990455\n",
+      "    mean_inference_ms: 4.287840220794161\n",
+      "    mean_raw_obs_processing_ms: 0.40022401934261076\n",
+      "  time_since_restore: 286.03195905685425\n",
+      "  time_this_iter_s: 19.926918268203735\n",
+      "  time_total_s: 286.03195905685425\n",
+      "  timers:\n",
+      "    learn_throughput: 11326.239\n",
+      "    learn_time_ms: 14284.707\n",
+      "    sample_throughput: 28153.263\n",
+      "    sample_time_ms: 5746.83\n",
+      "    update_time_ms: 28.453\n",
+      "  timestamp: 1604233243\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     14 |          286.032 | 2265088 |  44.5455 |              47.6495 |              21.2577 |            105.101 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1206.554523354749\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-21-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.81341019417475\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.73924255043826\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1591\n",
+      "  episodes_total: 23072\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.733478844165802\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00630180553222696\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01086452438418443\n",
+      "        total_loss: 0.44883622725804645\n",
+      "        vf_explained_var: 0.9958701133728027\n",
+      "        vf_loss: 0.4588071381052335\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.691666666666666\n",
+      "    gpu_util_percent0: 0.42\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1525331053770261\n",
+      "    mean_env_wait_ms: 0.6537007767835614\n",
+      "    mean_inference_ms: 4.271271460769205\n",
+      "    mean_raw_obs_processing_ms: 0.39907289277823804\n",
+      "  time_since_restore: 306.18409848213196\n",
+      "  time_this_iter_s: 20.15213942527771\n",
+      "  time_total_s: 306.18409848213196\n",
+      "  timers:\n",
+      "    learn_throughput: 11336.437\n",
+      "    learn_time_ms: 14271.856\n",
+      "    sample_throughput: 28161.1\n",
+      "    sample_time_ms: 5745.23\n",
+      "    update_time_ms: 27.237\n",
+      "  timestamp: 1604233264\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     15 |          306.184 | 2426880 |  44.7392 |              47.6495 |              21.2577 |            104.813 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1203.1918253034055\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-21-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.54650832894256\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.91062311529655\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 24673\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7046740502119064\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00598089622023205\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010109954212869829\n",
+      "        total_loss: 0.3878796820839246\n",
+      "        vf_explained_var: 0.9964661002159119\n",
+      "        vf_loss: 0.39714578290780383\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.084\n",
+      "    gpu_util_percent0: 0.4572\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15220062387999952\n",
+      "    mean_env_wait_ms: 0.653596423305203\n",
+      "    mean_inference_ms: 4.256089606710892\n",
+      "    mean_raw_obs_processing_ms: 0.3980153671992771\n",
+      "  time_since_restore: 326.27552032470703\n",
+      "  time_this_iter_s: 20.091421842575073\n",
+      "  time_total_s: 326.27552032470703\n",
+      "  timers:\n",
+      "    learn_throughput: 11333.689\n",
+      "    learn_time_ms: 14275.316\n",
+      "    sample_throughput: 28301.321\n",
+      "    sample_time_ms: 5716.765\n",
+      "    update_time_ms: 25.405\n",
+      "  timestamp: 1604233285\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     16 |          326.276 | 2588672 |  44.9106 |              47.6495 |              21.2577 |            104.547 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1200.1823688521467\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-21-45\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.30184515883583\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 45.06611508661011\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1612\n",
+      "  episodes_total: 26285\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6727208147446314\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0061663844001789885\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00950972737094465\n",
+      "        total_loss: 0.2949073016643524\n",
+      "        vf_explained_var: 0.9973233342170715\n",
+      "        vf_loss: 0.3035201082626979\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.068\n",
+      "    gpu_util_percent0: 0.38800000000000007\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15189563586672175\n",
+      "    mean_env_wait_ms: 0.653528700746639\n",
+      "    mean_inference_ms: 4.242058406187237\n",
+      "    mean_raw_obs_processing_ms: 0.3970431055250104\n",
+      "  time_since_restore: 346.44066858291626\n",
+      "  time_this_iter_s: 20.16514825820923\n",
+      "  time_total_s: 346.44066858291626\n",
+      "  timers:\n",
+      "    learn_throughput: 11331.786\n",
+      "    learn_time_ms: 14277.714\n",
+      "    sample_throughput: 28373.21\n",
+      "    sample_time_ms: 5702.28\n",
+      "    update_time_ms: 26.064\n",
+      "  timestamp: 1604233305\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     17 |          346.441 | 2750464 |  45.0661 |              47.6495 |              21.2577 |            104.302 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1197.4265528618562\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-22-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.07865329512894\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.20858749593833\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1635\n",
+      "  episodes_total: 27920\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6462279756863912\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005753972722838323\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01063174061710015\n",
+      "        total_loss: 0.2318790778517723\n",
+      "        vf_explained_var: 0.997880220413208\n",
+      "        vf_loss: 0.2416831391553084\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.45416666666667\n",
+      "    gpu_util_percent0: 0.44875\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1516142332871325\n",
+      "    mean_env_wait_ms: 0.6534803822249593\n",
+      "    mean_inference_ms: 4.229062941307127\n",
+      "    mean_raw_obs_processing_ms: 0.3961363429731068\n",
+      "  time_since_restore: 366.4673285484314\n",
+      "  time_this_iter_s: 20.026659965515137\n",
+      "  time_total_s: 366.4673285484314\n",
+      "  timers:\n",
+      "    learn_throughput: 11321.995\n",
+      "    learn_time_ms: 14290.061\n",
+      "    sample_throughput: 28529.416\n",
+      "    sample_time_ms: 5671.059\n",
+      "    update_time_ms: 25.131\n",
+      "  timestamp: 1604233326\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     18 |          366.467 | 2912256 |  45.2086 |              47.6495 |              21.2577 |            104.079 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1194.9799281209737\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-22-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.87829326109042\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.33514231552049\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 29530\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6139073818922043\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005659738904796541\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009704548533287985\n",
+      "        total_loss: 0.19860607013106346\n",
+      "        vf_explained_var: 0.9981780648231506\n",
+      "        vf_loss: 0.20748562117417654\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.747999999999998\n",
+      "    gpu_util_percent0: 0.39640000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15135749897686426\n",
+      "    mean_env_wait_ms: 0.6534384087466466\n",
+      "    mean_inference_ms: 4.217280786349381\n",
+      "    mean_raw_obs_processing_ms: 0.3953083892816526\n",
+      "  time_since_restore: 386.6138005256653\n",
+      "  time_this_iter_s: 20.146471977233887\n",
+      "  time_total_s: 386.6138005256653\n",
+      "  timers:\n",
+      "    learn_throughput: 11328.703\n",
+      "    learn_time_ms: 14281.599\n",
+      "    sample_throughput: 28668.019\n",
+      "    sample_time_ms: 5643.641\n",
+      "    update_time_ms: 26.007\n",
+      "  timestamp: 1604233347\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     19 |          386.614 | 3074048 |  45.3351 |              47.6495 |              21.2577 |            103.878 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1192.755491943006\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-22-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.69467022199376\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.44938246008456\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 31127\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5885171492894491\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00575300360408922\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008459999109618366\n",
+      "        total_loss: 0.1491255114475886\n",
+      "        vf_explained_var: 0.9986266493797302\n",
+      "        vf_loss: 0.15672916546463966\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.32\n",
+      "    gpu_util_percent0: 0.33520000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15111988887105687\n",
+      "    mean_env_wait_ms: 0.6534000992030266\n",
+      "    mean_inference_ms: 4.206433415272165\n",
+      "    mean_raw_obs_processing_ms: 0.39454176059647716\n",
+      "  time_since_restore: 406.58024430274963\n",
+      "  time_this_iter_s: 19.96644377708435\n",
+      "  time_total_s: 406.58024430274963\n",
+      "  timers:\n",
+      "    learn_throughput: 11334.136\n",
+      "    learn_time_ms: 14274.754\n",
+      "    sample_throughput: 28704.988\n",
+      "    sample_time_ms: 5636.372\n",
+      "    update_time_ms: 26.077\n",
+      "  timestamp: 1604233367\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     20 |           406.58 | 3235840 |  45.4494 |              47.6495 |              21.2577 |            103.695 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1190.7317714705164\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-23-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.52679335207137\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.553595837989505\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 32732\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5605561385552088\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0051246628087634844\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00707746635695609\n",
+      "        total_loss: 0.12786801221470037\n",
+      "        vf_explained_var: 0.9988241195678711\n",
+      "        vf_loss: 0.13420082504550615\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.108\n",
+      "    gpu_util_percent0: 0.36239999999999994\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1508982454274576\n",
+      "    mean_env_wait_ms: 0.6533685645927871\n",
+      "    mean_inference_ms: 4.196348243483211\n",
+      "    mean_raw_obs_processing_ms: 0.393820825357919\n",
+      "  time_since_restore: 426.77583384513855\n",
+      "  time_this_iter_s: 20.195589542388916\n",
+      "  time_total_s: 426.77583384513855\n",
+      "  timers:\n",
+      "    learn_throughput: 11330.776\n",
+      "    learn_time_ms: 14278.986\n",
+      "    sample_throughput: 28644.617\n",
+      "    sample_time_ms: 5648.251\n",
+      "    update_time_ms: 25.717\n",
+      "  timestamp: 1604233388\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     21 |          426.776 | 3397632 |  45.5536 |              47.6495 |              21.2577 |            103.527 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1188.871339064549\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-23-29\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.37087712148119\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.649092584828495\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 34351\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5297549913326899\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005221013678237796\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007347211508507219\n",
+      "        total_loss: 0.11089812219142914\n",
+      "        vf_explained_var: 0.9989762306213379\n",
+      "        vf_loss: 0.11746600580712159\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.358333333333334\n",
+      "    gpu_util_percent0: 0.4533333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15069056354724808\n",
+      "    mean_env_wait_ms: 0.6533427688463339\n",
+      "    mean_inference_ms: 4.1868632869880145\n",
+      "    mean_raw_obs_processing_ms: 0.3931430489205958\n",
+      "  time_since_restore: 447.03629064559937\n",
+      "  time_this_iter_s: 20.260456800460815\n",
+      "  time_total_s: 447.03629064559937\n",
+      "  timers:\n",
+      "    learn_throughput: 11328.702\n",
+      "    learn_time_ms: 14281.601\n",
+      "    sample_throughput: 28676.086\n",
+      "    sample_time_ms: 5642.053\n",
+      "    update_time_ms: 25.502\n",
+      "  timestamp: 1604233409\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     22 |          447.036 | 3559424 |  45.6491 |              47.6495 |              21.2577 |            103.371 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1187.1485870048955\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-23-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.22507502500834\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.737731878552886\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1637\n",
+      "  episodes_total: 35988\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5043502772847811\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0051153005721668405\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007804131872641544\n",
+      "        total_loss: 0.08389338354269664\n",
+      "        vf_explained_var: 0.9992172718048096\n",
+      "        vf_loss: 0.09092663104335467\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.10769230769231\n",
+      "    gpu_util_percent0: 0.4111538461538462\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1504958593946037\n",
+      "    mean_env_wait_ms: 0.6533264567796601\n",
+      "    mean_inference_ms: 4.177979473432433\n",
+      "    mean_raw_obs_processing_ms: 0.39250620871910297\n",
+      "  time_since_restore: 467.43437933921814\n",
+      "  time_this_iter_s: 20.398088693618774\n",
+      "  time_total_s: 467.43437933921814\n",
+      "  timers:\n",
+      "    learn_throughput: 11352.718\n",
+      "    learn_time_ms: 14251.389\n",
+      "    sample_throughput: 28591.581\n",
+      "    sample_time_ms: 5658.729\n",
+      "    update_time_ms: 26.115\n",
+      "  timestamp: 1604233430\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     23 |          467.434 | 3721216 |  45.7377 |              47.6495 |              21.2577 |            103.225 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1185.5975664953805\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-24-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.0935496741588\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.817267047191805\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1607\n",
+      "  episodes_total: 37595\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.477857805788517\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005301223369315267\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007187186017593679\n",
+      "        total_loss: 0.0712860906496644\n",
+      "        vf_explained_var: 0.9993272423744202\n",
+      "        vf_loss: 0.07765195891261101\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.808000000000003\n",
+      "    gpu_util_percent0: 0.41159999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1503165502098337\n",
+      "    mean_env_wait_ms: 0.6533168664023659\n",
+      "    mean_inference_ms: 4.1697739229427855\n",
+      "    mean_raw_obs_processing_ms: 0.39192023267055776\n",
+      "  time_since_restore: 487.5962927341461\n",
+      "  time_this_iter_s: 20.16191339492798\n",
+      "  time_total_s: 487.5962927341461\n",
+      "  timers:\n",
+      "    learn_throughput: 11345.276\n",
+      "    learn_time_ms: 14260.737\n",
+      "    sample_throughput: 28572.718\n",
+      "    sample_time_ms: 5662.465\n",
+      "    update_time_ms: 25.82\n",
+      "  timestamp: 1604233451\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     24 |          487.596 | 3883008 |  45.8173 |              47.6495 |              21.2577 |            103.094 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1184.1811960574025\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-24-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.9715546711567\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.8903373462669\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 39198\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4582882300019264\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004777276888489723\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006818818922814292\n",
+      "        total_loss: 0.06491830727706353\n",
+      "        vf_explained_var: 0.9993811249732971\n",
+      "        vf_loss: 0.07101081249614556\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.5\n",
+      "    gpu_util_percent0: 0.4164\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15014800244823473\n",
+      "    mean_env_wait_ms: 0.6533117275008512\n",
+      "    mean_inference_ms: 4.162086682670796\n",
+      "    mean_raw_obs_processing_ms: 0.3913710326970964\n",
+      "  time_since_restore: 507.939138174057\n",
+      "  time_this_iter_s: 20.34284543991089\n",
+      "  time_total_s: 507.939138174057\n",
+      "  timers:\n",
+      "    learn_throughput: 11324.044\n",
+      "    learn_time_ms: 14287.476\n",
+      "    sample_throughput: 28578.2\n",
+      "    sample_time_ms: 5661.378\n",
+      "    update_time_ms: 26.054\n",
+      "  timestamp: 1604233472\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:24:33,109\tWARNING util.py:136 -- The `process_trial` operation took 0.5145235061645508 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     25 |          507.939 | 4044800 |  45.8903 |              47.6495 |              21.2577 |            102.972 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1182.8508853681267\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-24-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.8577064444989\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.95893087655392\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1612\n",
+      "  episodes_total: 40810\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4304437041282654\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005302870219262938\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005320634130233278\n",
+      "        total_loss: 0.04602197107548515\n",
+      "        vf_explained_var: 0.9995622038841248\n",
+      "        vf_loss: 0.05102753918617964\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.031999999999996\n",
+      "    gpu_util_percent0: 0.4016\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14998848423358552\n",
+      "    mean_env_wait_ms: 0.6533120076712385\n",
+      "    mean_inference_ms: 4.154808738528033\n",
+      "    mean_raw_obs_processing_ms: 0.39085074710802764\n",
+      "  time_since_restore: 528.287171125412\n",
+      "  time_this_iter_s: 20.34803295135498\n",
+      "  time_total_s: 528.287171125412\n",
+      "  timers:\n",
+      "    learn_throughput: 11314.942\n",
+      "    learn_time_ms: 14298.969\n",
+      "    sample_throughput: 28539.444\n",
+      "    sample_time_ms: 5669.066\n",
+      "    update_time_ms: 26.44\n",
+      "  timestamp: 1604233493\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:24:54,161\tWARNING util.py:136 -- The `process_trial` operation took 0.5190365314483643 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     26 |          528.287 | 4206592 |  45.9589 |              47.6495 |              21.2577 |            102.858 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1181.6014053620693\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-25-14\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.75047708799623\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.02298669108478\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1635\n",
+      "  episodes_total: 42445\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.40619519104560214\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004850935540162027\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00712713325143947\n",
+      "        total_loss: 0.04109010814378659\n",
+      "        vf_explained_var: 0.9995940327644348\n",
+      "        vf_loss: 0.047935244316856064\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.9\n",
+      "    gpu_util_percent0: 0.4608\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14983678273441456\n",
+      "    mean_env_wait_ms: 0.6533202946066505\n",
+      "    mean_inference_ms: 4.147883359756837\n",
+      "    mean_raw_obs_processing_ms: 0.3903567513935103\n",
+      "  time_since_restore: 548.3913764953613\n",
+      "  time_this_iter_s: 20.10420536994934\n",
+      "  time_total_s: 548.3913764953613\n",
+      "  timers:\n",
+      "    learn_throughput: 11320.7\n",
+      "    learn_time_ms: 14291.696\n",
+      "    sample_throughput: 28538.222\n",
+      "    sample_time_ms: 5669.309\n",
+      "    update_time_ms: 25.152\n",
+      "  timestamp: 1604233514\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:25:14,990\tWARNING util.py:136 -- The `process_trial` operation took 0.5334711074829102 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     27 |          548.391 | 4368384 |   46.023 |              47.6495 |              21.2577 |             102.75 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1180.4515455020326\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-25-35\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.6508271495677\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.08214646909499\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1622\n",
+      "  episodes_total: 44067\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.380776509642601\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005104163157132764\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008030562166823074\n",
+      "        total_loss: 0.03263539479424556\n",
+      "        vf_explained_var: 0.9996626377105713\n",
+      "        vf_loss: 0.0406011367837588\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.724\n",
+      "    gpu_util_percent0: 0.3708000000000001\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14969387594042302\n",
+      "    mean_env_wait_ms: 0.6533341674809083\n",
+      "    mean_inference_ms: 4.141387554786562\n",
+      "    mean_raw_obs_processing_ms: 0.3898925942202909\n",
+      "  time_since_restore: 568.5405015945435\n",
+      "  time_this_iter_s: 20.14912509918213\n",
+      "  time_total_s: 568.5405015945435\n",
+      "  timers:\n",
+      "    learn_throughput: 11317.578\n",
+      "    learn_time_ms: 14295.638\n",
+      "    sample_throughput: 28540.327\n",
+      "    sample_time_ms: 5668.891\n",
+      "    update_time_ms: 27.131\n",
+      "  timestamp: 1604233535\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:25:35,895\tWARNING util.py:136 -- The `process_trial` operation took 0.5552034378051758 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     28 |          568.541 | 4530176 |  46.0821 |              47.6495 |              21.2577 |            102.651 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1179.389183503528\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-25-56\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.55971097000219\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.136667351393584\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 45670\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3589545438687007\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005236083525232971\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005505533023097087\n",
+      "        total_loss: 0.02439635860112806\n",
+      "        vf_explained_var: 0.9997479915618896\n",
+      "        vf_loss: 0.029819565049062174\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.04\n",
+      "    gpu_util_percent0: 0.3832\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14955992403902243\n",
+      "    mean_env_wait_ms: 0.65334881821503\n",
+      "    mean_inference_ms: 4.135306265563136\n",
+      "    mean_raw_obs_processing_ms: 0.3894575857046042\n",
+      "  time_since_restore: 588.7653107643127\n",
+      "  time_this_iter_s: 20.224809169769287\n",
+      "  time_total_s: 588.7653107643127\n",
+      "  timers:\n",
+      "    learn_throughput: 11315.541\n",
+      "    learn_time_ms: 14298.212\n",
+      "    sample_throughput: 28543.882\n",
+      "    sample_time_ms: 5668.185\n",
+      "    update_time_ms: 27.394\n",
+      "  timestamp: 1604233556\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:25:56,904\tWARNING util.py:136 -- The `process_trial` operation took 0.5792350769042969 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     29 |          588.765 | 4691968 |  46.1367 |              47.6495 |              21.2577 |             102.56 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1178.4016808145811\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-26-17\n",
+      "  done: true\n",
+      "  episode_len_mean: 102.47428873611845\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.187587432602626\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 47275\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.34163280328114826\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005014610709622502\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006093008596508298\n",
+      "        total_loss: 0.02250015801594903\n",
+      "        vf_explained_var: 0.9997627139091492\n",
+      "        vf_loss: 0.028513251959035795\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.592000000000002\n",
+      "    gpu_util_percent0: 0.4032\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14943275367352743\n",
+      "    mean_env_wait_ms: 0.6533656820836667\n",
+      "    mean_inference_ms: 4.129545135974801\n",
+      "    mean_raw_obs_processing_ms: 0.38904409500028486\n",
+      "  time_since_restore: 608.9674067497253\n",
+      "  time_this_iter_s: 20.202095985412598\n",
+      "  time_total_s: 608.9674067497253\n",
+      "  timers:\n",
+      "    learn_throughput: 11308.582\n",
+      "    learn_time_ms: 14307.01\n",
+      "    sample_throughput: 28493.852\n",
+      "    sample_time_ms: 5678.137\n",
+      "    update_time_ms: 27.445\n",
+      "  timestamp: 1604233577\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:26:18,072\tWARNING util.py:136 -- The `process_trial` operation took 0.6780698299407959 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | TERMINATED |       |     30 |          608.967 | 4853760 |  46.1876 |              47.6495 |              21.2577 |            102.474 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | TERMINATED |       |     30 |          608.967 | 4853760 |  46.1876 |              47.6495 |              21.2577 |            102.474 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 2387\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201013_114553-3qwfavbb/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201013_114553-3qwfavbb/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_121542-dcx4y6ut/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_121542-dcx4y6ut/logs/debug-internal.log\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 4473\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 261.82891\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 280.71717\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     time_step_min 3203\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 607\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602590160\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1150\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 636\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604233578\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1662\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1178.40168\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 47.64948\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 21.25773\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 46.18759\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 47275\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     time_step_min ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mrandom\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3qwfavbb\u001b[0m\n",
-      "2020-10-13 11:56:07,517 - wandb.wandb_agent - INFO - Cleaning up finished run: 3qwfavbb\n",
-      "2020-10-13 11:56:07,847 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-13 11:56:07,847 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
-      "2020-10-13 11:56:07,849 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python RandomGreedy.py --instance_path=/JSS/JSS/env/instances/ta52\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdaily-sweep-3\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/dcx4y6ut\u001b[0m\n",
+      "2020-11-01 12:26:27,483 - wandb.wandb_agent - INFO - Cleaning up finished run: dcx4y6ut\n",
+      "2020-11-01 12:26:27,816 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:26:27,816 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la14.txt\n",
+      "2020-11-01 12:26:27,818 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la14.txt\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:26:32,836 - wandb.wandb_agent - INFO - Running runs: ['fdb3wrbz']\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mrandom\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/1x8v92mc\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/av30c7rd\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201013_115608-av30c7rd\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mpretty-sweep-4\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/fdb3wrbz\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_122629-fdb3wrbz\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-13 11:56:12,862 - wandb.wandb_agent - INFO - Running runs: ['av30c7rd']\n"
+      "2020-11-01 12:26:33,451\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=34519)\u001b[0m 2020-11-01 12:26:36,168\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=34570)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34570)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34576)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34576)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34560)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34560)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34533)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34533)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34568)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34568)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34565)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34565)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34446)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34446)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34580)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34580)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34537)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34537)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34514)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34514)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34563)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34563)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34513)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34513)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34574)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34574)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34541)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34541)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34468)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34468)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34562)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34562)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34507)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34507)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34529)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34529)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34531)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34531)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34470)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34470)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34455)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34455)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34456)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34456)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34534)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34534)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34471)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34471)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34528)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34528)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34530)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34530)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34557)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34557)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34464)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34464)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34457)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34457)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34451)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34451)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34460)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34460)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34539)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34539)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34555)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34555)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34512)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34512)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34544)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34544)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34572)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34572)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34466)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34466)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34448)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34448)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34467)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34467)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34478)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34478)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34469)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34469)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34449)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34449)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34453)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34453)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34445)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34445)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34462)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34462)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34564)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34564)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34461)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34461)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34452)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34452)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34550)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34550)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34552)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34552)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34454)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34454)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34525)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34525)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34518)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34518)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34472)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34472)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34473)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34473)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34447)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34447)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34521)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34521)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34545)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34545)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34474)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34474)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34465)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34465)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34546)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34546)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34444)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34444)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34450)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34450)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34458)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34458)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34504)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34504)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34522)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34522)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34511)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34511)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34532)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34532)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34510)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34510)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34523)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34523)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1454.2822384428223\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-27-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.8627760252366\n",
+      "  episode_reward_max: 43.628865979381466\n",
+      "  episode_reward_mean: 35.1516797294221\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1268\n",
+      "  episodes_total: 1268\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1449244519074757\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007437704674278696\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00946940048985804\n",
+      "        total_loss: 55.00797367095947\n",
+      "        vf_explained_var: 0.7487528324127197\n",
+      "        vf_loss: 55.01652844746908\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 33.32592592592592\n",
+      "    gpu_util_percent0: 0.37481481481481477\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4333333333333336\n",
+      "    vram_util_percent0: 0.08172381958869332\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.17352791633057102\n",
+      "    mean_env_wait_ms: 0.6811877523118316\n",
+      "    mean_inference_ms: 5.513942130136428\n",
+      "    mean_raw_obs_processing_ms: 0.46789447756981023\n",
+      "  time_since_restore: 22.46462392807007\n",
+      "  time_this_iter_s: 22.46462392807007\n",
+      "  time_total_s: 22.46462392807007\n",
+      "  timers:\n",
+      "    learn_throughput: 11371.952\n",
+      "    learn_time_ms: 14227.284\n",
+      "    sample_throughput: 19879.837\n",
+      "    sample_time_ms: 8138.497\n",
+      "    update_time_ms: 45.686\n",
+      "  timestamp: 1604233624\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      1 |          22.4646 | 161792 |  35.1517 |              43.6289 |              15.1237 |            116.863 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1429.8942416258938\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-27-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 115.70282317979198\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 36.47211286591811\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1424\n",
+      "  episodes_total: 2692\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1268550356229146\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008950442192144692\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011557365185581148\n",
+      "        total_loss: 11.271961530049643\n",
+      "        vf_explained_var: 0.8903374671936035\n",
+      "        vf_loss: 11.282292207082113\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.204166666666666\n",
+      "    gpu_util_percent0: 0.3720833333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5041666666666664\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16745964588212917\n",
+      "    mean_env_wait_ms: 0.6700706773938075\n",
+      "    mean_inference_ms: 5.2198211020760175\n",
+      "    mean_raw_obs_processing_ms: 0.44909095470061955\n",
+      "  time_since_restore: 43.08302044868469\n",
+      "  time_this_iter_s: 20.618396520614624\n",
+      "  time_total_s: 43.08302044868469\n",
+      "  timers:\n",
+      "    learn_throughput: 11459.566\n",
+      "    learn_time_ms: 14118.51\n",
+      "    sample_throughput: 22090.571\n",
+      "    sample_time_ms: 7324.03\n",
+      "    update_time_ms: 43.623\n",
+      "  timestamp: 1604233644\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      2 |           43.083 | 323584 |  36.4721 |              43.6289 |              15.1237 |            115.703 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1407.1911728846624\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-27-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.6612669245648\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 37.6345041775509\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1444\n",
+      "  episodes_total: 4136\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1022506852944691\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010415543181200823\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012739738527064523\n",
+      "        total_loss: 7.215804258982341\n",
+      "        vf_explained_var: 0.9305369257926941\n",
+      "        vf_loss: 7.227012077967326\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.087500000000002\n",
+      "    gpu_util_percent0: 0.37166666666666665\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5083333333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16367371839915396\n",
+      "    mean_env_wait_ms: 0.6634994267663006\n",
+      "    mean_inference_ms: 5.010201052450705\n",
+      "    mean_raw_obs_processing_ms: 0.43679686634070053\n",
+      "  time_since_restore: 63.11474633216858\n",
+      "  time_this_iter_s: 20.031725883483887\n",
+      "  time_total_s: 63.11474633216858\n",
+      "  timers:\n",
+      "    learn_throughput: 11492.021\n",
+      "    learn_time_ms: 14078.638\n",
+      "    sample_throughput: 23568.631\n",
+      "    sample_time_ms: 6864.718\n",
+      "    update_time_ms: 36.686\n",
+      "  timestamp: 1604233664\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      3 |          63.1147 | 485376 |  37.6345 |              43.6289 |              15.1237 |            114.661 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1387.3099946552645\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-28-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.46689093484419\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 38.66655836570194\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1512\n",
+      "  episodes_total: 5648\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0769410530726116\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0091951551536719\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014317200764101775\n",
+      "        total_loss: 4.537634372711182\n",
+      "        vf_explained_var: 0.9580438733100891\n",
+      "        vf_loss: 4.550650993982951\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.513043478260872\n",
+      "    gpu_util_percent0: 0.4282608695652175\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5173913043478255\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16103675868646175\n",
+      "    mean_env_wait_ms: 0.6593645086787177\n",
+      "    mean_inference_ms: 4.8577089246646405\n",
+      "    mean_raw_obs_processing_ms: 0.42820753933909217\n",
+      "  time_since_restore: 82.97024512290955\n",
+      "  time_this_iter_s: 19.855498790740967\n",
+      "  time_total_s: 82.97024512290955\n",
+      "  timers:\n",
+      "    learn_throughput: 11507.373\n",
+      "    learn_time_ms: 14059.855\n",
+      "    sample_throughput: 24572.569\n",
+      "    sample_time_ms: 6584.253\n",
+      "    update_time_ms: 36.417\n",
+      "  timestamp: 1604233684\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      4 |          82.9702 | 647168 |  38.6666 |              43.6289 |              15.1237 |            113.467 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1372.565211247704\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-28-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.40185601799774\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 39.44358453260353\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1464\n",
+      "  episodes_total: 7112\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.044628421465556\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009637930120031038\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015056621322097877\n",
+      "        total_loss: 3.0646530191103616\n",
+      "        vf_explained_var: 0.9720616936683655\n",
+      "        vf_loss: 3.0783043106396994\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.678260869565225\n",
+      "    gpu_util_percent0: 0.44782608695652176\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508695652173913\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15917782673985395\n",
+      "    mean_env_wait_ms: 0.6566410931470792\n",
+      "    mean_inference_ms: 4.748845539400791\n",
+      "    mean_raw_obs_processing_ms: 0.4219900698653993\n",
+      "  time_since_restore: 102.53243446350098\n",
+      "  time_this_iter_s: 19.56218934059143\n",
+      "  time_total_s: 102.53243446350098\n",
+      "  timers:\n",
+      "    learn_throughput: 11519.656\n",
+      "    learn_time_ms: 14044.863\n",
+      "    sample_throughput: 25439.401\n",
+      "    sample_time_ms: 6359.898\n",
+      "    update_time_ms: 36.623\n",
+      "  timestamp: 1604233704\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      5 |          102.532 | 808960 |  39.4436 |              43.6289 |              15.1237 |            112.402 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1360.8171568057655\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-28-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.4935170178282\n",
+      "  episode_reward_max: 43.628865979381494\n",
+      "  episode_reward_mean: 40.051285019680485\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1526\n",
+      "  episodes_total: 8638\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.008226936062177\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008314594083155194\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011961210014609\n",
+      "        total_loss: 2.176027218500773\n",
+      "        vf_explained_var: 0.9811684489250183\n",
+      "        vf_loss: 2.1868296464284263\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.013043478260872\n",
+      "    gpu_util_percent0: 0.3617391304347826\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.526086956521739\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1576901249282025\n",
+      "    mean_env_wait_ms: 0.6545619856913595\n",
+      "    mean_inference_ms: 4.661154625197678\n",
+      "    mean_raw_obs_processing_ms: 0.41690510698628513\n",
+      "  time_since_restore: 122.15152668952942\n",
+      "  time_this_iter_s: 19.619092226028442\n",
+      "  time_total_s: 122.15152668952942\n",
+      "  timers:\n",
+      "    learn_throughput: 11527.252\n",
+      "    learn_time_ms: 14035.609\n",
+      "    sample_throughput: 26007.896\n",
+      "    sample_time_ms: 6220.88\n",
+      "    update_time_ms: 34.802\n",
+      "  timestamp: 1604233724\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      6 |          122.152 | 970752 |  40.0513 |              43.6289 |              15.1237 |            111.494 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1351.9801127931137\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-29-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.74748570301716\n",
+      "  episode_reward_max: 43.628865979381494\n",
+      "  episode_reward_mean: 40.50685320002359\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1504\n",
+      "  episodes_total: 10142\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9799897919098536\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007559017394669354\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013409938372205943\n",
+      "        total_loss: 1.644661049048106\n",
+      "        vf_explained_var: 0.9860979914665222\n",
+      "        vf_loss: 1.657049189011256\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.617391304347827\n",
+      "    gpu_util_percent0: 0.4239130434782608\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5217391304347827\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15650830518376826\n",
+      "    mean_env_wait_ms: 0.6530945053208776\n",
+      "    mean_inference_ms: 4.592386951937845\n",
+      "    mean_raw_obs_processing_ms: 0.41293979722789786\n",
+      "  time_since_restore: 141.83420944213867\n",
+      "  time_this_iter_s: 19.682682752609253\n",
+      "  time_total_s: 141.83420944213867\n",
+      "  timers:\n",
+      "    learn_throughput: 11524.629\n",
+      "    learn_time_ms: 14038.804\n",
+      "    sample_throughput: 26444.386\n",
+      "    sample_time_ms: 6118.198\n",
+      "    update_time_ms: 34.8\n",
+      "  timestamp: 1604233744\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      7 |          141.834 | 1132544 |  40.5069 |              43.6289 |              15.1237 |            110.747 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1344.8585277968427\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-29-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.01317252587461\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 40.877048782789124\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 11691\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9412155350049337\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007740705274045467\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012592456245329231\n",
+      "        total_loss: 1.2588910659154255\n",
+      "        vf_explained_var: 0.9897112846374512\n",
+      "        vf_loss: 1.2704059382279713\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.641666666666662\n",
+      "    gpu_util_percent0: 0.36375\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15552725421090569\n",
+      "    mean_env_wait_ms: 0.6520038178299323\n",
+      "    mean_inference_ms: 4.534700600650504\n",
+      "    mean_raw_obs_processing_ms: 0.4096249844377919\n",
+      "  time_since_restore: 161.7805416584015\n",
+      "  time_this_iter_s: 19.946332216262817\n",
+      "  time_total_s: 161.7805416584015\n",
+      "  timers:\n",
+      "    learn_throughput: 11521.5\n",
+      "    learn_time_ms: 14042.616\n",
+      "    sample_throughput: 26651.946\n",
+      "    sample_time_ms: 6070.551\n",
+      "    update_time_ms: 35.676\n",
+      "  timestamp: 1604233764\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      8 |          161.781 | 1294336 |   40.877 |              43.6289 |              15.1237 |            110.013 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1339.0663941252176\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-29-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.368015705225\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.17822892762955\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1553\n",
+      "  episodes_total: 13244\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9079152892033259\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0072981525445356965\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010131318272518305\n",
+      "        total_loss: 0.949362243215243\n",
+      "        vf_explained_var: 0.9923892021179199\n",
+      "        vf_loss: 0.9584879080454508\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.282608695652176\n",
+      "    gpu_util_percent0: 0.4395652173913045\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15471153080234437\n",
+      "    mean_env_wait_ms: 0.6512233236906179\n",
+      "    mean_inference_ms: 4.486726941601045\n",
+      "    mean_raw_obs_processing_ms: 0.40688607613554295\n",
+      "  time_since_restore: 181.48901557922363\n",
+      "  time_this_iter_s: 19.708473920822144\n",
+      "  time_total_s: 181.48901557922363\n",
+      "  timers:\n",
+      "    learn_throughput: 11526.677\n",
+      "    learn_time_ms: 14036.31\n",
+      "    sample_throughput: 26886.791\n",
+      "    sample_time_ms: 6017.527\n",
+      "    update_time_ms: 34.242\n",
+      "  timestamp: 1604233784\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      9 |          181.489 | 1456128 |  41.1782 |              43.6289 |              15.1237 |            109.368 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1334.3752454465434\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-30-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.81228046473926\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.422618434137334\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 14804\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.869762510061264\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0075428458318735165\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009666072980811199\n",
+      "        total_loss: 0.7397742619117101\n",
+      "        vf_explained_var: 0.994184672832489\n",
+      "        vf_loss: 0.7483666588862737\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.833333333333332\n",
+      "    gpu_util_percent0: 0.31916666666666665\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15401087755433693\n",
+      "    mean_env_wait_ms: 0.6506167732676298\n",
+      "    mean_inference_ms: 4.4459608456017845\n",
+      "    mean_raw_obs_processing_ms: 0.4045366030538726\n",
+      "  time_since_restore: 201.30298805236816\n",
+      "  time_this_iter_s: 19.81397247314453\n",
+      "  time_total_s: 201.30298805236816\n",
+      "  timers:\n",
+      "    learn_throughput: 11523.296\n",
+      "    learn_time_ms: 14040.428\n",
+      "    sample_throughput: 27081.39\n",
+      "    sample_time_ms: 5974.287\n",
+      "    update_time_ms: 34.416\n",
+      "  timestamp: 1604233804\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     10 |          201.303 | 1617920 |  41.4226 |              43.6289 |              15.1237 |            108.812 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1330.5694061408346\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-30-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.33194716242662\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.6210186464785\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1548\n",
+      "  episodes_total: 16352\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8340491751829783\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006366107768068711\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009178327105473727\n",
+      "        total_loss: 0.6055479943752289\n",
+      "        vf_explained_var: 0.9953274130821228\n",
+      "        vf_loss: 0.6138701190551122\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.46666666666667\n",
+      "    gpu_util_percent0: 0.37000000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15341006651547073\n",
+      "    mean_env_wait_ms: 0.650181832154063\n",
+      "    mean_inference_ms: 4.4112331201416435\n",
+      "    mean_raw_obs_processing_ms: 0.40254424691393875\n",
+      "  time_since_restore: 221.31696248054504\n",
+      "  time_this_iter_s: 20.01397442817688\n",
+      "  time_total_s: 221.31696248054504\n",
+      "  timers:\n",
+      "    learn_throughput: 11519.218\n",
+      "    learn_time_ms: 14045.398\n",
+      "    sample_throughput: 28288.316\n",
+      "    sample_time_ms: 5719.393\n",
+      "    update_time_ms: 33.239\n",
+      "  timestamp: 1604233825\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     11 |          221.317 | 1779712 |   41.621 |              43.6289 |              15.1237 |            108.332 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1327.2690156599554\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-30-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.91024281328495\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.79185500832971\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1563\n",
+      "  episodes_total: 17915\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8071108410755793\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006752079119905829\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009787990158656612\n",
+      "        total_loss: 0.4518005351225535\n",
+      "        vf_explained_var: 0.9965425133705139\n",
+      "        vf_loss: 0.46064166476329166\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.460869565217386\n",
+      "    gpu_util_percent0: 0.4491304347826087\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15287929224510746\n",
+      "    mean_env_wait_ms: 0.649859182584871\n",
+      "    mean_inference_ms: 4.38067919169665\n",
+      "    mean_raw_obs_processing_ms: 0.40078994113897726\n",
+      "  time_since_restore: 240.91183829307556\n",
+      "  time_this_iter_s: 19.594875812530518\n",
+      "  time_total_s: 240.91183829307556\n",
+      "  timers:\n",
+      "    learn_throughput: 11522.834\n",
+      "    learn_time_ms: 14040.99\n",
+      "    sample_throughput: 28801.969\n",
+      "    sample_time_ms: 5617.394\n",
+      "    update_time_ms: 31.109\n",
+      "  timestamp: 1604233844\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     12 |          240.912 | 1941504 |  41.7919 |              43.6289 |              15.1237 |             107.91 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1324.5485464368408\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-31-05\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.57801746276323\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.93343711446106\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1555\n",
+      "  episodes_total: 19470\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7690616647402445\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0065094192589943605\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010228886812304458\n",
+      "        total_loss: 0.3978396902481715\n",
+      "        vf_explained_var: 0.9969910979270935\n",
+      "        vf_loss: 0.4071512247125308\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.712500000000002\n",
+      "    gpu_util_percent0: 0.40458333333333335\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15241252197920177\n",
+      "    mean_env_wait_ms: 0.6496173991986937\n",
+      "    mean_inference_ms: 4.353964505075953\n",
+      "    mean_raw_obs_processing_ms: 0.3992612917500714\n",
+      "  time_since_restore: 260.9479441642761\n",
+      "  time_this_iter_s: 20.03610587120056\n",
+      "  time_total_s: 260.9479441642761\n",
+      "  timers:\n",
+      "    learn_throughput: 11495.402\n",
+      "    learn_time_ms: 14074.497\n",
+      "    sample_throughput: 29007.895\n",
+      "    sample_time_ms: 5577.516\n",
+      "    update_time_ms: 31.578\n",
+      "  timestamp: 1604233865\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     13 |          260.948 | 2103296 |  41.9334 |              43.6289 |              15.1237 |            107.578 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1322.226\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-31-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.29351081530783\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.054489449346825\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1565\n",
+      "  episodes_total: 21035\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7336616019407908\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0064004862603421015\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008804643754653322\n",
+      "        total_loss: 0.3278699740767479\n",
+      "        vf_explained_var: 0.9975385069847107\n",
+      "        vf_loss: 0.33576134343942005\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.491666666666664\n",
+      "    gpu_util_percent0: 0.32416666666666666\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15199672808495696\n",
+      "    mean_env_wait_ms: 0.6494243284753675\n",
+      "    mean_inference_ms: 4.330132256006824\n",
+      "    mean_raw_obs_processing_ms: 0.39788879446265113\n",
+      "  time_since_restore: 280.836660861969\n",
+      "  time_this_iter_s: 19.88871669769287\n",
+      "  time_total_s: 280.836660861969\n",
+      "  timers:\n",
+      "    learn_throughput: 11490.563\n",
+      "    learn_time_ms: 14080.424\n",
+      "    sample_throughput: 29086.085\n",
+      "    sample_time_ms: 5562.523\n",
+      "    update_time_ms: 31.329\n",
+      "  timestamp: 1604233885\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     14 |          280.837 | 2265088 |  42.0545 |              43.6289 |              15.1237 |            107.294 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1320.1891843971632\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-31-45\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.05496791325514\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.16018734187611\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 22595\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7067601482073466\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006438710144720972\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010162829411759352\n",
+      "        total_loss: 0.2576701765259107\n",
+      "        vf_explained_var: 0.9980695843696594\n",
+      "        vf_loss: 0.26689864446719486\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.404347826086955\n",
+      "    gpu_util_percent0: 0.3060869565217391\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15162840674833306\n",
+      "    mean_env_wait_ms: 0.6492838913939692\n",
+      "    mean_inference_ms: 4.308869472451551\n",
+      "    mean_raw_obs_processing_ms: 0.3966675681414554\n",
+      "  time_since_restore: 300.50964164733887\n",
+      "  time_this_iter_s: 19.672980785369873\n",
+      "  time_total_s: 300.50964164733887\n",
+      "  timers:\n",
+      "    learn_throughput: 11490.394\n",
+      "    learn_time_ms: 14080.631\n",
+      "    sample_throughput: 29052.047\n",
+      "    sample_time_ms: 5569.04\n",
+      "    update_time_ms: 29.544\n",
+      "  timestamp: 1604233905\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     15 |           300.51 | 2426880 |  42.1602 |              43.6289 |              15.1237 |            107.055 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1318.4346780546457\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-32-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.84805829262234\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.2515568060273\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1559\n",
+      "  episodes_total: 24154\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6743296881516775\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006636352161876857\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00975274900944593\n",
+      "        total_loss: 0.23658680294950804\n",
+      "        vf_explained_var: 0.9982344508171082\n",
+      "        vf_loss: 0.2453494481742382\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.991666666666664\n",
+      "    gpu_util_percent0: 0.33416666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15129670825904046\n",
+      "    mean_env_wait_ms: 0.6491675546769002\n",
+      "    mean_inference_ms: 4.289756257599939\n",
+      "    mean_raw_obs_processing_ms: 0.39556396298388297\n",
+      "  time_since_restore: 320.2244436740875\n",
+      "  time_this_iter_s: 19.714802026748657\n",
+      "  time_total_s: 320.2244436740875\n",
+      "  timers:\n",
+      "    learn_throughput: 11483.06\n",
+      "    learn_time_ms: 14089.624\n",
+      "    sample_throughput: 29083.807\n",
+      "    sample_time_ms: 5562.958\n",
+      "    update_time_ms: 30.273\n",
+      "  timestamp: 1604233926\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     16 |          320.224 | 2588672 |  42.2516 |              43.6289 |              15.1237 |            106.848 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1316.8612322791712\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-32-26\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.6750029170394\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.333070966857214\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1557\n",
+      "  episodes_total: 25711\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6487419108549753\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006434203319561978\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010461925092386082\n",
+      "        total_loss: 0.18015940859913826\n",
+      "        vf_explained_var: 0.9986326694488525\n",
+      "        vf_loss: 0.1896588665743669\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.604347826086954\n",
+      "    gpu_util_percent0: 0.4843478260869565\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15099532910883745\n",
+      "    mean_env_wait_ms: 0.6490596721671469\n",
+      "    mean_inference_ms: 4.272450859355698\n",
+      "    mean_raw_obs_processing_ms: 0.3945623850682107\n",
+      "  time_since_restore: 339.8860158920288\n",
+      "  time_this_iter_s: 19.661572217941284\n",
+      "  time_total_s: 339.8860158920288\n",
+      "  timers:\n",
+      "    learn_throughput: 11488.521\n",
+      "    learn_time_ms: 14082.927\n",
+      "    sample_throughput: 29093.385\n",
+      "    sample_time_ms: 5561.127\n",
+      "    update_time_ms: 30.118\n",
+      "  timestamp: 1604233946\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     17 |          339.886 | 2750464 |  42.3331 |              43.6289 |              15.1237 |            106.675 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1315.4772084481176\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-32-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.53646368305209\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.40514405004122\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 27260\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6147788117329279\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006190092225248615\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00844319449000371\n",
+      "        total_loss: 0.15160012369354567\n",
+      "        vf_explained_var: 0.9988699555397034\n",
+      "        vf_loss: 0.15911269187927246\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.108333333333334\n",
+      "    gpu_util_percent0: 0.40958333333333335\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15072186700405005\n",
+      "    mean_env_wait_ms: 0.6489589654205459\n",
+      "    mean_inference_ms: 4.256776083733925\n",
+      "    mean_raw_obs_processing_ms: 0.3936520268695803\n",
+      "  time_since_restore: 359.4751284122467\n",
+      "  time_this_iter_s: 19.589112520217896\n",
+      "  time_total_s: 359.4751284122467\n",
+      "  timers:\n",
+      "    learn_throughput: 11502.311\n",
+      "    learn_time_ms: 14066.043\n",
+      "    sample_throughput: 29213.386\n",
+      "    sample_time_ms: 5538.283\n",
+      "    update_time_ms: 28.725\n",
+      "  timestamp: 1604233966\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     18 |          359.475 | 2912256 |  42.4051 |              43.6289 |              15.1237 |            106.536 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1314.2216509171762\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-33-07\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.39508657482911\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.47027859269532\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1559\n",
+      "  episodes_total: 28819\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5793089667956034\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005601404506402711\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009277280846921107\n",
+      "        total_loss: 0.12121031371255715\n",
+      "        vf_explained_var: 0.9990783333778381\n",
+      "        vf_loss: 0.1296569655338923\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.066666666666663\n",
+      "    gpu_util_percent0: 0.3979166666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1504690836889304\n",
+      "    mean_env_wait_ms: 0.6488696992500765\n",
+      "    mean_inference_ms: 4.242361495701079\n",
+      "    mean_raw_obs_processing_ms: 0.39280933914753613\n",
+      "  time_since_restore: 379.6264307498932\n",
+      "  time_this_iter_s: 20.151302337646484\n",
+      "  time_total_s: 379.6264307498932\n",
+      "  timers:\n",
+      "    learn_throughput: 11477.051\n",
+      "    learn_time_ms: 14097.001\n",
+      "    sample_throughput: 29213.738\n",
+      "    sample_time_ms: 5538.216\n",
+      "    update_time_ms: 30.107\n",
+      "  timestamp: 1604233987\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     19 |          379.626 | 3074048 |  42.4703 |              43.6289 |              15.1237 |            106.395 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1313.0996867271228\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-33-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.30233860342555\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.528634054575335\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1541\n",
+      "  episodes_total: 30360\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5525011867284775\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005483048929211994\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009698755030209819\n",
+      "        total_loss: 0.09727698999146621\n",
+      "        vf_explained_var: 0.9992494583129883\n",
+      "        vf_loss: 0.10615538681546847\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.075\n",
+      "    gpu_util_percent0: 0.43416666666666665\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15023976063883285\n",
+      "    mean_env_wait_ms: 0.6487841053204015\n",
+      "    mean_inference_ms: 4.22926206402729\n",
+      "    mean_raw_obs_processing_ms: 0.3920470315060969\n",
+      "  time_since_restore: 399.4815435409546\n",
+      "  time_this_iter_s: 19.8551127910614\n",
+      "  time_total_s: 399.4815435409546\n",
+      "  timers:\n",
+      "    learn_throughput: 11477.093\n",
+      "    learn_time_ms: 14096.949\n",
+      "    sample_throughput: 29223.589\n",
+      "    sample_time_ms: 5536.349\n",
+      "    update_time_ms: 30.052\n",
+      "  timestamp: 1604234007\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     20 |          399.482 | 3235840 |  42.5286 |              43.6289 |              15.1237 |            106.302 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1312.0721969578171\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-33-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.19890350877193\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.58196716016847\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 31920\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5238876193761826\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005134576039078335\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009323944701463915\n",
+      "        total_loss: 0.0834660033384959\n",
+      "        vf_explained_var: 0.9993599057197571\n",
+      "        vf_loss: 0.09202497576673825\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.617391304347823\n",
+      "    gpu_util_percent0: 0.4456521739130434\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15002456451472287\n",
+      "    mean_env_wait_ms: 0.6487047149986278\n",
+      "    mean_inference_ms: 4.2170315233202755\n",
+      "    mean_raw_obs_processing_ms: 0.3913318433017469\n",
+      "  time_since_restore: 419.1035006046295\n",
+      "  time_this_iter_s: 19.621957063674927\n",
+      "  time_total_s: 419.1035006046295\n",
+      "  timers:\n",
+      "    learn_throughput: 11505.071\n",
+      "    learn_time_ms: 14062.668\n",
+      "    sample_throughput: 29282.333\n",
+      "    sample_time_ms: 5525.243\n",
+      "    update_time_ms: 30.159\n",
+      "  timestamp: 1604234027\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     21 |          419.104 | 3397632 |   42.582 |              43.6289 |              15.1237 |            106.199 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1311.1479420914095\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-34-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.12468999312756\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.630005430799805\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1547\n",
+      "  episodes_total: 33467\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.49701932817697525\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005340795614756644\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010354490535974037\n",
+      "        total_loss: 0.07194800892223914\n",
+      "        vf_explained_var: 0.9994434714317322\n",
+      "        vf_loss: 0.0814828487734\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.325\n",
+      "    gpu_util_percent0: 0.37458333333333327\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14982882739957487\n",
+      "    mean_env_wait_ms: 0.6486235678612109\n",
+      "    mean_inference_ms: 4.205782708358309\n",
+      "    mean_raw_obs_processing_ms: 0.39066600076646296\n",
+      "  time_since_restore: 438.92495369911194\n",
+      "  time_this_iter_s: 19.821453094482422\n",
+      "  time_total_s: 438.92495369911194\n",
+      "  timers:\n",
+      "    learn_throughput: 11494.245\n",
+      "    learn_time_ms: 14075.914\n",
+      "    sample_throughput: 29271.325\n",
+      "    sample_time_ms: 5527.321\n",
+      "    update_time_ms: 31.246\n",
+      "  timestamp: 1604234048\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     22 |          438.925 | 3559424 |    42.63 |              43.6289 |              15.1237 |            106.125 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1310.3136940853449\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-34-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.08285951027172\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.67351320494282\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1532\n",
+      "  episodes_total: 34999\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4672253554066022\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005037993270282944\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00685786875934961\n",
+      "        total_loss: 0.06014314107596874\n",
+      "        vf_explained_var: 0.9995446801185608\n",
+      "        vf_loss: 0.06622702504197757\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.15416666666667\n",
+      "    gpu_util_percent0: 0.3633333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1496488629333257\n",
+      "    mean_env_wait_ms: 0.6485461766268289\n",
+      "    mean_inference_ms: 4.195418444138528\n",
+      "    mean_raw_obs_processing_ms: 0.3900530056382457\n",
+      "  time_since_restore: 458.79926347732544\n",
+      "  time_this_iter_s: 19.8743097782135\n",
+      "  time_total_s: 458.79926347732544\n",
+      "  timers:\n",
+      "    learn_throughput: 11517.323\n",
+      "    learn_time_ms: 14047.709\n",
+      "    sample_throughput: 29258.763\n",
+      "    sample_time_ms: 5529.694\n",
+      "    update_time_ms: 32.041\n",
+      "  timestamp: 1604234068\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     23 |          458.799 | 3721216 |  42.6735 |              43.6289 |              15.1237 |            106.083 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1309.5558966207143\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-34-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.0737637588303\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.71301353738489\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1523\n",
+      "  episodes_total: 36522\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4321850041548411\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0057120353837187094\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009051567967010973\n",
+      "        total_loss: 0.05148738451922933\n",
+      "        vf_explained_var: 0.9995923042297363\n",
+      "        vf_loss: 0.059612637696166836\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.6125\n",
+      "    gpu_util_percent0: 0.35374999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14948084784143242\n",
+      "    mean_env_wait_ms: 0.6484509328204054\n",
+      "    mean_inference_ms: 4.185812792415693\n",
+      "    mean_raw_obs_processing_ms: 0.38947414275749065\n",
+      "  time_since_restore: 478.84203243255615\n",
+      "  time_this_iter_s: 20.042768955230713\n",
+      "  time_total_s: 478.84203243255615\n",
+      "  timers:\n",
+      "    learn_throughput: 11501.58\n",
+      "    learn_time_ms: 14066.937\n",
+      "    sample_throughput: 29276.676\n",
+      "    sample_time_ms: 5526.31\n",
+      "    update_time_ms: 31.839\n",
+      "  timestamp: 1604234089\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     24 |          478.842 | 3883008 |   42.713 |              43.6289 |              15.1237 |            106.074 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1308.854354630823\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-35-09\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.09423946178913\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.74960796999439\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1530\n",
+      "  episodes_total: 38052\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.40411561727523804\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004467884932334225\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007561299067068224\n",
+      "        total_loss: 0.0415184999195238\n",
+      "        vf_explained_var: 0.9996755123138428\n",
+      "        vf_loss: 0.0483882799744606\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.00833333333333\n",
+      "    gpu_util_percent0: 0.3670833333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14932390485994398\n",
+      "    mean_env_wait_ms: 0.6483514849496743\n",
+      "    mean_inference_ms: 4.176778186793073\n",
+      "    mean_raw_obs_processing_ms: 0.38892542131807273\n",
+      "  time_since_restore: 498.6148178577423\n",
+      "  time_this_iter_s: 19.772785425186157\n",
+      "  time_total_s: 498.6148178577423\n",
+      "  timers:\n",
+      "    learn_throughput: 11493.615\n",
+      "    learn_time_ms: 14076.686\n",
+      "    sample_throughput: 29308.484\n",
+      "    sample_time_ms: 5520.313\n",
+      "    update_time_ms: 31.941\n",
+      "  timestamp: 1604234109\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:35:10,587\tWARNING util.py:136 -- The `process_trial` operation took 0.5158097743988037 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     25 |          498.615 | 4044800 |  42.7496 |              43.6289 |              15.1237 |            106.094 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1308.2223065826438\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-35-30\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.13998179427531\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.78251353698859\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1496\n",
+      "  episodes_total: 39548\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3710899030168851\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005478878777163724\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008370831223146524\n",
+      "        total_loss: 0.03866795807455977\n",
+      "        vf_explained_var: 0.9996917843818665\n",
+      "        vf_loss: 0.04667644730458657\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.104166666666668\n",
+      "    gpu_util_percent0: 0.3454166666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14918014489593562\n",
+      "    mean_env_wait_ms: 0.6482521101593612\n",
+      "    mean_inference_ms: 4.168509263007074\n",
+      "    mean_raw_obs_processing_ms: 0.38842351941405706\n",
+      "  time_since_restore: 518.4228372573853\n",
+      "  time_this_iter_s: 19.808019399642944\n",
+      "  time_total_s: 518.4228372573853\n",
+      "  timers:\n",
+      "    learn_throughput: 11494.237\n",
+      "    learn_time_ms: 14075.924\n",
+      "    sample_throughput: 29292.382\n",
+      "    sample_time_ms: 5523.347\n",
+      "    update_time_ms: 32.345\n",
+      "  timestamp: 1604234130\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:35:31,149\tWARNING util.py:136 -- The `process_trial` operation took 0.5663919448852539 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     26 |          518.423 | 4206592 |  42.7825 |              43.6289 |              15.1237 |             106.14 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1307.6298878595808\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-35-51\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.21381074168798\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.81325152203418\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1507\n",
+      "  episodes_total: 41055\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3422661249836286\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004864616707588236\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008692707876131559\n",
+      "        total_loss: 0.03158797137439251\n",
+      "        vf_explained_var: 0.9997386336326599\n",
+      "        vf_loss: 0.03996535111218691\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.462500000000002\n",
+      "    gpu_util_percent0: 0.33499999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14904403737255034\n",
+      "    mean_env_wait_ms: 0.6481460554960611\n",
+      "    mean_inference_ms: 4.160632746558721\n",
+      "    mean_raw_obs_processing_ms: 0.38794815762152746\n",
+      "  time_since_restore: 538.5130481719971\n",
+      "  time_this_iter_s: 20.090210914611816\n",
+      "  time_total_s: 538.5130481719971\n",
+      "  timers:\n",
+      "    learn_throughput: 11475.693\n",
+      "    learn_time_ms: 14098.67\n",
+      "    sample_throughput: 29224.222\n",
+      "    sample_time_ms: 5536.23\n",
+      "    update_time_ms: 32.82\n",
+      "  timestamp: 1604234151\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:35:52,001\tWARNING util.py:136 -- The `process_trial` operation took 0.5398478507995605 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     27 |          538.513 | 4368384 |  42.8133 |              43.6289 |              15.1237 |            106.214 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1307.0917562892712\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-36-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.31207674943566\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.841272069147415\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1473\n",
+      "  episodes_total: 42528\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.31406934062639874\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00531899471146365\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006233617905915405\n",
+      "        total_loss: 0.027707914200921852\n",
+      "        vf_explained_var: 0.9997760653495789\n",
+      "        vf_loss: 0.0338326171040535\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.541666666666668\n",
+      "    gpu_util_percent0: 0.38791666666666663\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14891911374014252\n",
+      "    mean_env_wait_ms: 0.6480333835817965\n",
+      "    mean_inference_ms: 4.153395707395419\n",
+      "    mean_raw_obs_processing_ms: 0.38750819763907707\n",
+      "  time_since_restore: 558.2239861488342\n",
+      "  time_this_iter_s: 19.710937976837158\n",
+      "  time_total_s: 558.2239861488342\n",
+      "  timers:\n",
+      "    learn_throughput: 11465.354\n",
+      "    learn_time_ms: 14111.382\n",
+      "    sample_throughput: 29254.98\n",
+      "    sample_time_ms: 5530.409\n",
+      "    update_time_ms: 31.925\n",
+      "  timestamp: 1604234171\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:36:12,490\tWARNING util.py:136 -- The `process_trial` operation took 0.5777196884155273 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     28 |          558.224 | 4530176 |  42.8413 |              43.6289 |              15.1237 |            106.312 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1306.5912378872663\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-36-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.44389390185694\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.86740122159219\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1469\n",
+      "  episodes_total: 43997\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2867726534605026\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005043890094384551\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007655571622308344\n",
+      "        total_loss: 0.01982968676990519\n",
+      "        vf_explained_var: 0.999823808670044\n",
+      "        vf_loss: 0.027376449356476467\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.208333333333332\n",
+      "    gpu_util_percent0: 0.3120833333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.148801680479015\n",
+      "    mean_env_wait_ms: 0.6479110446105578\n",
+      "    mean_inference_ms: 4.146556745190422\n",
+      "    mean_raw_obs_processing_ms: 0.3870915915108458\n",
+      "  time_since_restore: 578.142192363739\n",
+      "  time_this_iter_s: 19.918206214904785\n",
+      "  time_total_s: 578.142192363739\n",
+      "  timers:\n",
+      "    learn_throughput: 11477.643\n",
+      "    learn_time_ms: 14096.274\n",
+      "    sample_throughput: 29295.707\n",
+      "    sample_time_ms: 5522.72\n",
+      "    update_time_ms: 31.506\n",
+      "  timestamp: 1604234192\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:36:33,192\tWARNING util.py:136 -- The `process_trial` operation took 0.567206621170044 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     29 |          578.142 | 4691968 |  42.8674 |              43.6289 |              15.1237 |            106.444 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1306.1297474625158\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-36-52\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.60159721916663\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.89145908926165\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1457\n",
+      "  episodes_total: 45454\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.25657347589731216\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004977851562822859\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0074265640663118875\n",
+      "        total_loss: 0.020246487848150235\n",
+      "        vf_explained_var: 0.999823272228241\n",
+      "        vf_loss: 0.02755244541913271\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.96666666666667\n",
+      "    gpu_util_percent0: 0.34375\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1486911615858267\n",
+      "    mean_env_wait_ms: 0.647780786364401\n",
+      "    mean_inference_ms: 4.140117442125262\n",
+      "    mean_raw_obs_processing_ms: 0.3867002477159633\n",
+      "  time_since_restore: 597.9215953350067\n",
+      "  time_this_iter_s: 19.7794029712677\n",
+      "  time_total_s: 597.9215953350067\n",
+      "  timers:\n",
+      "    learn_throughput: 11482.292\n",
+      "    learn_time_ms: 14090.567\n",
+      "    sample_throughput: 29325.187\n",
+      "    sample_time_ms: 5517.169\n",
+      "    update_time_ms: 29.907\n",
+      "  timestamp: 1604234212\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:36:53,780\tWARNING util.py:136 -- The `process_trial` operation took 0.5981490612030029 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     30 |          597.922 | 4853760 |  42.8915 |              43.6289 |              15.1237 |            106.602 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1305.6988838856996\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-37-13\n",
+      "  done: true\n",
+      "  episode_len_mean: 106.77159124834733\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.91394806184951\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1440\n",
+      "  episodes_total: 46894\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.22576802472273508\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0045362276723608375\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005217552456694345\n",
+      "        total_loss: 0.01427166493764768\n",
+      "        vf_explained_var: 0.9998777508735657\n",
+      "        vf_loss: 0.01948869600892067\n",
+      "    num_steps_sampled: 5015552\n",
+      "    num_steps_trained: 5015552\n",
+      "  iterations_since_restore: 31\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.72083333333333\n",
+      "    gpu_util_percent0: 0.36166666666666664\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14858768250616303\n",
+      "    mean_env_wait_ms: 0.6476419244786176\n",
+      "    mean_inference_ms: 4.134089086382151\n",
+      "    mean_raw_obs_processing_ms: 0.3863330350642181\n",
+      "  time_since_restore: 617.738039970398\n",
+      "  time_this_iter_s: 19.816444635391235\n",
+      "  time_total_s: 617.738039970398\n",
+      "  timers:\n",
+      "    learn_throughput: 11472.012\n",
+      "    learn_time_ms: 14103.193\n",
+      "    sample_throughput: 29323.896\n",
+      "    sample_time_ms: 5517.411\n",
+      "    update_time_ms: 29.881\n",
+      "  timestamp: 1604234233\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 5015552\n",
+      "  training_iteration: 31\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:37:14,609\tWARNING util.py:136 -- The `process_trial` operation took 0.7420144081115723 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | TERMINATED |       |     31 |          617.738 | 5015552 |  42.9139 |              43.6289 |              15.1237 |            106.772 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1101 12:37:14.976943 34403 34403 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | TERMINATED |       |     31 |          617.738 | 5015552 |  42.9139 |              43.6289 |              15.1237 |            106.772 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34338\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_122629-fdb3wrbz/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_122629-fdb3wrbz/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1292\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 646\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604234235\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1845\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1305.69888\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 43.62887\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 15.12371\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 42.91395\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 46894\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 31\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mpretty-sweep-4\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/fdb3wrbz\u001b[0m\n",
+      "2020-11-01 12:37:24,612 - wandb.wandb_agent - INFO - Cleaning up finished run: fdb3wrbz\n",
+      "2020-11-01 12:37:24,941 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:37:24,941 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la15.txt\n",
+      "2020-11-01 12:37:24,943 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la15.txt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:37:29,961 - wandb.wandb_agent - INFO - Running runs: ['pq2fv3jo']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdifferent-sweep-5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pq2fv3jo\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_123726-pq2fv3jo\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\n",
+      "2020-11-01 12:37:30,609\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=67571)\u001b[0m 2020-11-01 12:37:33,413\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=67560)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67560)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67567)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67567)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67478)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67478)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67518)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67518)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67536)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67536)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67514)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67514)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67448)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67448)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67564)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67564)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67534)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67534)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67529)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67529)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67563)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67563)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67445)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67445)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67547)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67547)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67531)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67531)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67540)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67540)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67545)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67545)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67462)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67462)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67447)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67447)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67453)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67453)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67469)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67469)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67452)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67452)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67541)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67541)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67477)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67477)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67446)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67446)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67475)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67475)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67553)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67553)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67472)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67472)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67468)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67468)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67556)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67556)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67450)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67450)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67566)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67566)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67455)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67455)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67457)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67457)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67456)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67456)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67466)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67466)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67459)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67459)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67476)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67476)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67467)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67467)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67516)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67516)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67521)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67521)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67515)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67515)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67512)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67512)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67568)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67568)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67551)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67551)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67519)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67519)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67537)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67537)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67525)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67525)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67546)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67546)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67451)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67451)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67581)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67581)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67449)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67449)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67530)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67530)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67562)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67562)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67533)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67533)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67522)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67522)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67464)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67464)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67573)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67573)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67463)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67463)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67555)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67555)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67523)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67523)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67544)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67544)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67461)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67461)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67513)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67513)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67479)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67479)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67510)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67510)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67473)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67473)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67548)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67548)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67460)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67460)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67552)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67552)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67465)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67465)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1540.9259259259259\n",
+      "    time_step_min: 1302\n",
+      "  date: 2020-11-01_12-38-00\n",
+      "  done: false\n",
+      "  episode_len_mean: 118.22310126582279\n",
+      "  episode_reward_max: 44.242424242424256\n",
+      "  episode_reward_mean: 32.03126997826365\n",
+      "  episode_reward_min: 13.989898989898997\n",
+      "  episodes_this_iter: 1264\n",
+      "  episodes_total: 1264\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1447077592213948\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005619530449621379\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007155387702672063\n",
+      "        total_loss: 40.47618579864502\n",
+      "        vf_explained_var: 0.7891119122505188\n",
+      "        vf_loss: 40.48278999328613\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 30.218518518518522\n",
+      "    gpu_util_percent0: 0.36629629629629634\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.440740740740741\n",
+      "    vram_util_percent0: 0.08366130971903357\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16496450454226685\n",
+      "    mean_env_wait_ms: 0.6576280720479034\n",
+      "    mean_inference_ms: 4.788716243497749\n",
+      "    mean_raw_obs_processing_ms: 0.4281524023401697\n",
+      "  time_since_restore: 22.09221601486206\n",
+      "  time_this_iter_s: 22.09221601486206\n",
+      "  time_total_s: 22.09221601486206\n",
+      "  timers:\n",
+      "    learn_throughput: 10922.862\n",
+      "    learn_time_ms: 14812.235\n",
+      "    sample_throughput: 22479.319\n",
+      "    sample_time_ms: 7197.371\n",
+      "    update_time_ms: 46.828\n",
+      "  timestamp: 1604234280\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      1 |          22.0922 | 161792 |  32.0313 |              44.2424 |              13.9899 |            118.223 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1531.6367083807356\n",
+      "    time_step_min: 1302\n",
+      "  date: 2020-11-01_12-38-22\n",
+      "  done: false\n",
+      "  episode_len_mean: 117.54839910647803\n",
+      "  episode_reward_max: 44.242424242424256\n",
+      "  episode_reward_mean: 32.54738374060787\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1422\n",
+      "  episodes_total: 2686\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1255147556463878\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009991972551991543\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012213830874922374\n",
+      "        total_loss: 10.040241003036499\n",
+      "        vf_explained_var: 0.9008758068084717\n",
+      "        vf_loss: 10.051019430160522\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 29.98846153846154\n",
+      "    gpu_util_percent0: 0.4046153846153846\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.511538461538462\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16294808968714042\n",
+      "    mean_env_wait_ms: 0.6564847478917705\n",
+      "    mean_inference_ms: 4.782872969782969\n",
+      "    mean_raw_obs_processing_ms: 0.42698163136099937\n",
+      "  time_since_restore: 43.73459029197693\n",
+      "  time_this_iter_s: 21.642374277114868\n",
+      "  time_total_s: 43.73459029197693\n",
+      "  timers:\n",
+      "    learn_throughput: 10992.045\n",
+      "    learn_time_ms: 14719.008\n",
+      "    sample_throughput: 22905.576\n",
+      "    sample_time_ms: 7063.433\n",
+      "    update_time_ms: 38.41\n",
+      "  timestamp: 1604234302\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      2 |          43.7346 | 323584 |  32.5474 |              44.2424 |              13.0808 |            117.548 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1510.1358481262328\n",
+      "    time_step_min: 1302\n",
+      "  date: 2020-11-01_12-38-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.32862362971986\n",
+      "  episode_reward_max: 44.79797979797981\n",
+      "  episode_reward_mean: 33.70579116376925\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1419\n",
+      "  episodes_total: 4105\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1123215953509014\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00993400338726739\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013690461909087995\n",
+      "        total_loss: 6.506547371546428\n",
+      "        vf_explained_var: 0.9344742298126221\n",
+      "        vf_loss: 6.518807013829549\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.468000000000004\n",
+      "    gpu_util_percent0: 0.36560000000000004\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16101849961752382\n",
+      "    mean_env_wait_ms: 0.6546024350645249\n",
+      "    mean_inference_ms: 4.701779084784631\n",
+      "    mean_raw_obs_processing_ms: 0.4230887594071475\n",
+      "  time_since_restore: 64.32173490524292\n",
+      "  time_this_iter_s: 20.58714461326599\n",
+      "  time_total_s: 64.32173490524292\n",
+      "  timers:\n",
+      "    learn_throughput: 11037.784\n",
+      "    learn_time_ms: 14658.015\n",
+      "    sample_throughput: 24159.746\n",
+      "    sample_time_ms: 6696.759\n",
+      "    update_time_ms: 34.468\n",
+      "  timestamp: 1604234323\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      3 |          64.3217 | 485376 |  33.7058 |               44.798 |              13.0808 |            116.329 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1488.4381143065161\n",
+      "    time_step_min: 1270\n",
+      "  date: 2020-11-01_12-39-03\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.89247699801551\n",
+      "  episode_reward_max: 46.01010101010102\n",
+      "  episode_reward_mean: 34.80499565381399\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1438\n",
+      "  episodes_total: 5543\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0760109821955364\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010554853981981674\n",
+      "        model: {}\n",
+      "        policy_loss: -0.017120405255506437\n",
+      "        total_loss: 4.882782578468323\n",
+      "        vf_explained_var: 0.9524574279785156\n",
+      "        vf_loss: 4.898330052693685\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.83076923076923\n",
+      "    gpu_util_percent0: 0.33230769230769225\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5076923076923077\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15936923843872866\n",
+      "    mean_env_wait_ms: 0.6531312998927246\n",
+      "    mean_inference_ms: 4.622904338928759\n",
+      "    mean_raw_obs_processing_ms: 0.4189887193273442\n",
+      "  time_since_restore: 85.05826711654663\n",
+      "  time_this_iter_s: 20.73653221130371\n",
+      "  time_total_s: 85.05826711654663\n",
+      "  timers:\n",
+      "    learn_throughput: 11028.796\n",
+      "    learn_time_ms: 14669.96\n",
+      "    sample_throughput: 24936.84\n",
+      "    sample_time_ms: 6488.071\n",
+      "    update_time_ms: 46.059\n",
+      "  timestamp: 1604234343\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      4 |          85.0583 | 647168 |   34.805 |              46.0101 |              13.0808 |            114.892 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1466.4215029231427\n",
+      "    time_step_min: 1237\n",
+      "  date: 2020-11-01_12-39-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.48583970546588\n",
+      "  episode_reward_max: 47.52525252525255\n",
+      "  episode_reward_mean: 35.910843066747915\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1519\n",
+      "  episodes_total: 7062\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0269921322663624\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010993095813319087\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013592622436893484\n",
+      "        total_loss: 3.9119317531585693\n",
+      "        vf_explained_var: 0.9633958339691162\n",
+      "        vf_loss: 3.923839290936788\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.444000000000006\n",
+      "    gpu_util_percent0: 0.41679999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1580018213167273\n",
+      "    mean_env_wait_ms: 0.6519685995559447\n",
+      "    mean_inference_ms: 4.555161635142564\n",
+      "    mean_raw_obs_processing_ms: 0.41520922328594023\n",
+      "  time_since_restore: 105.7582585811615\n",
+      "  time_this_iter_s: 20.699991464614868\n",
+      "  time_total_s: 105.7582585811615\n",
+      "  timers:\n",
+      "    learn_throughput: 11021.266\n",
+      "    learn_time_ms: 14679.983\n",
+      "    sample_throughput: 25435.818\n",
+      "    sample_time_ms: 6360.794\n",
+      "    update_time_ms: 44.668\n",
+      "  timestamp: 1604234364\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      5 |          105.758 | 808960 |  35.9108 |              47.5253 |              13.0808 |            113.486 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1447.9500235183443\n",
+      "    time_step_min: 1237\n",
+      "  date: 2020-11-01_12-39-45\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.33274874313106\n",
+      "  episode_reward_max: 47.52525252525255\n",
+      "  episode_reward_mean: 36.86168359616273\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1491\n",
+      "  episodes_total: 8553\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.987803190946579\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010113457528253397\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014161262234362463\n",
+      "        total_loss: 3.0733113487561545\n",
+      "        vf_explained_var: 0.9713076949119568\n",
+      "        vf_loss: 3.0859439174334207\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.396\n",
+      "    gpu_util_percent0: 0.3632000000000001\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5239999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15689234927636098\n",
+      "    mean_env_wait_ms: 0.651134098255352\n",
+      "    mean_inference_ms: 4.500464998774646\n",
+      "    mean_raw_obs_processing_ms: 0.4120524597642815\n",
+      "  time_since_restore: 126.29982709884644\n",
+      "  time_this_iter_s: 20.541568517684937\n",
+      "  time_total_s: 126.29982709884644\n",
+      "  timers:\n",
+      "    learn_throughput: 11029.447\n",
+      "    learn_time_ms: 14669.094\n",
+      "    sample_throughput: 25808.454\n",
+      "    sample_time_ms: 6268.954\n",
+      "    update_time_ms: 43.186\n",
+      "  timestamp: 1604234385\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      6 |            126.3 | 970752 |  36.8617 |              47.5253 |              13.0808 |            112.333 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1430.1320079522864\n",
+      "    time_step_min: 1228\n",
+      "  date: 2020-11-01_12-40-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.28944504896627\n",
+      "  episode_reward_max: 48.48484848484849\n",
+      "  episode_reward_mean: 37.7558351344087\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1556\n",
+      "  episodes_total: 10109\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9375320275624593\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008831425181900462\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014223781297914684\n",
+      "        total_loss: 2.650870760281881\n",
+      "        vf_explained_var: 0.9759369492530823\n",
+      "        vf_loss: 2.6637970407803855\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.449999999999996\n",
+      "    gpu_util_percent0: 0.35692307692307695\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15594457790714622\n",
+      "    mean_env_wait_ms: 0.6505920718367179\n",
+      "    mean_inference_ms: 4.453229425218937\n",
+      "    mean_raw_obs_processing_ms: 0.409256308610765\n",
+      "  time_since_restore: 146.91562390327454\n",
+      "  time_this_iter_s: 20.6157968044281\n",
+      "  time_total_s: 146.91562390327454\n",
+      "  timers:\n",
+      "    learn_throughput: 11035.377\n",
+      "    learn_time_ms: 14661.212\n",
+      "    sample_throughput: 26039.628\n",
+      "    sample_time_ms: 6213.299\n",
+      "    update_time_ms: 41.221\n",
+      "  timestamp: 1604234406\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      7 |          146.916 | 1132544 |  37.7558 |              48.4848 |              13.0808 |            111.289 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1413.9141553297743\n",
+      "    time_step_min: 1219\n",
+      "  date: 2020-11-01_12-40-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.37700420132042\n",
+      "  episode_reward_max: 49.040404040404056\n",
+      "  episode_reward_mean: 38.58040665594469\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1554\n",
+      "  episodes_total: 11663\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8849463810523351\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00801295922913899\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012614224765760204\n",
+      "        total_loss: 2.1787688732147217\n",
+      "        vf_explained_var: 0.9803922772407532\n",
+      "        vf_loss: 2.190222958723704\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.924000000000007\n",
+      "    gpu_util_percent0: 0.3896\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15514960562097774\n",
+      "    mean_env_wait_ms: 0.650196011864452\n",
+      "    mean_inference_ms: 4.41380605191362\n",
+      "    mean_raw_obs_processing_ms: 0.40683273492153127\n",
+      "  time_since_restore: 167.58297491073608\n",
+      "  time_this_iter_s: 20.667351007461548\n",
+      "  time_total_s: 167.58297491073608\n",
+      "  timers:\n",
+      "    learn_throughput: 11046.514\n",
+      "    learn_time_ms: 14646.43\n",
+      "    sample_throughput: 26162.052\n",
+      "    sample_time_ms: 6184.224\n",
+      "    update_time_ms: 41.682\n",
+      "  timestamp: 1604234427\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      8 |          167.583 | 1294336 |  38.5804 |              49.0404 |              13.0808 |            110.377 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1399.354544764219\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-40-48\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.57285519745801\n",
+      "  episode_reward_max: 49.04040404040408\n",
+      "  episode_reward_mean: 39.3178455763567\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1555\n",
+      "  episodes_total: 13218\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8404552837212881\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007818623019071916\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011729774332100837\n",
+      "        total_loss: 1.9283219973246257\n",
+      "        vf_explained_var: 0.9828620553016663\n",
+      "        vf_loss: 1.9389082888762157\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.368000000000002\n",
+      "    gpu_util_percent0: 0.39\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15447110974777709\n",
+      "    mean_env_wait_ms: 0.6499648656278564\n",
+      "    mean_inference_ms: 4.380306434888785\n",
+      "    mean_raw_obs_processing_ms: 0.4047426878747494\n",
+      "  time_since_restore: 188.20489048957825\n",
+      "  time_this_iter_s: 20.621915578842163\n",
+      "  time_total_s: 188.20489048957825\n",
+      "  timers:\n",
+      "    learn_throughput: 11046.003\n",
+      "    learn_time_ms: 14647.108\n",
+      "    sample_throughput: 26334.762\n",
+      "    sample_time_ms: 6143.667\n",
+      "    update_time_ms: 40.969\n",
+      "  timestamp: 1604234448\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      9 |          188.205 | 1456128 |  39.3178 |              49.0404 |              13.0808 |            109.573 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1385.9825049162541\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-41-09\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.85056772100567\n",
+      "  episode_reward_max: 49.04040404040408\n",
+      "  episode_reward_mean: 40.00051201389402\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1578\n",
+      "  episodes_total: 14796\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7908046692609787\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007631780773711701\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011734772803417096\n",
+      "        total_loss: 1.5385288000106812\n",
+      "        vf_explained_var: 0.9865396022796631\n",
+      "        vf_loss: 1.5491326252619426\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.732000000000006\n",
+      "    gpu_util_percent0: 0.38040000000000007\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15388031735599098\n",
+      "    mean_env_wait_ms: 0.6498212598888915\n",
+      "    mean_inference_ms: 4.351027781645246\n",
+      "    mean_raw_obs_processing_ms: 0.40287986554113797\n",
+      "  time_since_restore: 208.505108833313\n",
+      "  time_this_iter_s: 20.30021834373474\n",
+      "  time_total_s: 208.505108833313\n",
+      "  timers:\n",
+      "    learn_throughput: 11056.477\n",
+      "    learn_time_ms: 14633.233\n",
+      "    sample_throughput: 26549.982\n",
+      "    sample_time_ms: 6093.865\n",
+      "    update_time_ms: 40.654\n",
+      "  timestamp: 1604234469\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     10 |          208.505 | 1617920 |  40.0005 |              49.0404 |              13.0808 |            108.851 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1373.7871090163433\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-41-29\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.19760771390212\n",
+      "  episode_reward_max: 49.040404040404084\n",
+      "  episode_reward_mean: 40.61680826327476\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1590\n",
+      "  episodes_total: 16386\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7443548093239466\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007289290855017801\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011087999266843932\n",
+      "        total_loss: 1.2828177213668823\n",
+      "        vf_explained_var: 0.9888736605644226\n",
+      "        vf_loss: 1.2928200562795003\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.136\n",
+      "    gpu_util_percent0: 0.3856\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15335957704686504\n",
+      "    mean_env_wait_ms: 0.6497293652386255\n",
+      "    mean_inference_ms: 4.325424204249887\n",
+      "    mean_raw_obs_processing_ms: 0.4011955359649914\n",
+      "  time_since_restore: 229.01598072052002\n",
+      "  time_this_iter_s: 20.51087188720703\n",
+      "  time_total_s: 229.01598072052002\n",
+      "  timers:\n",
+      "    learn_throughput: 11068.877\n",
+      "    learn_time_ms: 14616.84\n",
+      "    sample_throughput: 27216.446\n",
+      "    sample_time_ms: 5944.641\n",
+      "    update_time_ms: 39.857\n",
+      "  timestamp: 1604234489\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     11 |          229.016 | 1779712 |  40.6168 |              49.0404 |              13.0808 |            108.198 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1362.7848496680983\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-41-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.6175456163774\n",
+      "  episode_reward_max: 49.040404040404084\n",
+      "  episode_reward_mean: 41.17096364175804\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1590\n",
+      "  episodes_total: 17976\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7057946672042211\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006505049881525338\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011637478950433433\n",
+      "        total_loss: 1.0556738674640656\n",
+      "        vf_explained_var: 0.9909140467643738\n",
+      "        vf_loss: 1.066363235314687\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.067999999999998\n",
+      "    gpu_util_percent0: 0.38120000000000004\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15290224314841672\n",
+      "    mean_env_wait_ms: 0.6497100863030586\n",
+      "    mean_inference_ms: 4.30291912913981\n",
+      "    mean_raw_obs_processing_ms: 0.3997009547743406\n",
+      "  time_since_restore: 249.53435850143433\n",
+      "  time_this_iter_s: 20.518377780914307\n",
+      "  time_total_s: 249.53435850143433\n",
+      "  timers:\n",
+      "    learn_throughput: 11067.812\n",
+      "    learn_time_ms: 14618.246\n",
+      "    sample_throughput: 27784.289\n",
+      "    sample_time_ms: 5823.147\n",
+      "    update_time_ms: 40.514\n",
+      "  timestamp: 1604234510\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     12 |          249.534 | 1941504 |   41.171 |              49.0404 |              13.0808 |            107.618 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1352.7341357234316\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-42-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.1025339736385\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 41.67515040050036\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 19574\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6686889827251434\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0063633088720962405\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01186193727577726\n",
+      "        total_loss: 0.8905991663535436\n",
+      "        vf_explained_var: 0.9923557639122009\n",
+      "        vf_loss: 0.9015227903922399\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.288461538461544\n",
+      "    gpu_util_percent0: 0.38153846153846155\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15249499620405588\n",
+      "    mean_env_wait_ms: 0.6497364450001253\n",
+      "    mean_inference_ms: 4.282874551579647\n",
+      "    mean_raw_obs_processing_ms: 0.39836613551654754\n",
+      "  time_since_restore: 270.1388850212097\n",
+      "  time_this_iter_s: 20.60452651977539\n",
+      "  time_total_s: 270.1388850212097\n",
+      "  timers:\n",
+      "    learn_throughput: 11056.406\n",
+      "    learn_time_ms: 14633.327\n",
+      "    sample_throughput: 27887.324\n",
+      "    sample_time_ms: 5801.632\n",
+      "    update_time_ms: 41.993\n",
+      "  timestamp: 1604234531\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     13 |          270.139 | 2103296 |  41.6752 |              49.0404 |              13.0808 |            107.103 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1343.4148870685165\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-42-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.65310846560847\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 42.142787951319704\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1594\n",
+      "  episodes_total: 21168\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6273181239763895\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006019947739938895\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009247757125801096\n",
+      "        total_loss: 0.7534371664126714\n",
+      "        vf_explained_var: 0.9935855865478516\n",
+      "        vf_loss: 0.7617945869763693\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.48\n",
+      "    gpu_util_percent0: 0.3504\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15213206388671544\n",
+      "    mean_env_wait_ms: 0.6497940000882954\n",
+      "    mean_inference_ms: 4.2649850452281735\n",
+      "    mean_raw_obs_processing_ms: 0.39716794855089166\n",
+      "  time_since_restore: 290.5424859523773\n",
+      "  time_this_iter_s: 20.403600931167603\n",
+      "  time_total_s: 290.5424859523773\n",
+      "  timers:\n",
+      "    learn_throughput: 11072.943\n",
+      "    learn_time_ms: 14611.472\n",
+      "    sample_throughput: 27934.424\n",
+      "    sample_time_ms: 5791.85\n",
+      "    update_time_ms: 35.766\n",
+      "  timestamp: 1604234552\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     14 |          290.542 | 2265088 |  42.1428 |              49.0404 |              13.0808 |            106.653 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1334.9958170049756\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-42-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.25092267135325\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 42.566322273703655\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1592\n",
+      "  episodes_total: 22760\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.593339666724205\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0052832565270364285\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007287261697153251\n",
+      "        total_loss: 0.6348467022180557\n",
+      "        vf_explained_var: 0.994635820388794\n",
+      "        vf_loss: 0.6413739621639252\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.588\n",
+      "    gpu_util_percent0: 0.3836\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1518110809879511\n",
+      "    mean_env_wait_ms: 0.6498897805634568\n",
+      "    mean_inference_ms: 4.248940110401404\n",
+      "    mean_raw_obs_processing_ms: 0.39609601756717205\n",
+      "  time_since_restore: 311.00591683387756\n",
+      "  time_this_iter_s: 20.463430881500244\n",
+      "  time_total_s: 311.00591683387756\n",
+      "  timers:\n",
+      "    learn_throughput: 11097.5\n",
+      "    learn_time_ms: 14579.139\n",
+      "    sample_throughput: 27995.833\n",
+      "    sample_time_ms: 5779.146\n",
+      "    update_time_ms: 35.119\n",
+      "  timestamp: 1604234573\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     15 |          311.006 | 2426880 |  42.5663 |              49.0404 |              13.0808 |            106.251 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1327.4121421520238\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-43-14\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.89524239563237\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 42.95161292328897\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 24361\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5610497693220774\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005239539352866511\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008563858728545407\n",
+      "        total_loss: 0.5433527330557505\n",
+      "        vf_explained_var: 0.9954302906990051\n",
+      "        vf_loss: 0.5511491994063059\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.983999999999995\n",
+      "    gpu_util_percent0: 0.37079999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15151777280002335\n",
+      "    mean_env_wait_ms: 0.6499960724887209\n",
+      "    mean_inference_ms: 4.234304826550604\n",
+      "    mean_raw_obs_processing_ms: 0.39511468708048586\n",
+      "  time_since_restore: 331.8462426662445\n",
+      "  time_this_iter_s: 20.840325832366943\n",
+      "  time_total_s: 331.8462426662445\n",
+      "  timers:\n",
+      "    learn_throughput: 11077.938\n",
+      "    learn_time_ms: 14604.884\n",
+      "    sample_throughput: 28012.835\n",
+      "    sample_time_ms: 5775.638\n",
+      "    update_time_ms: 35.504\n",
+      "  timestamp: 1604234594\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     16 |          331.846 | 2588672 |  42.9516 |              49.0404 |              13.0808 |            105.895 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1320.4339440694312\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-43-36\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.57168707168707\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 43.304979416090546\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1613\n",
+      "  episodes_total: 25974\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5246386776367823\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005194058952232202\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010037654642170915\n",
+      "        total_loss: 0.3729574630657832\n",
+      "        vf_explained_var: 0.9968838095664978\n",
+      "        vf_loss: 0.3822186241547267\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.15\n",
+      "    gpu_util_percent0: 0.34961538461538466\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1512500032596141\n",
+      "    mean_env_wait_ms: 0.6501069321395831\n",
+      "    mean_inference_ms: 4.2209558905247935\n",
+      "    mean_raw_obs_processing_ms: 0.3942088287210041\n",
+      "  time_since_restore: 352.6941442489624\n",
+      "  time_this_iter_s: 20.847901582717896\n",
+      "  time_total_s: 352.6941442489624\n",
+      "  timers:\n",
+      "    learn_throughput: 11060.738\n",
+      "    learn_time_ms: 14627.595\n",
+      "    sample_throughput: 28046.143\n",
+      "    sample_time_ms: 5768.779\n",
+      "    update_time_ms: 36.388\n",
+      "  timestamp: 1604234616\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     17 |          352.694 | 2750464 |   43.305 |              49.0404 |              13.0808 |            105.572 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1314.0839173535712\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-43-57\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.28088299260548\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 43.62569621105941\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1614\n",
+      "  episodes_total: 27588\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.49088098108768463\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004925240180455148\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007551613341396053\n",
+      "        total_loss: 0.27305928741892177\n",
+      "        vf_explained_var: 0.997745931148529\n",
+      "        vf_loss: 0.27987127751111984\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.076923076923077\n",
+      "    gpu_util_percent0: 0.35576923076923084\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5730769230769224\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1510024924486738\n",
+      "    mean_env_wait_ms: 0.6502222563745731\n",
+      "    mean_inference_ms: 4.208793894567712\n",
+      "    mean_raw_obs_processing_ms: 0.3933811392042326\n",
+      "  time_since_restore: 373.5547993183136\n",
+      "  time_this_iter_s: 20.860655069351196\n",
+      "  time_total_s: 373.5547993183136\n",
+      "  timers:\n",
+      "    learn_throughput: 11035.452\n",
+      "    learn_time_ms: 14661.112\n",
+      "    sample_throughput: 28141.143\n",
+      "    sample_time_ms: 5749.304\n",
+      "    update_time_ms: 34.956\n",
+      "  timestamp: 1604234637\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     18 |          373.555 | 2912256 |  43.6257 |              49.0404 |              13.0808 |            105.281 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1308.3422956891525\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-44-18\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.01201725554643\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 43.913729876137445\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1620\n",
+      "  episodes_total: 29208\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4603450372815132\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0052619769315545755\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007839118620419564\n",
+      "        total_loss: 0.24682058518131575\n",
+      "        vf_explained_var: 0.9979783892631531\n",
+      "        vf_loss: 0.25436367591222125\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.90384615384615\n",
+      "    gpu_util_percent0: 0.3811538461538462\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1507749922403882\n",
+      "    mean_env_wait_ms: 0.6503503182530888\n",
+      "    mean_inference_ms: 4.197625625739776\n",
+      "    mean_raw_obs_processing_ms: 0.3926215964880014\n",
+      "  time_since_restore: 394.43259143829346\n",
+      "  time_this_iter_s: 20.87779211997986\n",
+      "  time_total_s: 394.43259143829346\n",
+      "  timers:\n",
+      "    learn_throughput: 11025.644\n",
+      "    learn_time_ms: 14674.154\n",
+      "    sample_throughput: 28102.66\n",
+      "    sample_time_ms: 5757.177\n",
+      "    update_time_ms: 33.741\n",
+      "  timestamp: 1604234658\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     19 |          394.433 | 3074048 |  43.9137 |              49.0404 |              13.0808 |            105.012 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1303.1952154976273\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-44-40\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.77212396560117\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 44.17383145096922\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1607\n",
+      "  episodes_total: 30815\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.43477704375982285\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004907564221260448\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007642344086586188\n",
+      "        total_loss: 0.17235680421193442\n",
+      "        vf_explained_var: 0.998579740524292\n",
+      "        vf_loss: 0.17972578232487044\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.568\n",
+      "    gpu_util_percent0: 0.3516\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15056551159545464\n",
+      "    mean_env_wait_ms: 0.650477071010486\n",
+      "    mean_inference_ms: 4.187399168266206\n",
+      "    mean_raw_obs_processing_ms: 0.39192218046315624\n",
+      "  time_since_restore: 415.2149660587311\n",
+      "  time_this_iter_s: 20.782374620437622\n",
+      "  time_total_s: 415.2149660587311\n",
+      "  timers:\n",
+      "    learn_throughput: 11005.002\n",
+      "    learn_time_ms: 14701.678\n",
+      "    sample_throughput: 28031.542\n",
+      "    sample_time_ms: 5771.784\n",
+      "    update_time_ms: 33.384\n",
+      "  timestamp: 1604234680\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     20 |          415.215 | 3235840 |  44.1738 |              49.0404 |              13.0808 |            104.772 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1298.6048573988814\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-45-01\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.55760212267062\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 44.4073915135559\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 32412\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4088049481312434\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0050367383907238645\n",
+      "        model: {}\n",
+      "        policy_loss: -0.004726681110696518\n",
+      "        total_loss: 0.15046600687007108\n",
+      "        vf_explained_var: 0.9988059401512146\n",
+      "        vf_loss: 0.15514524901906648\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.25769230769231\n",
+      "    gpu_util_percent0: 0.3230769230769231\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15037307743519757\n",
+      "    mean_env_wait_ms: 0.6506021265347358\n",
+      "    mean_inference_ms: 4.177989463073186\n",
+      "    mean_raw_obs_processing_ms: 0.39127952344764305\n",
+      "  time_since_restore: 436.0554406642914\n",
+      "  time_this_iter_s: 20.840474605560303\n",
+      "  time_total_s: 436.0554406642914\n",
+      "  timers:\n",
+      "    learn_throughput: 10991.518\n",
+      "    learn_time_ms: 14719.713\n",
+      "    sample_throughput: 27990.599\n",
+      "    sample_time_ms: 5780.226\n",
+      "    update_time_ms: 33.786\n",
+      "  timestamp: 1604234701\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     21 |          436.055 | 3397632 |  44.4074 |              49.0404 |              13.0808 |            104.558 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1294.3254164459356\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-45-23\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.35706938607576\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 44.62349862987593\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1615\n",
+      "  episodes_total: 34027\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.38861273725827533\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004962532625844081\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006052409371477552\n",
+      "        total_loss: 0.10335199224452178\n",
+      "        vf_explained_var: 0.9991534352302551\n",
+      "        vf_loss: 0.1093505813429753\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.088461538461537\n",
+      "    gpu_util_percent0: 0.34846153846153843\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15019358290939233\n",
+      "    mean_env_wait_ms: 0.6507335363952385\n",
+      "    mean_inference_ms: 4.169147396856916\n",
+      "    mean_raw_obs_processing_ms: 0.39067463008215425\n",
+      "  time_since_restore: 456.7496886253357\n",
+      "  time_this_iter_s: 20.69424796104431\n",
+      "  time_total_s: 456.7496886253357\n",
+      "  timers:\n",
+      "    learn_throughput: 10986.132\n",
+      "    learn_time_ms: 14726.93\n",
+      "    sample_throughput: 28004.762\n",
+      "    sample_time_ms: 5777.303\n",
+      "    update_time_ms: 33.873\n",
+      "  timestamp: 1604234723\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     22 |           456.75 | 3559424 |  44.6235 |              49.0404 |              13.0808 |            104.357 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1290.3840622454425\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-45-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.17307152875175\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 44.82170512983978\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1623\n",
+      "  episodes_total: 35650\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.36651041358709335\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006440783229966958\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007153725775424391\n",
+      "        total_loss: 0.08216805756092072\n",
+      "        vf_explained_var: 0.999314546585083\n",
+      "        vf_loss: 0.0893440234164397\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.088\n",
+      "    gpu_util_percent0: 0.3868\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15002367096031743\n",
+      "    mean_env_wait_ms: 0.6508575565151\n",
+      "    mean_inference_ms: 4.160903003774551\n",
+      "    mean_raw_obs_processing_ms: 0.3901072062383884\n",
+      "  time_since_restore: 477.2431552410126\n",
+      "  time_this_iter_s: 20.49346661567688\n",
+      "  time_total_s: 477.2431552410126\n",
+      "  timers:\n",
+      "    learn_throughput: 11006.978\n",
+      "    learn_time_ms: 14699.039\n",
+      "    sample_throughput: 27941.378\n",
+      "    sample_time_ms: 5790.409\n",
+      "    update_time_ms: 31.7\n",
+      "  timestamp: 1604234744\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     23 |          477.243 | 3721216 |  44.8217 |              49.0404 |              13.0808 |            104.173 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1286.7964535196131\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-46-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.00566154176393\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.00310735680616\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 37269\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3446768522262573\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006010537773060302\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006810000515542924\n",
+      "        total_loss: 0.05681590953220924\n",
+      "        vf_explained_var: 0.9995128512382507\n",
+      "        vf_loss: 0.06364798328528802\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.616\n",
+      "    gpu_util_percent0: 0.42919999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1498672084151353\n",
+      "    mean_env_wait_ms: 0.6509884510617694\n",
+      "    mean_inference_ms: 4.153243452307446\n",
+      "    mean_raw_obs_processing_ms: 0.38958140467964614\n",
+      "  time_since_restore: 497.40847873687744\n",
+      "  time_this_iter_s: 20.165323495864868\n",
+      "  time_total_s: 497.40847873687744\n",
+      "  timers:\n",
+      "    learn_throughput: 11023.912\n",
+      "    learn_time_ms: 14676.46\n",
+      "    sample_throughput: 27996.068\n",
+      "    sample_time_ms: 5779.097\n",
+      "    update_time_ms: 33.775\n",
+      "  timestamp: 1604234764\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     24 |          497.408 | 3883008 |  45.0031 |              49.0404 |              13.0808 |            104.006 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1283.5285511912427\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-46-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.8526007099861\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.16817737492225\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 38874\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.32262827704350155\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005610594448323051\n",
+      "        model: {}\n",
+      "        policy_loss: -0.004409408691572025\n",
+      "        total_loss: 0.04963509986797968\n",
+      "        vf_explained_var: 0.9995853304862976\n",
+      "        vf_loss: 0.054065559059381485\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.457692307692305\n",
+      "    gpu_util_percent0: 0.4265384615384616\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14972028928263528\n",
+      "    mean_env_wait_ms: 0.6511154433665545\n",
+      "    mean_inference_ms: 4.146093777194914\n",
+      "    mean_raw_obs_processing_ms: 0.3890936155505342\n",
+      "  time_since_restore: 517.5921437740326\n",
+      "  time_this_iter_s: 20.18366503715515\n",
+      "  time_total_s: 517.5921437740326\n",
+      "  timers:\n",
+      "    learn_throughput: 11035.673\n",
+      "    learn_time_ms: 14660.819\n",
+      "    sample_throughput: 28000.79\n",
+      "    sample_time_ms: 5778.123\n",
+      "    update_time_ms: 32.664\n",
+      "  timestamp: 1604234785\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:46:26,652\tWARNING util.py:136 -- The `process_trial` operation took 0.5261285305023193 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     25 |          517.592 | 4044800 |  45.1682 |              49.0404 |              13.0808 |            103.853 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1280.5338148716173\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-46-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.71221741815936\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.319422763771136\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 40475\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2999122018615405\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0053110466881965595\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006303349079341085\n",
+      "        total_loss: 0.05139423534274101\n",
+      "        vf_explained_var: 0.9995618462562561\n",
+      "        vf_loss: 0.0577147655809919\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.96\n",
+      "    gpu_util_percent0: 0.4584\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14958343418475262\n",
+      "    mean_env_wait_ms: 0.6512359147663624\n",
+      "    mean_inference_ms: 4.139411227315708\n",
+      "    mean_raw_obs_processing_ms: 0.38863613088367416\n",
+      "  time_since_restore: 537.769278049469\n",
+      "  time_this_iter_s: 20.1771342754364\n",
+      "  time_total_s: 537.769278049469\n",
+      "  timers:\n",
+      "    learn_throughput: 11085.459\n",
+      "    learn_time_ms: 14594.975\n",
+      "    sample_throughput: 28023.358\n",
+      "    sample_time_ms: 5773.469\n",
+      "    update_time_ms: 30.886\n",
+      "  timestamp: 1604234806\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:46:47,593\tWARNING util.py:136 -- The `process_trial` operation took 0.5515177249908447 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     26 |          537.769 | 4206592 |  45.3194 |              49.0404 |              13.0808 |            103.712 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1277.717564514211\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-47-07\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.58062906827577\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.461481590264796\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 42094\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2697679474949837\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005566679639741778\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006809816346503794\n",
+      "        total_loss: 0.03190007215986649\n",
+      "        vf_explained_var: 0.9997119307518005\n",
+      "        vf_loss: 0.038705606323977314\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.436000000000003\n",
+      "    gpu_util_percent0: 0.3812\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14945344756304582\n",
+      "    mean_env_wait_ms: 0.6513545610993874\n",
+      "    mean_inference_ms: 4.133051412280412\n",
+      "    mean_raw_obs_processing_ms: 0.38819843216626215\n",
+      "  time_since_restore: 557.9500815868378\n",
+      "  time_this_iter_s: 20.180803537368774\n",
+      "  time_total_s: 557.9500815868378\n",
+      "  timers:\n",
+      "    learn_throughput: 11129.942\n",
+      "    learn_time_ms: 14536.644\n",
+      "    sample_throughput: 28097.666\n",
+      "    sample_time_ms: 5758.201\n",
+      "    update_time_ms: 30.627\n",
+      "  timestamp: 1604234827\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:47:08,513\tWARNING util.py:136 -- The `process_trial` operation took 0.5479977130889893 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     27 |           557.95 | 4368384 |  45.4615 |              49.0404 |              13.0808 |            103.581 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1275.0976458734085\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-47-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.45904339273052\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.59383551183082\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1623\n",
+      "  episodes_total: 43717\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.23974776516358057\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004747193811150889\n",
+      "        model: {}\n",
+      "        policy_loss: -0.004243802364120104\n",
+      "        total_loss: 0.02101877443298387\n",
+      "        vf_explained_var: 0.999813973903656\n",
+      "        vf_loss: 0.025263771259536345\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.936\n",
+      "    gpu_util_percent0: 0.364\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14933083667741634\n",
+      "    mean_env_wait_ms: 0.6514677609541502\n",
+      "    mean_inference_ms: 4.127067697966748\n",
+      "    mean_raw_obs_processing_ms: 0.3877881594254328\n",
+      "  time_since_restore: 578.1908588409424\n",
+      "  time_this_iter_s: 20.240777254104614\n",
+      "  time_total_s: 578.1908588409424\n",
+      "  timers:\n",
+      "    learn_throughput: 11182.422\n",
+      "    learn_time_ms: 14468.421\n",
+      "    sample_throughput: 28093.626\n",
+      "    sample_time_ms: 5759.029\n",
+      "    update_time_ms: 30.485\n",
+      "  timestamp: 1604234848\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:47:29,582\tWARNING util.py:136 -- The `process_trial` operation took 0.5904042720794678 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     28 |          578.191 | 4530176 |  45.5938 |              49.0404 |              13.0808 |            103.459 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1272.6863282026368\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-47-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.34723815406335\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.71580313859499\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1615\n",
+      "  episodes_total: 45332\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.012500000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.21396022414167723\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00464061457508554\n",
+      "        model: {}\n",
+      "        policy_loss: -0.003965421337246274\n",
+      "        total_loss: 0.02320340438745916\n",
+      "        vf_explained_var: 0.9998058676719666\n",
+      "        vf_loss: 0.027217798711111147\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.857692307692307\n",
+      "    gpu_util_percent0: 0.34076923076923077\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14921483484635445\n",
+      "    mean_env_wait_ms: 0.6515697684351597\n",
+      "    mean_inference_ms: 4.121446270442373\n",
+      "    mean_raw_obs_processing_ms: 0.38740127780397765\n",
+      "  time_since_restore: 598.5525875091553\n",
+      "  time_this_iter_s: 20.36172866821289\n",
+      "  time_total_s: 598.5525875091553\n",
+      "  timers:\n",
+      "    learn_throughput: 11221.151\n",
+      "    learn_time_ms: 14418.485\n",
+      "    sample_throughput: 28165.983\n",
+      "    sample_time_ms: 5744.234\n",
+      "    update_time_ms: 31.72\n",
+      "  timestamp: 1604234869\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:47:50,804\tWARNING util.py:136 -- The `process_trial` operation took 0.6144161224365234 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     29 |          598.553 | 4691968 |  45.7158 |              49.0404 |              13.0808 |            103.347 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1270.4485656393304\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-48-10\n",
+      "  done: true\n",
+      "  episode_len_mean: 103.24400221587761\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.82882130203902\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1602\n",
+      "  episodes_total: 46934\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.006250000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.19203581909338632\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004001018533017486\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0069229137285825955\n",
+      "        total_loss: 0.009018626738300858\n",
+      "        vf_explained_var: 0.9998963475227356\n",
+      "        vf_loss: 0.01601255312561989\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.076000000000004\n",
+      "    gpu_util_percent0: 0.4292\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14910530030356728\n",
+      "    mean_env_wait_ms: 0.6516595301622415\n",
+      "    mean_inference_ms: 4.116169102966147\n",
+      "    mean_raw_obs_processing_ms: 0.3870328506532899\n",
+      "  time_since_restore: 618.7089035511017\n",
+      "  time_this_iter_s: 20.15631604194641\n",
+      "  time_total_s: 618.7089035511017\n",
+      "  timers:\n",
+      "    learn_throughput: 11261.529\n",
+      "    learn_time_ms: 14366.788\n",
+      "    sample_throughput: 28251.677\n",
+      "    sample_time_ms: 5726.81\n",
+      "    update_time_ms: 31.9\n",
+      "  timestamp: 1604234890\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:48:11,852\tWARNING util.py:136 -- The `process_trial` operation took 0.6959054470062256 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | TERMINATED |       |     30 |          618.709 | 4853760 |  45.8288 |              49.0404 |              13.0808 |            103.244 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | TERMINATED |       |     30 |          618.709 | 4853760 |  45.8288 |              49.0404 |              13.0808 |            103.244 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 67339\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_123726-pq2fv3jo/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_123726-pq2fv3jo/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1207\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 646\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604234892\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1901\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1270.44857\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 49.0404\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 13.08081\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 45.82882\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 46934\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdifferent-sweep-5\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pq2fv3jo\u001b[0m\n",
+      "2020-11-01 12:48:21,592 - wandb.wandb_agent - INFO - Cleaning up finished run: pq2fv3jo\n",
+      "2020-11-01 12:48:21,916 - wandb.wandb_agent - INFO - Agent received command: exit\n",
+      "2020-11-01 12:48:21,916 - wandb.wandb_agent - INFO - Received exit command. Killing runs and quitting.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Terminating and syncing runs. Press ctrl-c to kill.\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent 1x8v92mc"
+    "!wandb agent 9xhkl8my"
    ]
   },
   {
diff --git a/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb b/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb
index c3d10c3..6d201e1 100644
--- a/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb
+++ b/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb
@@ -56,7 +56,7 @@
     "    print(\"I have detected {} CPUs here, so I'm going to create {} actors\".format(mp.cpu_count(), mp.cpu_count() - 1))\n",
     "    os.environ[\"WANDB_API_KEY\"] = '3487a01956bf67cc7882bca2a38f70c8c95f8463'\n",
     "    sweep_config = {\n",
-    "        'program': 'random_loop.py',\n",
+    "        'program': 'CP.py',\n",
     "        'method': 'grid',\n",
     "        'metric': {\n",
     "            'name': 'time_step_min',\n",
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta71', '/JSS/JSS/env/instances/ta72', '/JSS/JSS/env/instances/ta73', '/JSS/JSS/env/instances/ta74',\n",
+    "                           '/JSS/JSS/env/instances/ta75', '/JSS/JSS/env/instances/ta76', '/JSS/JSS/env/instances/ta77', '/JSS/JSS/env/instances/ta78',\n",
+    "                           '/JSS/JSS/env/instances/ta79', '/JSS/JSS/env/instances/ta80']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -81,8 +81,8 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: kitgghxj\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kitgghxj\n"
+      "Create sweep with ID: kkxvg8te\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\n"
      ]
     }
    ],
@@ -92,7 +92,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": null,
    "metadata": {},
    "outputs": [
     {
@@ -100,239 +100,102 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-13 12:32:48,579 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-13 12:32:48,906 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-13 12:32:48,906 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "2020-11-03 17:48:30,968 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-03 17:48:31,522 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-03 17:48:31,522 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
       "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-13 12:32:48,908 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-03 17:48:31,524 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta51\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdrawn-sweep-1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kitgghxj\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/7zjyogzl\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201013_123250-7zjyogzl\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/quk2usr5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201103_174832-quk2usr5\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-13 12:32:53,926 - wandb.wandb_agent - INFO - Running runs: ['7zjyogzl']\n",
-      "2020-10-13 12:32:54,468\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.5/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/558.4 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_3851e_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
+      "2020-11-03 17:48:36,541 - wandb.wandb_agent - INFO - Running runs: ['quk2usr5']\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 24629\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201103_174832-quk2usr5/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201103_174832-quk2usr5/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2762.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 603\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604426315\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/quk2usr5\u001b[0m\n",
+      "2020-11-03 17:58:41,416 - wandb.wandb_agent - INFO - Cleaning up finished run: quk2usr5\n",
+      "2020-11-03 17:58:41,795 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-03 17:58:41,795 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
+      "2020-11-03 17:58:41,799 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta52\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/l0rsmjin\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201103_175842-l0rsmjin\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-03 17:58:46,817 - wandb.wandb_agent - INFO - Running runs: ['l0rsmjin']\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 24731\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201103_175842-l0rsmjin/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201103_175842-l0rsmjin/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2799.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 603\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604426925\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/l0rsmjin\u001b[0m\n",
+      "2020-11-03 18:08:52,752 - wandb.wandb_agent - INFO - Cleaning up finished run: l0rsmjin\n",
+      "2020-11-03 18:08:53,460 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-03 18:08:53,460 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta53\n",
+      "2020-11-03 18:08:53,462 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta53\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/dy77i2y1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201103_180854-dy77i2y1\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m F1013 12:32:56.746781   308   308 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c66ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c784c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c63c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c65e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f299417d789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec11ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec12ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec1491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec3801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m F1013 12:32:56.731905   318   318 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d36ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d484c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d33c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d35e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d88a789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5ce1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5ce2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5ce491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5d0801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d4df7a8  ray::gcs::GlobalStateAccessor::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d450a2c  __pyx_pw_3ray_7_raylet_19GlobalStateAccessor_3connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9dcc98a  method_vectorcall_NOARGS\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d5cb08  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de76a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de8a20  method_vectorcall\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d5dde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de7baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de8643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d5dde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de76a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de8454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9e76bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9e76c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9ea8d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d71625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d71a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d728cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9eab829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914ebd8840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9e3bb33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m F1013 12:32:56.749399   329   329 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddef6ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddf084c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddef3c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddef5e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245dda6789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daea1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daea2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daea491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daec801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245d9fb7a8  ray::gcs::GlobalStateAccessor::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m F1013 12:32:56.749487   437   437 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f36026ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f360384c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f36023c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f36025e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f35b9789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32fd1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32fd2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32fd491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32ff801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f3280ed6  ray::CoreWorker::CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m F1013 12:32:56.749395   401   401 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f536ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f5484c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f533c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f535e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f0a789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c4e1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c4e2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c4e491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c50801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd1ed6  ray::CoreWorker::CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m F1013 12:32:56.749400   363   363 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549ba6ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549bb84c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549ba3c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549ba5e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f4254971789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b51ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b52ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b5491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b7801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f4254638ed6  ray::CoreWorker::CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993dd27a8  ray::gcs::GlobalStateAccessor::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993d43a2c  __pyx_pw_3ray_7_raylet_19GlobalStateAccessor_3connect()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c48b98a  method_vectorcall_NOARGS\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c41bb08  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a66a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a7a20  method_vectorcall\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c41cde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a6baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a7643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c41cde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a66a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a7454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c535bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c535c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c567d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c430625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c430a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4318cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c56a829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245d96ca2c  __pyx_pw_3ray_7_raylet_19GlobalStateAccessor_3connect()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f167698a  method_vectorcall_NOARGS\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1606b08  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f16916a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1692a20  method_vectorcall\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1607de6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1691baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1692643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1607de6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f16916a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1692454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1720bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1720c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f3284c14  ray::CoreWorkerProcess::CreateWorker()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f3285e82  ray::CoreWorkerProcess::CoreWorkerProcess()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd5c14  ray::CoreWorkerProcess::CreateWorker()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd6e82  ray::CoreWorkerProcess::CoreWorkerProcess()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425463cc14  ray::CoreWorkerProcess::CreateWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425463de82  ray::CoreWorkerProcess::CoreWorkerProcess()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29954cb840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4fab33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1752d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f161b625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f161ba0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f161c8cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1755829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245f0f4840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f16e5b33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f328684b  ray::CoreWorkerProcess::Initialize()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f31c4448  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f31c5ba5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd784b  ray::CoreWorkerProcess::Initialize()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253b15448  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253b16ba5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425463e84b  ray::CoreWorkerProcess::Initialize()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425457c448  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425457dba5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad7337d  _PyObject_MakeTpCall\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1cb37d  _PyObject_MakeTpCall\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d253d09  _PyEval_EvalFrameDefault\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d218baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d219643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d18ede6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2186a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d219454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2a7bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2a7c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2d9d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1a2625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1a2a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f801b37d  _PyObject_MakeTpCall\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80a3d09  _PyEval_EvalFrameDefault\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8068baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8069643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7fdede6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80686a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8069454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80f7bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80f7c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8129d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7ff2625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7ff2a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadfbd09  _PyEval_EvalFrameDefault\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc0baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc1643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad36de6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc06a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc1454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae4fbbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae4fc64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae81d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad4a625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad4aa0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad4b8cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1a38cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2dc829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f4907840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d26cb33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7ff38cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f812c829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1255258840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80bcb33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae84829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f4255cbf840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae14b33  (unknown)\n",
-      "2020-10-13 12:32:56,926\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffdf5a1a8201000000.\n",
-      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1013 12:32:56.915767   265   265 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n",
-      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1013 12:32:56.929625   265   265 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n",
-      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1013 12:32:56.932425   265   265 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n"
+      "2020-11-03 18:08:58,480 - wandb.wandb_agent - INFO - Running runs: ['dy77i2y1']\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent kitgghxj"
+    "!wandb agent kkxvg8te"
    ]
   },
   {
diff --git a/JSS/.ipynb_checkpoints/default_config-checkpoint.py b/JSS/.ipynb_checkpoints/default_config-checkpoint.py
index 46f4d10..4729210 100644
--- a/JSS/.ipynb_checkpoints/default_config-checkpoint.py
+++ b/JSS/.ipynb_checkpoints/default_config-checkpoint.py
@@ -6,7 +6,7 @@ default_config = {
     'env': 'jss_env',
     'seed': 0,
     'framework': 'torch',
-    'log_level': 'INFO',
+    'log_level': 'WARN',
     'num_gpus': 1,
     'instance_path': '/JSS/JSS/env/instances/ta51',
     'num_envs_per_worker': 2,
diff --git a/JSS/.ipynb_checkpoints/train-checkpoint.py b/JSS/.ipynb_checkpoints/train-checkpoint.py
index d4ac941..85598f6 100644
--- a/JSS/.ipynb_checkpoints/train-checkpoint.py
+++ b/JSS/.ipynb_checkpoints/train-checkpoint.py
@@ -50,7 +50,7 @@ def train_func():
     ray.init()
 
     stop = {
-        "time_total_s": 60 * 60,
+        "time_total_s": 10 * 60,
     }
 
     analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
diff --git a/JSS/MTWR.py b/JSS/MTWR.py
index 1b7b946..37944ef 100644
--- a/JSS/MTWR.py
+++ b/JSS/MTWR.py
@@ -21,11 +21,11 @@ def MTWR_worker(default_config):
         real_state = np.copy(state['real_obs'])
         legal_actions = state['action_mask'][:-1]
         reshaped = np.reshape(real_state, (env.jobs, 7))
-        remaining_time = reshaped[:, 3]
+        remaining_time = (reshaped[:, 3] * env.max_time_jobs) / env.jobs_length
         illegal_actions = np.invert(legal_actions)
-        mask = illegal_actions * -1e8
+        mask = illegal_actions * 1e8
         remaining_time += mask
-        MTWR_action = np.argmax(remaining_time)
+        MTWR_action = np.argmin(remaining_time)
         assert legal_actions[MTWR_action]
         state, reward, done, _ = env.step(MTWR_action)
     env.reset()
diff --git a/JSS/PPO.ipynb b/JSS/PPO.ipynb
index 23b572b..2a9ce32 100644
--- a/JSS/PPO.ipynb
+++ b/JSS/PPO.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 1,
    "metadata": {},
    "outputs": [
     {
@@ -56,7 +56,7 @@
     "    print(\"I have detected {} CPUs here, so I'm going to create {} actors\".format(mp.cpu_count(), mp.cpu_count() - 1))\n",
     "    os.environ[\"WANDB_API_KEY\"] = '3487a01956bf67cc7882bca2a38f70c8c95f8463'\n",
     "    sweep_config = {\n",
-    "        'program': 'MTWR.py',\n",
+    "        'program': 'train.py',\n",
     "        'method': 'grid',\n",
     "        'metric': {\n",
     "            'name': 'time_step_min',\n",
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta40', '/JSS/JSS/env/instances/ta41', '/JSS/JSS/env/instances/ta42', '/JSS/JSS/env/instances/ta43', '/JSS/JSS/env/instances/ta44',\n",
+    "                           '/JSS/JSS/env/instances/ta45', '/JSS/JSS/env/instances/ta46', '/JSS/JSS/env/instances/ta47', '/JSS/JSS/env/instances/ta48',\n",
+    "                           '/JSS/JSS/env/instances/ta49', '/JSS/JSS/env/instances/ta50']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -74,25 +74,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: po3ygyxo\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\n"
+      "Create sweep with ID: hddvertv\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/hddvertv\n"
      ]
     }
    ],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_2\")"
+    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_3\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": null,
    "metadata": {},
    "outputs": [
     {
@@ -100,425 +100,17869 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-14 20:43:27,735 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-14 20:43:31,145 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:43:31,145 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-14 20:43:31,147 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-05 10:16:05,812 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-05 10:16:06,118 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:16:06,118 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta40\n",
+      "2020-11-05 10:16:06,120 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta40\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/9bbl2cxc\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204333-9bbl2cxc\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mlilac-sweep-1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/hddvertv\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/r2l9wzm4\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_101607-r2l9wzm4\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:16:09,648\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 15.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/558.35 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_ed521_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3282\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:43:36,159 - wandb.wandb_agent - INFO - Running runs: ['9bbl2cxc']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204333-9bbl2cxc/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204333-9bbl2cxc/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 197.38384\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 197.38384\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3753\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708214\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/9bbl2cxc\u001b[0m\n",
-      "2020-10-14 20:43:41,380 - wandb.wandb_agent - INFO - Cleaning up finished run: 9bbl2cxc\n",
-      "2020-10-14 20:43:41,772 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:43:41,772 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
-      "2020-10-14 20:43:41,774 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta52\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/frw3hck3\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204343-frw3hck3\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:16:11,137 - wandb.wandb_agent - INFO - Running runs: ['r2l9wzm4']\n",
+      "\u001b[2m\u001b[36m(pid=435)\u001b[0m 2020-11-05 10:16:12,468\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m *** SIGSEGV (@0x0) received by PID 453 (TID 0x7f6dbdfeb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m *** SIGSEGV (@0x0) received by PID 439 (TID 0x7ff01519b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m *** SIGSEGV (@0x0) received by PID 400 (TID 0x7f4dc274f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m *** SIGSEGV (@0x0) received by PID 445 (TID 0x7f8504ec4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m *** SIGSEGV (@0x0) received by PID 377 (TID 0x7f8997a0f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m *** SIGSEGV (@0x0) received by PID 415 (TID 0x7fb31c1e4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m *** SIGSEGV (@0x0) received by PID 429 (TID 0x7f5733465700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f573303e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m *** SIGSEGV (@0x0) received by PID 444 (TID 0x7f3611802700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m *** SIGSEGV (@0x0) received by PID 412 (TID 0x7f14cef42700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m *** SIGSEGV (@0x0) received by PID 428 (TID 0x7ff5ea8f9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m *** SIGSEGV (@0x0) received by PID 324 (TID 0x7fac78ace700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m *** SIGSEGV (@0x0) received by PID 330 (TID 0x7ff1415c7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7ff1411a0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m *** SIGSEGV (@0x0) received by PID 308 (TID 0x7efc290a6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m *** SIGSEGV (@0x0) received by PID 447 (TID 0x7fed01147700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fed00d20390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe00c1ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe0034a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m *** SIGSEGV (@0x0) received by PID 434 (TID 0x7f850a17f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f8509d58390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f5609ceff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f560941a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f6dbdbc4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebd907f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebd0327db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebd0358f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m *** SIGSEGV (@0x0) received by PID 458 (TID 0x7fdf1ee5a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fdf1ea33390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01e601f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01dd2c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m *** SIGSEGV (@0x0) received by PID 419 (TID 0x7f8eea114700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f8ee9ced390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe9c0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe93387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m *** SIGSEGV (@0x0) received by PID 394 (TID 0x7fa9adc40700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7fa9ad819390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aad6f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aace1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m *** SIGSEGV (@0x0) received by PID 391 (TID 0x7f4e2b4af700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f4e2b088390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2b041f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2a76c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7ff014d74390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc114c74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc11439f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc1143a28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f4dc2328390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec22b9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec19e47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f8504a9d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f5604a36f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f56041617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f56041648f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m *** SIGSEGV (@0x0) received by PID 388 (TID 0x7f6a189e0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f6a185b9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b18339f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b17a647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m *** SIGSEGV (@0x0) received by PID 430 (TID 0x7fae23c86700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7fae2385f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f2380ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f22f397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f22f3c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f22f3cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m *** SIGSEGV (@0x0) received by PID 311 (TID 0x7f9157499700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f9157072390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f6257014f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f625673f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f62567428f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m *** SIGSEGV (@0x0) received by PID 347 (TID 0x7f212be4c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7f212ba25390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22b8def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22b0097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m *** SIGSEGV (@0x0) received by PID 332 (TID 0x7f2e93e85700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7f2e93a5e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff938def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff930097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff9300c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m *** SIGSEGV (@0x0) received by PID 395 (TID 0x7f731760a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f73171e3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f4416c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f44163407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f44163438f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m *** SIGSEGV (@0x0) received by PID 443 (TID 0x7f5be0699700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f5be0272390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2ce00cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2cdf7f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m *** SIGSEGV (@0x0) received by PID 432 (TID 0x7f1faaa46700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7f1faa61f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0aa5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0a9ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0a9cd28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m *** SIGSEGV (@0x0) received by PID 390 (TID 0x7f5dfd865700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f5dfd43e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efd3ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efcaf77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efcafa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efcafaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m *** SIGSEGV (@0x0) received by PID 337 (TID 0x7fe93c80d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fe93c3e6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3c333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3ba5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3ba618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m *** SIGSEGV (@0x0) received by PID 385 (TID 0x7f87ee14b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f87edd24390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58edc0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58ed3387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58ed33b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f89975e8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a9758df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a96cb87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a96cbb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a96cbbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m *** SIGSEGV (@0x0) received by PID 441 (TID 0x7f3ab012b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f3aafd04390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0bafbf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0baf3227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0baf3258f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m *** SIGSEGV (@0x0) received by PID 393 (TID 0x7f4a42f04700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f4a42add390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b42a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b4214c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b4214f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b4214fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m *** SIGSEGV (@0x0) received by PID 382 (TID 0x7f2d9e9b5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7f2d9e58e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9e537f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9dc627db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9dc658f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9dc65ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7fb31bdbd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841bd2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841b4577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841b45a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841b45aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m *** SIGSEGV (@0x0) received by PID 409 (TID 0x7f82f90c3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f82f8c9c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f8a8bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f81b67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f81b98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f2832f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f283263e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f28326418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f2832641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f2832641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m *** SIGSEGV (@0x0) received by PID 313 (TID 0x7f51a6ceb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f51a68c4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a670af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a5e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a5e388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m *** SIGSEGV (@0x0) received by PID 374 (TID 0x7fcc5e303700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7fcc5dedc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5db19f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5d2447db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5d2478f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m *** SIGSEGV (@0x0) received by PID 325 (TID 0x7fcf480cb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fcf47ca4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa047bc7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa0472f27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa0472f58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa0472f5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f36113db390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f071136cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f0710a977db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f0710a9a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f0710a9aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7f14ceb1b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5ce97ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5ce0a97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5ce0ac8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5ce0acad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7ff5ea4d2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6ea467f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6e9b927db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6e9b958f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6e9b95ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7fac786a7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d7865ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d77d8a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d77d8d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc2410b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc2407e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc2407e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc2407e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7efc28c7f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd28b42f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd2826d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd282708f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd28270ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe0034d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe0034dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe0034dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe00c30b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe00c53c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f560941d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f560941dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f560941dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f5609d00b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f5609d23c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebd035ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebd035d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebd918b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebd93bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebcddda93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01dd2f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01dd2fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01dd2fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01e612b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01e635c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe933b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe933bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe933bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m *** SIGSEGV (@0x0) received by PID 375 (TID 0x7f89ef00a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m *** SIGSEGV (@0x0) received by PID 346 (TID 0x7f09be136700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aace228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aace22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aace22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aad705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aad728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2a76f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2a76fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2a76fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2b052b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2b075c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc1143a2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc1143a2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc114c85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc114ca8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc11414aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec19e78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec19e7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec19e7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec22cab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec22edc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f5604164ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f5604164d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f5604a47b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f5604a6ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f5603f0ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f5603f0a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b17a678f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b17a67ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b17a67d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b1834ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b1836dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f22f3cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f2381fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f23842c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f6256742ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22b00c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22b00cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff9300cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff9300cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff938efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f4416343ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2cdf7fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2cdf7fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0a9cd2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m *** SIGSEGV (@0x0) received by PID 309 (TID 0x7f2b8a74a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m *** SIGSEGV (@0x0) received by PID 318 (TID 0x7f5be530b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m *** SIGSEGV (@0x0) received by PID 319 (TID 0x7f1e6ac46700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7f1e6a81f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efcafad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efd3ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efd400c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3ba61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3ba61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58ed33bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58ed33bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m *** SIGSEGV (@0x0) received by PID 326 (TID 0x7f1908d09700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7f19088e2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m *** SIGSEGV (@0x0) received by PID 378 (TID 0x7fd7456a3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a96cbbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a9759eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a975c1c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a96a63a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0baf325ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0baf325d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0bafc08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m *** SIGSEGV (@0x0) received by PID 446 (TID 0x7f6aac9d5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f6aac5ae390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m *** SIGSEGV (@0x0) received by PID 389 (TID 0x7f4584742700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b4214fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b42a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b42a55c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9dc65d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9e548b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9e56bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m *** SIGSEGV (@0x0) received by PID 366 (TID 0x7fa5fc2bb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m *** SIGSEGV (@0x0) received by PID 317 (TID 0x7f23bd317700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7f23bcef0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bc940f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841b45ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841bd3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841bd60c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841b202a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841b200388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f81b9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f81b9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f8a9cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f8abfc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f2832f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f2832f47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f28323e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f28323e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f28323e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a5e38ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a5e38d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a671bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m *** SIGSEGV (@0x0) received by PID 392 (TID 0x7f187e94d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7f187e526390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97e34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97da767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5d247ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5d247d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5db2ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5db4dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa0472f5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa047bd8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa047bfbc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa04709da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa04709b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f0710a9ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f071137db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f07113a0c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f0710842a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f0710840388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5ce0acd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5ce98fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5ce9b2c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5cde54a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m *** SIGSEGV (@0x0) received by PID 398 (TID 0x7f0804e74700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7f0804a4d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed904825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed903f507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m *** SIGSEGV (@0x0) received by PID 312 (TID 0x7fca5359d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7fca53176390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b53124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b5284f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6e9b95d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6ea478b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6ea49bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6e993da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6e993b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6e993d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m *** SIGSEGV (@0x0) received by PID 335 (TID 0x7fa1f7d40700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7fa1f7919390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f78b1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f6fdc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f6fdf8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m *** SIGSEGV (@0x0) received by PID 321 (TID 0x7f7b2ecca700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f7b2e8a3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2e70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2de357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m *** SIGSEGV (@0x0) received by PID 379 (TID 0x7f72fd676700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m *** SIGSEGV (@0x0) received by PID 387 (TID 0x7f13c4033700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7f13c3c0c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c3af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c32207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m *** SIGSEGV (@0x0) received by PID 384 (TID 0x7f2b50a47700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7f2b50620390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc50563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc4fc8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m *** SIGSEGV (@0x0) received by PID 339 (TID 0x7f8d88701700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f8d882da390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m *** SIGSEGV (@0x0) received by PID 368 (TID 0x7efc86056700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m *** SIGSEGV (@0x0) received by PID 372 (TID 0x7f0c19b87700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d77d8dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d77d8dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d78670b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d78693c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d77b35a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d77b33388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m *** SIGSEGV (@0x0) received by PID 322 (TID 0x7fc25166e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7fc251247390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f93510b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f93507e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f93507e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m *** SIGSEGV (@0x0) received by PID 381 (TID 0x7fa66cc5b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7fa66c834390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776c70ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776be397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc2407e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc2410c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc2410e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc24058ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc240589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd28270d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd28b53b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd28b76c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd28018a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd28016388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m *** SIGSEGV (@0x0) received by PID 320 (TID 0x7f71de0b9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f71ddc92390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42ddc51f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dd37c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m *** SIGSEGV (@0x0) received by PID 328 (TID 0x7fe0d7dc7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fe0d79a0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d78def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m *** SIGSEGV (@0x0) received by PID 397 (TID 0x7fbf379c0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7fbf37599390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m *** SIGSEGV (@0x0) received by PID 310 (TID 0x7fbee0f39700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7fbee0b12390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe0a8df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe01b87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe01bb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m *** SIGSEGV (@0x0) received by PID 407 (TID 0x7f0a9d7cd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7f0a9d3a6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m *** SIGSEGV (@0x0) received by PID 345 (TID 0x7f6df8092700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m *** SIGSEGV (@0x0) received by PID 426 (TID 0x7f32dac72700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe000f5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe000f3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe000f55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe007e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe02cb38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f56091c5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f56091c3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f56091c55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f56098b04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f560bd838de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f56098b04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebcddb388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebcddd5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebd4c84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebf99b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ebd4c84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x7f3ec357379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de9ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06ddfab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de86a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01dad7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01dad5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01dad75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01e1c24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb0206958de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb01e1c24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x7fb02426d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a251805fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a251760b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517eca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a251760bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517ec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a251761689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517ec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe9c1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe9c41c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe90e3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe90e1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe90e35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe97ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5febca18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f89eebe3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aeeb6df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aee2987db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aee29b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aee29bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m *** SIGSEGV (@0x0) received by PID 315 (TID 0x7fae6a171700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7fae69d4a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f69ceff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f6941a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f6941d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f6941dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m *** SIGSEGV (@0x0) received by PID 329 (TID 0x7f518cfb4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f518cb8d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228cb3bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228c2667db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228c2698f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228c269ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7f09bdd0f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabdc0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabd3387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabd33b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabd33bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabd33bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aacbcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aacbc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aacbca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aad2b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aaf7888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2a517a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2a515388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2a5175a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2ac024f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2d0d58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f2ac024f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc114148388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc11414a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc1148354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc116d088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc1148354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x7fc11a8e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc0b4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc00fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc00fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc010689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc010689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc010689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc09b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=439)\u001b[0m     @     0x55dbdc010689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec178fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec178d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec178f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec1e7a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec434d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec1e7a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x7f1ec7f2579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d90fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561cebb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d77a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561cebbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f5603f0c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f56045f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f5606aca8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f56045f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x7f560a6a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a4775fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a46d0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a46d0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a46d1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a46d1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a46d1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a475c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=445)\u001b[0m     @     0x55e8a46d1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b1780fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b1780d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b1780f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b17efa4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b1a3cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b17efa4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m *** SIGSEGV (@0x0) received by PID 316 (TID 0x7fe8f0bd2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fe8f07ab390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9f071ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9efe4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9efe4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9efe4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f22ce4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f22ce2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f22ce45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f233cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f258a28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f233cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x7f7f2947a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b9474fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b93cfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b93cfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f6256742d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f6257025b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f6257048c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f62564eaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f62564e8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f62564ea5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f6256bd54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22b00cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22b8efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22b912c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22adb4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22adb2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22adb45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22b49f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22d9728de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff93912c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff92db4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff92db2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff92db45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff9349f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff959728de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f4416343d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f4416c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f4416c49c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f44160eba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f44160e9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f44160eb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f44167d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2cdf7fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2ce00deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2ce0101c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2cdf5a3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2cdf5a1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2cdf5a35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0a9cd2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0aa5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0aa5d8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0a9a7aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0a9a78388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0a9a7a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7f2b8a323390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc8a291f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc899bc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc899bf8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc899bfad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc899bfd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f5be4ee4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce4940f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce406b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce406e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce406ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce406ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef6a70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef69e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef69e388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef69e38ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef69e38d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef6a71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef6a73ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efc8a2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efc8a0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efc8a25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efcf8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2eff4608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3c344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3c367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3b809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3b807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3b8095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3bef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3e3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba3bef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x7fba41f9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfece8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfec43b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccfa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfec43bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfec44689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58edc1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58edc41c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58ed0e3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58ed0e1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58ed0e35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58ed7ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58efca18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea08870f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea07f9b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea07f9e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea07f9ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea07f9ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea08881b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fd74527c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa844d87f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa8444b27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa8444b58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa8444b5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa8444b5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa844d98b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a96a61388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a96a635a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a9714e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a996218de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a9714e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x7f5a9d1f979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec46fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m *** SIGSEGV (@0x0) received by PID 380 (TID 0x7f3e29151700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f3e28d2a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f28bd1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f282fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f282ff8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f282ffad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0bafc2bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0baf0cda93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0baf0cb388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0baf0cd5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0baf7b84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0bb1c8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3bac536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3babc617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3babc648f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3babc64ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3babc64d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3bac547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f458431b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f1684101f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f168382c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f168382f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f168382fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f168382fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b41ef7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b41ef5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b41ef75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b425e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b44ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9da0da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9da0b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9da0d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9e0f84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efea05cb8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m *** SIGSEGV (@0x0) received by PID 341 (TID 0x7f8da1b0b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f8da16e4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea1687f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea0db27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m *** SIGSEGV (@0x0) received by PID 417 (TID 0x7f06d633d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7f06d5f16390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d5e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d55528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d5552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m *** SIGSEGV (@0x0) received by PID 386 (TID 0x7f34344b2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m *** SIGSEGV (@0x0) received by PID 383 (TID 0x7f434ae01700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f434a9da390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f144a7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f1449ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m *** SIGSEGV (@0x0) received by PID 422 (TID 0x7fc5e61f7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7fc5e5dd0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e5d46f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e54717db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e54748f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7fa5fbe94390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fbe0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fb5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fb5398f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fb539ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fb539d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m *** SIGSEGV (@0x0) received by PID 327 (TID 0x7f9b2fce4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f9b2f8bd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2f751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2ee7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2ee7f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2ee7fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bc06b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bc06e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bc06ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bc06ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bc951b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bc974c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841b2025a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841b8ed4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841ddc08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f841b8ed4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x7f842199879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b68b1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b680cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6897baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6898a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b680cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6897baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6898643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b680d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6897baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6898643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b680d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f7f61a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f7f5f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f7f615a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f864c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53fab1f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f2832ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f2834fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f2832ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x7f2838b7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1f5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c150b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c150bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c151689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c151689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c151689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c1dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=429)\u001b[0m     @     0x558f2c151689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a673ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a5be0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a5bde388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a5be05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a62cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a879e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97da798f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97da79ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97da79d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97e35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97e37fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5cfefa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5cfed388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5cfef5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5d6da4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5fbad8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa04709d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa0477884f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa049c5b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa0477884f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x7fa04d83379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65fafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d6555b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d6555bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d6556689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d6556689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d6556689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d65e1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=325)\u001b[0m     @     0x5572d6556689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f07108425a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f0710f2d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f07134008de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f0710f2d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x7f0716fd879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f44fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0e9fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0e9fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0ea0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0ea0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0ea0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0f2b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5cde52388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5cde545a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5ce53f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5d0a128de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5ce53f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed903f538f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed903f53ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed903f53d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed904836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed904859c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b528528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b52852ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b52852d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b53135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b53158c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6ea0284f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6ec4fb8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6ea0284f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x7fc6f00d379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322ac7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322a22b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aaea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322a22bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322a23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322a23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322a23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f6fdfad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f6fdfd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f78c2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f78e5c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2de388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2de38ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f72fd24f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fd0b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fc7e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c32238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c3223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c3223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc4fc918f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc4fc91ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc4fc91d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e88286f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e879b17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e879b48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e879b4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7efc85c2f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd85becf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd853177db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd8531a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7f0c19760390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd196f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd18e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd18e228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd18e22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m *** Aborted at 1604571377 (unix time) try \"date -d @1604571377\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m *** SIGSEGV (@0x0) received by PID 344 (TID 0x7fcc03937700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7fcc03510390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d0343af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d77b355a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d782204f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d7a6f38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f93507e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f93507e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f93510c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f93510e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776be3c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776be3cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776be3cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776c71fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776c742c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776bbe4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776bbe2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776bbe45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc24058b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc240c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc2431498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc240c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x7fc246d2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eec09fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eeb64b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebf0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eeb64bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eeb65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eeb65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eeb65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eebf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=330)\u001b[0m     @     0x5588eeb65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd280185a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd287034f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd2abd68de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd287034f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7ecd2e7ae79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572e5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d257240b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d257240bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d257241689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d257241689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d257241689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d2572cc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x55d257241689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dd37f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dd37fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dd37fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42ddc62b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42ddc85c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dd127a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dd125388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d70097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d700c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d700cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d700cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d78efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d7912c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f903743af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f9036b657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f9036b688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f9036b68ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f9036b68d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe01bbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe01bbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe0a9eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe0ac1c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fdff63a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fdff61388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fdff635a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9d34af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9ca757db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9ca788f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9ca78ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9ca78d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9d35bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9d37ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f6df7c6b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef7af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef72207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f32da84b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03da601f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03d9d2c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03d9d2f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03d9d2fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03d9d2fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03da612b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03da635c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe007e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x7fbe0688b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c4afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0ba5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c30baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c31a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0ba5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c30baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c31643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0ba6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c30baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c31643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0ba6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c30baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c31643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0ba6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c30baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0c31643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=447)\u001b[0m     @     0x55e9d0ba6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x7f560f95b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9df7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9d52b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9ddea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9d52bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9dde643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9d53689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9dde643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9d53689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9dde643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9d53689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9dde643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=434)\u001b[0m     @     0x5596c9d53689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06ddfabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06ddfb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06ddfb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06ddfb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06de86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=453)\u001b[0m     @     0x55a06ddfb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a251761689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517ec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a251761689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a2517ec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=458)\u001b[0m     @     0x55a251761689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fe97ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x7f5fef87979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x56509553cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095497b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095522baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095523a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095497bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095522baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095523643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095498689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095522baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095523643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095498689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095522baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095523643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095498689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095522baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095523643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=419)\u001b[0m     @     0x565095498689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aee29bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aeeb7eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aeeba1c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aee043a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aee041388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f6941dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f69d00b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f69d23c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f691c5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f691c3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f691c55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228c269d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228cb4cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228cb6fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228c011a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228c00f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228c0115a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabdc1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabdc41c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabd0e3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabd0e1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabd0e35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7aad2b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x7f7ab336079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aae0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aa3bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aa3bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aa3c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aa3c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aa3c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aac7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=394)\u001b[0m     @     0x55706aa3c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x7f1f30cad79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66ca6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c01b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c01bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=391)\u001b[0m     @     0x564b66c02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d77643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561cec689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d77643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561cec689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d77643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561cec689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561d77643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=400)\u001b[0m     @     0x557561cec689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x7f3b1dfa579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x558822598fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x5588224f3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x5588224f3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x5588224f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x5588224f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x5588224f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x55882257f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=388)\u001b[0m     @     0x5588224f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9efe4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9f0730b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9f0753c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9efbf5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9efbf3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9efbf55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b93d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b93d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b93d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b945b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=430)\u001b[0m     @     0x5582b93d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f62590a88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f6256bd54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x7f625cc8079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d69fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83cc4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d4fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d50a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83cc4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d4fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d50643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83cc5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d4fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d50643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83cc5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d4fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d50643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83cc5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d4fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83d50643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=311)\u001b[0m     @     0x561f83cc5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef22b49f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x7ef23154a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba451fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba3acb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba437baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba438a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba3acbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba437baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba438643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba3ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba437baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba438643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba3ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba437baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba438643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba3ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba437baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba438643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=347)\u001b[0m     @     0x555eba3ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff9349f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x7eff9954a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70e1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c703cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c703cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c703d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c703d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c703d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c70c8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=332)\u001b[0m     @     0x5579c703d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f4418ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f44167d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x7f441c47779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ed6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79e31b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79e31bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79e32689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79e32689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79e32689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79ebd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=395)\u001b[0m     @     0x559e79e32689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2cdfc8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2ce21618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2cdfc8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x7f2ce5d3979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c9ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5bfab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c86a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5bfabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5bfb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5bfb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5bfb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5c86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=443)\u001b[0m     @     0x5555d5bfb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0aa1654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0ac6388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0aa1654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x7ef0b021079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66fafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa6655b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa6655bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa6656689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa6656689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa6656689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa66e1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=432)\u001b[0m     @     0x556fa6656689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc8a2a2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc8a2c5c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc89767a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc89765388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc897675a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce4951b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce4974c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce3e16a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce3e14388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce3e165a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce45014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef69be0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef69bde388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef69be05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef6a2cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2efcf8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x7f2f0303879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca1ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6c97ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca05baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca06a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6c97abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca05baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca06643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6c97b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca05baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca06643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6c97b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca05baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca06643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6c97b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca05baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6ca06643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=390)\u001b[0m     @     0x55fd6c97b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfec44689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfec44689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfeccf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=337)\u001b[0m     @     0x563dfec44689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58ed7ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x7f58f387979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e659006fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658f61b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658fecbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658feda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658f61bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658fecbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658fed643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658f62689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658fecbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658fed643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658f62689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658fecbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658fed643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658f62689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658fecbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658fed643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=385)\u001b[0m     @     0x55e658f62689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea088a4c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea07d46a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea07d44388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea07d465a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea084314f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa844dbbc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa84425da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa84425b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa84425d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa8449484f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa846e1b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909eba1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909eba1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909eba2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909eba2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909eba2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909ec2d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=377)\u001b[0m     @     0x55909eba2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f282ffd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f28be2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f28c05c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f280a7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f280a5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f280a75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0baf7b84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x7f0bb586379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae3047fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae2fa2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae2fa2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae2fa3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae2fa3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae2fa3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae302e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=441)\u001b[0m     @     0x555ae2fa3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3bac56ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3baba0ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3baba0a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3baba0c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3bac0f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f1684112b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f1684135c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f16835d7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f16835d5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f16835d75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f1683cc24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f16861958de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b425e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x7f1b4868d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985dafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x557098535b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x557098535bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x557098536689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x557098536689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x557098536689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x5570985c1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=393)\u001b[0m     @     0x557098536689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efe9e0f84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x7efea41a379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e6bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037dc6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e52a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037dc6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e52643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037dc7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e52643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037dc7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e52643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037dc7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037e52643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=382)\u001b[0m     @     0x55c037dc7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea0db58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea0db5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea0db5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea1698b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea16bbc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea0b5da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea0b5b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d5552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d5e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d5e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d52faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f343408b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f0534020f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f053374b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f053374e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f053374ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f1449ee98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f1449ee9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f1449ee9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f144a7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f144a7efc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f1449c91a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f1449c8f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e5474ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e5474d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e5d57b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e5d7ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e521ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e521a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e521c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e59074f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fbe1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fbe3fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fb2e1a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fb2df388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fb2e15a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fb9cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fde9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f76fb9cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2ee7fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2f762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2f785c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2ec27a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2ec25388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2ec275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2f3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bbe16a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bbe14388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bbe165a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bc5014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4be9d48de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4bc5014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x7ef4c21a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x56378085cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x5637807b7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780842baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780843a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x5637807b7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780842baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780843643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x5637807b8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780842baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780843643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x5637807b8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780842baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780843643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x5637807b8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780842baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x563780843643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=317)\u001b[0m     @     0x5637807b8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6897baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6898643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b680d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6897baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b6898643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=415)\u001b[0m     @     0x5646b680d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53f864c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x7f53fe6f779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f4483fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f43deb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f4469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f446aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f43debfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f4469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f446a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f43df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f4469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f446a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f43df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f4469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f446a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f43df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f4469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f446a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=409)\u001b[0m     @     0x55b6f43df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22a62cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x7f22ac37679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf483fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf3deb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf46aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf3debfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf46a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf3df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf46a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf3df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf46a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf3df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf469baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf46a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=313)\u001b[0m     @     0x55aecf3df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97d821a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97d81f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97d8215a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97df0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee9803df8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee97df0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x7ee983fb779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0dbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e036b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e036bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e037689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e037689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e037689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e0c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=392)\u001b[0m     @     0x55f48e037689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d5d6da4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x7f9d6378579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be97dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be8d8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be963baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be964a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be8d8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be963baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be964643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be8d9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be963baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be964643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be8d9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be963baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be964643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be8d9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be963baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be964643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=374)\u001b[0m     @     0x5581be8d9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=444)\u001b[0m     @     0x5570e0ea0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x7ee5d45ea79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c86ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c7cab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c855baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c856a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c7cabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c855baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c856643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c7cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c855baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c856643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c7cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c855baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c856643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c7cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c855baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c856643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=412)\u001b[0m     @     0x559e2c7cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed903cfba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed903cf9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed903cfb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed9043e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed9068b98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed9043e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x7ed90a49179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0effd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb04ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb04abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb04b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb04b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb04b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb0d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=398)\u001b[0m     @     0x5646fb04b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b525faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b525f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b525fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b52ce54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b551b88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b52ce54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x7f9b58d9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdcafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bd25b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bd25bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bd26689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322aae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=428)\u001b[0m     @     0x558322a23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f6d87a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f6d85388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f6d875a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f74724f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f99458de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72f74724f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x7f72fd51d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f75579fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f754d4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f7555fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f75560a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f754d4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f7555fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f75560643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f754d5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f7555fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f75560643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f754d5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f7555fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f75560643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f754d5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f7555fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f75560643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=335)\u001b[0m     @     0x557f754d5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2de38d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2e71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2e73ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2dbe0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2dbde388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2dbe05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2e2cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c3079e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fc7e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fc7e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fc7e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fd0c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fd0e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fc58ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fc589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c3b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c3b29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c2fcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c2fc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c2fcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c36b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c5b898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c36b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc50574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc50597c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc4fa39a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc4fa37388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc4fa395a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc501244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc525f78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc501244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x7efc561cf79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b43984fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b438dfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b438dfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b438e0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b438e0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b438e0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b4396b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=384)\u001b[0m     @     0x562b438e0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e879b4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e88297b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e882bac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e8775ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e8775a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e8775c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e87e474f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e8a31a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd8531aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd8531ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd85bfdb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd85c20c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd850c2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd850c0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd850c25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd857ad4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd18e22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd19705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd19728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd18bcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd18bc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd18bca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd192b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d02b657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d02b688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d02b68ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d02b68d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d0344bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d0346ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d782204f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x7f7d7e2cb79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e68afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e5e5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e670baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e671a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e5e5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e670baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e671643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e5e6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e670baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e671643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e5e6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e670baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e671643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e5e6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e670baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e671643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=324)\u001b[0m     @     0x55905e5e6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f935058ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f9350589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f935058b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f9350c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f93531498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f9350c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x7f9356d2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f250fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f1abb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f236baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f237a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f1abbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f236baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f237643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f1ac689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f236baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f237643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f1ac689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f236baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f237643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f1ac689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f236baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f237643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=322)\u001b[0m     @     0x55b76f1ac689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776c2cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776e7a28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f776c2cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x7f777237a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b4ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512aaab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b36a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512aaabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b36643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512aab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b36643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512aab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b36643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512aab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512b36643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=381)\u001b[0m     @     0x55d512aab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dd1275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dd8124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dfce58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42dd8124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d6db4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d6db2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d6db45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d749f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d99728de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f903744bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f903746ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f9036910a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f903690e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f90369105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe064e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe2b218de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe064e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x7f8fe66f979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f39fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9e94b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f20a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9e94bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9e95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9e95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9e95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9f20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=310)\u001b[0m     @     0x5563e9e95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9c820a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9c81e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9c8205a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9cf0b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9f3de8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edb9cf0b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x7edba2fb679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c616854fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c6167afb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c6167afbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c6167b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c6167b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c6167b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef72238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03d9ad7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03d9ad5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03d9ad75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03da1c24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03dc6958de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03da1c24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x7f03e026d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d308fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d263b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2efa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d263bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2ef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d264689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2ef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d264689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2ef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d264689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aee0435a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aee72e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5af0c018de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5aee72e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x7f5af47d979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6dffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b63ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b63abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b63b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b63b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b63b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b6c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=375)\u001b[0m     @     0x56096b63b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f698b04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f6bd838de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f698b04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x7f7f6f95b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c72fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631bcdb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c59a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631bcdbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c59643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631bce689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c59643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631bce689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c59643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631bce689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631c59643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=315)\u001b[0m     @     0x55c631bce689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228c6fc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228ebcf8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f228c6fc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f22927a779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880dffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c8803ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c8803abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c8803b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c8803b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c8803b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c880c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x563c8803b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabd7ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabfca18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edabd7ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x7edac387979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23e1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f233cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f233cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f233d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f233d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f233d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f23c8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=346)\u001b[0m     @     0x5578f233d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9f02e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9f27b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9f02e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x7fb9f638b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x55763377afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x5576336d5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633760baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633761a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x5576336d5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633760baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633761643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x5576336d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633760baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633761643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x5576336d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633760baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633761643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x5576336d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633760baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x557633761643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=316)\u001b[0m     @     0x5576336d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc89e524f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc8c3258de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc89e524f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x7efc8fefd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b46ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b3cab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b456a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b3cabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b456643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b3cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b456643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b3cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b456643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b3cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b456643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=309)\u001b[0m     @     0x56297b3cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce69d48de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2ce45014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f2cea1a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461b16fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461a71b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461a71bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461a72689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461a72689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461a72689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461afd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b461a72689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef6c79e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef6a2cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x7eef7037679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aafadfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf08b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf94a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf08bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf94643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf09689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf94643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf09689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf94643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf09689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf94643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=319)\u001b[0m     @     0x55e4aaf09689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea0a9048de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea084314f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x7eea0e4dc79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a02150ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a02146ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a02146abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a02146b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a02146b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a02146b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a0214f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=326)\u001b[0m     @     0x55a02146b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa8449484f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x7fa84a9f379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1b18fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1a73b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1afebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1affa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1a73bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1afebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1aff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1a74689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1afebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1aff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1a74689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1afebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1aff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1a74689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1afebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1aff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=378)\u001b[0m     @     0x5653d1a74689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f287924f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f2ac658de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f287924f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x7f0f2e83d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc34fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddb8fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddb8fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddb90689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddb90689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddb90689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddc1b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=380)\u001b[0m     @     0x564bddb90689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3bae5ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3bac0f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x7f3bb21a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0d0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb02bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb02bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb02c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb02c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb02c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb0b7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=446)\u001b[0m     @     0x5612fb02c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f1683cc24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x7f1689d6d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a71fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a2529ccb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a58a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a2529ccbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a58643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a2529cd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a58643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a2529cd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a58643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a2529cd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a252a58643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=389)\u001b[0m     @     0x55a2529cd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea0b5d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea12484f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea371b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea12484f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x7f5ea72f379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4ecfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d52f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d52fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d59e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d7eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f053374ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f0534031b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f0534054c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f05334f6a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f05334f4388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f1449c915a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f144a37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f144c84f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e7dda8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96e59074f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x7f96eb9b279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c9a0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c8fbb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c986baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c987a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c8fbbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c986baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c987643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c8fc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c986baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c987643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c8fc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c986baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c987643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c8fc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c986baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c987643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=422)\u001b[0m     @     0x55839c8fc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x7f7701a7779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f5dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4eb8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f44a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4eb8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4eb9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4eb9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4eb9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4f44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=366)\u001b[0m     @     0x55b1b4eb9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c317e58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c2f3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x7f6c353bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a73fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a949ceb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a59baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a5aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a949cebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a59baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a5a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a949cf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a59baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a5a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a949cf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a59baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a5a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a949cf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a59baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a94a5a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=327)\u001b[0m     @     0x562a949cf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bd26689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bd26689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bdb1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=312)\u001b[0m     @     0x55821bd26689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c2e2cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x7f4c3437679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fd4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6f2fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6f2fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6f30689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6f30689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6f30689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6fbb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=321)\u001b[0m     @     0x55f8c6f30689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fc58b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x7ee4c976179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b99fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12af4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b80a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12af4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b80643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12af5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b80643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12af5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b80643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12af5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12b80643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=387)\u001b[0m     @     0x561a12af5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e87e474f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x7f5e8def279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2deafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2d45b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2d45bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2d46689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2d46689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2d46689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2dd1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=339)\u001b[0m     @     0x55aac2d46689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd87c808de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd857ad4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x7ecd8b85879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba0794fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba06efb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba06efbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba06f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba06f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba06f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba077b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=368)\u001b[0m     @     0x55cba06f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd1b7888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd192b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x7edd1f36079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a913fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a86eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8faa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a86ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8fa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a86f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8fa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a86f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8fa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a86f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a8fa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=372)\u001b[0m     @     0x55b04a86f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d02910a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d0290e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x7f42e38bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b5477a7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b547702b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b547702bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b547703689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b547703689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b547703689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b54778e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=320)\u001b[0m     @     0x55b547703689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1d749f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x7fb1dd54a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f26fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135e81b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135e81bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135e82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135e82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135e82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135f0d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=328)\u001b[0m     @     0x55f135e82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f9036ffb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f90394ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f9036ffb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x7f903d0a679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cddfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681c38b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681c38bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681c39689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681c39689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681c39689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681cc4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=397)\u001b[0m     @     0x55f681c39689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c61683b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=407)\u001b[0m     @     0x55c6167b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef7223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d2ef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=426)\u001b[0m     @     0x56275d264689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b447b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b447bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b448689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b448689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b448689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b4d3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=341)\u001b[0m     @     0x55c40b448689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7d59e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x7ed7dba9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cc0dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cb68b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cb68bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cb69689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cb69689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cb69689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cbf4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=417)\u001b[0m     @     0x55917cb69689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f05334f65a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f0533be14f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f05360b48de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f144a37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x7f145042779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a750ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a746ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fcc764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d029105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef7223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef7b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef7b29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f0533be14f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x7f0539c8c79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b52b7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b5212b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b5212bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b5213689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b5213689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b5213689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b529e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=386)\u001b[0m     @     0x5594b5213689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a746abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a746b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a746b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a746b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a74f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=383)\u001b[0m     @     0x55e5a746b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43ff1498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d02ffb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d054ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef6fcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef6fc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f43fcc764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x7f4402d2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e754908fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e754863b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548efa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e754863bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548ef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e754864689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548ef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e754864689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548ef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e754864689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548eebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e7548ef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=379)\u001b[0m     @     0x55e754864689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef6fcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef76b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef9b898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d02ffb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x7f9d090a679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x557265116fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x557265071b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x557265071bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x557265072689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x557265072689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x557265072689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x5572650fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=344)\u001b[0m     @     0x557265072689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3ef76b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x7f3efd76179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b79fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8ad4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b5fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b60a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8ad4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b5fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b60643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8ad5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b5fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b60643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8ad5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b5fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b60643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8ad5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b5fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8b60643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=345)\u001b[0m     @     0x5640c8ad5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "2020-11-05 10:16:18,144\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.\n",
+      "2020-11-05 10:16:18,151\tERROR trial_runner.py:567 -- Trial PPO_jss_env_ed521_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::PPO.train()\u001b[39m (pid=435, ip=172.17.0.4)\n",
+      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
+      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
+      "    raise e\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
+      "    result = Trainable.train(self)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
+      "    result = self.step()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
+      "    res = next(self.train_exec_impl)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
+      "    return next(self.built_iterator)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 876, in apply_flatten\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 828, in add_wait_hooks\n",
+      "    item = next(it)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 466, in base_iterator\n",
+      "    actor_set.init_actors()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1238, in init_actors\n",
+      "    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])\n",
+      "ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.9/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.35 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_ed521_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_ed521_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_ed521_00000_0_2020-11-05_10-16-10/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3372\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:43:46,790 - wandb.wandb_agent - INFO - Running runs: ['frw3hck3']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204343-frw3hck3/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204343-frw3hck3/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 163.86869\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 163.86869\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3871\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 2\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708225\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/frw3hck3\u001b[0m\n",
-      "2020-10-14 20:43:52,006 - wandb.wandb_agent - INFO - Cleaning up finished run: frw3hck3\n",
-      "2020-10-14 20:43:52,326 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:43:52,327 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta53\n",
-      "2020-10-14 20:43:52,329 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta53\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/o0hyb863\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204354-o0hyb863\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.35 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_ed521_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_ed521_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_ed521_00000_0_2020-11-05_10-16-10/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
+      "Traceback (most recent call last):\n",
+      "  File \"train.py\", line 74, in <module>\n",
+      "    train_func()\n",
+      "  File \"train.py\", line 56, in train_func\n",
+      "    analysis = tune.run(PPOTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
+      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
+      "ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_ed521_00000])\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3461\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:43:57,342 - wandb.wandb_agent - INFO - Running runs: ['o0hyb863']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 208\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error --- 5.14MB of 5.14MB uploaded (0.00MB deduped)\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa97540c201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.142174   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.173013   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.182065   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.194592   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.203313   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[36m(pid=435)\u001b[0m E1105 10:16:18.143317   435  1617 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=9e78156cc0f1c18db2413f7201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=435)\u001b[0m E1105 10:16:18.143484   435  1617 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=99a573b913884b0db2413f7201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=435)\u001b[0m E1105 10:16:18.158056   435  1617 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=716ad7ba0ea412bfb2413f7201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=435)\u001b[0m E1105 10:16:18.173112   435  1617 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1e9c16c25b494a4a43fb47bd01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=435)\u001b[0m E1105 10:16:18.173256   435  1617 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=61afdfe40390d0a343fb47bd01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=435)\u001b[0m E1105 10:16:18.173322   435  1617 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=10a4a4113c6c36ea43fb47bd01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.203413   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.218662   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff091d563401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffbdff035801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.230376   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.236212   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.236305   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.245105   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.254374   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.257838   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.258728   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.260393   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.266737   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.267280   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.268788   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.269287   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.269882   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.270128   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.273527   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.274756   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.277038   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.278388   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.280694   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.283216   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.283867   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.285079   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.285262   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff252160a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff90aded9101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff50168bc201000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.291844   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.294359   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.295337   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.300940   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.304906   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.324254   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:16:18.330859   267   267 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204354-o0hyb863/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204354-o0hyb863/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 180.92929\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 180.92929\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3790\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708235\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_101607-r2l9wzm4/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_101607-r2l9wzm4/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/o0hyb863\u001b[0m\n",
-      "2020-10-14 20:44:02,563 - wandb.wandb_agent - INFO - Cleaning up finished run: o0hyb863\n",
-      "2020-10-14 20:44:02,910 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:02,911 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta54\n",
-      "2020-10-14 20:44:02,913 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta54\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mlilac-sweep-1\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/r2l9wzm4\u001b[0m\n",
+      "2020-11-05 10:16:26,784 - wandb.wandb_agent - INFO - Cleaning up finished run: r2l9wzm4\n",
+      "2020-11-05 10:16:27,113 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:16:27,113 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta41\n",
+      "2020-11-05 10:16:27,115 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta41\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/802owiob\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204405-802owiob\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mstellar-sweep-2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/hddvertv\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/m83rym9l\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_101628-m83rym9l\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:16:30,616\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 15.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_f9d29_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3552\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:07,929 - wandb.wandb_agent - INFO - Running runs: ['802owiob']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204405-802owiob/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204405-802owiob/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 201.68687\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 201.68687\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3601\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708246\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/802owiob\u001b[0m\n",
-      "2020-10-14 20:44:13,147 - wandb.wandb_agent - INFO - Cleaning up finished run: 802owiob\n",
-      "2020-10-14 20:44:13,451 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:13,451 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta55\n",
-      "2020-10-14 20:44:13,453 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta55\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ix8moovg\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204415-ix8moovg\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:16:32,131 - wandb.wandb_agent - INFO - Running runs: ['m83rym9l']\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m 2020-11-05 10:16:33,478\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m *** SIGSEGV (@0x0) received by PID 1908 (TID 0x7fe9b3f21700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fe9b3afa390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab39c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab30f07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab30f38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab30f3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m *** SIGSEGV (@0x0) received by PID 2025 (TID 0x7f008d5c1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7f008d19a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18d0b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18c7e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18c7e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18c7e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m *** SIGSEGV (@0x0) received by PID 1984 (TID 0x7fcd22daf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7fcd22988390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e227bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e21ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e21ee98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m *** SIGSEGV (@0x0) received by PID 1991 (TID 0x7fc11c9c1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7fc11c59a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921c536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921bc617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921bc648f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921bc64ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m *** SIGSEGV (@0x0) received by PID 1948 (TID 0x7f5861fb5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f5861b8e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f2961b3af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f29612657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f29612688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f2961268ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m *** SIGSEGV (@0x0) received by PID 2006 (TID 0x7f5662f7e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f5662b57390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f2762a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f276214c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f276214f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f276214fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m *** SIGSEGV (@0x0) received by PID 1979 (TID 0x7eff3b380700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7eff3af59390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03aed3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03a5fe7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03a6018f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m *** SIGSEGV (@0x0) received by PID 1978 (TID 0x7f2ea991b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7f2ea94f4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa94a3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa8bce7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa8bd18f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m *** SIGSEGV (@0x0) received by PID 1969 (TID 0x7f36e4b5c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f36e4735390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e46dff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e3e0a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e3e0d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m *** SIGSEGV (@0x0) received by PID 1967 (TID 0x7fdc923a9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fdc91f82390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad91e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad9154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad915528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad91552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m *** SIGSEGV (@0x0) received by PID 2007 (TID 0x7f7bc49a0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f7bc4579390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc4521f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc3c4c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc3c4f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc3c4fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m *** SIGSEGV (@0x0) received by PID 2019 (TID 0x7f5165c69700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f5165842390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f22656f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f2264e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f2264e228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m *** SIGSEGV (@0x0) received by PID 1985 (TID 0x7f85160e7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f8515cc0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f5615c0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f56153387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f561533b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m *** SIGSEGV (@0x0) received by PID 1964 (TID 0x7f740dfcb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m *** SIGSEGV (@0x0) received by PID 1963 (TID 0x7f0adb2ff700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7f0adaed8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbdae66f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbda5917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbda5948f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m *** SIGSEGV (@0x0) received by PID 1994 (TID 0x7ffb81617700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7ffb811f0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc81166f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc808917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc808948f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc80894ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m *** SIGSEGV (@0x0) received by PID 1946 (TID 0x7f78de0af700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f78ddc88390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49ddc11f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dd33c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dd33f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dd33fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m *** SIGSEGV (@0x0) received by PID 1970 (TID 0x7fd3b8a3c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fd3b8615390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b8563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b7c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b7c918f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b7c91ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m *** SIGSEGV (@0x0) received by PID 1990 (TID 0x7f713f20e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f713ede7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423ed83f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423e4ae7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423e4b18f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423e4b1ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m *** SIGSEGV (@0x0) received by PID 1904 (TID 0x7f372fb44700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m *** SIGSEGV (@0x0) received by PID 1960 (TID 0x7efdf1a76700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7efdf164f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef14e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef0c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef0c118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef0c11ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef0c11d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef14f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m *** SIGSEGV (@0x0) received by PID 1977 (TID 0x7f3643783700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f364335c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f07432e6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f0742a117db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f0742a148f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f0742a14ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f0742a14d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f07432f7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m *** SIGSEGV (@0x0) received by PID 1961 (TID 0x7f51b3e4d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f51b3a26390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b38def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b30097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b300c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b300cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m *** SIGSEGV (@0x0) received by PID 1910 (TID 0x7f221fd4f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m *** SIGSEGV (@0x0) received by PID 1895 (TID 0x7f7ca605a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m *** SIGSEGV (@0x0) received by PID 1894 (TID 0x7f80ae42a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m *** SIGSEGV (@0x0) received by PID 1917 (TID 0x7fc55a838700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m *** SIGSEGV (@0x0) received by PID 1899 (TID 0x7fa02bb9a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7fa02b773390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712b61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m *** SIGSEGV (@0x0) received by PID 1918 (TID 0x7f9e99200700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m *** SIGSEGV (@0x0) received by PID 1971 (TID 0x7f61677e7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m *** SIGSEGV (@0x0) received by PID 1888 (TID 0x7f1a4d213700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m *** SIGSEGV (@0x0) received by PID 1934 (TID 0x7f59b3ed3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m *** SIGSEGV (@0x0) received by PID 1890 (TID 0x7f5fad85a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f5fad433390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ac940f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m *** SIGSEGV (@0x0) received by PID 1936 (TID 0x7f4c44440700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f4c44019390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d43d2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m *** SIGSEGV (@0x0) received by PID 1951 (TID 0x7f3924470700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f3924049390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a23eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m *** SIGSEGV (@0x0) received by PID 1887 (TID 0x7fd4234ff700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m *** SIGSEGV (@0x0) received by PID 1882 (TID 0x7f7144880700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f7144459390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4244333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4243a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m *** SIGSEGV (@0x0) received by PID 1903 (TID 0x7fadaa2ca700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m *** SIGSEGV (@0x0) received by PID 1885 (TID 0x7f1a6b82b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7f1a6b404390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6b229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m *** SIGSEGV (@0x0) received by PID 1955 (TID 0x7f2c49894700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7f2c4946d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m *** SIGSEGV (@0x0) received by PID 1893 (TID 0x7ff38ac94700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7ff38a86d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc48a7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m *** SIGSEGV (@0x0) received by PID 1898 (TID 0x7fe0cbd42700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab30f3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab39d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab39f9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab2e9ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab2e99388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18c7e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18d0c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18d0e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18c58ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18c589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18c58b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e21ee9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e21ee9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e227ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e227efc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e21c91a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921bc64d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921c547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921c56ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921ba0ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921ba0a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921ba0c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f2961268d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f2961b4bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f2961b6ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f2961010a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f296100e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f29610105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f276214fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f2762a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f2762a55c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f2761ef7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f2761ef5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f2761ef75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03a601ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03a601d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03aee4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03af07c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03a3a9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa8bd1ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa8bd1d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa94b4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa94d7c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e3e0dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e3e0dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e46f0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e4713c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e3bb5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e3bb3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad91552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad91e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad91e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad912faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad912f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc3c4fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc4532b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc4555c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc39f7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc39f5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc39f75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc40e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m *** SIGSEGV (@0x0) received by PID 1975 (TID 0x7f89c9fbd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f89c9b96390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac9b3af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac92657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac92688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m *** SIGSEGV (@0x0) received by PID 1966 (TID 0x7fb1e87be700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7fb1e8397390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e8336f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e7a617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e7a648f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m *** SIGSEGV (@0x0) received by PID 1883 (TID 0x7f9890f92700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f9890b6b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f69909e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f69901137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m *** SIGSEGV (@0x0) received by PID 1976 (TID 0x7f9b46118700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f9b45cf1390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c45c0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c453387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m *** SIGSEGV (@0x0) received by PID 1905 (TID 0x7f5a06e4e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f5a06a27390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b0670af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b05e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m *** SIGSEGV (@0x0) received by PID 1986 (TID 0x7f12a2c01700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7f12a27da390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a274ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a1e797db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a1e7c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a1e7cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f2264e22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f2264e22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f2265705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f2265728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f2264bcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f2264bc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f561533bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f561533bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f5615c1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f5615c41c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f56150e3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f56150e1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m *** SIGSEGV (@0x0) received by PID 1980 (TID 0x7f8ea9183700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f8ea8d5c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa8cf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa84227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa84258f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f740dba4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450db19f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450d2447db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450d2478f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450d247ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbda594ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbda594d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbdae77b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbdae9ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbda33ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbda33a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc80894d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc81177b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc8119ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc8063ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc8063a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc8063c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dd33fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49ddc22b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49ddc45c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dd0e7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dd0e5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b7c91d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b8574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b8597c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b7a39a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b7a37388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b7a395a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b81244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4ba5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m *** SIGSEGV (@0x0) received by PID 1892 (TID 0x7fd4d6588700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fd4d6161390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d610df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d58387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m *** SIGSEGV (@0x0) received by PID 1957 (TID 0x7f3e8f674700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f3e8f24d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8f124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8e84f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8e8528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m *** SIGSEGV (@0x0) received by PID 1913 (TID 0x7f35550a9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f3554c82390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f0654a36f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f06541617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m *** SIGSEGV (@0x0) received by PID 1937 (TID 0x7faeea37d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m *** SIGSEGV (@0x0) received by PID 1981 (TID 0x7fd232e51700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423e4b1d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423ed94b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423edb7c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423e259a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423e257388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423e2595a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m *** SIGSEGV (@0x0) received by PID 1998 (TID 0x7f5ea0281700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f5e9fe5a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9fddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9f5097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9f50c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f372f71d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082f61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082ed4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082ed4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082ed4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m *** SIGSEGV (@0x0) received by PID 1953 (TID 0x7fa4e389a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7fa4e3473390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e3229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e29547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e29578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m *** SIGSEGV (@0x0) received by PID 1914 (TID 0x7fabfc84b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7fabfc424390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfc3b6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfbae17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfbae48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfbae4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m *** SIGSEGV (@0x0) received by PID 1900 (TID 0x7fc49b51f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7fc49b0f8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959b092f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959a7bd7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959a7c08f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m *** SIGSEGV (@0x0) received by PID 1965 (TID 0x7fe8645ec700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fe8641c5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9640cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9637f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9637fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9637fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m *** SIGSEGV (@0x0) received by PID 1906 (TID 0x7fc24f00e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7fc24ebe7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934eb6df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934e2987db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934e29b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934e29bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef1517c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef09b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef09b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef09b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef10a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f074331ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f07427bca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f07427ba388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f07427bc5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f0742ea74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f074537a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b300cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b38efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b3912c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b2db4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b2db2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b2db45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m *** SIGSEGV (@0x0) received by PID 1993 (TID 0x7f0e95c6e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7f0e95847390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf956f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf94e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf94e228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7f221f928390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31f8b1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31efdc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31efdf8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31efdfad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m *** SIGSEGV (@0x0) received by PID 1996 (TID 0x7f2e4dc00700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7f2e4d7d9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4d6f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4ce1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4ce228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m *** SIGSEGV (@0x0) received by PID 1962 (TID 0x7fd346a49700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fd346622390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa4465a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa445ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa445cd28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m *** SIGSEGV (@0x0) received by PID 2013 (TID 0x7ff4ea572700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7ff4ea14b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5ea0faf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5e98257db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m *** SIGSEGV (@0x0) received by PID 2003 (TID 0x7ff17632b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m *** SIGSEGV (@0x0) received by PID 1920 (TID 0x7f2b319b3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m *** SIGSEGV (@0x0) received by PID 1901 (TID 0x7ff21e544700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7ff21e11d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31e0cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31d7f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31d7fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m *** SIGSEGV (@0x0) received by PID 1954 (TID 0x7f69feff4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f69febcd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afea21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afe14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f7ca5c33390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da5becf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da53177db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da531a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f80ae003390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51adb19f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51ad2447db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51ad2478f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7fc55a411390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f965a34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f9659a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f9659a798f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m *** SIGSEGV (@0x0) received by PID 1939 (TID 0x7facddb9b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7facdd774390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddd6f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712ad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712ad4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712ad4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f9e98dd9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f98d64f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f9848f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f984928f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m *** SIGSEGV (@0x0) received by PID 1884 (TID 0x7faee1fa8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7faee1b81390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe1907f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m *** SIGSEGV (@0x0) received by PID 2010 (TID 0x7f7cff64e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m *** Aborted at 1604571399 (unix time) try \"date -d @1604571399\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f61673c0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3267340f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3266a6b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3266a6e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3266a6ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7f1a4cdec390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4cd64f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4c48f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4c4928f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4c492ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f59b3aac390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab3a23f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab314e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab31518f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab3151ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ac06b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ac06e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ac06ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ac06ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m *** SIGSEGV (@0x0) received by PID 1902 (TID 0x7f496a596700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f496a16f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a6a10df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a698387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m *** SIGSEGV (@0x0) received by PID 1891 (TID 0x7f79f46b7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f79f4290390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af40c0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af37eb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m *** SIGSEGV (@0x0) received by PID 1973 (TID 0x7f93d7d15700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f93d78ee390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d7751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d6e7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m *** Aborted at 1604571398 (unix time) try \"date -d @1604571398\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m *** SIGSEGV (@0x0) received by PID 1959 (TID 0x7f6e2fa8c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f6e2f665390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2f616f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2ed417db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m *** SIGSEGV (@0x0) received by PID 1949 (TID 0x7f82575a2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f825717b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f5356f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m *** SIGSEGV (@0x0) received by PID 1897 (TID 0x7fbffcc2e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7fbffc807390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fc536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d434577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d4345a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d4345aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d4345ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a235e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a235e48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a235e4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a235e4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fd4230d8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa523068f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa5227937db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa5227968f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa522796ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4243a618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4243a61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4243a61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4244344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7fada9ea3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea9e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea95528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea9552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6a9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6a9578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6a957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6a957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd493ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd48af77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd48afa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd48afaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc489ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc489ee98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc489ee9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc489ee9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fe0cb91b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cb8b1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cafdc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cafdf8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cafdfad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab2e9b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab35864f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab5a598de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18cc764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18f1498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed18cc764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x7ed192d2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865e8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f86543b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cfa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f86543bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f86544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f86544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f86544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f865cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2025)\u001b[0m     @     0x558f86544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e21c8f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e21c915a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e2237c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921c0f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921e5ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f921c0f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f29616fb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f2963bce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f29616fb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x7f29677a679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330facfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f07b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f93a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f07bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f27625e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f2764ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f27625e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03a3a7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03a3a95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03aa944f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa8979a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa8977388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa89795a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e3bb55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e42a04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad912fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad919e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad93eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc65b58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cc40e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x7f4cca18d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x558579696fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x5585795f1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x5585795f1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x5585795f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x5585795f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x5585795f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x55857967d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2007)\u001b[0m     @     0x5585795f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac9268ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac9268d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac9b4bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac9b6ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e7a64ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e7a64d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e8347b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e836ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f69901168f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f6990116ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c4533b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c4533bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b05e388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b05e38ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b05e38d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b0671bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a1e7cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a275fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a2782c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f2264bca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f22652b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f56150e35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f56157ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa8425ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa8425d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa8d08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa8d2bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450d247d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450db2ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450db4dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbda33c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbdaa274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbdcefa8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc80d274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc831fa8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dd0e75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dd7d24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dfca58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4b81244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x7fa4be1cf79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da1725fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da1680b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da1680bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da1681689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da1681689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da1681689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da170c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1970)\u001b[0m     @     0x556da1681689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d583b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d583bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d583bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8e852ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8e852d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8f135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f06541648f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f0654164ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7faee9f56390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe9e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fd232a2a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa3327bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa331ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa331ee98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m *** Aborted at 1604571399 (unix time) try \"date -d @1604571399\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m *** SIGSEGV (@0x0) received by PID 1886 (TID 0x7f4dc686a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423e9444f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f4240e178de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f423e9444f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9f50cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9f50cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9fdefb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9fe12c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082ed4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082f630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082f653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e2957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e2957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfbae4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfc3c7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfc3eac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfb88ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfb88a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959a7c0ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959a7c0d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959b0a3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959b0c6c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9637fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9640deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb964101c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9635a3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934e29bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934eb7eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934eba1c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934e043a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef35778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef10a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x7ecef714f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e36fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4d91b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4d91bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4d92689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4d92689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4d92689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4e1d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1960)\u001b[0m     @     0x55f2f4d92689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f0742ea74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x7f0748f5279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f97b9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f9714b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f979fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f97a0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f9714bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f979fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f97a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f9715689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f979fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f97a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f9715689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f979fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f97a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f9715689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f979fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f97a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1977)\u001b[0m     @     0x5567f9715689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b349f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b59728de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b349f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x7f22b954a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf94e22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf94e22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf95705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31efdfd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31f8c2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31f8e5c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31ed87a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31ed85388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4ce22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4ce22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4d705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4d728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa445cd2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa445cd2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa4465b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa4465d8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5e98288f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5e9828ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5e9828d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5ea10bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7ff175f04390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc275e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc27554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc2755528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc275552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7f2b3158c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc314e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc30c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31d7fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31d7fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31e0deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afe14f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afe14fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da531aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da531ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da5bfdb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da5c20c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51ad247ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51ad247d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51adb2ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51adb4dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f9659a79ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f9659a79d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f965a35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f965a37fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddce1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddce228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddce22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712ad4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712b630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712b653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712aaf5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712aaf3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f98492ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f98492d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f98d75b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f98d98c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe10327db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe10358f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f7cff227390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dff124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dfe84f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m *** SIGSEGV (@0x0) received by PID 1943 (TID 0x7f05787bd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3266a6ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3267351b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3267374c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4c492d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4cd75b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4cd98c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab3151d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab3a34b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab3a57c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ac951b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ac974c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30abe16a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30abe14388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a6983b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a6983bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af37ee8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af37eead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d6e7f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2ed448f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2ed44ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f535663e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f53566418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fbc617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d43d3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d43d60c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d43202a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d43200388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a23ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a23eeac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a2338ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a2338a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa522796d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa523079b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa52309cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa52253ea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4244367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4243809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4243807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f42438095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea9552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea9e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea9e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea92faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6b23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6b25dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6a6ffa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6a6fd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd48afad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd493ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd49400c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd488a2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd488a0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc48a7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc48a7efc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc489c91a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc489c8f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cafdfd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cb8c2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cb8e5c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cad87a93 at::native::DispatchStub<>::operator()<>()\n",
+      "2020-11-05 10:16:39,053\tWARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab35864f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x7fbab963179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd68fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dcc3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dcc3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dcc4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dcc4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dcc4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dd4f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1908)\u001b[0m     @     0x55969dcc4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e2484f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e2237c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x7f9e2842779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d4037fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d3f92b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d3f92bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d3f93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d3f93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d3f93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d401e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1984)\u001b[0m     @     0x5601d3f93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x7f92221a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2d9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a234b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2c0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a234bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a235689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a235689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a235689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a2c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1991)\u001b[0m     @     0x56425a235689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f93643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f08689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f93643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f08689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f93643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f08689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f93643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1948)\u001b[0m     @     0x55d330f08689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x7f276868d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580dd3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580d2eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580db9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580dbaa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580d2ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580db9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580dba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580d2f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580db9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580dba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580d2f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580db9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580dba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580d2f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580db9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580dba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2006)\u001b[0m     @     0x55b580d2f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03cf678de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed03aa944f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x7ed040b3f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac5068fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac4fc3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac4fc3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac4fc4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac4fc4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac4fc4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac504f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1979)\u001b[0m     @     0x560ac4fc4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa90644f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effab5378de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effa90644f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x7effaf10f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962ec7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962e22b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eaea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962e22bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962e23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962e23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e67738de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07e42a04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x7f07ea34b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8f0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e84bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e84bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e84c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e84c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e84c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e8d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1969)\u001b[0m     @     0x55e91e84c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad919e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x7fad97a9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a5a7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a502b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a502bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a503689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a503689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a503689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a58e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1967)\u001b[0m     @     0x55c40a503689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac9010a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac900e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac90105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e780ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e780a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e780c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f6990116d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f69909f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f6990a1cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f698febea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f698febc388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c4533bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c45c1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c45c41c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c450e3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c450e1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b0673ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b05be0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b05bde388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a1c24a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a1c22388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a1c245a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f22677888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f22652b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x7f226b36079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2d7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c232b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2bea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c232bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c233689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c233689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c233689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c2be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2019)\u001b[0m     @     0x56252c233689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f5617ca18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f56157ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x7f561b87979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5bcfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d517b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d517bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d518689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d518689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d518689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d5a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1985)\u001b[0m     @     0x55d77d518689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa81cda93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa81cb388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa81cd5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450cfefa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450cfed388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450cfef5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbdaa274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x7edbe0ad279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21ccfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d2127b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d2127bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d2128689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d2128689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d2128689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d21b3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1963)\u001b[0m     @     0x5626d2128689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc80d274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x7fcc86dd279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f64fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5ebfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5ebfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5ec0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5ec0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5ec0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5f4b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1994)\u001b[0m     @     0x5605e5ec0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49dd7d24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x7f49e387d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635f6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b263551b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b263551bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b263552689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b263552689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b263552689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b2635dd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1946)\u001b[0m     @     0x55b263552689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d611eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d6141c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d55e3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d55e1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8f158c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8e5faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8e5f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f0654164d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f0654a47b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f0654a6ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f0653f0ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe95528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe9552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe9552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa331ee9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f4dc6443390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec6193f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec58be7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x7f42449ef79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef69aefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6909b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6995a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6909bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6995643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef690a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6995643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef690a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6995643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef690a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef6995643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1990)\u001b[0m     @     0x55eef690a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9f2b4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9f2b2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9f2b45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082eaf5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082eaf3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082eaf55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e325dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e26ffa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e26fd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfb88c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfbf774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfe44a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959a568a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959a566388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959a5685a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9635a1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9635a35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934e041388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934e0435a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea5dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627ce9b8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea44a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627ce9b8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627ce9b9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627ce9b9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627ce9b9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627cea44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1961)\u001b[0m     @     0x5627ce9b9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31ed875a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4cbcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4cbc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa445a7aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa445a78388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5ea12ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5e95d0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5e95ce388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc275552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc275e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc30c118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31e101c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31d5a3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31d5a1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afe14fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afea32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afea55c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da50c2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da50c0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da50c25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51acfefa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51acfed388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f9659821a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f965981f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddce22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddd705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddd728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712aaf55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712b1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712d6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f9823aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f98238388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f9823a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe1035ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dfe8528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7f0578396390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed678333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed677a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed677a618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3266816a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3266814388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f32668165a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4c23aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4c238388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4c23a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab2ef9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab2ef7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab2ef95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30abe165a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ac5014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a6983bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a6a11eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a6a141c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a695e3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af37eed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af40d1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af40f4c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d6e7fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d6e7fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d7762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d7785c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2ed44d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2f627b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2f64ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f5356641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f5356641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f5356f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fbc648f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d432025a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d438ed4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a2338c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a23a774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa52253c388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa52253e5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4243ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f42463c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea92f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea92fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6a6ff5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6adea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd488a25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc489c915a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cad85388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cad875a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962e23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962eae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1978)\u001b[0m     @     0x55a962e23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac96fb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5acbbce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e7ef74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82ea3ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f698febe5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c450e35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b05be05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b062cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a230f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a47e28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa88b84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5faad8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fa88b84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450d6da4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450fbad8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f450d6da4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x7f451378579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825bc1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825b1cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825b1cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825b1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d55e35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d5cce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d81a18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8e5fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8ece54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f911b88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f0653f0a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f0653f0c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f06545f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe9e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe9e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe92faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe92f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa331ee9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa3327ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa3327efc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa331c91a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa331c8f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec58c18f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9f99f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2fa1e728de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2f9f99f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082f1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f08316b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f082f1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x7f083528b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e26ff5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e2dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e52bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7cfbf774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x7f7d0202279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cedcfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036ce37b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036ce37bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036ce38689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036ce38689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036ce38689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036cec3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1914)\u001b[0m     @     0x56036ce38689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959ac534f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959d1268de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb963c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb9661618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb963c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x7fb969d3979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99f2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f994db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f994dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f994e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934e72e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f9350c018de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f934e72e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x7f93547d979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f5983fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f58deb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f5969baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f596aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f58debfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f5969baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f596a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f58df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf95728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31f4724f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef3219458de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef31f4724f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x7ef32551d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffbbafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffb15b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4cbca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4d2b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4f7888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa445a7a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa4461654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa4486388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5e95d05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5e9cbb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc275e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc2752faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc2752f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc30c11ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc30c11d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc314f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc31517c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31d5a35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31dc8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afdef7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afdef5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afdef75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da57ad4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da7c808de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4da57ad4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51acfef5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51ad6da4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51afbad8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f96598215a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f9659f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f965c3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddcbcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddcbc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddcbca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f712b1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x7f713128b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da41b6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da4111b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da4111bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da4112689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da4112689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da4112689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da419d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1899)\u001b[0m     @     0x563da4112689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f989254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f9adf88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f989254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dfe852ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed677a61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3266f014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f32693d48de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4c9254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4edf88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab35e44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab5ab78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ae9d48de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30ac5014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x7f30b21a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a822185fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a8220e0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a8220e0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a8220e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a8220e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a8220e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a695e1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a695e35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a69cce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af3596a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af3594388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af35965a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af3c814f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d6c27a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d6c25388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d6c275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2eaeca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2eaea388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2eaec5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2f1d74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f316aa8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f5356f47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f53563e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f53563e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f53563e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fbc64ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fbc64d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fc547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d45dc08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d438ed4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x7f1d4999879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f557fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f4b2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f4b2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f4b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f4b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f4b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f53e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1936)\u001b[0m     @     0x55de8f4b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a25f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a23a774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x7f0a29b2279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd47fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dca2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dca2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dca3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dca3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dca3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dd2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1951)\u001b[0m     @     0x55f18dca3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa522c294f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa5250fc8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa522c294f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x7fa528cd479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f942fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f89db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f928baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f929a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f89dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f928baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f929643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f89e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f928baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f929643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f89e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f928baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f929643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f89e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4243ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x7f4249f9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x561685277fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x5616851d2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x5616851d2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x5616851d3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x5616851d3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x5616851d3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x56168525e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1882)\u001b[0m     @     0x5616851d3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea99e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7eabeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7ea99e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x7f7eafa9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f888fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f7e3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f7e3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f7e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f7e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6d2bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb6adea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x7eeb70e9579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd20fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cc7bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd06baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd07a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cc7bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd06baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd07643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cc7c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd06baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd07643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cc7c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd06baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd07643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cc7c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd06baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cd07643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1885)\u001b[0m     @     0x55ce5cc7c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd48f8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd4b4608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd48f8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x7efd4f03879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c43b2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c430db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4398baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4399a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c430dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4398baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4399643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c430e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4398baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4399643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c430e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4398baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4399643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c430e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4398baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c4399643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1955)\u001b[0m     @     0x5620c430e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc48a37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc48c84f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc48a37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x7fc49042779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x562095818fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x562095773b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957ffa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x562095773bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x562095774689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x562095774689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x562095774689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x5620957ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1893)\u001b[0m     @     0x562095774689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cb4724f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cd9458de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1cb4724f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x7fb1d151d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a3285fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a31e0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a31e0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a31e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a31e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5ac96fb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x7f5acf7a679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea839fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea794b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea81fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea820a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea794bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea81fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea820643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea795689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea81fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea820643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea795689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea81fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea820643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea795689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea81fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea820643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1975)\u001b[0m     @     0x5641ea795689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82e7ef74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x7f82edfa279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3dbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b336b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b336bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b337689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b337689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b337689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b3c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1966)\u001b[0m     @     0x560e5b337689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f69905a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f6992a7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f69905a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x7f699665479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e5ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6dbab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e46a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6dbabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6dbb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6dbb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6dbb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6e46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1883)\u001b[0m     @     0x5643c6dbb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c457ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c47ca18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c457ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x7f6c4b87979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x55563033afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630295b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630320baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630321a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630295bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630320baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630321643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630296689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630320baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630321643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630296689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630320baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630321643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630296689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630320baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630321643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1976)\u001b[0m     @     0x555630296689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b0879e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b062cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x7f2b0c37679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea27fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317e982b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317e982bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317e983689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317e983689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317e983689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317ea0e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1905)\u001b[0m     @     0x56317e983689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a230f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x7ee3a83ba79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6bffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f61ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f61abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f61b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f61b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f61b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f6a6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1986)\u001b[0m     @     0x561e8f61b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x7f5fae96379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a88125ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a8811bab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881245baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881246a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a8811babfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881245baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881246643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a8811bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881245baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881246643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a8811bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881245baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881246643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a8811bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881245baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a881246643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1980)\u001b[0m     @     0x55a8811bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825b1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825b1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825ba8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1964)\u001b[0m     @     0x556825b1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5d5cce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x7fa5dbd7979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9f15fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9e70b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9e70bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9e71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9e71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9e71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9efc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1892)\u001b[0m     @     0x5561e9e71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f8ece54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x7f0f94d9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a411fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a36cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a36cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a36d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a36d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a36d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a3f8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1957)\u001b[0m     @     0x559a3a36d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f0656aca8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f06545f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x7f065a6a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f9ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19efab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f86a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19efabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19efb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19efb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19efb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f85baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19f86643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1913)\u001b[0m     @     0x560e19efb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe92fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe99e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7febeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa331c915a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa33237c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa33484f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec58c1ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec58c1d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec61a4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x7f2fa5a4a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd44ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd3aab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd435baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd436a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd3aabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd435baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd436643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd3ab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd435baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd436643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd3ab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd435baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd436643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd3ab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd435baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd436643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1998)\u001b[0m     @     0x55e5bd3ab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69c8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f6923b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69afa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f6923bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f6924689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f6924689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f6924689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f69af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1904)\u001b[0m     @     0x5605f6924689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e2dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x7f75e8e9579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x558469994fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x5584698efb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x5584698efbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x5584698f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x5584698f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x5584698f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x55846997b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1953)\u001b[0m     @     0x5584698f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f959ac534f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x7f95a0cfe79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c060fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8bfbbb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c046baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c047a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8bfbbbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c046baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c047643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8bfbc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c046baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c047643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8bfbc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c046baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c047643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8bfbc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c046baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8c047643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1900)\u001b[0m     @     0x557f8bfbc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f994e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f994e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f99d9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1965)\u001b[0m     @     0x5654f994e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f5969baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f596a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f58df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f5969baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f596a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f58df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f5969baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f596a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1906)\u001b[0m     @     0x5651f58df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf94bcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf94bc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf94bca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffb15bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffb16689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffb16689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffb16689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffba1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1910)\u001b[0m     @     0x5567ffb16689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff4d2b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x7eff5336079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35f14fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35e6fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35e6fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35e70689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35e70689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35e70689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35efb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1996)\u001b[0m     @     0x55cb35e70689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa4461654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x7fa44c21079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe5724fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe567fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe567fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe5680689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe5680689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe5680689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe570b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1962)\u001b[0m     @     0x55ffe5680689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5ec18e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5e9cbb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x7fc5efd6679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7dabfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d06b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d92a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d06bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2013)\u001b[0m     @     0x55a2a7d07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc2752fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc2759e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc277eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc2759e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x7fc27ba9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5fcfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c557b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c557bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c558689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c558689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c558689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c5e3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2003)\u001b[0m     @     0x55fa2c558689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc309b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc309b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc309b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc310a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc3201618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc31dc8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x7fc323d3979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446be7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446b42b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bcea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446b42bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bce643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446b43689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bce643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446b43689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bce643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446b43689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446bce643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1901)\u001b[0m     @     0x55b446b43689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afe5e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3b00ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3afe5e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x7f3b0468d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87f1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f874cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f874cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f874d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f874d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f874d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f87d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1954)\u001b[0m     @     0x5621f874d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x7f4dab85879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f44afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f3a5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f431a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f3a5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f431643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f3a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f431643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f3a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f431643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f3a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f431643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1895)\u001b[0m     @     0x55c52f3a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51ad6da4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x7f51b378579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabf02fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabe5db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabe5dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabe5e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabe5e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabe5e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabee9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1894)\u001b[0m     @     0x557dabe5e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f9659f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x7f965ffb779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404ebfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x556940446b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x556940446bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x556940447689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x556940447689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x556940447689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x5569404d2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1917)\u001b[0m     @     0x556940447689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddd2b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddf7888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7ddd2b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x7f7de336079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb7ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eadab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb65baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb66a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eadabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb65baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb66643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eadb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb65baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb66643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eadb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb65baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb66643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eadb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb65baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eb66643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1939)\u001b[0m     @     0x55c20eadb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x7f6f9e9d079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb636ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb62cab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6355baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6356a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb62cabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6355baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6356643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb62cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6355baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6356643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb62cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6355baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6356643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb62cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6355baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb6356643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1918)\u001b[0m     @     0x55ecb62cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe1035d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe1918b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe193bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe0ddda93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe0ddb388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe0ddd5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dfe852d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dff135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dff158c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dfe5faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dfe5f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed677a61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed678344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed678367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed677809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed677807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed6778095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f3266f014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x7f326cfac79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9bcfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d917b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d917bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d918689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d918689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d918689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d9a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1971)\u001b[0m     @     0x56034d918689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb4c9254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x7eeb529d079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee727fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee682b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee682bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee683689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee683689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee683689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee70e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1888)\u001b[0m     @     0x55a5ee683689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab35e44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x7f2ab968f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7faea6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae01b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae01bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1934)\u001b[0m     @     0x55f7fae02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a82216c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1890)\u001b[0m     @     0x55a8220e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a6c1a18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a69cce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x7f1a6fd7979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c6abfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c606b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c691baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c692a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c606bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c691baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c692643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c607689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c691baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c692643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c607689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c691baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c692643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c607689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c691baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c692643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1902)\u001b[0m     @     0x55d00c607689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af61548de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af3c814f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x7f4af9d2c79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0d4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d02fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0bba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d02fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d030689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d030689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d030689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d0bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1891)\u001b[0m     @     0x55e49d030689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d73124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d97e58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64d73124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x7f64dd3bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a72ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a68ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a715baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a716a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a68abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a715baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a716643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a68b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a715baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a716643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a68b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a715baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a716643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a68b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a715baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a716643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1973)\u001b[0m     @     0x55695a68b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f2f1d74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x7f3f3528279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c54056fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c53fb1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c53fb1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c53fb2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c53fb2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c53fb2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c5403d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1959)\u001b[0m     @     0x561c53fb2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f5356ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f5358fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f5356ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fc56ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fba0ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fba0a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fba0c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f928baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f929643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1887)\u001b[0m     @     0x558b9f89e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f7e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f86f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1903)\u001b[0m     @     0x56192f7e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a31e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a326c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1898)\u001b[0m     @     0x5560a31e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fe99e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x7f7fefa9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925db4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d0fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d0fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d10689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d10689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d10689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d9b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1937)\u001b[0m     @     0x564925d10689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa33237c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x7fa33842779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4151fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac40acb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4138a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac40acbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4138643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac40ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4138643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac40ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4138643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac40ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac4138643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1981)\u001b[0m     @     0x562ac40ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec61c7c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec5669a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec5667388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec56695a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf952b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf977888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf952b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x7edf9b36079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b989bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b97f6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9881baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9882a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b97f6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9881baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9882643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b97f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9881baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9882643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b97f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9881baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9882643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b97f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9881baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b9882643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1993)\u001b[0m     @     0x5576b97f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc335778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc310a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x7efc3714f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935fbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f693556b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f693556bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f693557689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f693557689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f693557689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f6935e2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1920)\u001b[0m     @     0x55f693557689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe14c84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe399b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dfe5fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed677ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed67a3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed677ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x7ed67df9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8fb6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f11b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f11bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f12689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fc0f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fe5ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f90fc0f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec5d544f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec82278de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe14c84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x7f7fe757379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb962cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9587b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9612baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9613a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9587bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9612baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9613643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9588689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9612baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9613643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9588689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9612baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9613643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9588689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9612baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9613643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1884)\u001b[0m     @     0x55cfb9588689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dfece54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4e011b88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4dfece54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x7f4e04d9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f66fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992ec1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992ec1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992ec2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f12689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f12689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f9d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1943)\u001b[0m     @     0x55f9e8f12689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x7f535cb7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96721fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e9667cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96707baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96708a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e9667cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96707baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96708643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e9667d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96707baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96708643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e9667d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96707baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96708643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e9667d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96707baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e96708643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1949)\u001b[0m     @     0x563e9667d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x7f91021a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5aceffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5ac4ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5ac4abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5ac4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5ac4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5ac4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5acd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1897)\u001b[0m     @     0x564a5ac4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ec5d544f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x7f1ecbdff79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d94fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67cefb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67cefbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67cf0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67cf0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67cf0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67d7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=1886)\u001b[0m     @     0x555a67cf0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992ec2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992ec2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992f4d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=2010)\u001b[0m     @     0x55d992ec2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "2020-11-05 10:16:39,241\tERROR trial_runner.py:567 -- Trial PPO_jss_env_f9d29_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::PPO.train()\u001b[39m (pid=2000, ip=172.17.0.4)\n",
+      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
+      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
+      "    raise e\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
+      "    result = Trainable.train(self)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
+      "    result = self.step()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
+      "    res = next(self.train_exec_impl)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
+      "    return next(self.built_iterator)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 876, in apply_flatten\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 828, in add_wait_hooks\n",
+      "    item = next(it)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 466, in base_iterator\n",
+      "    actor_set.init_actors()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1238, in init_actors\n",
+      "    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])\n",
+      "ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 27.8/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_f9d29_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_f9d29_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_f9d29_00000_0_2020-11-05_10-16-31/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3642\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:18,469 - wandb.wandb_agent - INFO - Running runs: ['ix8moovg']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204415-ix8moovg/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204415-ix8moovg/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 224.37374\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 224.37374\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3435\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708256\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ix8moovg\u001b[0m\n",
-      "2020-10-14 20:44:23,694 - wandb.wandb_agent - INFO - Cleaning up finished run: ix8moovg\n",
-      "2020-10-14 20:44:24,023 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:24,023 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta56\n",
-      "2020-10-14 20:44:24,025 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta56\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/zda8eskt\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204426-zda8eskt\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "2020-11-05 10:16:39,249\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 27.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_f9d29_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_f9d29_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_f9d29_00000_0_2020-11-05_10-16-31/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
+      "Traceback (most recent call last):\n",
+      "  File \"train.py\", line 74, in <module>\n",
+      "    train_func()\n",
+      "  File \"train.py\", line 56, in train_func\n",
+      "    analysis = tune.run(PPOTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
+      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
+      "ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_f9d29_00000])\n",
+      "2020-11-05 10:16:39,262\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3726\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:29,037 - wandb.wandb_agent - INFO - Running runs: ['zda8eskt']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 1782\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffbdff035801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff252160a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m E1105 10:16:39.233397  2000  3160 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=7dd3b2683d323ffd31c3fed901000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m E1105 10:16:39.233623  2000  3160 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=0a51bbe8b791810831c3fed901000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m E1105 10:16:39.247596  2000  3160 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d7b1ed864d13e17f31c3fed901000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m E1105 10:16:39.258622  2000  3160 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=4027410178b738888edbbd3001000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=8edbbd3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m E1105 10:16:39.258785  2000  3160 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=f4290d8c04f479ac8edbbd3001000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=8edbbd3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m E1105 10:16:39.258960  2000  3160 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=a4e1f5da99aef89f8edbbd3001000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=8edbbd3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m E1105 10:16:39.263782  2000  3160 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=efaf5dbfabc208739f3cc57a01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m E1105 10:16:39.263895  2000  3160 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=b3b45bae970c41729f3cc57a01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=2000)\u001b[0m E1105 10:16:39.263979  2000  3160 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=4f22c19b5f703db99f3cc57a01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff90aded9101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa97540c201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff091d563401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff50168bc201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204426-zda8eskt/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204426-zda8eskt/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 178.59596\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 178.59596\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3881\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708267\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_101628-m83rym9l/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_101628-m83rym9l/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/zda8eskt\u001b[0m\n",
-      "2020-10-14 20:44:34,252 - wandb.wandb_agent - INFO - Cleaning up finished run: zda8eskt\n",
-      "2020-10-14 20:44:36,273 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:36,273 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta57\n",
-      "2020-10-14 20:44:36,275 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta57\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mstellar-sweep-2\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/m83rym9l\u001b[0m\n",
+      "2020-11-05 10:16:47,782 - wandb.wandb_agent - INFO - Cleaning up finished run: m83rym9l\n",
+      "2020-11-05 10:16:48,080 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:16:48,080 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta42\n",
+      "2020-11-05 10:16:48,082 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta42\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/uz9lk4hk\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204438-uz9lk4hk\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mfloral-sweep-3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/hddvertv\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/x7lng0kl\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_101649-x7lng0kl\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:16:51,645\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 15.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_065e8_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3824\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:41,292 - wandb.wandb_agent - INFO - Running runs: ['uz9lk4hk']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204438-uz9lk4hk/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204438-uz9lk4hk/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 209.43434\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 209.43434\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3742\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708279\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/uz9lk4hk\u001b[0m\n",
-      "2020-10-14 20:44:46,515 - wandb.wandb_agent - INFO - Cleaning up finished run: uz9lk4hk\n",
-      "2020-10-14 20:44:46,834 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:46,834 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta58\n",
-      "2020-10-14 20:44:46,836 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta58\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/i1pzxngg\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204448-i1pzxngg\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:16:53,098 - wandb.wandb_agent - INFO - Running runs: ['x7lng0kl']\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m 2020-11-05 10:16:54,490\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m *** SIGSEGV (@0x0) received by PID 3475 (TID 0x7fecac65d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m *** SIGSEGV (@0x0) received by PID 3463 (TID 0x7fe161d1c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m *** SIGSEGV (@0x0) received by PID 3561 (TID 0x7f357d9df700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f357d5b8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067d4e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067cc0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067cc118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067cc11ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067cc11d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m *** SIGSEGV (@0x0) received by PID 3582 (TID 0x7f1a48ae7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7f1a486c0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb4860ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb47d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb47d3c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb47d3cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb47d3cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb4861fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m *** SIGSEGV (@0x0) received by PID 3497 (TID 0x7f1c54e79700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m *** SIGSEGV (@0x0) received by PID 3539 (TID 0x7ffaf231c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7ffaf1ef5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf1e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf15528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf1552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf1552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m *** SIGSEGV (@0x0) received by PID 3566 (TID 0x7fdcc35d4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fdcc31ad390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc3124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc284f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc28528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc2852ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc2852d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc3135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m *** SIGSEGV (@0x0) received by PID 3456 (TID 0x7f4fcb2ef700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m *** SIGSEGV (@0x0) received by PID 3535 (TID 0x7fbf4b3af700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m *** SIGSEGV (@0x0) received by PID 3509 (TID 0x7f4e6ecc1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f4e6e89a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6e70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6de357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6de388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6de38ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6de38d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6e71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6e73ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m *** SIGSEGV (@0x0) received by PID 3533 (TID 0x7f7a5aaa1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f7a5a67a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b5a5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b59ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b59cd28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b59cd2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b59cd2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b5a5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b5a5d8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m *** SIGSEGV (@0x0) received by PID 3532 (TID 0x7fcb050b9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7fcb04c92390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c04a8bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c041b67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c041b98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c041b9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c041b9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c04a9cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c04abfc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m *** SIGSEGV (@0x0) received by PID 3458 (TID 0x7fb5d96ac700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7fb5d9285390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d9225f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d89507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m *** SIGSEGV (@0x0) received by PID 3590 (TID 0x7f0cec157700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7f0cebd30390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddebbc7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddeb2f27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddeb2f58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddeb2f5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddeb2f5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddebbd8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddebbfbc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m *** SIGSEGV (@0x0) received by PID 3460 (TID 0x7f2d2803e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7f2d27c17390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m *** SIGSEGV (@0x0) received by PID 3471 (TID 0x7f96276e9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m *** SIGSEGV (@0x0) received by PID 3462 (TID 0x7f1e02680700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7f1e02259390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m *** SIGSEGV (@0x0) received by PID 3468 (TID 0x7f7186a78700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m *** SIGSEGV (@0x0) received by PID 3447 (TID 0x7f64ac9d0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f64ac5a9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35ac536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35abc617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35abc648f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35abc64ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35abc64d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35ac547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35ac56ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m *** SIGSEGV (@0x0) received by PID 3529 (TID 0x7f429e1c1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f429dd9a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139dd37f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139d4627db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139d4658f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139d465ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139d465d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139dd48b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139dd6bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m *** SIGSEGV (@0x0) received by PID 3537 (TID 0x7fc13f05e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7fc13ec37390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923ea21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923e14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923e14f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923e14fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923e14fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923ea32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923ea55c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m *** SIGSEGV (@0x0) received by PID 3466 (TID 0x7f22c8064700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7f22c7c3d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c7af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m *** SIGSEGV (@0x0) received by PID 3547 (TID 0x7f3104df9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f31049d2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0204825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0203f507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0203f538f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0203f53ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0203f53d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0204836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0204859c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m *** SIGSEGV (@0x0) received by PID 3584 (TID 0x7f973c873700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f973c44c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683c0c0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683b7eb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683b7ee8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683b7eead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683b7eed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683c0d1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683c0f4c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683b596a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683b594388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m *** SIGSEGV (@0x0) received by PID 3538 (TID 0x7f98fdf50700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f98fdb29390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fda0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fd1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fd1388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fd138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fd138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fda1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fda3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fcee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fcede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m *** SIGSEGV (@0x0) received by PID 3553 (TID 0x7fe4cc677700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fe4cc250390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cc01cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cb7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cb74a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cb74aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cb74ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cc02db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cc050c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m *** SIGSEGV (@0x0) received by PID 3569 (TID 0x7fcba338a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7fcba2f63390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca2f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca263e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca26418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca2641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca2641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca2f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca2f47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m *** SIGSEGV (@0x0) received by PID 3526 (TID 0x7f65818e0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f65814b9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f3681476f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f3680ba17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m *** SIGSEGV (@0x0) received by PID 3588 (TID 0x7f1110897700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7f1110470390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee2103e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee20fb0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee20fb118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee20fb11ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee20fb11d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee2103f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee210417c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee20f8b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee20f8b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m *** SIGSEGV (@0x0) received by PID 3457 (TID 0x7f80a6b50700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m *** SIGSEGV (@0x0) received by PID 3451 (TID 0x7f66bc0d2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m *** SIGSEGV (@0x0) received by PID 3465 (TID 0x7f2b31647700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m *** SIGSEGV (@0x0) received by PID 3544 (TID 0x7f33f54d6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f33f50af390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f5048f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f47737db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m *** SIGSEGV (@0x0) received by PID 3506 (TID 0x7f50acf1f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m *** SIGSEGV (@0x0) received by PID 3500 (TID 0x7f585ec6d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f585e846390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295e7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m *** SIGSEGV (@0x0) received by PID 3517 (TID 0x7f1db0f9f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7f1db0b78390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m *** SIGSEGV (@0x0) received by PID 3580 (TID 0x7f81e7ecf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m *** SIGSEGV (@0x0) received by PID 3459 (TID 0x7f4c03d61700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f4c0393a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m *** SIGSEGV (@0x0) received by PID 3505 (TID 0x7fdc23443700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fdc2301c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad22f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad2263e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad226418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m *** SIGSEGV (@0x0) received by PID 3448 (TID 0x7fe867bd9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fe8677b2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb96761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb966d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m *** SIGSEGV (@0x0) received by PID 3520 (TID 0x7fd66c266700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m *** SIGSEGV (@0x0) received by PID 3450 (TID 0x7f17fbbdd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7f17fb7b6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fb61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m *** SIGSEGV (@0x0) received by PID 3550 (TID 0x7f69994c9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f69990a2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a99056f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a987817db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m *** SIGSEGV (@0x0) received by PID 3522 (TID 0x7f8b936fb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f8b932d4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c93229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c929547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c929578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c92957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c92957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c9323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c9325dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c926ffa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c926fd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c926ff5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m *** SIGSEGV (@0x0) received by PID 3478 (TID 0x7f24486d9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7f24482b2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m *** SIGSEGV (@0x0) received by PID 3576 (TID 0x7f4ab076e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f4ab0347390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bb02f3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bafa1e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m *** SIGSEGV (@0x0) received by PID 3454 (TID 0x7f3894ea6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f3894a7f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f0994774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m *** SIGSEGV (@0x0) received by PID 3524 (TID 0x7fad4bb8b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7fad4b764390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4b61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4ad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m *** SIGSEGV (@0x0) received by PID 3530 (TID 0x7f686eac9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f686e6a2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396e5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396dccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m *** SIGSEGV (@0x0) received by PID 3508 (TID 0x7f5c68653700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f5c6822c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d6801cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d677477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m *** Aborted at 1604571419 (unix time) try \"date -d @1604571419\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m *** SIGSEGV (@0x0) received by PID 3469 (TID 0x7fd12950b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fd1290e4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa229088f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa2287b37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa2287b68f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa2287b6ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa2287b6d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa229099b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa2290bcc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa22855ea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa22855c388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m *** SIGSEGV (@0x0) received by PID 3515 (TID 0x7f6887b4c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m *** SIGSEGV (@0x0) received by PID 3452 (TID 0x7fe8ee2e1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fe8edeba390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ede24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ed54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fecac236390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdac101f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdab82c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdab82f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m *** SIGSEGV (@0x0) received by PID 3512 (TID 0x7f6d05498700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f6d05071390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e04fe3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e0470e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e047118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m *** SIGSEGV (@0x0) received by PID 3556 (TID 0x7fc71cd40700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7fc71c919390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981c774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981be9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m *** SIGSEGV (@0x0) received by PID 3598 (TID 0x7fd3ae78e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fd3ae367390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ae30bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ada367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ada398f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fe1618f5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb2617f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb260f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb260f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb260f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m *** SIGSEGV (@0x0) received by PID 3461 (TID 0x7faeab9ed700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7faeab5c6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7fab43af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7faab657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m *** SIGSEGV (@0x0) received by PID 3574 (TID 0x7f4eb223d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f4eb1e16390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb1d89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb14b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m *** SIGSEGV (@0x0) received by PID 3453 (TID 0x7faaa157c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m *** SIGSEGV (@0x0) received by PID 3528 (TID 0x7f91f1819700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f91f13f2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f139ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f0aca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m *** SIGSEGV (@0x0) received by PID 3473 (TID 0x7f1e47be7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067d4f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067d517c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067c9b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067c9b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067c9b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb48642c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb47ae4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb47ae2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb47ae45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7f1c54a52390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed5495df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed540887db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed5408b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed5408bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf1e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf1e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf12faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf12f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf12fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m *** SIGSEGV (@0x0) received by PID 3534 (TID 0x7f21b4c0e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7f21b47e7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b460ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b3d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b3d3c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc3158c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc25faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc25f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc25fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m *** SIGSEGV (@0x0) received by PID 3467 (TID 0x7f9dfbb9c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f9dfb775390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efb61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efad4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f4fcaec8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20cae66f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20ca5917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20ca5948f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20ca594ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7fbf4af88390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904af13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904a63e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904a6418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904a641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6dbe0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6dbde388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6dbe05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6e2cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f7079e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b59a7aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b59a78388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b59a7a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b5a1654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b5c6388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b5a1654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x7f4b6021079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3c08fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3b63b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3befa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3b63bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3bef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3b64689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3bef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3b64689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3bef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3b64689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3bef643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3533)\u001b[0m     @     0x5603d3b64689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m *** SIGSEGV (@0x0) received by PID 3474 (TID 0x7fe5cbbcc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fe5cb7a5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cb61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cad4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cad4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c03f61a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c03f5f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c03f615a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c0464c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c06b1f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c0464c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x7f9c0a6f779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x55898421afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984175b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984200baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984201a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984175bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984200baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984201643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984176689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984200baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984201643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d89538f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d8953ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d8953d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d9236b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d9259c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d86fba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddeb09da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddeb09b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddeb09d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddeb7884f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddedc5b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddeb7884f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x7eddf183379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f155fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f0b0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f0b0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f0b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f0b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f0b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f13c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3590)\u001b[0m     @     0x55b21f0b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe27af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe272207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe272238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe27223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe27223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe27b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe27b29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m *** SIGSEGV (@0x0) received by PID 3449 (TID 0x7f4adc9bc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f4adc595390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdc521f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdbc4c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdbc4f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m *** SIGSEGV (@0x0) received by PID 3502 (TID 0x7f85fafbf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f85fab98390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fab21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fa24c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fa24f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fa24fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f96272c2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f6727229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f67269547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f67269578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f6726957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f6726957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f672723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f672725dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef0213af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef018657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef018688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef01868ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef01868d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef0214bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef0216ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f7186651390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f42864f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f4285c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f4285c278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f4285c27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f4285c27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f428650ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m *** SIGSEGV (@0x0) received by PID 3601 (TID 0x7f1b35d70700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7f1b35949390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec357f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec34f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec34f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec34f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35aba0ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35aba0a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35aba0c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35ac0f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35ae5ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35ac0f74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139d20da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139d20b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139d20d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139d8f84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139fdcb8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f139d8f84f5 at::Tensor::copy_()\n",
+      "2020-11-05 10:17:00,114\tWARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923def7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923def5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923def75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923e5e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f9240ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f923e5e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c72207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c72238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c7223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c7223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c7b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c7b29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0203cfba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0203cf9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f0203cfb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f02043e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f02068b98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f02043e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683b5965a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683bc814f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683e1548de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f683bc814f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x7f6841d2c79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b878866fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b8787c1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b8787c1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b8787c2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b8787c2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b8787c2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b87884d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3584)\u001b[0m     @     0x55b8787c2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fcee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fd5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69ffa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f69fd5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x7f6a0367679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f42a2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f41fdb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4289a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f41fdbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4289643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f41fe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4289643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f41fe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4289643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f41fe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f4289643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3538)\u001b[0m     @     0x5629f41fe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cb4f2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cb4f0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cb4f25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cbbdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5ce0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5cbbdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x7fb5d1c8879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b94ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b8aab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b936a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b8aabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca23e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca23e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca23e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca2ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca4fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f3680ba48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f3680ba4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f3680ba4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f3681487b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f36814aac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f368094ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee20f8b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee20ffa44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee2124778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee20ffa44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x7ee21604f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef25fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ee80b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ee80bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ee81689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ee81689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ee81689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ef0c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3588)\u001b[0m     @     0x556e1ee81689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f80a6729390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a6193f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a58be7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a58c18f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a58c1ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a58c1d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a61a4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m *** SIGSEGV (@0x0) received by PID 3472 (TID 0x7fa03bd0c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7fa03b8e5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713b89ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713afc97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713afcc8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713afccad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m *** SIGSEGV (@0x0) received by PID 3525 (TID 0x7f8361c83700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f836185c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f54617f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f5460f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f5460f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f5460f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m *** SIGSEGV (@0x0) received by PID 3479 (TID 0x7f755d901700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f755d4da390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465d476f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465cba17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465cba48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465cba4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f66bbcab390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bbaf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bb2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bb2238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bb223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bb223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m *** SIGSEGV (@0x0) received by PID 3531 (TID 0x7f50ec23a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7f2b31220390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc310b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc307e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc307e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc307e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc307e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc310c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f47768f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f4776ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f4776d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f5059b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f507cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f451ea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m *** SIGSEGV (@0x0) received by PID 3559 (TID 0x7f830812d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f8307d06390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f5407af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f54072207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f54072238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m *** SIGSEGV (@0x0) received by PID 3541 (TID 0x7f1a09317700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7f1a08ef0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb08b85f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb082b07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f50acaf8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21ac9e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21ac1137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21ac1168f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21ac116ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21ac116d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295dee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295dee98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295dee9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295dee9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295e7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m *** SIGSEGV (@0x0) received by PID 3483 (TID 0x7f9791603700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f97911dc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f6891166f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb09e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb01137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb01168f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb0116ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb0116d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f81e7aa8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e7a23f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e714e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e71518f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e7151ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d038def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d030097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d0300c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d0300cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad22641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad22641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad22f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad22f47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad223e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb966d4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb966d4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb966d4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb967630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb967653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fd66be3f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76bddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76b5097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76b50c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76b50cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m *** SIGSEGV (@0x0) received by PID 3578 (TID 0x7f2f2956e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f2f29147390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fad4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fad4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fad4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fb630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m *** SIGSEGV (@0x0) received by PID 3570 (TID 0x7f15a3af8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7f15a36d1390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a361ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a2d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a2d4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a2d4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m *** SIGSEGV (@0x0) received by PID 3470 (TID 0x7fdf56410700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fdf55fe9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb055e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb05554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a987848f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a98784ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a98784d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a99067b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c92dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c952bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c92dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x7f5c98e9579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944bdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d94418b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d94418bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d94419689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d94419689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d94419689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d944a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3522)\u001b[0m     @     0x560d94419689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef548250f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef54797b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef54797e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef54797ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef54797ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bafa218f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bafa21ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bafa21d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bb0304b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bb0327c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1baf7c9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f0993e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f0993ea28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f0993ea2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f0993ea2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f0994785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f09947a8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4ad4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4ad4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396dcd28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396dcd2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396dcd2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396e5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396e5d8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396da7aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396da78388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d6774a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d6774aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d6774ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d6802db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d68050c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d674f2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d674f0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa22855e5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa228c494f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa22b11c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa228c494f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x7fa22ecf479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4341fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a429cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4328a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a429cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4328643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a429d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4328643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a429d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4328643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a429d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a4328643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3469)\u001b[0m     @     0x55c4a429d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f6887725390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f39876aef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f3986dd97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f3986ddc8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f3986ddcad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ed5528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ed552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ed552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ede35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ede58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ed2faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ed2f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdab82fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdab82fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdac112b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdac135c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdab5d7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdab5d5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdab5d75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e04711ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e04711d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e04ff4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e05017c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e044b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e044b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e044b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981bea28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981bea2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981bea2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981c785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981c7a8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981bc4aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981bc48388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ada39ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ada39d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ae31cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ae33fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ad7e1a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ad7df388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4ad7e15a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m *** SIGSEGV (@0x0) received by PID 3527 (TID 0x7fe1ffd72700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fe1ff94b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2ff751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2fee7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb260f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb26180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb26182dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb260ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb260ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb260ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m *** Aborted at 1604571420 (unix time) try \"date -d @1604571420\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m *** SIGSEGV (@0x0) received by PID 3510 (TID 0x7fa963bee700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7fa9637c7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a6361ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a62d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a62d4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7faab688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7faab68ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7faab68d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7fab44bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7fab46ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb14b78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7faaa1155390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba10f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba08247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba08278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba0827ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f0acd8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f0acdad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f0acdd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f13b0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f13d3c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7f1e477c0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef4761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef46d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067d0a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067f5778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f067d0a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x7f068314f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf30fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8be8bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf17a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8be8bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8be8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8be8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8be8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8bf17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3561)\u001b[0m     @     0x559c8be8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb481cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb4a6a28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb481cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x7eeb4e27a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x561977938fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x561977893b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x561977893bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x561977894689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x561977894689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x561977894689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x56197791f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3582)\u001b[0m     @     0x561977894689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed5408bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed5496eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed54991c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed53e33a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed53e31388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed53e335a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf19e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf3eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf19e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x7fcbf7a9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b1319b1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b13190cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131997baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131998a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b13190cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131997baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131998643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b13190d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131997baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131998643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b13190d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131997baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131998643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b13190d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131997baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b131998643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3539)\u001b[0m     @     0x55b13190d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b3d3cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b3d3cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b461fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b4642c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b3ae4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b3ae2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc2ce54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc51b88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc2ce54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x7fadc8d9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e304218fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e304173b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041ffa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e304173bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e304174689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e304174689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e304174689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e3041ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3566)\u001b[0m     @     0x55e304174689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efad4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efad4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efb630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efb653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efaaf5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efaaf3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efaaf55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20ca594d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20cae77b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20cae9ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20ca33ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20ca33a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20ca33c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904a641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904af24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904af47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904a3e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904a3e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904a3e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f6e2cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x7f1f7437679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db549fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db4a4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db530a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db4a4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db530643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db4a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db530643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db4a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db530643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db4a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db530643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3509)\u001b[0m     @     0x5570db4a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cad4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cb630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cb653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6caaf5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6caaf3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984176689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984200baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984201643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984176689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984200baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984201643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3532)\u001b[0m     @     0x558984176689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d86f9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d86fb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d8de64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe26fcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe26fc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe26fcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe276b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdbc4fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fa24fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fab32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fab55c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56f9ff7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f67266ffa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f67266fd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f67266ff5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f6726dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef01610a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef0160e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef016105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef01cfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f428652dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f42859cfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f42859cd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f42859cf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec34f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec3580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec3582dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec34ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec34ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x7f35b21a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de99457fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de993b2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de993b2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de993b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de993b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de993b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de9943e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3447)\u001b[0m     @     0x55de993b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x7f13a39a379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c3108dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c30fe8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31073baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31074a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c30fe8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31073baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31074643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c30fe9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31073baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31074643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c30fe9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31073baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31074643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c30fe9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31073baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c31074643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3529)\u001b[0m     @     0x555c30fe9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x7f924468d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb6afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafac5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb51a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafac5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb51643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafac6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb51643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafac6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb51643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafac6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafb51643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3537)\u001b[0m     @     0x564cafac6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c6fcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c6fc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c6fcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c76b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x7f020a49179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f232fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f18db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f219a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f18dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f219643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f18e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f219643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f18e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f219643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f18e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f219643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3547)\u001b[0m     @     0x555f6f18e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b936643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b8ab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b936643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b8ab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b936643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b8ab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b936643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3553)\u001b[0m     @     0x555f9b8ab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca2ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x7f9ca8b7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803e2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc8033db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc8033dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc8033e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc8033e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc8033e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc803c9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3569)\u001b[0m     @     0x55bc8033e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f368094a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f368094c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f36810374f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a61c7c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a5669a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a5667388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713afccd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713b8afb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713b8d2c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713ad74a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713ad72388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f5460f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f546180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f546182dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f5460ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465cba4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465d487b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465d4aac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465c94ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465c94a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bbb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bbb29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bafcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bafc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bafcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f50ebe13390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21ebd9ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21eb4c97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21eb4cc8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc310e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc3058ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc30589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc3058b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f451c388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f451e5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f4c094f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f5407223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f5407223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f5407b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f5407b29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb082b38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21ac9f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21aca1cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21abebea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21abebc388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21abebe5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21ac5a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295e7efc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295dc91a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295dc8f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295dc915a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295e37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f296084f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f68908917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f68908948f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f6890894ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb09f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb0a1cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeafebea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeafebc388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeafebe5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e7151d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e7a34b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e7a57c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e6ef9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e6ef7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e6ef95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d0300cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d038efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d03912c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d02db4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d02db2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad223e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad223e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad22ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad24fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "2020-11-05 10:17:00,150\tWARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb966af5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb966af3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb966af55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb9671e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f00290b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f00287e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fb653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8faaf5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8faaf3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8faaf55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a2d4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a3630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a3653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a2af5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a2af3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb0555528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb055552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a9908ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a9852ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a9852a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a9852c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a98c174f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a9b0ea8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1baf7c7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1baf7c95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bafeb44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f0993c4aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f0993c48388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f0993c4a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4ad4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4b630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4b653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4aaf5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396da7a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396e1654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d674f25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d67bdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f3986ddcd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f39876bfb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f39876e2c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ed2fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ed9e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdabcc24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdae1958de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e04ba44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e070778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981bc4a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981c3354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4adecc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4b039f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2fee7f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb2613ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb26388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb2613ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x7fb26746579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5bbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea516b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea516bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a62d4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a62d4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a63630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a63653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7faa910a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7faa90e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7faa9105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7faaffb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb14b7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba0827d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba110ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba112dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba05cfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba05cd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f0875a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f0873388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f08755a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f0f604f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef46d4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef46d4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed5451e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed569f18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed5451e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x7eed5a5c979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc91afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc875b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc901a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc875bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc901643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc876689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc901643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc876689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc901643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc876689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc901643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3497)\u001b[0m     @     0x55e2dc876689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b3ae45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b41cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b66a28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efb1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efd6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6efb1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x7f6f0128b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f3183fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f30deb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f316aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f30debfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f316a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f30df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f316a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f30df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20caa274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20ccefa8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20caa274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x7f20d0ad279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f9bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146ef6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f82a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146ef6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f82643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146ef7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f82643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146ef7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f82643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146ef7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146f82643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3456)\u001b[0m     @     0x55a146ef7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904aad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904cfa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f904aad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x7f9050b7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795ea6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e01b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e01bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6caaf55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cb1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cd6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86db2b98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86d8de64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x7f86dee9179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d2dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40c88b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d14a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40c88bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d14643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40c89689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d14643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40c89689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d14643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40c89689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40d14643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3458)\u001b[0m     @     0x559a40c89689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe29b898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe276b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x7efe2d76179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a8ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc89eab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a76a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc89eabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a76643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc89eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a76643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc89eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a76643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc89eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc8a76643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3460)\u001b[0m     @     0x555fc89eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdbc4fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdc532b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdc555c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdb9f7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56f9ff5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56f9ff75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fa6e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fcbb58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f67292bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f6726dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x7f672ce9579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d852fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d7adb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d839a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d7adbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d839643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d7ae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d839643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d7ae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d839643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d7ae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d839643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3471)\u001b[0m     @     0x562d4d7ae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef041ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f42860ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f428858d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f42860ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x7f428c16579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a35b5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a3510b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec34ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec353ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec3788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c9b898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3c76b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x7ef3cd76179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bcdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46b28b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46b28bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46b29689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46b29689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46b29689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46bb4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3466)\u001b[0m     @     0x562a46b29689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f368350a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f36810374f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x7f36870e279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b73233fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7318eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b73219baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7321aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7318ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b73219baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7321a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7318f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b73219baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7321a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7318f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b73219baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7321a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7318f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b73219baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7321a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3526)\u001b[0m     @     0x557b7318f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713ad745a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713b45f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713d9328de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f713b45f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x7f714150a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d97fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6cf2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6cf2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6cf3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6cf3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6cf3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6d7e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3472)\u001b[0m     @     0x5647a6cf3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f5460ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f5460ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465c94c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465d0374f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465f50a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bb6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bdb898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37bb6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x7f37c176179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b0585fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b04e0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b04e0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b04e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21eb4ccad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc30c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc331498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc30c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f70dc8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04f4c094f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x7f04facb479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273f6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x556227351b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x556227351bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x556227352689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x556227352689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x556227352689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x5562273dd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3544)\u001b[0m     @     0x556227352689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f5406fcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f5406fc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb082b3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21aea7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21ac5a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x7f21b265479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade0b3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade00eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade099baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade09aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade00ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade099baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade09a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade00f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade099baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade09a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade00f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade099baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade09a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade00f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade099baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade09a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3506)\u001b[0m     @     0x562ade00f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f295e37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x7f296442779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be44afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be3a5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be431a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be3a5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be431643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be3a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be431643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be3a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be431643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be3a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be430baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be431643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3500)\u001b[0m     @     0x5600be3a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f6890894d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f6891177b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f689119ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f689063ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb05a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb2a7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb05a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e75e44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e9ab78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d02db45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d0349f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d059728de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad22ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x7fad28b7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc341afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3375b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3401a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3375bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3401643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3376689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3401643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3376689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3401643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3376689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3401643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3505)\u001b[0m     @     0x55abc3376689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb9696b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb9671e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x7fb96d28b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d62efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d589b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d615a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d589bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d615643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d58a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d615643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d58a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76b50cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76bdefb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f00287e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fb1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fd6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee8fb1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x7ee90128b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb76dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb6c8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb753baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb754a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb6c8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb753baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb754643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb6c9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb753baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb754643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb6c9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb753baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb754643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb6c9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a2af55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a31e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a56b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb055552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb055e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb055e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb0552faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb0552f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb0552fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a98c174f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x7f3a9ecc279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x557950737fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x557950692b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x557950692bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x557950693689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x557950693689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x557950693689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x55795071e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3550)\u001b[0m     @     0x557950693689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef548261b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef548284c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef547726a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef547724388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bb23878de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bafeb44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x7f1bb5f5f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b85a8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b8503b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b8503bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b8504689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b8504689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b8504689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b858f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3576)\u001b[0m     @     0x5633b8504689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f09943354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f09968088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4aaf3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4aaf55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4b1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4d6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f39706388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f396e1654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x7f397421079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9ee6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9e41b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9ecda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9e41bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9ecd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9e42689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9ecd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9e42689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9ecd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9e42689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9ecd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3530)\u001b[0m     @     0x5567f9e42689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d6a0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d67bdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x7f2d6dc8879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d6dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65cc8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d54a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65cc8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d54643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65cc9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d54643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65cc9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d54643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65cc9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65d54643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3508)\u001b[0m     @     0x558c65cc9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f3986b84a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f3986b82388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9efeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9ed9e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x7fb9f3a9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4e8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b443b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cfa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b443bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b444689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b444689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b444689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b4cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3452)\u001b[0m     @     0x55583b444689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdabcc24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x7fbdb1d6d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc56fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fbb1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fbb1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fbb2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fbb2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fbb2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fc3d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3475)\u001b[0m     @     0x560e9fbb2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e04ba44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x7f3e0ac4f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x557947298fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x5579471f3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x5579471f3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x5579471f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x5579471f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x5579471f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x55794727f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3512)\u001b[0m     @     0x5579471f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981e8088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f981c3354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x7f98223e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a86fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa99e1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa99e1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa99e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa99e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa99e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa9a6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3556)\u001b[0m     @     0x55afa99e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4adecc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x7fa4b3f7779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4c7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e422b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4aea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e422bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e423689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e423689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e423689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e4ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3598)\u001b[0m     @     0x55b92e423689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2fee7fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2fee7fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2ff762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2ff785c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea517689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea517689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea517689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea5a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3463)\u001b[0m     @     0x5654ea517689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a62af5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a62af3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a62af55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7fad4ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7faaffb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x7f7fb10a679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df5477fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df53d2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df53d2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df53d3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df53d3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df53d3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df545e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb14b7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb1d9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb1dbdc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb125fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba05cf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba0cba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba318d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f34338de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f0f604f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x7f62f700b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b1adfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b108b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b194a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b108bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b194643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b109689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b194643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef46d4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef47630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef47653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2b41cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x7ef2ba27a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab92174fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab920cfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab920cfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f316a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f30df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f316a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3467)\u001b[0m     @     0x55e9f30df689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3535)\u001b[0m     @     0x55a795e02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6cb1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x7fb6d128b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a4cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba79a7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a33a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba79a7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba79a8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba79a8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba79a8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba7a33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3474)\u001b[0m     @     0x557ba79a8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdb9f5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f56fa6e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x7f570078d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f3affd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f30ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f396a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f30abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f396643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f30b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f396643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f30b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f396643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f30b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f396643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3502)\u001b[0m     @     0x55e97f30b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef01cfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x7eef07da679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d97fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93cf2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93cf2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93cf3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93cf3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93cf3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93d7e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3462)\u001b[0m     @     0x558f93cf3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a3510bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a3511689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a3511689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a3511689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a359c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3468)\u001b[0m     @     0x5622a3511689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec353ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x7eec3b46579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e750abfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75006b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75091baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75092a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75006bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75091baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75092643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75007689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75091baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75092643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75007689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75091baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75092643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75007689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75091baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75092643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3601)\u001b[0m     @     0x563e75007689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f54613ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f546388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f54613ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x7f546746579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434f2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb4344db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f465d0374f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x7f46630e279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cc5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13c20b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13caca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13c20bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13c21689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13c21689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13c21689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13cac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3479)\u001b[0m     @     0x55ab13c21689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b04e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b04e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b056c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3451)\u001b[0m     @     0x5635b04e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21eb4ccd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21ebdafb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21ebdd2c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21eb274a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21eb272388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x7efc36d2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d36537fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d36492b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d36492bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d36493689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d36493689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d36493689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d3651e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3465)\u001b[0m     @     0x564d36493689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f5406fcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f54076b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f5409b898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f54076b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f689063a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f689063c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f6890d274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f68931fa8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x7eeeb665479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x562087789fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x5620876e4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x562087770a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x5620876e4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x562087770643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x5620876e5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x562087770643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x5620876e5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x562087770643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x5620876e5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x562087770643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3517)\u001b[0m     @     0x5620876e5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52e75e44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x7f52ed68f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c938fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c893b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c893bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c894689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c894689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c894689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c91f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3580)\u001b[0m     @     0x56438c894689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d0349f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x7f1d0954a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6c8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf623b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6afa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf623bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf624689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf624689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf624689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf6af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3459)\u001b[0m     @     0x5622cf624689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d615643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d58a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d615643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3448)\u001b[0m     @     0x561c4d58a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76be12c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb753baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb754643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3450)\u001b[0m     @     0x558deb6c9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a31e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x7ee6a928b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee945b4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9450fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9450fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee94510689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee94510689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee94510689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee9459b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3570)\u001b[0m     @     0x55ee94510689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb0559e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb057eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef5477265a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f09943354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x7f099a3e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d81fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70cdcb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d68a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70cdcbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d68643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70cdd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d68643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70cdd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d68643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70cdd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70d68643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3454)\u001b[0m     @     0x55ff70cdd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e4b1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x7f7e5128b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f728fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f683b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f683bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f684689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f684689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f684689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f3986b845a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2fec27a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2fec25388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2fec275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a631e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a656b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a631e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x7f7a6928b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3decfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3d47b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3d47bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3461)\u001b[0m     @     0x563df53d3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb125d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb125f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb194a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba0cba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x7f7ba6d6579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f17dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f0d8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f164a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f0d8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f164643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f0d9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f164643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f0d9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f164643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f0d9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f164643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3453)\u001b[0m     @     0x562b2f0d9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b109689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b194643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b109689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b194643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3528)\u001b[0m     @     0x555d5b109689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef46af5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef46af3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef46af55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab920d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab920d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab920d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab9215b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3534)\u001b[0m     @     0x55ab920d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdb9f75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdc0e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a56695a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a5d544f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a82278de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb4344dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb4344e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb4344e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb4344e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb434d9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3525)\u001b[0m     @     0x55bb4344e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21eb2745a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x7f540d76179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6c7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b622b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6aea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b622bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b623689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b623689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b623689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b6ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3559)\u001b[0m     @     0x55647b623689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb082b3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb08b96b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb08bb9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb0805ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f6890d274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x7f6896dd279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249adf6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249ad51b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249ad51bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249ad52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249ad52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249ad52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249addd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3483)\u001b[0m     @     0x56249ad52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76b2b4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76b2b2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76b2b45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76b99f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f00287e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f00287e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb0559e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x7fb05ba9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fe7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8f42b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fcea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8f42bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fce643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8f43689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fce643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8f43689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fce643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8f43689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8fce643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3470)\u001b[0m     @     0x562ff8f43689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef547e114f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef54a2e48de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef547e114f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x7ef54debc79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d23fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731c7eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d0aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731c7ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d0a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731c7f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d0a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731c7f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d0a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731c7f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731d0a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3478)\u001b[0m     @     0x555731c7f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f70f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3524)\u001b[0m     @     0x55d38f684689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f398726f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f39897428de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f398726f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x7f398d31a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fd2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766f2db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766f2dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766f2e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2ff3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb3017e58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3d48689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3d48689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3d48689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3dd3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3510)\u001b[0m     @     0x5652e3d48689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb3e1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb194a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x7f1fb79f579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c6ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef471e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef496b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bde5b58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1bdc0e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x7f1be218d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726d4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x55797262fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726bba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x55797262fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x557972630689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x557972630689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x557972630689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x5579726bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3449)\u001b[0m     @     0x557972630689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51a5d544f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x7f51abdff79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff66943fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6689eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6692aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6689ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6692a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6689f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6692a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6689f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6692a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6689f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6692a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3457)\u001b[0m     @     0x55ff6689f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21eb95f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21ede328de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21eb95f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x7f21f1a0a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213cefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x558921329b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x558921329bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x55892132a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x55892132a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x55892132a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x5589213b5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3531)\u001b[0m     @     0x55892132a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb08059388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb0805b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76de728de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa76b99f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f00290c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f00290e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f002858ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766f2e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766f2e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766fb9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3515)\u001b[0m     @     0x55d766f2e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb2ff3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x7fb3053bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x561800088fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x5617fffe3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x5617fffe3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x5617fffe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x5617fffe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x5617fffe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x56180006f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3527)\u001b[0m     @     0x5617fffe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899bcab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c56a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899bcabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899bcb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899bcb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899bcb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899c56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3574)\u001b[0m     @     0x559899bcb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef471e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x7eef4d28b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a49bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a3f6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a482a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a3f6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a482643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a3f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a482643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a3f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a482643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a3f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a482643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3473)\u001b[0m     @     0x557e7a3f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb087464f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb0ac198de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb087464f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x7fa771a4a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c3bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349b96b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c21baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c22a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349b96bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c21baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c22643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349b97689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c21baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c22643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349b97689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c21baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c22643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349b97689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c21baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349c22643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3520)\u001b[0m     @     0x558349b97689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f0028589388 at::native::copy_impl()\n",
+      "2020-11-05 10:17:00,306\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.\n",
+      "2020-11-05 10:17:00,313\tERROR trial_runner.py:567 -- Trial PPO_jss_env_065e8_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::PPO.train()\u001b[39m (pid=3536, ip=172.17.0.4)\n",
+      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
+      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
+      "    raise e\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
+      "    result = Trainable.train(self)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
+      "    result = self.step()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
+      "    res = next(self.train_exec_impl)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
+      "    return next(self.built_iterator)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 876, in apply_flatten\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 828, in add_wait_hooks\n",
+      "    item = next(it)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 466, in base_iterator\n",
+      "    actor_set.init_actors()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1238, in init_actors\n",
+      "    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])\n",
+      "ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n",
+      "2020-11-05 10:17:00,324\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x7eeb0e7f179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655e8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa65543b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cfa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa65543bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa65544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa65544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa65544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa655cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=3541)\u001b[0m     @     0x55aa65544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.279695  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1e9c16c25b494a4a43fb47bd01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.279886  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=61afdfe40390d0a343fb47bd01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f002858b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.317281  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1f6f5417a7b065f9091d563401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.317414  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e76b5820fbdeb0f2091d563401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.318681  3536  4667 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=10a4a4113c6c36ea43fb47bd01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "2020-11-05 10:17:00,335\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_065e8_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_065e8_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_065e8_00000_0_2020-11-05_10-16-52/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3912\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:51,849 - wandb.wandb_agent - INFO - Running runs: ['i1pzxngg']\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_065e8_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_065e8_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_065e8_00000_0_2020-11-05_10-16-52/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "\n",
+      "2020-11-05 10:17:00,346\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.\n",
+      "2020-11-05 10:17:00,346\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"train.py\", line 74, in <module>\n",
+      "    train_func()\n",
+      "  File \"train.py\", line 56, in train_func\n",
+      "    analysis = tune.run(PPOTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
+      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
+      "ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_065e8_00000])\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f0028c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=3578)\u001b[0m     @     0x7f002b1498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3343\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.334728  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=726b8519c6d92b8e8168b55d01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=8168b55d01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "Call stack:\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.334873  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e8fef079b20e071c8168b55d01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=8168b55d01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.335198  3536  4667 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=7249131d8582b825091d563401000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.336966  3536  4667 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=575b3faf45c7d0bd8168b55d01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=8168b55d01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.347528  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=8e79ac7e91b36714821ddf4301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.347676  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=428a4b4025d91890821ddf4301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.347769  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=38e2d2d27b716bfb821ddf4301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.347935  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=7dd3b2683d323ffd31c3fed901000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa97540c201000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.348103  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=0a51bbe8b791810831c3fed901000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "--- Logging error ---\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.348176  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d7b1ed864d13e17f31c3fed901000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "Traceback (most recent call last):\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.348816  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=170fdfd5d34985a7e0497dac01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.348946  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=89f63fee54d6858ee0497dac01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.349025  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=c6f8a2750fad0b0de0497dac01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "ValueError: I/O operation on closed file.\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.349328  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=fde3d5eda9f525d7a97540c201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "Call stack:\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.349421  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=d16c21eef3935840a97540c201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.349494  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d88ec84d5baca957a97540c201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.351272  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=f4d9d8a5e202b0910314ce3001000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=0314ce3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.351402  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=8b0b449b9f08d0430314ce3001000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=0314ce3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=3536)\u001b[0m E1105 10:17:00.351473  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=ad47e6e6a1a1660b0314ce3001000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=0314ce3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffbdff035801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff90aded9101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff252160a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff50168bc201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204448-i1pzxngg/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204448-i1pzxngg/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 209.89899\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 209.89899\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3826\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708290\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_101649-x7lng0kl/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_101649-x7lng0kl/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/i1pzxngg\u001b[0m\n",
-      "2020-10-14 20:44:57,073 - wandb.wandb_agent - INFO - Cleaning up finished run: i1pzxngg\n",
-      "2020-10-14 20:44:57,383 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:57,384 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta59\n",
-      "2020-10-14 20:44:57,386 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta59\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mfloral-sweep-3\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/x7lng0kl\u001b[0m\n",
+      "2020-11-05 10:17:08,755 - wandb.wandb_agent - INFO - Cleaning up finished run: x7lng0kl\n",
+      "2020-11-05 10:17:09,099 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:17:09,100 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta43\n",
+      "2020-11-05 10:17:09,102 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta43\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3kcee9dt\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204459-3kcee9dt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdashing-sweep-4\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/hddvertv\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/st4l0tf8\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_101711-st4l0tf8\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:17:12,848\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "2020-11-05 10:17:14,119 - wandb.wandb_agent - INFO - Running runs: ['st4l0tf8']\n",
+      "== Status ==\n",
+      "Memory usage on this node: 15.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_1300b_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m 2020-11-05 10:17:15,696\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m *** SIGSEGV (@0x0) received by PID 5089 (TID 0x7f3244e35700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m *** SIGSEGV (@0x0) received by PID 5143 (TID 0x7f7ea847f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m *** SIGSEGV (@0x0) received by PID 5120 (TID 0x7f358a028700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m *** SIGSEGV (@0x0) received by PID 5112 (TID 0x7fb7db62f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7fb7db208390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88db115f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88da8407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m *** SIGSEGV (@0x0) received by PID 5092 (TID 0x7f552a90a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m *** SIGSEGV (@0x0) received by PID 5095 (TID 0x7f59d2cc7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f59d28a0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad27bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad1ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m *** SIGSEGV (@0x0) received by PID 5108 (TID 0x7fee4e736700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fee4e30f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4e2b9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m *** SIGSEGV (@0x0) received by PID 5135 (TID 0x7f9d26fa8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f9d26b81390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e26ad1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e261fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m *** SIGSEGV (@0x0) received by PID 5087 (TID 0x7f6826f01700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m *** SIGSEGV (@0x0) received by PID 5074 (TID 0x7f3ef93fd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f3ef8fd6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff8ea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m *** SIGSEGV (@0x0) received by PID 5123 (TID 0x7f0eb8680700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7f0eb8259390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb80cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m *** SIGSEGV (@0x0) received by PID 5026 (TID 0x7f18e668c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m *** SIGSEGV (@0x0) received by PID 5103 (TID 0x7f290c6b6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m *** SIGSEGV (@0x0) received by PID 5097 (TID 0x7fec19e3e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fec19a17390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd197f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd18f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m *** SIGSEGV (@0x0) received by PID 5078 (TID 0x7fd98cade700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7fd98c6b7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8c67af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m *** SIGSEGV (@0x0) received by PID 5106 (TID 0x7fb824f04700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m *** SIGSEGV (@0x0) received by PID 5023 (TID 0x7f1c177f0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7f1c173c9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m *** SIGSEGV (@0x0) received by PID 5127 (TID 0x7f9bc4cc6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f9bc489f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc460ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc3d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m *** SIGSEGV (@0x0) received by PID 5029 (TID 0x7f295f751700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m *** SIGSEGV (@0x0) received by PID 5073 (TID 0x7f44ccafd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f44cc6d6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m *** SIGSEGV (@0x0) received by PID 5115 (TID 0x7fb49ab6c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m *** SIGSEGV (@0x0) received by PID 5088 (TID 0x7fcc63ecd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7fcc63aa6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d63a23f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d6314e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m *** SIGSEGV (@0x0) received by PID 5077 (TID 0x7f585ce54700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f585ca2d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m *** SIGSEGV (@0x0) received by PID 5136 (TID 0x7f1a2d050700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7f1a2cc29390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m *** SIGSEGV (@0x0) received by PID 5085 (TID 0x7fb31734b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7fb316f24390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f8416ed3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f84165fe7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m *** SIGSEGV (@0x0) received by PID 5131 (TID 0x7ff86a7f0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7ff86a3c9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m *** SIGSEGV (@0x0) received by PID 5018 (TID 0x7f55c1c26700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f55c17ff390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m *** SIGSEGV (@0x0) received by PID 5101 (TID 0x7fb6ab61e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7fb6ab1f7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87ab124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m *** SIGSEGV (@0x0) received by PID 5011 (TID 0x7f692601f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f6925bf8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m *** SIGSEGV (@0x0) received by PID 5065 (TID 0x7f71541b0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f7153d89390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f4253d39f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f42534647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m *** SIGSEGV (@0x0) received by PID 5002 (TID 0x7f3e5deaf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f3e5da88390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m *** SIGSEGV (@0x0) received by PID 5096 (TID 0x7f2577a55700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7f257762e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef6775f2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef676d1d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef676d208f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m *** SIGSEGV (@0x0) received by PID 5098 (TID 0x7efc59514700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7efc590ed390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd59088f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd587b37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m *** SIGSEGV (@0x0) received by PID 5079 (TID 0x7fec5219e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fec51d77390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd51d12f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd5143d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m *** SIGSEGV (@0x0) received by PID 5084 (TID 0x7f2058ea3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7f2058a7c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef158774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef157e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m *** SIGSEGV (@0x0) received by PID 5093 (TID 0x7fd740e5a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fd740a33390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa840825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f3244a0e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f0344774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f0343e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f7ea8058390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa7feff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa771a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f3589c01390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f0689b19f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f06892447db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88da8438f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88da843ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f552a4e3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f262a365f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f2629a907db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad1ee98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4d9e47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4d9e78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e261ff8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f6826ada390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f3926a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f392614c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff85cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff85d28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb77f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb77fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7f18e6265390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e613af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e58657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7f290c28f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0c223f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0b94e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd18f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd18f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8bda57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8bda88f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7fb824add390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f89249e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f89241137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed17229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed169547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed169578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc3d3c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7f295f32a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5f229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5e9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cc563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cbc8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cbc918f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7fb49a745390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f859a4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f8599c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d631518f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295c825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295bf507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2ca8bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2c1b67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f84166018f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f8416601ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc96a34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc969a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc969a798f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c16f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c0e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c0e228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87aa84f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87aa8528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a25a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a251357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a251388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f42534678f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f4253467ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5da0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5d1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5d1388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef676d20ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef676d20d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef677603b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef677626c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd587b68f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd587b6ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd514408f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd51440ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd51440d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd51d23b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd51d46c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd511e8a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef157ea28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef157ea2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef157ea2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa83ff507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa83ff538f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa83ff53ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m *** SIGSEGV (@0x0) received by PID 5007 (TID 0x7f7fc4c7e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m *** SIGSEGV (@0x0) received by PID 5021 (TID 0x7f0170ab5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7f017068e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed270563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed26fc8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m *** SIGSEGV (@0x0) received by PID 5086 (TID 0x7f15822f6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7f1581ecf390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f0343ea28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f0343ea2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f0343ea2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f0344785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f03447a8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa771d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa771dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa771dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa8000b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa8023c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m *** SIGSEGV (@0x0) received by PID 5114 (TID 0x7fa89ae3a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m *** SIGSEGV (@0x0) received by PID 5126 (TID 0x7fcfff1ab700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f06892478f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f0689247ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f0689247d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88da843d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88db126b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88db149c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88da5eba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88da5e9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88da5eb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f2629a938f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f2629a93ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f2629a93d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad1ee9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad1ee9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad27ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad27efc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad1c91a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad1c8f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4d9e7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4d9e7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4e2cab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4e2edc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e261ffad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e261ffd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e26ae2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e26b05c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f392614f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f392614fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f392614fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff85d2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff85d2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff8eb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff8ed8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff837aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff8378388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb77fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb77fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb80deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb8101c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb75a3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb75a1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e58688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e5868ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e5868d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0b9518f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0b951ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0b951d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd18f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd1980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd1982dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd18ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd18ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd18ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8bda8ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8bda8d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8c68bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8c6aec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8bb50a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f89241168f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f8924116ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed16957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed16957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed1723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed1725dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc3d3cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc3d3cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc461fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc4642c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc3ae4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc3ae2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5e9578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5e957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5e957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5f23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5f25dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cbc91ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cbc91d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cc574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cc597c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cba39a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m *** SIGSEGV (@0x0) received by PID 5036 (TID 0x7f43b15a4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f43b117d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b10b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m *** SIGSEGV (@0x0) received by PID 5107 (TID 0x7fe33e00e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f8599c278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f8599c27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f8599c27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f859a50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f859a52dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m *** SIGSEGV (@0x0) received by PID 5003 (TID 0x7f4c0df83700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f4c0db5c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0d7fff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0cf2a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d63151ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d63151d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d63a34b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d63a57c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d62ef9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d62ef7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295bf538f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295bf53ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295bf53d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295c836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295c859c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2c1b98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2c1b9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2c1b9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2ca9cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m *** SIGSEGV (@0x0) received by PID 5008 (TID 0x7f2147cf8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7f21478d1390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef247871f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef246f9c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f8416601d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f8416ee4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f8416f07c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f84163a9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f84163a7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m *** SIGSEGV (@0x0) received by PID 5006 (TID 0x7f16bf16a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7f16bed43390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7becfcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m *** SIGSEGV (@0x0) received by PID 5082 (TID 0x7f6977e8f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f6977a68390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a778def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a770097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m *** SIGSEGV (@0x0) received by PID 5069 (TID 0x7f4634587700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f4634160390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f173401cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f17337477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f173374a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f173374aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m *** SIGSEGV (@0x0) received by PID 5009 (TID 0x7fbc62bb1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m *** SIGSEGV (@0x0) received by PID 5076 (TID 0x7f2847c46700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc969a79ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc969a79d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc96a35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c0e22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c0e22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c1705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c1728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87aa852ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87aa852d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87ab135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87ab158c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a25138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a25138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a25a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a25a3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a24ee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m *** SIGSEGV (@0x0) received by PID 5071 (TID 0x7f0e26087700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7f0e25c60390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf25c11f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf2533c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f4253467d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f4253d4ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f4253d6dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f425320fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f425320d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m *** SIGSEGV (@0x0) received by PID 5017 (TID 0x7fa949a39700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7fa949612390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a495a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a48ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m *** SIGSEGV (@0x0) received by PID 5038 (TID 0x7f82f0eb1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f82f0a8a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53f0825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53eff507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5d138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5d138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5da1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5da3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m *** SIGSEGV (@0x0) received by PID 5022 (TID 0x7fe01eb4d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fe01e726390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11e4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11dc247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m *** SIGSEGV (@0x0) received by PID 5024 (TID 0x7f2d2e0d6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7f2d2dcaf390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2dc51f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2d37c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m *** SIGSEGV (@0x0) received by PID 5019 (TID 0x7f7ebd346700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m *** SIGSEGV (@0x0) received by PID 5063 (TID 0x7fc4bf23b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7fc4bee14390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95bedb0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95be4db7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m *** SIGSEGV (@0x0) received by PID 5014 (TID 0x7fc3e812f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7fc3e7d08390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e7ca8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e73d37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e73d68f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m *** SIGSEGV (@0x0) received by PID 5043 (TID 0x7f8053811700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f80533ea390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f5153229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f51529547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m *** SIGSEGV (@0x0) received by PID 5072 (TID 0x7f08cbc9e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7f08cb877390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cb751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cae7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m *** SIGSEGV (@0x0) received by PID 5004 (TID 0x7feff040f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fefeffe8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0efcd6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0ef4017db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0ef4048f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m *** SIGSEGV (@0x0) received by PID 5013 (TID 0x7f96e64ac700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f96e6085390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e6028f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e57537db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m *** SIGSEGV (@0x0) received by PID 5005 (TID 0x7f4e89ca2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f4e8987b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f897f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f88f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m *** SIGSEGV (@0x0) received by PID 5068 (TID 0x7fc35ff4e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7fc35fb27390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945f900f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945f02b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945f02e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m *** SIGSEGV (@0x0) received by PID 5033 (TID 0x7f9eddff9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m *** SIGSEGV (@0x0) received by PID 5034 (TID 0x7f9071130700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f9070d09390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f6170bd1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f61702fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m *** SIGSEGV (@0x0) received by PID 5040 (TID 0x7efe246dd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7efe242b6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf2425ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf239897db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf2398c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m *** SIGSEGV (@0x0) received by PID 5080 (TID 0x7fc00123b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7fc000e14390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f9100d89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f91004b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m *** SIGSEGV (@0x0) received by PID 5010 (TID 0x7fd231c25700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fd2317fe390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa3316f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa330e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef676ac8a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef676ac6388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef676ac85a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd587b6d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd59099b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd590bcc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd5855ea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd5855c388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd511e6388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd511e85a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef158785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef1587a8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef157c4aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef157c48388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa83ff53d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa840836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa840859c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa83fcfba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f7fc4857390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c470ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c3e397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c3e3c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed26fc918f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed26fc91ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f0343c4aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f0343c48388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f0343c4a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa74c5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa74c3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa74c55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7fa89aa13390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799a97ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799a0a97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fcffed84390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fecfcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fe4277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f0689b2ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f0689b4dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f0688fefa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f0688fed388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88dacd64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88dd1a98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88dacd64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f262a376b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f262a399c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f262983ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f2629839388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad1c915a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad237c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad484f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4d78fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4d78d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4d78f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e25fa7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e25fa5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e25fa75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f3926a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f3926a55c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f3925ef7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f3925ef5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff837a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff8a654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb75a35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb7c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfba1618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e614bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e616ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e5610a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e560e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0c234b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0c257c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0b6f9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0b6f7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd193ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd1b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd193ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8bb4e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8bb505a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f8924116d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f89249f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f8924a1cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f8923ebea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f8923ebc388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed166ffa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed166fd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed166ff5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc3ae45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc41cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5e6ffa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5e6fd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5e6ff5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5edea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cba37388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cba395a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cc1244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m *** SIGSEGV (@0x0) received by PID 5015 (TID 0x7f49a732e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f49a6f07390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa6e93f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa65be7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b07e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b07e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b07e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fe33dbe7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43db7af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43d2a57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43d2a88f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f85999cfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f85999cd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f85999cf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f859a0ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0cf2d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0cf2dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0cf2dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d62ef95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d635e44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d65ab78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295bcfba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295bcf9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295bcfb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295c3e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2cabfc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2bf61a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2bf5f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2bf615a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef246f9f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef246f9fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef246f9fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f84163a95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f8416a944f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f8418f678de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7be4277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7be42a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7be42aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a7700c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a7700cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a7700cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f173374ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f173402db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f1734050c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f17334f2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f17334f0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m *** SIGSEGV (@0x0) received by PID 5081 (TID 0x7f52b7312700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f52b6eeb390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b6e66f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b65917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m *** SIGSEGV (@0x0) received by PID 5028 (TID 0x7f1485ce1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7f14858ba390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee5857f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m *** SIGSEGV (@0x0) received by PID 5067 (TID 0x7f8fe3c3b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f8fe3814390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e37a9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e2ed47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7fbc6278a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d624f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d61c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d61c278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d61c27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7f284781f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m *** SIGSEGV (@0x0) received by PID 5075 (TID 0x7f64d9ea7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f64d9a80390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d97f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m *** SIGSEGV (@0x0) received by PID 5090 (TID 0x7f6cf7300700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f6cf6ed9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m *** SIGSEGV (@0x0) received by PID 5031 (TID 0x7f8e6cba9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f8e6c782390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6c71ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc96a37fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc969821a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc96981f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc9698215a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c0bcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c0bc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c0bca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c12b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c37888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87aa5faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87aa5f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87aa5fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a24ede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a24ee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a255cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a27a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf2533f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf2533fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf2533fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f425320f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f42538fa4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f4255dcd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f42538fa4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m *** SIGSEGV (@0x0) received by PID 5091 (TID 0x7fcba622b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7fcba5e04390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a48cd28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a48cd2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53eff538f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53eff53ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5cee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5cede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5cee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11dc278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11dc27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2d37f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2d37fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m *** Aborted at 1604571441 (unix time) try \"date -d @1604571441\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m *** SIGSEGV (@0x0) received by PID 5105 (TID 0x7f6ece288700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f6ecde61390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcddf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m *** SIGSEGV (@0x0) received by PID 5083 (TID 0x7fd56a8a3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fd56a47c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa66a34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa669a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f7ebcf1f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbcea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbc5cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95be4de8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95be4dead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95be4ded91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95bedc1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95bede4c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e73d6ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e73d6d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e7cb9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e7cdcc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f51529578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f5152957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f5152957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f515323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cae7f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cae7fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cae7fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0ef404ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0ef404d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0efce7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0efd0ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0ef1aca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0ef1aa388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e57568f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e5756ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e5756d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e6039b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f88f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f88f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f88f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f8980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945f02ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945f02ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945f911b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945f934c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f9eddbd2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fddb7af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdd2a57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f61702ff8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f61702ffad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f61702ffd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f6170be2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f6170c05c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf2398cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf2398cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf2426fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf24292c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf23734a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf23732388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f91004b78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f91004b7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f91004b7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f9100d9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa330e228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa330e22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa330e22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef6771b34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef6796868de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef6771b34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x7ef67d25e79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323f4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x55973234fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323dba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x55973234fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x559732350689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x559732350689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd5855e5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd58c494f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd5b11c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd518d34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd53da68de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd518d34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x7fbd5797e79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b5bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5ab6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b41baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b42a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5ab6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b41baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b42643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5ab7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b41baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b42643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5ab7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b41baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b42643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5ab7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b41baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5b42643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5079)\u001b[0m     @     0x5584d5ab7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef157c4a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef1583354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef15a8088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa83fcf9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa83fcfb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa8403e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa8428b98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c3e3cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c3e3cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c471fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c4742c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c3be4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed26fc91d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed270574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed270597c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed26fa39a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed26fa37388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee681e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee68154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee6815528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee681552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f03443354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f03468088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f03443354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x7f034a3e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cdefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9c39b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9c39bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9c3a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9c3a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa7bb04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4faa0838de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fa7bb04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x7f4fadc5b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bc6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1b21b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bacbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bada20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1b21bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bacbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bad643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1b22689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bacbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bad643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1b22689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bacbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bad643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799a0ac8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799a0acad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fe42a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fe42aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fe42ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fed0db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fed30c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f0688fef5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f06896da4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f068bbad8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f06896da4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x7f88e0d8179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c568fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c4c3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c4c3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c4c4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c4c4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c4c4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c54f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5112)\u001b[0m     @     0x55c37c4c4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f262983b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f2629f264f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f262c3f98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad237c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x7f2ad842779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0beffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0b4ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0b4abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0b4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0b4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0b4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0bd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5095)\u001b[0m     @     0x5571b0b4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4de7a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf5034d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf4de7a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x7fbf53f2579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86fefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d8659b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d8659bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d865a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d865a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d865a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d86e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5108)\u001b[0m     @     0x5589d865a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e266924f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e28b658de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e266924f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x7f6e2c73d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d353ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d349ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3526a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d349abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3526643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d349b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3526643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d349b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3526643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d349b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d3526643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5135)\u001b[0m     @     0x5619d349b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f3925ef75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f39265e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f3928ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ffaf388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ff8a654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x7f0ffeb1079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2ea1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2dfcb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e87baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e88a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2dfcbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e87baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e88643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2dfd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e87baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e88643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2dfd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e87baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e88643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2dfd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e87baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2e88643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5074)\u001b[0m     @     0x5569f2dfd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfb7c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x7edfbdd3979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a28fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54983b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54983bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54984689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54984689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54984689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54a0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5123)\u001b[0m     @     0x557c54984689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e56105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e5cfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e81ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9e5cfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0b6f95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0bde44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0e2b78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x7fbd1f46579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26091fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f25fecb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26077baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26078a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f25fecbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26077baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26078643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f25fed689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26077baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26078643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f25fed689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26077baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26078643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f25fed689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26077baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f26078643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5097)\u001b[0m     @     0x559f25fed689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8c23b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8e70e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa8c23b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x7faa922e679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c30fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0b8bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c17a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0b8bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0b8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0b8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0b8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0c17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5078)\u001b[0m     @     0x55f2e0b8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f8923ebe5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f89245a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f8926a7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed16dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed192bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed16dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x7eed1ce9579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b31fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2a8cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b18a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2a8cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b18643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2a8d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b18643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2a8d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b18643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2a8d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2b18643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5023)\u001b[0m     @     0x55aaf2a8d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc66a28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cc41cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x7f6cca27a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183dccfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183d27b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183d27bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183d28689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183d28689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183d28689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183db3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5127)\u001b[0m     @     0x55c183d28689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa612bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa5edea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x7efa64e9579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c855fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c7b0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c7b0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c7b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c7b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c7b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c83c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5029)\u001b[0m     @     0x55cb4c7b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15ce5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15cc1244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x7f15d21cf79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de8431efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84279b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84305a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84279bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84305643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de8427a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84305643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de8427a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa65c18f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa65c1ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b07e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b10c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b10e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b058ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b0589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43d2a8ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43d2a8d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43db8bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43dbaec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f859c58d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f859a0ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x7f85a016579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d8b3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d80eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d899baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d89aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d80ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d899baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d89a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d80f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d899baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d89a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d80f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d899baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d89a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d80f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d899baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d89a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5115)\u001b[0m     @     0x55ae1d80f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0d810b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0d833c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0ccd5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0ccd3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0ccd55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d635e44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x7f9d6968f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33f3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b334eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33daa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b334ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33da643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b334f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33da643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b334f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33da643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b334f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b33da643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5088)\u001b[0m     @     0x5643b334f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295e8b98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f295c3e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x7f296249179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e84fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0ddfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0ddfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0de0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0de0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0de0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0e6b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5077)\u001b[0m     @     0x5593d0de0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2c64c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2eb1f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb2c64c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x7eeb326f779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766dde6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766dd41b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddcda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766dd41bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddcd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766dd42689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddcd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef247882b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef2478a5c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef246d47a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef246d45388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f8416a944f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x7f841cb3f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc93fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fbeeb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc7aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fbeebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc7a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fbef689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc7a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fbef689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc7a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fbef689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fc7a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5085)\u001b[0m     @     0x560a4fbef689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7be42ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7bed0db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7bed30c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7be1d2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7be1d0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a778efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a77912c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a76db4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a76db2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f17334f25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f1733bdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f17360b08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b65948f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee584f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee584f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee584f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e2ed78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e2ed7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d61c27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d6250ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d6252dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d619cfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef946c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef9463407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef9463438f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d8f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d8f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d8f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df6c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df63407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df63438f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df6343ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6be4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6be4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc969f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc96c3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc969f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x7fc96ffb779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a763fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a6beb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a749baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a74aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a6bebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a749baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a74a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a6bf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a749baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c12b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x7f26c736079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fc7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280f22b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280faea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280f22bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280f23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280f23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280f23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fadbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280fae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5018)\u001b[0m     @     0x55f280f23689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87aace54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87ad1b88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87aace54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x7f87b0d9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b7028bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b701e6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70271baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70272a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b701e6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70271baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70272643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b701e7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70271baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70272643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b701e7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70271baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70272643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b701e7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70271baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b70272643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5101)\u001b[0m     @     0x562b701e7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a255cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x7f3a2b67679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcafa6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf01b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf01bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf8d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5011)\u001b[0m     @     0x558dcaf02689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf25c22b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf25c45c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf250e7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf250e5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf250e75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x7f42599a579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d39fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92c94b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d20a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92c94bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92c95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92c95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92c95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92d20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5065)\u001b[0m     @     0x558a92c95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca5da4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca54cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca54d28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca54d2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a48cd2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a495b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a495d8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a48a7aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a48a78388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53eff53d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53f0836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53f0859c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53efcfba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53efcf9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53efcfb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5d5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5fa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f5d5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x7f0f6367679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c151fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c0acb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c138a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c0acbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c138643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c0ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c138643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c0ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c138643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c0ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c137baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c138643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5002)\u001b[0m     @     0x56149c0ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11dc27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11e50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11e52dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11d9cfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11d9cd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11d9cf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2d37fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2dc62b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2dc85c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2d127a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2d125388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2d1275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcd5227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcd5258f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcd525ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcd525d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcde08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa669a798f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa669a79ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa669a79d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa66a35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa66a37fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa669821a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbc5d28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbc5d2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95be286a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95be284388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95be2865a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95be9714f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e717ea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e717c388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e717e5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e78694f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f515325dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f51526ffa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f51526fd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f51526ff5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cb762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cb785c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cac27a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cac25388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cac275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0ef1ac5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0ef8974f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0f1d6a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e605cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e54fea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e54fc388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e54fe5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f8982dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f88ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f88ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f88ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945edd6a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945edd4388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945edd65a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945f4c14f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdd2a88f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdd2a8ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdd2a8d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f61700a7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f61700a5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f61700a75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf237345a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf23e1f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf262f28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f9100dbdc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f910025fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f910025d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f910025f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa331705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa331728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa330bcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa330bc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa330bca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x559732350689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x5597323db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5096)\u001b[0m     @     0x559732350689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd58c494f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x7ecd5ecf479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x55764291cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642877b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642903a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642877bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642903643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642878689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642903643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642878689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642903643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642878689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642903643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5098)\u001b[0m     @     0x557642878689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef1583354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x7ef15e3e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e2b8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e213b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e213bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e214689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e214689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e214689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e29f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5084)\u001b[0m     @     0x56100e214689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa8403e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x7fa84649179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b60cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b567b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b567bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b568689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b568689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b568689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b5f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5093)\u001b[0m     @     0x55cd7b568689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c3be2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c3be45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c42cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c67a28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed26fa395a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed2701244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed2725f78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed2701244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee681552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee681e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee681e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee6812faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee6812f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee6812fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9c3a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9cc5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5089)\u001b[0m     @     0x55d2b9c3a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1b22689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bacbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1bad643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5143)\u001b[0m     @     0x55d7a1b22689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799a0acd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799a98fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799a9b2c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f7999e54a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f7999e52388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fe1d2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fe1d0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fe1d25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fe8bd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa100d908de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x7f068f78579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119db1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d0cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d98a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d0cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d98643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d0d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d98643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d0d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d98643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d0d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d98643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5120)\u001b[0m     @     0x556119d0d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f2629f264f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x7f262ffd179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9feffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9f4ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9f4abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9f4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9f4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9f4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9fd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5092)\u001b[0m     @     0x5600f9f4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f39265e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x7f392c68d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098c0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x56090981bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x56090981bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x56090981c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x56090981c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x56090981c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x5609098a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5087)\u001b[0m     @     0x56090981c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x7ee9ebda679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc327fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc282b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc282bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc283689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc283689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc283689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc30e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5026)\u001b[0m     @     0x55b5dc283689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa0bde44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x7efa11e8f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x56525467afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x5652545d5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254660baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254661a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x5652545d5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254660baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254661643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x5652545d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254660baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254661643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x5652545d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254660baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254661643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x5652545d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254660baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x565254661643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5103)\u001b[0m     @     0x5652545d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f89245a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x7f892a65479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3eefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc349b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc349bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc34a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc34a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc34a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc3d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5106)\u001b[0m     @     0x5640fc34a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84305643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de8427a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de84305643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5073)\u001b[0m     @     0x55de8427a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa65c1d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa6ea4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa6ec7c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa6369a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa6367388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa63695a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa6a544f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b058b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b0c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b31498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b0c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x7f14b6d2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x55889309ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558892ffab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43d050a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43d04e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43d0505a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0d3c04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0f8938de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d0d3c04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x7f1d3c58379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf8cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acee7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf72baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf73a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acee7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf72baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf73643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acee8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf72baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf73643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acee8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf72baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf73643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acee8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf72baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acf73643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5003)\u001b[0m     @     0x5568acee8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766dd42689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddcd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766dd42689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766ddcd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5136)\u001b[0m     @     0x55766dd42689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef246d475a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef2474324f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef2499058de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef2474324f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x7ef24d4dd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b86fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44ae1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44ae1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44ae2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44ae2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44ae2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44b6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5008)\u001b[0m     @     0x564c44ae2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7be1d25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7be8bd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7c0d908de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a76db45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a7749f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a799728de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a7749f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x7f3a7d54a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ebdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82e18b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82e18bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82e19689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82e19689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82e19689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82ea4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5082)\u001b[0m     @     0x55cd82e19689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f1733bdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x7f1739c8879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65dcbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65d26b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65d26bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65d27689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65d27689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65d27689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65db2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5069)\u001b[0m     @     0x557d65d27689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee584f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee58580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee58582dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee584ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee584ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee584ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e2ed7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e37bab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e37ddc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e2c7fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e2c7d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e2c7f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d619cd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d619cf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d620ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d6458d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d620ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef946343ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef946343d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef946c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef946c49c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef9460eba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef9460e9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d8f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d982dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d8ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d8ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d8ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df6343d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df6c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df6c49c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df60eba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df60e9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df60eb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6be4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6be4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6c730b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6c753c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6bbf5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6bbf3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a74a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a6bf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a749baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a74a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a6bf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a749baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a74a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5131)\u001b[0m     @     0x55bc1a6bf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf257d24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf27ca58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf257d24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x7edf2b87d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735e4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b37353fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b37353fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b373540689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b373540689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b373540689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b3735cb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5071)\u001b[0m     @     0x55b373540689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca54d2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca5db5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca5dd8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a48a7a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a491654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a4b6388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53f03e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53f28b98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11e0ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb12058d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb11e0ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x7fb12416579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a42948dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a4293e8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429473baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429474a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a4293e8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429473baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429474643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a4293e9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429473baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429474643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a4293e9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429473baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429474643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a4293e9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429473baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a429474643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5022)\u001b[0m     @     0x55a4293e9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2d8124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2fce58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe2d8124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x7efe338bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c2cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcde2bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcd2cda93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcd2cb388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcd2cd5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa66981f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa6698215a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa669f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbc5d2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbceb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbced8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95c0e448de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95be9714f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x7f95c4a1c79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645cfefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645c59b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645c59bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645c5a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645c5a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645c5a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645ce5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5063)\u001b[0m     @     0x564645c5a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e9d3c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94e78694f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x7f94ed91479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c38fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5b93b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5b93bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5b94689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5b94689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5b94689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5c1f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5014)\u001b[0m     @     0x5578b5b94689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f5152dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f51552bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f5152dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x7f5158e9579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58c9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f5824b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58b0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f5824bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58b0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f5825689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58b0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f5825689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58b0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f5825689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f58b0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5043)\u001b[0m     @     0x55e6f5825689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cb3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cd7e58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9cb3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x7ed9d13bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2ecfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf247b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf247bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf248689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf248689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf248689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf2d3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5072)\u001b[0m     @     0x55a6bf248689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc0ef8974f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x7fc1186af79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fcbefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fc19b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fc19bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fc1a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fc1a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fc1a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fca5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5004)\u001b[0m     @     0x55643fc1a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e5be94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e80bc8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67e5be94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x7f67ebc9479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b7100fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b705bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b705bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b705c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b705c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b705c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b70e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5013)\u001b[0m     @     0x5602b705c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f893ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f8b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f893ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x7f1f8f46579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f2efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2e89b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f15a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2e89bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f15643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2e8a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f15643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2e8a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f15643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2e8a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2f15643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5005)\u001b[0m     @     0x55d9e2e8a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f94619948de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f945f4c14f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x7f946556c79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c169ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c15fab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1685baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1686a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c15fabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1685baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1686643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c15fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1685baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1686643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c15fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1685baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1686643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c15fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1685baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c1686643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5068)\u001b[0m     @     0x5652c15fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fddb8bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fddbaec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdd050a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdd04e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdd0505a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f61707924f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f6172c658de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f61707924f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x7f617683d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f26a16fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f26971b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f26971bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f26972689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f26972689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f26972689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f269fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5034)\u001b[0m     @     0x557f26972689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf23e1f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x7ecf29eca79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8dcfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a837b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a837bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a838689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a838689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a838689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a8c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5040)\u001b[0m     @     0x56428a838689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f910094a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f9102e1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f910094a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x7f91069f579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e9efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75df9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e85a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75df9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75dfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75dfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75dfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75e85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5080)\u001b[0m     @     0x556f75dfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa3312b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa3337888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa3312b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x7fa33736079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addada9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad04b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad8fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad90a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad04bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad8fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad90643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad05689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad8fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad90643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad05689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad8fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad90643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad05689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad8fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad90643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5010)\u001b[0m     @     0x55addad05689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50c42cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x7f50ca37a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab146b7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab14612b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab14612bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab14613689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab14613689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab14613689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab1469e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5007)\u001b[0m     @     0x55ab14613689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x7ed2761cf79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5d3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee52eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5baa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee52ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee52f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee52f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee52f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee5ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5021)\u001b[0m     @     0x5638ee52f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee6819e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee683eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee6819e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f7999e545a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa0fe8bd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x7fa10496879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a209efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a1ff9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2084baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2085a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a1ff9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2084baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2085643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a1ffa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2084baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2085643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a1ffa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2084baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2085643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a1ffa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2084baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a2085643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5126)\u001b[0m     @     0x5638a1ffa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa8f278de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aa6a544f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893085baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893086a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558892ffabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893085baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893086643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558892ffb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893085baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893086643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558892ffb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893085baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893086643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558892ffb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893085baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558893086643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5036)\u001b[0m     @     0x558892ffb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43d73b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43fc0e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7be8bd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x7ee7c496879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e30373afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303695b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303720baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303721a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303695bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303720baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303721643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303696689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303720baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303721643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303696689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303720baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303721643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303696689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303720baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303721643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5006)\u001b[0m     @     0x55e303696689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee5853ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee58788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e336a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e583d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x7f8d6816579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deb0afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9dea65b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9dea65bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9dea66689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9dea66689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9dea66689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9deaf1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5009)\u001b[0m     @     0x55f9dea66689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef9460eb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef9467d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef948ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d93ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35db88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35d93ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df67d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df8ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6bbf55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6c2e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca527aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca5278388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca527a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a491654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x7f7a4f21079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d52fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0cadb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d39a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0cadbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d39643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0cae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d39643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0cae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d39643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0cae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0d39643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5017)\u001b[0m     @     0x564ba0cae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53f03e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x7f53f649179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3582fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c34ddb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3568baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3569a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c34ddbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3568baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3569643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c34de689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3568baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3569643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c34de689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3568baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3569643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c34de689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3568baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c3569643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5038)\u001b[0m     @     0x5595c34de689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18b87b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c12baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c13a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18b87bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c12baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c13643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18b88689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c12baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c13643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18b88689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c12baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c13643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18b88689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c12baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18c13643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5024)\u001b[0m     @     0x564c18b88689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcd9b84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcfe8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fcd9b84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa66c3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa669f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x7fa66ffb779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48cfafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48c55b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48c55bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48c56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48c56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48c56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48ce1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5083)\u001b[0m     @     0x561e48c56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbc37aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbc378388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbc37a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbca654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdd73b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdfc0e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x7ee687a9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e56776fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e566d1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e566d1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e566d2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e566d2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e566d2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e5675d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5086)\u001b[0m     @     0x562e566d2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799a53f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799ca128de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x7f1aacaff79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa4bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558def9a6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa32a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558def9a6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa32643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558def9a7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa32643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558def9a7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa32643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558def9a7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558defa32643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5015)\u001b[0m     @     0x558def9a7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb43d73b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x7fb4437e679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d3afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9c95b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d21a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9c95bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d21643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9c96689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d21643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9c96689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d21643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9c96689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9d21643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5107)\u001b[0m     @     0x55d8b9c96689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b6594ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b6594d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b6e77b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b6e9ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee5853ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x7ee58b46579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35bcfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af3517b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af3517bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af3518689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af3518689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af3518689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af35a3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5028)\u001b[0m     @     0x564af3518689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e336a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x7f60e941579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x55742429ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x5574241fab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424285baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424286a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x5574241fabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424285baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424286643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x5574241fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424285baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424286643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x5574241fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424285baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424286643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x5574241fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424285baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x557424286643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5067)\u001b[0m     @     0x5574241fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef9467d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x7ef94c47779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a88fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x5571319e3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x5571319e3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x5571319e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x5571319e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x5571319e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x557131a6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5076)\u001b[0m     @     0x5571319e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x7f35df46579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x55905848ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x5590583eab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058475baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058476a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x5590583eabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058475baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058476643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x5590583eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058475baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058476643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x5590583eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058475baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058476643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x5590583eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058475baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x559058476643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5075)\u001b[0m     @     0x5590583eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3df67d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x7f3dfc47779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788ff9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788f54b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fdfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fe0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788f54bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fdfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fe0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788f55689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fdfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fe0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788f55689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fdfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fe0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788f55689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fdfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788fe0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5090)\u001b[0m     @     0x558788f55689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6e7b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f6c2e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x7f5f7238b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d43fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca59654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca7e388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9ca59654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x7f3fd3a6379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d1b7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d112b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d112bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d113689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d113689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d113689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d19e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5105)\u001b[0m     @     0x560f8d113689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbef388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fbca654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x7f4fc2b1079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b937fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b892b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b892bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b893689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b893689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b893689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b91e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5019)\u001b[0m     @     0x55b93b893689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fdd73b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x7f6fe37e679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1eb3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e0eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e9aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e0ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5033)\u001b[0m     @     0x55bce1e0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f799a53f4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x7f79a05ea79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b41fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7a9cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b27baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b28a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7a9cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b27baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b28643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7a9d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b27baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b28643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7a9d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b27baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b28643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7a9d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b27baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7b28643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5114)\u001b[0m     @     0x559bc7a9d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b633ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b633a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b633c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b6a274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302c9eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d2aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302c9ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d2a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302c9f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d2a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302c9f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d2a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302c9f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302d2a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5031)\u001b[0m     @     0x556302c9f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x7f9caba1079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30adcfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30a37b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30a37bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30a38689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30a38689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30a38689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30ac3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5091)\u001b[0m     @     0x563d30a38689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b8efa8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23b6a274f5 at::Tensor::copy_()\n",
+      "2020-11-05 10:17:21,608\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.\n",
+      "2020-11-05 10:17:21,613\tERROR trial_runner.py:567 -- Trial PPO_jss_env_1300b_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::PPO.train()\u001b[39m (pid=5117, ip=172.17.0.4)\n",
+      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
+      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
+      "    raise e\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
+      "    result = Trainable.train(self)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
+      "    result = self.step()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
+      "    res = next(self.train_exec_impl)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
+      "    return next(self.built_iterator)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 876, in apply_flatten\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 828, in add_wait_hooks\n",
+      "    item = next(it)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 466, in base_iterator\n",
+      "    actor_set.init_actors()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1238, in init_actors\n",
+      "    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])\n",
+      "ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x7f23bcad279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf67fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cec2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cec2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cec3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cec3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cec3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cf4e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=5081)\u001b[0m     @     0x55780cec3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "2020-11-05 10:17:21,640\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_1300b_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_1300b_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_1300b_00000_0_2020-11-05_10-17-14/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.0/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_1300b_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_1300b_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_1300b_00000_0_2020-11-05_10-17-14/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "\n",
+      "Traceback (most recent call last):\n",
+      "  File \"train.py\", line 74, in <module>\n",
+      "    train_func()\n",
+      "  File \"train.py\", line 56, in train_func\n",
+      "    analysis = tune.run(PPOTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
+      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
+      "ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_1300b_00000])\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3998\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:45:02,401 - wandb.wandb_agent - INFO - Running runs: ['3kcee9dt']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 4902\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m E1105 10:17:21.606003  5117  6265 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=137dbd5547ea6deabdff035801000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "Traceback (most recent call last):\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m E1105 10:17:21.606214  5117  6265 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=3f75a43fb9f70f24bdff035801000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m E1105 10:17:21.617558  5117  6265 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=150a9d56b40e3700bdff035801000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m E1105 10:17:21.629685  5117  6265 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=efaf5dbfabc208739f3cc57a01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "ValueError: I/O operation on closed file.\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m E1105 10:17:21.629830  5117  6265 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=b3b45bae970c41729f3cc57a01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "Call stack:\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m E1105 10:17:21.629902  5117  6265 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=4f22c19b5f703db99f3cc57a01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m E1105 10:17:21.637609  5117  6265 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=9e78156cc0f1c18db2413f7201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m E1105 10:17:21.637763  5117  6265 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=99a573b913884b0db2413f7201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "\u001b[2m\u001b[36m(pid=5117)\u001b[0m E1105 10:17:21.637881  5117  6265 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=716ad7ba0ea412bfb2413f7201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff90aded9101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error --- 5.14MB of 5.14MB uploaded (0.00MB deduped)\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa97540c201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff50168bc201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff252160a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff091d563401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204459-3kcee9dt/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204459-3kcee9dt/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 211.84848\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 211.84848\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3517\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708300\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_101711-st4l0tf8/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_101711-st4l0tf8/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3kcee9dt\u001b[0m\n",
-      "2020-10-14 20:45:07,613 - wandb.wandb_agent - INFO - Cleaning up finished run: 3kcee9dt\n",
-      "2020-10-14 20:45:10,058 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:45:10,059 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta60\n",
-      "2020-10-14 20:45:10,061 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta60\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdashing-sweep-4\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/st4l0tf8\u001b[0m\n",
+      "2020-11-05 10:17:29,753 - wandb.wandb_agent - INFO - Cleaning up finished run: st4l0tf8\n",
+      "2020-11-05 10:17:30,069 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:17:30,069 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta44\n",
+      "2020-11-05 10:17:30,071 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta44\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/kkype8ue\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204512-kkype8ue\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mlikely-sweep-5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/hddvertv\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/jbzrciyp\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_101731-jbzrciyp\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:17:33,676\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 15.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/558.25 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_1f6cc_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 4096\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:45:15,074 - wandb.wandb_agent - INFO - Running runs: ['kkype8ue']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204512-kkype8ue/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204512-kkype8ue/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 197.64646\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 197.64646\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3735\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708313\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/kkype8ue\u001b[0m\n",
-      "2020-10-14 20:45:20,294 - wandb.wandb_agent - INFO - Cleaning up finished run: kkype8ue\n",
-      "2020-10-14 20:45:20,607 - wandb.wandb_agent - INFO - Agent received command: exit\n",
-      "2020-10-14 20:45:20,607 - wandb.wandb_agent - INFO - Received exit command. Killing runs and quitting.\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Terminating and syncing runs. Press ctrl-c to kill.\n"
+      "\n",
+      "2020-11-05 10:17:35,087 - wandb.wandb_agent - INFO - Running runs: ['jbzrciyp']\n",
+      "\u001b[2m\u001b[36m(pid=6683)\u001b[0m 2020-11-05 10:17:36,483\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent po3ygyxo"
+    "!wandb agent hddvertv"
    ]
   },
   {
diff --git a/JSS/Random.ipynb b/JSS/Random.ipynb
index a16b1ba..30632e8 100644
--- a/JSS/Random.ipynb
+++ b/JSS/Random.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -56,7 +56,7 @@
     "    print(\"I have detected {} CPUs here, so I'm going to create {} actors\".format(mp.cpu_count(), mp.cpu_count() - 1))\n",
     "    os.environ[\"WANDB_API_KEY\"] = '3487a01956bf67cc7882bca2a38f70c8c95f8463'\n",
     "    sweep_config = {\n",
-    "        'program': 'random_loop.py',\n",
+    "        'program': 'CP.py',\n",
     "        'method': 'grid',\n",
     "        'metric': {\n",
     "            'name': 'time_step_min',\n",
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta40', '/JSS/JSS/env/instances/ta41', '/JSS/JSS/env/instances/ta42', '/JSS/JSS/env/instances/ta43', '/JSS/JSS/env/instances/ta44',\n",
+    "                           '/JSS/JSS/env/instances/ta45', '/JSS/JSS/env/instances/ta46', '/JSS/JSS/env/instances/ta47', '/JSS/JSS/env/instances/ta48',\n",
+    "                           '/JSS/JSS/env/instances/ta49', '/JSS/JSS/env/instances/ta50']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -74,25 +74,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: lh9x5rb9\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\n"
+      "Create sweep with ID: wnc8ihq1\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\n"
      ]
     }
    ],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_2\")"
+    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_3\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 9,
    "metadata": {},
    "outputs": [
     {
@@ -100,1977 +100,422 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-14 18:51:58,915 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-14 18:51:59,229 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 18:51:59,229 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-14 18:51:59,231 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-04 21:27:40,508 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-04 21:27:40,953 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:27:40,953 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta40\n",
+      "2020-11-04 21:27:40,955 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta40\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "2020-10-14 18:52:04,245 - wandb.wandb_agent - INFO - Running runs: ['bgm3l5ts']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33meffortless-sweep-1\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/bgm3l5ts\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_185201-bgm3l5ts\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/h3u61381\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_212741-h3u61381\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-14 18:52:04,834\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.7/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
+      "2020-11-04 21:27:45,971 - wandb.wandb_agent - INFO - Running runs: ['h3u61381']\n",
       "\n",
-      "\n",
-      "\u001b[2m\u001b[36m(pid=25130)\u001b[0m 2020-10-14 18:52:07,658\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-11\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 400\n",
-      "  iterations_since_restore: 1\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 72.94000000000001\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.3600000000000003\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 3.247757911682129\n",
-      "  time_this_iter_s: 3.247757911682129\n",
-      "  time_total_s: 3.247757911682129\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701531\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 400\n",
-      "  training_iteration: 1\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.8/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |   ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |      1 |          3.24776 |  400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-16\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 12000\n",
-      "  iterations_since_restore: 30\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 5.3\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 8.01456618309021\n",
-      "  time_this_iter_s: 0.16585516929626465\n",
-      "  time_total_s: 8.01456618309021\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701536\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 12000\n",
-      "  training_iteration: 30\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.9/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |     30 |          8.01457 | 12000 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-21\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 23600\n",
-      "  iterations_since_restore: 59\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 12.782260656356812\n",
-      "  time_this_iter_s: 0.1621565818786621\n",
-      "  time_total_s: 12.782260656356812\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701541\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 23600\n",
-      "  training_iteration: 59\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |     59 |          12.7823 | 23600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |     87 |          17.4055 | 34800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-26\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 35200\n",
-      "  iterations_since_restore: 88\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 17.567854166030884\n",
-      "  time_this_iter_s: 0.16233396530151367\n",
-      "  time_total_s: 17.567854166030884\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701546\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 35200\n",
-      "  training_iteration: 88\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |    116 |          22.0842 | 46400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-31\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 46800\n",
-      "  iterations_since_restore: 117\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 22.268078804016113\n",
-      "  time_this_iter_s: 0.18388056755065918\n",
-      "  time_total_s: 22.268078804016113\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701551\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 46800\n",
-      "  training_iteration: 117\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "2020-10-14 18:52:32,975\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=25093, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 4.00000000e-01, 2.46153846e-01,\n",
-      "       6.26262626e-01, 5.02564103e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.77948718e-01, 4.44444444e-01,\n",
-      "       8.88205128e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 6.85128205e-01, 3.73737374e-01, 8.00000000e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.07692308e-01, 3.43434343e-01, 9.21025641e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.27272727e-01, 6.00000000e-01, 4.10256410e-01,\n",
-      "       1.21212121e-01, 7.73333333e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.91919192e-01, 7.33333333e-01, 3.82564103e-01, 2.22222222e-01,\n",
-      "       3.95897436e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.54871795e-01, 1.31313131e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.72727273e-01, 8.00000000e-01,\n",
-      "       6.23589744e-01, 3.23232323e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 2.94358974e-01,\n",
-      "       2.02020202e-01, 2.35897436e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.34343434e-01,\n",
-      "       2.25641026e-04, 0.00000000e+00, 0.00000000e+00, 1.31313131e-01,\n",
-      "       4.00000000e-01, 2.28717949e-01, 7.57575758e-01, 5.10769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.41025641e-01, 4.54545455e-01, 1.76410256e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.23232323e-01, 6.00000000e-01, 6.53333333e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.00000000e-01, 1.98974359e-01, 2.02020202e-02,\n",
-      "       3.54871795e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 3.25128205e-01, 1.91919192e-01, 3.85641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       4.20512821e-01, 3.23232323e-01, 2.42051282e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.78787879e-01, 6.00000000e-01, 5.18974359e-01,\n",
-      "       7.07070707e-02, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.83076923e-01, 2.72727273e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 2.92929293e-01, 2.56410256e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.00000000e-01,\n",
-      "       5.85641026e-01, 2.32323232e-01, 2.44102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       4.24242424e-01, 3.22051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.48205128e-01, 8.68686869e-01,\n",
-      "       1.76410256e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.00512821e-01, 4.94949495e-01, 4.51282051e-03,\n",
-      "       0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.61025641e-01, 8.08080808e-02, 6.17435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.02564103e-01,\n",
-      "       8.08080808e-01, 1.94871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 3.64102564e-01, 1.21212121e-01,\n",
-      "       7.97948718e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.33333333e-01, 9.74358974e-02, 3.03030303e-01, 8.41025641e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.41538462e-01, 4.04040404e-01, 3.24102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.11111111e-01, 4.66666667e-01, 3.84615385e-01,\n",
-      "       8.18181818e-01, 1.66153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       2.17435897e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.00000000e+00, 7.37435897e-01, 1.00000000e+00, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       8.32820513e-01, 3.43434343e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.04040404e-02, 4.66666667e-01, 4.81025641e-01,\n",
-      "       5.35353535e-01, 1.08717949e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 1.91794872e-01, 2.02020202e-02,\n",
-      "       4.10256410e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.89743590e-01, 5.85858586e-01, 1.49743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       6.70769231e-01, 2.92929293e-01, 3.28205128e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.14871795e-01,\n",
-      "       6.66666667e-01, 5.10769231e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-02, 4.66666667e-01, 4.77948718e-01, 6.66666667e-01,\n",
-      "       4.18461538e-03, 0.00000000e+00, 0.00000000e+00, 2.52525253e-01,\n",
-      "       5.33333333e-01, 5.51794872e-01, 3.83838384e-01, 1.70256410e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.20000000e-01, 7.27272727e-01, 1.23076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.43434343e-01, 6.66666667e-01, 5.40512821e-01,\n",
-      "       2.72727273e-01, 3.01538462e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 5.33333333e-01, 4.94949495e-01,\n",
-      "       7.79487179e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 4.68717949e-01, 7.57575758e-01, 3.50769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.33333333e-01,\n",
-      "       8.01025641e-01, 1.41414141e-01, 1.08717949e-03, 0.00000000e+00,\n",
-      "       1.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.54871795e-01, 5.05050505e-02,\n",
-      "       9.02564103e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 6.22564103e-01, 4.54545455e-01, 8.82051282e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.47692308e-01, 4.04040404e-01, 3.07692308e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.30256410e-01,\n",
-      "       7.07070707e-01, 2.64615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 2.77948718e-01, 3.93939394e-01,\n",
-      "       1.64102564e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False,  True,\n",
-      "       False, False, False, False, False, False])})\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |    145 |           26.762 | 58000 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-37\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 58800\n",
-      "  iterations_since_restore: 147\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 27.082104921340942\n",
-      "  time_this_iter_s: 0.1581122875213623\n",
-      "  time_total_s: 27.082104921340942\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701557\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 58800\n",
-      "  training_iteration: 147\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "2020-10-14 18:52:41,582\tERROR trial_runner.py:567 -- Trial RandomMasked_jss_env_5afa5_00000: Error processing event.\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
-      "    result = self.trial_executor.fetch_result(trial)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
-      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
-      "    raise value.as_instanceof_cause()\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RandomMasked.train()\u001b[39m (pid=25130, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
-      "    raise e\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
-      "    result = Trainable.train(self)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
-      "    result = self.step()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
-      "    res = next(self.train_exec_impl)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
-      "    return next(self.built_iterator)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 551, in base_iterator\n",
-      "    batch = ray.get(obj_ref)\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=25093, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 4.00000000e-01, 2.46153846e-01,\n",
-      "       6.26262626e-01, 5.02564103e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.77948718e-01, 4.44444444e-01,\n",
-      "       8.88205128e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 6.85128205e-01, 3.73737374e-01, 8.00000000e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.07692308e-01, 3.43434343e-01, 9.21025641e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.27272727e-01, 6.00000000e-01, 4.10256410e-01,\n",
-      "       1.21212121e-01, 7.73333333e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.91919192e-01, 7.33333333e-01, 3.82564103e-01, 2.22222222e-01,\n",
-      "       3.95897436e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.54871795e-01, 1.31313131e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.72727273e-01, 8.00000000e-01,\n",
-      "       6.23589744e-01, 3.23232323e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 2.94358974e-01,\n",
-      "       2.02020202e-01, 2.35897436e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.34343434e-01,\n",
-      "       2.25641026e-04, 0.00000000e+00, 0.00000000e+00, 1.31313131e-01,\n",
-      "       4.00000000e-01, 2.28717949e-01, 7.57575758e-01, 5.10769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.41025641e-01, 4.54545455e-01, 1.76410256e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.23232323e-01, 6.00000000e-01, 6.53333333e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.00000000e-01, 1.98974359e-01, 2.02020202e-02,\n",
-      "       3.54871795e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 3.25128205e-01, 1.91919192e-01, 3.85641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       4.20512821e-01, 3.23232323e-01, 2.42051282e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.78787879e-01, 6.00000000e-01, 5.18974359e-01,\n",
-      "       7.07070707e-02, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.83076923e-01, 2.72727273e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 2.92929293e-01, 2.56410256e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.00000000e-01,\n",
-      "       5.85641026e-01, 2.32323232e-01, 2.44102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       4.24242424e-01, 3.22051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.48205128e-01, 8.68686869e-01,\n",
-      "       1.76410256e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.00512821e-01, 4.94949495e-01, 4.51282051e-03,\n",
-      "       0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.61025641e-01, 8.08080808e-02, 6.17435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.02564103e-01,\n",
-      "       8.08080808e-01, 1.94871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 3.64102564e-01, 1.21212121e-01,\n",
-      "       7.97948718e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.33333333e-01, 9.74358974e-02, 3.03030303e-01, 8.41025641e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.41538462e-01, 4.04040404e-01, 3.24102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.11111111e-01, 4.66666667e-01, 3.84615385e-01,\n",
-      "       8.18181818e-01, 1.66153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       2.17435897e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.00000000e+00, 7.37435897e-01, 1.00000000e+00, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       8.32820513e-01, 3.43434343e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.04040404e-02, 4.66666667e-01, 4.81025641e-01,\n",
-      "       5.35353535e-01, 1.08717949e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 1.91794872e-01, 2.02020202e-02,\n",
-      "       4.10256410e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.89743590e-01, 5.85858586e-01, 1.49743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       6.70769231e-01, 2.92929293e-01, 3.28205128e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.14871795e-01,\n",
-      "       6.66666667e-01, 5.10769231e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-02, 4.66666667e-01, 4.77948718e-01, 6.66666667e-01,\n",
-      "       4.18461538e-03, 0.00000000e+00, 0.00000000e+00, 2.52525253e-01,\n",
-      "       5.33333333e-01, 5.51794872e-01, 3.83838384e-01, 1.70256410e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.20000000e-01, 7.27272727e-01, 1.23076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.43434343e-01, 6.66666667e-01, 5.40512821e-01,\n",
-      "       2.72727273e-01, 3.01538462e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 5.33333333e-01, 4.94949495e-01,\n",
-      "       7.79487179e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 4.68717949e-01, 7.57575758e-01, 3.50769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.33333333e-01,\n",
-      "       8.01025641e-01, 1.41414141e-01, 1.08717949e-03, 0.00000000e+00,\n",
-      "       1.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.54871795e-01, 5.05050505e-02,\n",
-      "       9.02564103e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 6.22564103e-01, 4.54545455e-01, 8.82051282e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.47692308e-01, 4.04040404e-01, 3.07692308e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.30256410e-01,\n",
-      "       7.07070707e-01, 2.64615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 2.77948718e-01, 3.93939394e-01,\n",
-      "       1.64102564e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False,  True,\n",
-      "       False, False, False, False, False, False])})\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 ERROR)\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc   |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | ERROR    |       |    172 |          31.1614 | 68800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "Number of errored trials: 1\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
-      "| Trial name                       |   # failures | error file                                                                                 |\n",
-      "|----------------------------------+--------------+--------------------------------------------------------------------------------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 |            1 | /root/ray_results/ppo-jss/RandomMasked_jss_env_5afa5_00000_0_2020-10-14_18-52-06/error.txt |\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"random_loop.py\", line 73, in <module>\n",
-      "    rand_func()\n",
-      "  File \"random_loop.py\", line 55, in rand_func\n",
-      "    analysis = tune.run(RandomMaskedTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
-      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
-      "ray.tune.error.TuneError: ('Trials did not complete', [RandomMasked_jss_env_5afa5_00000])\n",
-      "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 24896\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 32790\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_185201-bgm3l5ts/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_185201-bgm3l5ts/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_212741-h3u61381/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_212741-h3u61381/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 1775.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604525862\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33meffortless-sweep-1\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/bgm3l5ts\u001b[0m\n",
-      "2020-10-14 18:52:51,177 - wandb.wandb_agent - INFO - Cleaning up finished run: bgm3l5ts\n",
-      "2020-10-14 18:52:51,692 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 18:52:51,693 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
-      "2020-10-14 18:52:51,700 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta52\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/h3u61381\u001b[0m\n",
+      "2020-11-04 21:37:51,376 - wandb.wandb_agent - INFO - Cleaning up finished run: h3u61381\n",
+      "2020-11-04 21:37:51,696 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:37:51,696 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta41\n",
+      "2020-11-04 21:37:51,698 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta41\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33msuper-sweep-2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ezglujb0\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_185253-ezglujb0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/c18o79jq\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_213752-c18o79jq\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-14 18:52:56,719 - wandb.wandb_agent - INFO - Running runs: ['ezglujb0']\n",
-      "2020-10-14 18:52:57,270\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.7/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
-      "\n",
-      "\n",
-      "\u001b[2m\u001b[36m(pid=26894)\u001b[0m 2020-10-14 18:53:00,066\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-03\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 400\n",
-      "  iterations_since_restore: 1\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 71.17999999999999\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.3600000000000003\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 3.277367115020752\n",
-      "  time_this_iter_s: 3.277367115020752\n",
-      "  time_total_s: 3.277367115020752\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701583\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 400\n",
-      "  training_iteration: 1\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.8/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |   ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |      1 |          3.27737 |  400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-08\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 11600\n",
-      "  iterations_since_restore: 29\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 5.1\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 7.904330253601074\n",
-      "  time_this_iter_s: 0.16050171852111816\n",
-      "  time_total_s: 7.904330253601074\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701588\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 11600\n",
-      "  training_iteration: 29\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.9/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |     29 |          7.90433 | 11600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "2020-11-04 21:37:56,716 - wandb.wandb_agent - INFO - Running runs: ['c18o79jq']\n",
       "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33712\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_213752-c18o79jq/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_213752-c18o79jq/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2137.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604526473\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/c18o79jq\u001b[0m\n",
+      "2020-11-04 21:48:02,339 - wandb.wandb_agent - INFO - Cleaning up finished run: c18o79jq\n",
+      "2020-11-04 21:48:02,711 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:48:02,712 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta42\n",
+      "2020-11-04 21:48:02,713 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta42\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/sb79yg44\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_214803-sb79yg44\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-13\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 22400\n",
-      "  iterations_since_restore: 56\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 12.449386596679688\n",
-      "  time_this_iter_s: 0.16517019271850586\n",
-      "  time_total_s: 12.449386596679688\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701593\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 22400\n",
-      "  training_iteration: 56\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |     56 |          12.4494 | 22400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-18\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 33600\n",
-      "  iterations_since_restore: 84\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 17.05783486366272\n",
-      "  time_this_iter_s: 0.1567375659942627\n",
-      "  time_total_s: 17.05783486366272\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701598\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 33600\n",
-      "  training_iteration: 84\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |     84 |          17.0578 | 33600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-24\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 45200\n",
-      "  iterations_since_restore: 113\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 4.5\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 21.754982709884644\n",
-      "  time_this_iter_s: 0.16276907920837402\n",
-      "  time_total_s: 21.754982709884644\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701604\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 45200\n",
-      "  training_iteration: 113\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |    113 |           21.755 | 45200 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "2020-10-14 18:53:25,585\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26854, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 3.67179487e-01,\n",
-      "       5.05050505e-01, 6.72820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.07070707e-02, 4.00000000e-01, 3.89743590e-01, 7.47474747e-01,\n",
-      "       1.20205128e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 7.47692308e-01, 3.43434343e-01, 5.82564103e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.15151515e-01, 5.33333333e-01,\n",
-      "       5.48717949e-01, 6.76767677e-01, 1.37435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 5.56923077e-01,\n",
-      "       1.51515152e-01, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 2.81025641e-01, 2.42424242e-01,\n",
-      "       1.47692308e-03, 0.00000000e+00, 0.00000000e+00, 7.07070707e-02,\n",
-      "       6.66666667e-01, 5.47692308e-01, 0.00000000e+00, 6.66666667e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.66666667e-01,\n",
-      "       1.79487179e-01, 7.17171717e-01, 1.95076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       1.71717172e-01, 1.12205128e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.04040404e-02,\n",
-      "       2.58461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.48717949e-01, 4.34343434e-01, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.75897436e-01, 1.01010101e-01, 5.90769231e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.82564103e-01,\n",
-      "       6.86868687e-01, 1.25128205e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.06060606e-02, 6.66666667e-01, 5.57948718e-01, 2.62626263e-01,\n",
-      "       5.33333333e-04, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 4.02051282e-01, 9.69696970e-01, 5.53846154e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       5.22051282e-01, 1.51515152e-01, 1.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.08080808e-02, 8.00000000e-01, 7.04615385e-01,\n",
-      "       5.65656566e-01, 1.14871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.01538462e-01, 6.66666667e-01,\n",
-      "       6.25641026e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 6.36363636e-01, 1.12410256e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       5.40512821e-01, 1.51515152e-01, 1.43589744e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       3.33333333e-01, 5.57948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.86868687e-01, 7.33333333e-01, 5.47692308e-01, 8.58585859e-01,\n",
-      "       1.74358974e-03, 0.00000000e+00, 0.00000000e+00, 2.02020202e-01,\n",
-      "       5.33333333e-01, 4.80000000e-01, 3.63636364e-01, 7.38461538e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.86153846e-01, 3.83838384e-01, 6.35897436e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 4.00000000e-01,\n",
-      "       6.26262626e-01, 3.69230769e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 8.72820513e-01, 1.00000000e+00,\n",
-      "       8.20512821e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 4.98461538e-01, 6.76767677e-01, 2.07179487e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.51515152e-01, 4.00000000e-01,\n",
-      "       4.74871795e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.13131313e-01, 8.00000000e-01, 6.59487179e-01,\n",
-      "       8.58585859e-01, 1.74358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       3.07692308e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.66666667e-01, 1.58974359e-01, 3.03030303e-02, 5.21025641e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.84615385e-01, 5.65656566e-01, 1.25538462e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 7.68205128e-01,\n",
-      "       1.00000000e+00, 3.36410256e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 6.26666667e-01, 1.00000000e+00,\n",
-      "       1.24923077e-02, 0.00000000e+00, 0.00000000e+00, 6.06060606e-02,\n",
-      "       5.33333333e-01, 4.31794872e-01, 4.54545455e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00,\n",
-      "       9.70256410e-01, 1.00000000e+00, 9.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 3.58974359e-01,\n",
-      "       1.01010101e-02, 8.41025641e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 9.33333333e-01, 8.36923077e-01, 4.04040404e-02,\n",
-      "       1.15487179e-02, 0.00000000e+00, 0.00000000e+00, 6.96969697e-01,\n",
-      "       6.00000000e-01, 5.84615385e-01, 2.92929293e-01, 1.07282051e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       4.65641026e-01, 0.00000000e+00, 3.38461538e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.02564103e-01,\n",
-      "       7.07070707e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.66666667e-01, 6.17435897e-01, 1.51515152e-01,\n",
-      "       3.38461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.81538462e-01, 2.02020202e-02, 4.59487179e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.13131313e-01, 5.33333333e-01,\n",
-      "       5.09743590e-01, 1.71717172e-01, 2.93333333e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       4.94949495e-01, 6.97435897e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.62564103e-01, 3.23232323e-01,\n",
-      "       1.43589744e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       9.33333333e-01, 7.80512821e-01, 2.62626263e-01, 3.69230769e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.52525253e-01, 9.33333333e-01,\n",
-      "       8.87179487e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.10769231e-01,\n",
-      "       6.26262626e-01, 6.40000000e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.94871795e-01, 1.11111111e-01,\n",
-      "       2.21538462e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True])})\n",
-      "2020-10-14 18:53:27,586\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26840, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.80512821e-01,\n",
-      "       2.12121212e-01, 3.26153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.96923077e-01, 6.56565657e-01,\n",
-      "       1.82564103e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 6.07179487e-01, 4.84848485e-01, 1.02564103e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.35353535e-01, 4.66666667e-01,\n",
-      "       4.53333333e-01, 1.71717172e-01, 3.48717949e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.44444444e-01, 8.00000000e-01, 6.14358974e-01,\n",
-      "       4.34343434e-01, 8.82051282e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-01, 6.66666667e-01, 3.46666667e-01, 2.72727273e-01,\n",
-      "       1.90769231e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.00000000e-01, 3.28205128e-01, 5.35353535e-01, 6.35897436e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.08080808e-02, 5.33333333e-01,\n",
-      "       3.95897436e-01, 1.41414141e-01, 2.87179487e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.06060606e-02, 6.00000000e-01, 3.89743590e-01,\n",
-      "       3.33333333e-01, 4.94358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.33333333e-01, 5.87692308e-01, 5.15151515e-01,\n",
-      "       1.43589744e-04, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.33333333e-01, 8.48484848e-01, 1.72307692e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.75897436e-01, 9.09090909e-02, 6.83076923e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.92820513e-01,\n",
-      "       8.08080808e-02, 2.46153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 5.33333333e-01, 4.10256410e-01, 7.87878788e-01,\n",
-      "       4.51282051e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.43589744e-01, 1.61616162e-01, 4.82051282e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.24615385e-01, 4.64646465e-01, 5.33333333e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 6.08205128e-01,\n",
-      "       6.56565657e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 6.03076923e-01, 1.21212121e-01,\n",
-      "       9.47692308e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.66666667e-01, 1.62051282e-01, 4.34343434e-01, 6.76923077e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       5.01538462e-01, 2.02020202e-01, 1.43589744e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 8.71794872e-01,\n",
-      "       1.00000000e+00, 1.98974359e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-01, 7.33333333e-01, 5.96923077e-01, 1.01010101e-01,\n",
-      "       8.41025641e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.00000000e+00, 7.61025641e-01, 1.00000000e+00, 1.51794872e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       3.95897436e-01, 5.05050505e-02, 6.15384615e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 5.81538462e-01,\n",
-      "       6.86868687e-01, 2.03076923e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       9.29292929e-01, 5.33333333e-01, 5.00512821e-01, 6.86868687e-01,\n",
-      "       1.82564103e-03, 0.00000000e+00, 0.00000000e+00, 4.34343434e-01,\n",
-      "       4.66666667e-01, 4.54358974e-01, 2.62626263e-01, 5.33333333e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       4.90256410e-01, 7.77777778e-01, 5.29230769e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.14141414e-01, 8.00000000e-01, 6.49230769e-01,\n",
-      "       1.01010101e-02, 2.05128205e-05, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       3.69230769e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 3.24102564e-01, 3.23232323e-01, 1.16923077e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       5.93846154e-01, 6.56565657e-01, 3.13846154e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.98461538e-01,\n",
-      "       1.71717172e-01, 2.64615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.31313131e-01, 8.00000000e-01, 5.05641026e-01, 4.84848485e-01,\n",
-      "       3.44615385e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.89743590e-01, 2.62626263e-01, 2.33846154e-03,\n",
-      "       0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.53846154e-01, 4.04040404e-02, 8.20512821e-05, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.10256410e-01,\n",
-      "       3.33333333e-01, 8.88205128e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 7.21025641e-01, 6.76767677e-01,\n",
-      "       4.10256410e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.00000000e-01, 3.36410256e-01, 4.04040404e-02, 8.10256410e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       5.74358974e-01, 7.07070707e-02, 1.31282051e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.35897436e-01,\n",
-      "       2.82828283e-01, 2.37948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 5.33333333e-01, 7.77777778e-01,\n",
-      "       1.16923077e-03, 0.00000000e+00, 0.00000000e+00, 6.56565657e-01,\n",
-      "       4.66666667e-01, 2.40000000e-01, 1.81818182e-01, 2.29743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       4.27692308e-01, 1.51515152e-01, 8.51282051e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 6.10256410e-01,\n",
-      "       1.71717172e-01, 8.20512821e-05, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.22222222e-01, 3.33333333e-01, 2.95384615e-01, 7.87878788e-01,\n",
-      "       3.54871795e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 5.16923077e-01, 3.63636364e-01, 7.79487179e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       6.00000000e-01, 1.31313131e-01, 3.48717949e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 6.70769231e-01,\n",
-      "       1.61616162e-01, 2.62564103e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.94871795e-01, 2.42424242e-01,\n",
-      "       3.32307692e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False,  True, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False,  True,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False])})\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-29\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 56800\n",
-      "  iterations_since_restore: 142\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 26.409894704818726\n",
-      "  time_this_iter_s: 0.16816067695617676\n",
-      "  time_total_s: 26.409894704818726\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701609\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 56800\n",
-      "  training_iteration: 142\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |    142 |          26.4099 | 56800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
+      "2020-11-04 21:48:07,725 - wandb.wandb_agent - INFO - Running runs: ['sb79yg44']\n",
       "\n",
-      "2020-10-14 18:53:30,587\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26878, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 3.03030303e-01, 4.66666667e-01, 3.36410256e-01,\n",
-      "       6.46464646e-01, 1.31282051e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.96923077e-01, 0.00000000e+00,\n",
-      "       1.84615385e-04, 0.00000000e+00, 0.00000000e+00, 1.91919192e-01,\n",
-      "       4.66666667e-01, 5.66153846e-01, 2.72727273e-01, 2.78974359e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       6.01025641e-01, 7.77777778e-01, 1.18974359e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 3.20000000e-01,\n",
-      "       7.57575758e-01, 1.38051282e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 5.82564103e-01, 1.00000000e+00,\n",
-      "       6.97435897e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.95897436e-01, 1.61616162e-01, 3.05641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       2.87179487e-01, 7.07070707e-02, 3.89743590e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       5.25252525e-01, 6.46153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.22222222e-01, 6.00000000e-01, 4.82051282e-01, 1.01010101e-02,\n",
-      "       1.57948718e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.33333333e-01, 3.63636364e-01, 1.49743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.15151515e-01, 4.66666667e-01,\n",
-      "       3.54871795e-01, 3.43434343e-01, 3.01538462e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 7.41538462e-01,\n",
-      "       1.41414141e-01, 2.74871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.00000000e-01, 1.98974359e-01, 4.34343434e-01,\n",
-      "       7.67179487e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.43589744e-01, 2.02020202e-02, 8.61538462e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.24615385e-01, 4.34343434e-01, 2.46153846e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.03030303e-02, 4.66666667e-01, 4.87179487e-01,\n",
-      "       1.01010101e-01, 5.04615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.33333333e-01, 6.37948718e-01, 1.21212121e-01,\n",
-      "       2.42051282e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.00000000e-01, 9.94871795e-02, 4.04040404e-01, 7.38461538e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.13131313e-01, 6.66666667e-01,\n",
-      "       5.08717949e-01, 3.33333333e-01, 2.03076923e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 8.71794872e-01,\n",
-      "       1.00000000e+00, 1.14871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 4.81025641e-01, 6.36363636e-01,\n",
-      "       2.46153846e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 5.50769231e-01, 3.63636364e-01, 3.91794872e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.23232323e-01, 6.00000000e-01,\n",
-      "       4.53333333e-01, 1.01010101e-01, 2.99487179e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 2.32323232e-01, 6.00000000e-01, 4.78974359e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 3.64102564e-01, 4.94949495e-01,\n",
-      "       3.83589744e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.04615385e-01, 1.21212121e-01, 9.43589744e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       5.65128205e-01, 5.75757576e-01, 4.92307692e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 5.50769231e-01,\n",
-      "       3.83838384e-01, 1.92820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       1.06666667e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.82564103e-01, 2.02020202e-01, 5.80512821e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       6.98461538e-01, 6.76767677e-01, 1.06666667e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.98461538e-01,\n",
-      "       7.27272727e-01, 8.20512821e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 3.65128205e-01, 5.05050505e-02,\n",
-      "       1.88717949e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.88717949e-01, 6.96969697e-01, 7.58974359e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       4.34871795e-01, 1.01010101e-01, 2.13333333e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 5.25252525e-01, 6.66666667e-01, 5.46666667e-01,\n",
-      "       0.00000000e+00, 3.69230769e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.51515152e-01, 6.00000000e-01, 6.16410256e-01, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.23232323e-01,\n",
-      "       7.33333333e-01, 7.24102564e-01, 8.08080808e-01, 3.05641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.31313131e-01, 4.66666667e-01,\n",
-      "       3.29230769e-01, 1.11111111e-01, 6.83076923e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.35897436e-01,\n",
-      "       3.03030303e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.84615385e-01, 6.06060606e-02,\n",
-      "       1.78461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.06666667e-01, 2.12121212e-01, 9.08717949e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       4.44102564e-01, 2.42424242e-01, 2.42051282e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 6.10256410e-01,\n",
-      "       3.03030303e-02, 2.52307692e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.01025641e-01, 3.13131313e-01,\n",
-      "       2.21538462e-03, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 6.66666667e-01, 1.01010101e-01, 3.26153846e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.04040404e-02, 6.00000000e-01,\n",
-      "       6.83076923e-01, 6.06060606e-02, 1.23076923e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.10769231e-01,\n",
-      "       2.32323232e-01, 3.22051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 6.66666667e-01, 4.91282051e-01, 1.01010101e-02,\n",
-      "       1.37435897e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False,  True, False, False, False,  True])})\n",
-      "2020-10-14 18:53:33,891\tERROR trial_runner.py:567 -- Trial RandomMasked_jss_env_7a318_00000: Error processing event.\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
-      "    result = self.trial_executor.fetch_result(trial)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
-      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
-      "    raise value.as_instanceof_cause()\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RandomMasked.train()\u001b[39m (pid=26894, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
-      "    raise e\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
-      "    result = Trainable.train(self)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
-      "    result = self.step()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
-      "    res = next(self.train_exec_impl)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
-      "    return next(self.built_iterator)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 551, in base_iterator\n",
-      "    batch = ray.get(obj_ref)\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26854, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 3.67179487e-01,\n",
-      "       5.05050505e-01, 6.72820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.07070707e-02, 4.00000000e-01, 3.89743590e-01, 7.47474747e-01,\n",
-      "       1.20205128e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 7.47692308e-01, 3.43434343e-01, 5.82564103e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.15151515e-01, 5.33333333e-01,\n",
-      "       5.48717949e-01, 6.76767677e-01, 1.37435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 5.56923077e-01,\n",
-      "       1.51515152e-01, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 2.81025641e-01, 2.42424242e-01,\n",
-      "       1.47692308e-03, 0.00000000e+00, 0.00000000e+00, 7.07070707e-02,\n",
-      "       6.66666667e-01, 5.47692308e-01, 0.00000000e+00, 6.66666667e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.66666667e-01,\n",
-      "       1.79487179e-01, 7.17171717e-01, 1.95076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       1.71717172e-01, 1.12205128e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.04040404e-02,\n",
-      "       2.58461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.48717949e-01, 4.34343434e-01, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.75897436e-01, 1.01010101e-01, 5.90769231e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.82564103e-01,\n",
-      "       6.86868687e-01, 1.25128205e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.06060606e-02, 6.66666667e-01, 5.57948718e-01, 2.62626263e-01,\n",
-      "       5.33333333e-04, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 4.02051282e-01, 9.69696970e-01, 5.53846154e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       5.22051282e-01, 1.51515152e-01, 1.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.08080808e-02, 8.00000000e-01, 7.04615385e-01,\n",
-      "       5.65656566e-01, 1.14871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.01538462e-01, 6.66666667e-01,\n",
-      "       6.25641026e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 6.36363636e-01, 1.12410256e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       5.40512821e-01, 1.51515152e-01, 1.43589744e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       3.33333333e-01, 5.57948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.86868687e-01, 7.33333333e-01, 5.47692308e-01, 8.58585859e-01,\n",
-      "       1.74358974e-03, 0.00000000e+00, 0.00000000e+00, 2.02020202e-01,\n",
-      "       5.33333333e-01, 4.80000000e-01, 3.63636364e-01, 7.38461538e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.86153846e-01, 3.83838384e-01, 6.35897436e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 4.00000000e-01,\n",
-      "       6.26262626e-01, 3.69230769e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 8.72820513e-01, 1.00000000e+00,\n",
-      "       8.20512821e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 4.98461538e-01, 6.76767677e-01, 2.07179487e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.51515152e-01, 4.00000000e-01,\n",
-      "       4.74871795e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.13131313e-01, 8.00000000e-01, 6.59487179e-01,\n",
-      "       8.58585859e-01, 1.74358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       3.07692308e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.66666667e-01, 1.58974359e-01, 3.03030303e-02, 5.21025641e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.84615385e-01, 5.65656566e-01, 1.25538462e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 7.68205128e-01,\n",
-      "       1.00000000e+00, 3.36410256e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 6.26666667e-01, 1.00000000e+00,\n",
-      "       1.24923077e-02, 0.00000000e+00, 0.00000000e+00, 6.06060606e-02,\n",
-      "       5.33333333e-01, 4.31794872e-01, 4.54545455e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00,\n",
-      "       9.70256410e-01, 1.00000000e+00, 9.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 3.58974359e-01,\n",
-      "       1.01010101e-02, 8.41025641e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 9.33333333e-01, 8.36923077e-01, 4.04040404e-02,\n",
-      "       1.15487179e-02, 0.00000000e+00, 0.00000000e+00, 6.96969697e-01,\n",
-      "       6.00000000e-01, 5.84615385e-01, 2.92929293e-01, 1.07282051e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       4.65641026e-01, 0.00000000e+00, 3.38461538e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.02564103e-01,\n",
-      "       7.07070707e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.66666667e-01, 6.17435897e-01, 1.51515152e-01,\n",
-      "       3.38461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.81538462e-01, 2.02020202e-02, 4.59487179e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.13131313e-01, 5.33333333e-01,\n",
-      "       5.09743590e-01, 1.71717172e-01, 2.93333333e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       4.94949495e-01, 6.97435897e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.62564103e-01, 3.23232323e-01,\n",
-      "       1.43589744e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       9.33333333e-01, 7.80512821e-01, 2.62626263e-01, 3.69230769e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.52525253e-01, 9.33333333e-01,\n",
-      "       8.87179487e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.10769231e-01,\n",
-      "       6.26262626e-01, 6.40000000e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.94871795e-01, 1.11111111e-01,\n",
-      "       2.21538462e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True])})\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 ERROR)\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc   |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | ERROR    |       |    171 |          30.8067 | 68400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "Number of errored trials: 1\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
-      "| Trial name                       |   # failures | error file                                                                                 |\n",
-      "|----------------------------------+--------------+--------------------------------------------------------------------------------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 |            1 | /root/ray_results/ppo-jss/RandomMasked_jss_env_7a318_00000_0_2020-10-14_18-52-58/error.txt |\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33800\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_214803-sb79yg44/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_214803-sb79yg44/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2071.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604527084\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/sb79yg44\u001b[0m\n",
+      "2020-11-04 21:58:08,292 - wandb.wandb_agent - INFO - Cleaning up finished run: sb79yg44\n",
+      "2020-11-04 21:58:08,653 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:58:08,653 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta43\n",
+      "2020-11-04 21:58:08,655 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta43\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/p3hdb6ys\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_215809-p3hdb6ys\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"random_loop.py\", line 73, in <module>\n",
-      "    rand_func()\n",
-      "  File \"random_loop.py\", line 55, in rand_func\n",
-      "    analysis = tune.run(RandomMaskedTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
-      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
-      "ray.tune.error.TuneError: ('Trials did not complete', [RandomMasked_jss_env_7a318_00000])\n",
+      "2020-11-04 21:58:13,672 - wandb.wandb_agent - INFO - Running runs: ['p3hdb6ys']\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 26647\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33846\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_185253-ezglujb0/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_185253-ezglujb0/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_215809-p3hdb6ys/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_215809-p3hdb6ys/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 1967.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604527690\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33msuper-sweep-2\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ezglujb0\u001b[0m\n",
-      "2020-10-14 18:53:43,767 - wandb.wandb_agent - INFO - Cleaning up finished run: ezglujb0\n",
-      "2020-10-14 18:53:44,146 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 18:53:44,146 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta53\n",
-      "2020-10-14 18:53:44,148 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta53\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/p3hdb6ys\u001b[0m\n",
+      "2020-11-04 22:08:18,999 - wandb.wandb_agent - INFO - Cleaning up finished run: p3hdb6ys\n",
+      "2020-11-04 22:08:19,334 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:08:19,334 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta44\n",
+      "2020-11-04 22:08:19,336 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta44\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mspring-sweep-3\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/gx7ht69p\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_185345-gx7ht69p\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/q6lvwcdf\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_220820-q6lvwcdf\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-14 18:53:49,166 - wandb.wandb_agent - INFO - Running runs: ['gx7ht69p']\n",
-      "2020-10-14 18:53:49,662\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.7/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
+      "2020-11-04 22:08:24,353 - wandb.wandb_agent - INFO - Running runs: ['q6lvwcdf']\n",
       "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33892\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_220820-q6lvwcdf/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_220820-q6lvwcdf/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2091.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604528301\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/q6lvwcdf\u001b[0m\n",
+      "2020-11-04 22:18:29,584 - wandb.wandb_agent - INFO - Cleaning up finished run: q6lvwcdf\n",
+      "2020-11-04 22:18:29,915 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:18:29,916 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta45\n",
+      "2020-11-04 22:18:29,917 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta45\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/60frjwtk\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_221830-60frjwtk\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "\u001b[2m\u001b[36m(pid=28631)\u001b[0m 2020-10-14 18:53:52,367\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-56\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 400\n",
-      "  iterations_since_restore: 1\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 68.7\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.3600000000000003\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 3.336198329925537\n",
-      "  time_this_iter_s: 3.336198329925537\n",
-      "  time_total_s: 3.336198329925537\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701636\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 400\n",
-      "  training_iteration: 1\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.8/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |   ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |      1 |           3.3362 |  400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
+      "2020-11-04 22:18:34,933 - wandb.wandb_agent - INFO - Running runs: ['60frjwtk']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-01\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 11600\n",
-      "  iterations_since_restore: 29\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 5.2\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 7.95437479019165\n",
-      "  time_this_iter_s: 0.16468524932861328\n",
-      "  time_total_s: 7.95437479019165\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701641\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 11600\n",
-      "  training_iteration: 29\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.9/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |     29 |          7.95437 | 11600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33938\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_221830-60frjwtk/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_221830-60frjwtk/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2032.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604528911\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/60frjwtk\u001b[0m\n",
+      "2020-11-04 22:28:39,901 - wandb.wandb_agent - INFO - Cleaning up finished run: 60frjwtk\n",
+      "2020-11-04 22:28:40,319 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:28:40,320 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta46\n",
+      "2020-11-04 22:28:40,321 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta46\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/4w63mxn5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_222841-4w63mxn5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:28:45,337 - wandb.wandb_agent - INFO - Running runs: ['4w63mxn5']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-06\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 23200\n",
-      "  iterations_since_restore: 58\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 12.706214427947998\n",
-      "  time_this_iter_s: 0.1642756462097168\n",
-      "  time_total_s: 12.706214427947998\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701646\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 23200\n",
-      "  training_iteration: 58\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |     58 |          12.7062 | 23200 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33984\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_222841-4w63mxn5/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_222841-4w63mxn5/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2070.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604529522\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/4w63mxn5\u001b[0m\n",
+      "2020-11-04 22:38:45,728 - wandb.wandb_agent - INFO - Cleaning up finished run: 4w63mxn5\n",
+      "2020-11-04 22:38:46,210 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:38:46,210 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta47\n",
+      "2020-11-04 22:38:46,212 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta47\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/qpbtop8x\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_223847-qpbtop8x\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:38:51,228 - wandb.wandb_agent - INFO - Running runs: ['qpbtop8x']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-11\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 34800\n",
-      "  iterations_since_restore: 87\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 17.468780755996704\n",
-      "  time_this_iter_s: 0.15766501426696777\n",
-      "  time_total_s: 17.468780755996704\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701651\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 34800\n",
-      "  training_iteration: 87\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |     87 |          17.4688 | 34800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34030\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_223847-qpbtop8x/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_223847-qpbtop8x/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 1991.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604530128\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/qpbtop8x\u001b[0m\n",
+      "2020-11-04 22:48:56,548 - wandb.wandb_agent - INFO - Cleaning up finished run: qpbtop8x\n",
+      "2020-11-04 22:48:56,937 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:48:56,937 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta48\n",
+      "2020-11-04 22:48:56,939 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta48\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/gsihk78x\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_224857-gsihk78x\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:49:01,955 - wandb.wandb_agent - INFO - Running runs: ['gsihk78x']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-16\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 46400\n",
-      "  iterations_since_restore: 116\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 4.3\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 22.175960779190063\n",
-      "  time_this_iter_s: 0.1871342658996582\n",
-      "  time_total_s: 22.175960779190063\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701656\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 46400\n",
-      "  training_iteration: 116\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |    116 |           22.176 | 46400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34076\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_224857-gsihk78x/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_224857-gsihk78x/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2052.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 602\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604530739\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/gsihk78x\u001b[0m\n",
+      "2020-11-04 22:59:07,301 - wandb.wandb_agent - INFO - Cleaning up finished run: gsihk78x\n",
+      "2020-11-04 22:59:07,606 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:59:07,606 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta49\n",
+      "2020-11-04 22:59:07,608 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta49\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pvt5040k\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_225908-pvt5040k\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:59:12,624 - wandb.wandb_agent - INFO - Running runs: ['pvt5040k']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-21\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 58000\n",
-      "  iterations_since_restore: 145\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 26.801780700683594\n",
-      "  time_this_iter_s: 0.15772652626037598\n",
-      "  time_total_s: 26.801780700683594\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701661\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 58000\n",
-      "  training_iteration: 145\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.1/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |    145 |          26.8018 | 58000 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34122\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_225908-pvt5040k/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_225908-pvt5040k/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2072.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604531349\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pvt5040k\u001b[0m\n",
+      "2020-11-04 23:09:17,980 - wandb.wandb_agent - INFO - Cleaning up finished run: pvt5040k\n",
+      "2020-11-04 23:09:18,328 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 23:09:18,328 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta50\n",
+      "2020-11-04 23:09:18,330 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta50\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/7oeiazwm\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_230919-7oeiazwm\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 23:09:23,346 - wandb.wandb_agent - INFO - Running runs: ['7oeiazwm']\n",
       "\n",
-      "2020-10-14 18:54:21,879\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=28512, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 3.67179487e-01,\n",
-      "       1.31313131e-01, 1.84615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.87692308e-01, 2.42424242e-01,\n",
-      "       1.16923077e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.66666667e-01, 8.18461538e-01, 1.71717172e-01, 1.84615385e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.56565657e-01, 6.66666667e-01,\n",
-      "       6.98461538e-01, 1.01010101e-02, 9.23076923e-04, 0.00000000e+00,\n",
-      "       1.00000000e+00, 0.00000000e+00, 6.66666667e-01, 4.84102564e-01,\n",
-      "       4.44444444e-01, 1.74358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.17171717e-01, 6.66666667e-01, 2.94358974e-01, 0.00000000e+00,\n",
-      "       1.02564103e-04, 0.00000000e+00, 0.00000000e+00, 4.04040404e-01,\n",
-      "       6.66666667e-01, 5.13846154e-01, 7.77777778e-01, 1.57948718e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.00000000e-01,\n",
-      "       1.30256410e-01, 5.35353535e-01, 7.20000000e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       4.54545455e-01, 1.09333333e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.25641026e-01, 5.45454545e-01,\n",
-      "       8.20512821e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.42051282e-01, 1.61616162e-01, 1.25128205e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.11794872e-01, 4.04040404e-02, 1.16923077e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.99487179e-01,\n",
-      "       6.56565657e-01, 8.61538462e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 5.33333333e-01, 3.83589744e-01, 2.22222222e-01,\n",
-      "       5.33333333e-04, 0.00000000e+00, 0.00000000e+00, 2.32323232e-01,\n",
-      "       6.00000000e-01, 4.54358974e-01, 3.13131313e-01, 7.58974359e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.66153846e-01, 7.87878788e-01, 5.29230769e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.55384615e-01,\n",
-      "       0.00000000e+00, 2.66666667e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.08080808e-02, 8.00000000e-01, 6.92307692e-01, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.06666667e-01, 6.46464646e-01, 3.28205128e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       6.07179487e-01, 3.33333333e-01, 6.15384615e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 4.44102564e-01,\n",
-      "       9.09090909e-02, 1.57948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.08080808e-02, 6.66666667e-02, 8.00000000e-02, 7.07070707e-01,\n",
-      "       8.82051282e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.00512821e-01, 4.14141414e-01, 6.76923077e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       3.95897436e-01, 1.51515152e-01, 8.41025641e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 6.40000000e-01,\n",
-      "       7.17171717e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.05050505e-02, 6.66666667e-01, 6.82051282e-01, 5.05050505e-02,\n",
-      "       2.25641026e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.04615385e-01, 3.03030303e-02, 9.84615385e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.41538462e-01, 9.79797980e-01, 5.68205128e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.33333333e-01, 2.86153846e-01,\n",
-      "       2.72727273e-01, 9.23076923e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       1.39487179e-03, 0.00000000e+00, 0.00000000e+00, 5.35353535e-01,\n",
-      "       8.66666667e-01, 5.94871795e-01, 5.45454545e-01, 3.63076923e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.68205128e-01, 6.66666667e-01, 3.69230769e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.66666667e-01, 2.67692308e-01,\n",
-      "       7.47474747e-01, 5.21025641e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 3.65128205e-01, 1.51515152e-01,\n",
-      "       7.69230769e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 4.74871795e-01, 1.21212121e-01, 2.95384615e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       8.50256410e-01, 5.35353535e-01, 4.77948718e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.10256410e-01,\n",
-      "       5.45454545e-01, 6.35897436e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 6.31794872e-01, 7.07070707e-01,\n",
-      "       7.15897436e-03, 0.00000000e+00, 0.00000000e+00, 5.05050505e-01,\n",
-      "       6.00000000e-01, 6.04102564e-01, 4.04040404e-01, 1.09128205e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.03030303e-02, 7.33333333e-01,\n",
-      "       5.03589744e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.11111111e-01, 7.33333333e-01, 5.93846154e-01,\n",
-      "       5.55555556e-01, 2.15384615e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 4.54358974e-01, 4.94949495e-01,\n",
-      "       4.26666667e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.81538462e-01, 1.71717172e-01, 3.26153846e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       5.88717949e-01, 1.71717172e-01, 6.07179487e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.88717949e-01,\n",
-      "       2.92929293e-01, 5.76410256e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.84848485e-01, 4.66666667e-01, 3.88717949e-01, 6.36363636e-01,\n",
-      "       1.29230769e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 5.16923077e-01, 6.06060606e-02, 1.61230769e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.47692308e-01, 6.16161616e-01, 4.94358974e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.00000000e-01, 3.78461538e-01,\n",
-      "       2.52525253e-01, 8.82051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 5.33333333e-01, 2.82051282e-01, 6.06060606e-01,\n",
-      "       4.43076923e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False,  True, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True])})\n"
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34168\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_230919-7oeiazwm/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_230919-7oeiazwm/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2010.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604531960\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/7oeiazwm\u001b[0m\n",
+      "2020-11-04 23:19:23,596 - wandb.wandb_agent - INFO - Cleaning up finished run: 7oeiazwm\n",
+      "2020-11-04 23:19:23,944 - wandb.wandb_agent - INFO - Agent received command: exit\n",
+      "2020-11-04 23:19:23,944 - wandb.wandb_agent - INFO - Received exit command. Killing runs and quitting.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Terminating and syncing runs. Press ctrl-c to kill.\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent lh9x5rb9"
+    "!wandb agent wnc8ihq1"
    ]
   },
   {
diff --git a/JSS/__pycache__/default_config.cpython-38.pyc b/JSS/__pycache__/default_config.cpython-38.pyc
index 14e0018..8fbfc47 100644
Binary files a/JSS/__pycache__/default_config.cpython-38.pyc and b/JSS/__pycache__/default_config.cpython-38.pyc differ
diff --git a/JSS/default_config.py b/JSS/default_config.py
index 46f4d10..4729210 100644
--- a/JSS/default_config.py
+++ b/JSS/default_config.py
@@ -6,7 +6,7 @@ default_config = {
     'env': 'jss_env',
     'seed': 0,
     'framework': 'torch',
-    'log_level': 'INFO',
+    'log_level': 'WARN',
     'num_gpus': 1,
     'instance_path': '/JSS/JSS/env/instances/ta51',
     'num_envs_per_worker': 2,
diff --git a/JSS/env/__pycache__/JSS.cpython-38.pyc b/JSS/env/__pycache__/JSS.cpython-38.pyc
index b190093..143d813 100644
Binary files a/JSS/env/__pycache__/JSS.cpython-38.pyc and b/JSS/env/__pycache__/JSS.cpython-38.pyc differ
diff --git a/JSS/train.py b/JSS/train.py
index d4ac941..85598f6 100644
--- a/JSS/train.py
+++ b/JSS/train.py
@@ -50,7 +50,7 @@ def train_func():
     ray.init()
 
     stop = {
-        "time_total_s": 60 * 60,
+        "time_total_s": 10 * 60,
     }
 
     analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
diff --git a/JSS/wandb/debug-internal.log b/JSS/wandb/debug-internal.log
index f73d8af..25d6ab6 120000
--- a/JSS/wandb/debug-internal.log
+++ b/JSS/wandb/debug-internal.log
@@ -1 +1 @@
-run-20201014_204512-kkype8ue/logs/debug-internal.log
\ No newline at end of file
+run-20201105_101937-4jt98yn9/logs/debug-internal.log
\ No newline at end of file
diff --git a/JSS/wandb/debug.log b/JSS/wandb/debug.log
index db2ed2e..3a4d45c 120000
--- a/JSS/wandb/debug.log
+++ b/JSS/wandb/debug.log
@@ -1 +1 @@
-run-20201014_204512-kkype8ue/logs/debug.log
\ No newline at end of file
+run-20201105_101937-4jt98yn9/logs/debug.log
\ No newline at end of file
diff --git a/JSS/wandb/latest-run b/JSS/wandb/latest-run
index f19e5b0..3e6d10e 120000
--- a/JSS/wandb/latest-run
+++ b/JSS/wandb/latest-run
@@ -1 +1 @@
-run-20201014_204512-kkype8ue
\ No newline at end of file
+run-20201105_101937-4jt98yn9
\ No newline at end of file
diff --git a/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log b/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log
index 62aefa0..a469c27 100644
--- a/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log
+++ b/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log
@@ -3791,3 +3791,60 @@
 2020-10-14 20:48:22,755 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
 2020-10-14 20:48:24,674 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
 2020-10-14 20:48:29,293 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:33,903 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:37,761 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:37,761 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:48:37,761 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:37,765 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:37,962 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:38,519 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:43,143 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:47,759 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:52,385 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:52,968 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:52,968 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:48:52,968 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:52,975 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:53,184 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:57,005 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:01,622 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:06,249 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:08,189 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:08,190 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:08,190 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:08,195 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:08,392 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:10,874 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:15,492 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:20,107 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:23,398 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:23,398 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:23,398 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:23,403 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:23,595 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:24,725 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:29,333 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:33,953 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:38,566 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:38,601 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:38,601 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:38,601 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:38,605 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:38,802 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:43,182 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:47,813 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:52,436 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:53,808 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:53,809 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:53,809 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:53,813 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:54,014 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:57,041 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:50:01,665 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:50:06,273 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:50:09,020 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:50:09,020 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:50:09,020 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:50:09,024 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:50:09,226 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:50:10,902 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
diff --git a/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb b/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb
index fe32750..a173876 100644
Binary files a/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb and b/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb differ
diff --git a/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log b/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log
index 6c28b35..39056d1 100644
--- a/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log
+++ b/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log
@@ -3766,3 +3766,55 @@
 2020-10-14 20:48:28,206 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
 2020-10-14 20:48:28,210 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
 2020-10-14 20:48:28,411 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:32,759 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:37,379 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:41,998 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:43,417 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:43,417 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:48:43,418 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:43,425 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:43,622 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:46,618 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:51,237 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:55,878 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:58,628 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:58,629 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:48:58,629 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:58,634 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:58,828 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:00,486 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:05,100 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:09,717 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:13,834 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:13,834 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:13,835 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:13,839 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:14,032 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:14,334 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:18,948 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:23,561 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:28,192 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:29,038 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:29,038 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:29,039 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:29,043 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:29,241 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:32,806 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:37,429 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:42,040 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:44,247 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:44,247 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:44,247 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:44,252 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:44,453 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:46,669 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:51,288 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:55,904 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:59,459 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:59,459 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:59,460 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:59,464 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:59,667 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:50:00,513 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:50:05,125 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:50:09,744 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
diff --git a/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb b/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb
index 6b25ef1..0114685 100644
Binary files a/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb and b/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb differ
