2020-11-05 10:55:57,147	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_7c602_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=78267)[0m 2020-11-05 10:55:59,896	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=78309)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78309)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78309)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78195)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78195)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78195)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78195)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78195)[0m *** SIGSEGV (@0x0) received by PID 78195 (TID 0x7f1aed4dc700) from PID 0; stack trace: ***
[2m[36m(pid=78195)[0m     @     0x7f1aed0b5390 (unknown)
[2m[36m(pid=78195)[0m     @     0x7eebef2bffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78195)[0m     @     0x7eebec5b364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78195)[0m     @     0x7eebec5b6977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78195)[0m     @     0x7eebec5b6b53 at::TensorIterator::for_each()
[2m[36m(pid=78195)[0m     @     0x7eebec5b6e11 at::TensorIterator::for_each()
[2m[36m(pid=78195)[0m     @     0x7eebef2cfc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78195)[0m     @     0x7eebef2f2cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78246)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78246)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78246)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78246)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78246)[0m *** SIGSEGV (@0x0) received by PID 78246 (TID 0x7f6619471700) from PID 0; stack trace: ***
[2m[36m(pid=78268)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78268)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78268)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78268)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78268)[0m *** SIGSEGV (@0x0) received by PID 78268 (TID 0x7f68cb1c2700) from PID 0; stack trace: ***
[2m[36m(pid=78181)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78181)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78181)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78181)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78181)[0m *** SIGSEGV (@0x0) received by PID 78181 (TID 0x7efe3d826700) from PID 0; stack trace: ***
[2m[36m(pid=78301)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78301)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78301)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78301)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78301)[0m *** SIGSEGV (@0x0) received by PID 78301 (TID 0x7f00b7f60700) from PID 0; stack trace: ***
[2m[36m(pid=78301)[0m     @     0x7f00b7b39390 (unknown)
[2m[36m(pid=78301)[0m     @     0x7ed1b9d3ffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78301)[0m     @     0x7ed1b703364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78301)[0m     @     0x7ed1b7036977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78301)[0m     @     0x7ed1b7036b53 at::TensorIterator::for_each()
[2m[36m(pid=78301)[0m     @     0x7ed1b7036e11 at::TensorIterator::for_each()
[2m[36m(pid=78301)[0m     @     0x7ed1b9d4fc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78301)[0m     @     0x7ed1b9d72cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78202)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78202)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78202)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78202)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78202)[0m *** SIGSEGV (@0x0) received by PID 78202 (TID 0x7f7515dbd700) from PID 0; stack trace: ***
[2m[36m(pid=78202)[0m     @     0x7f7515996390 (unknown)
[2m[36m(pid=78202)[0m     @     0x7f4617a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78202)[0m     @     0x7f4614d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78245)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78245)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78245)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78245)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78245)[0m *** SIGSEGV (@0x0) received by PID 78245 (TID 0x7f3a007b5700) from PID 0; stack trace: ***
[2m[36m(pid=78198)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78198)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78198)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78198)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78198)[0m *** SIGSEGV (@0x0) received by PID 78198 (TID 0x7fa0bb369700) from PID 0; stack trace: ***
[2m[36m(pid=78198)[0m     @     0x7fa0baf42390 (unknown)
[2m[36m(pid=78285)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78285)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78285)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78273)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78273)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78273)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78273)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78273)[0m *** SIGSEGV (@0x0) received by PID 78273 (TID 0x7f97cfd47700) from PID 0; stack trace: ***
[2m[36m(pid=78273)[0m     @     0x7f97cf920390 (unknown)
[2m[36m(pid=78179)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78179)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78179)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78179)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78179)[0m *** SIGSEGV (@0x0) received by PID 78179 (TID 0x7fee02e5c700) from PID 0; stack trace: ***
[2m[36m(pid=78179)[0m     @     0x7fee02a35390 (unknown)
[2m[36m(pid=78179)[0m     @     0x7fbf04a32fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78179)[0m     @     0x7fbf01d2664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78179)[0m     @     0x7fbf01d29977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78179)[0m     @     0x7fbf01d29b53 at::TensorIterator::for_each()
[2m[36m(pid=78179)[0m     @     0x7fbf01d29e11 at::TensorIterator::for_each()
[2m[36m(pid=78316)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78316)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78316)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78316)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78316)[0m *** SIGSEGV (@0x0) received by PID 78316 (TID 0x7fbcac2a9700) from PID 0; stack trace: ***
[2m[36m(pid=78316)[0m     @     0x7fbcabe82390 (unknown)
[2m[36m(pid=78316)[0m     @     0x7f8dade6efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78316)[0m     @     0x7f8dab16264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78316)[0m     @     0x7f8dab165977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78316)[0m     @     0x7f8dab165b53 at::TensorIterator::for_each()
[2m[36m(pid=78316)[0m     @     0x7f8dab165e11 at::TensorIterator::for_each()
[2m[36m(pid=78316)[0m     @     0x7f8dade7ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78316)[0m     @     0x7f8dadea1cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78294)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78294)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78294)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78294)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78294)[0m *** SIGSEGV (@0x0) received by PID 78294 (TID 0x7f8a0763d700) from PID 0; stack trace: ***
[2m[36m(pid=78294)[0m     @     0x7f8a07216390 (unknown)
[2m[36m(pid=78294)[0m     @     0x7f5b0939bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78294)[0m     @     0x7f5b0668f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78294)[0m     @     0x7f5b06692977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78294)[0m     @     0x7f5b06692b53 at::TensorIterator::for_each()
[2m[36m(pid=78294)[0m     @     0x7f5b06692e11 at::TensorIterator::for_each()
[2m[36m(pid=78294)[0m     @     0x7f5b093abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78294)[0m     @     0x7f5b093cecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78294)[0m     @     0x7f5b0640c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78294)[0m     @     0x7f5b0640ac3f at::native::copy_impl()
[2m[36m(pid=78266)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78266)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78266)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78266)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78266)[0m *** SIGSEGV (@0x0) received by PID 78266 (TID 0x7fed20f1f700) from PID 0; stack trace: ***
[2m[36m(pid=78266)[0m     @     0x7fed20af8390 (unknown)
[2m[36m(pid=78266)[0m     @     0x7fbe22c5ffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78266)[0m     @     0x7fbe1ff5364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78266)[0m     @     0x7fbe1ff56977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78266)[0m     @     0x7fbe1ff56b53 at::TensorIterator::for_each()
[2m[36m(pid=78266)[0m     @     0x7fbe1ff56e11 at::TensorIterator::for_each()
[2m[36m(pid=78266)[0m     @     0x7fbe22c6fc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78266)[0m     @     0x7fbe22c92cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78266)[0m     @     0x7fbe1fcd0009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78266)[0m     @     0x7fbe1fccec3f at::native::copy_impl()
[2m[36m(pid=78318)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78318)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78318)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78318)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78318)[0m *** SIGSEGV (@0x0) received by PID 78318 (TID 0x7f7bb22a6700) from PID 0; stack trace: ***
[2m[36m(pid=78318)[0m     @     0x7f7bb1e7f390 (unknown)
[2m[36m(pid=78318)[0m     @     0x7f4cb408efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78318)[0m     @     0x7f4cb138264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78318)[0m     @     0x7f4cb1385977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78318)[0m     @     0x7f4cb1385b53 at::TensorIterator::for_each()
[2m[36m(pid=78318)[0m     @     0x7f4cb1385e11 at::TensorIterator::for_each()
[2m[36m(pid=78318)[0m     @     0x7f4cb409ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78302)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78302)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78302)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78302)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78302)[0m *** SIGSEGV (@0x0) received by PID 78302 (TID 0x7f194b53e700) from PID 0; stack trace: ***
[2m[36m(pid=78302)[0m     @     0x7f194b117390 (unknown)
[2m[36m(pid=78302)[0m     @     0x7eea4d32efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78302)[0m     @     0x7eea4a62264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78302)[0m     @     0x7eea4a625977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78302)[0m     @     0x7eea4a625b53 at::TensorIterator::for_each()
[2m[36m(pid=78302)[0m     @     0x7eea4a625e11 at::TensorIterator::for_each()
[2m[36m(pid=78302)[0m     @     0x7eea4d33ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78302)[0m     @     0x7eea4d361cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78302)[0m     @     0x7eea4a39f009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78302)[0m     @     0x7eea4a39dc3f at::native::copy_impl()
[2m[36m(pid=78306)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78306)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78306)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78306)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78306)[0m *** SIGSEGV (@0x0) received by PID 78306 (TID 0x7f5948226700) from PID 0; stack trace: ***
[2m[36m(pid=78306)[0m     @     0x7f5947dff390 (unknown)
[2m[36m(pid=78306)[0m     @     0x7f2a4a01dfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78306)[0m     @     0x7f2a4731164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78306)[0m     @     0x7f2a47314977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78306)[0m     @     0x7f2a47314b53 at::TensorIterator::for_each()
[2m[36m(pid=78306)[0m     @     0x7f2a47314e11 at::TensorIterator::for_each()
[2m[36m(pid=78306)[0m     @     0x7f2a4a02dc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78306)[0m     @     0x7f2a4a050cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78306)[0m     @     0x7f2a4708e009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78306)[0m     @     0x7f2a4708cc3f at::native::copy_impl()
[2m[36m(pid=78295)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78295)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78295)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78295)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78295)[0m *** SIGSEGV (@0x0) received by PID 78295 (TID 0x7f20b9b5b700) from PID 0; stack trace: ***
[2m[36m(pid=78295)[0m     @     0x7f20b9734390 (unknown)
[2m[36m(pid=78295)[0m     @     0x7ef1bb92bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78295)[0m     @     0x7ef1b8c1f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78295)[0m     @     0x7ef1b8c22977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78295)[0m     @     0x7ef1b8c22b53 at::TensorIterator::for_each()
[2m[36m(pid=78295)[0m     @     0x7ef1b8c22e11 at::TensorIterator::for_each()
[2m[36m(pid=78295)[0m     @     0x7ef1bb93bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78309)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78309)[0m *** SIGSEGV (@0x0) received by PID 78309 (TID 0x7ff517d10700) from PID 0; stack trace: ***
[2m[36m(pid=78309)[0m     @     0x7ff5178e9390 (unknown)
[2m[36m(pid=78309)[0m     @     0x7fc6199c8fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78309)[0m     @     0x7fc616cbc64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78309)[0m     @     0x7fc616cbf977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78309)[0m     @     0x7fc616cbfb53 at::TensorIterator::for_each()
[2m[36m(pid=78309)[0m     @     0x7fc616cbfe11 at::TensorIterator::for_each()
[2m[36m(pid=78309)[0m     @     0x7fc6199d8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78309)[0m     @     0x7fc6199fbcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78309)[0m     @     0x7fc616a39009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78309)[0m     @     0x7fc616a37c3f at::native::copy_impl()
[2m[36m(pid=78309)[0m     @     0x7fc616a38ed4 at::native::copy_()
[2m[36m(pid=78288)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78288)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78288)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78288)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78288)[0m *** SIGSEGV (@0x0) received by PID 78288 (TID 0x7fd6f014f700) from PID 0; stack trace: ***
[2m[36m(pid=78288)[0m     @     0x7fd6efd28390 (unknown)
[2m[36m(pid=78288)[0m     @     0x7fa7f1e6efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78288)[0m     @     0x7fa7ef16264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78288)[0m     @     0x7fa7ef165977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78288)[0m     @     0x7fa7ef165b53 at::TensorIterator::for_each()
[2m[36m(pid=78288)[0m     @     0x7fa7ef165e11 at::TensorIterator::for_each()
[2m[36m(pid=78288)[0m     @     0x7fa7f1e7ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78270)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78270)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78270)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78270)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78270)[0m *** SIGSEGV (@0x0) received by PID 78270 (TID 0x7fe1beadf700) from PID 0; stack trace: ***
[2m[36m(pid=78270)[0m     @     0x7fe1be6b8390 (unknown)
[2m[36m(pid=78270)[0m     @     0x7fb2c081bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78270)[0m     @     0x7fb2bdb0f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78270)[0m     @     0x7fb2bdb12977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78270)[0m     @     0x7fb2bdb12b53 at::TensorIterator::for_each()
[2m[36m(pid=78270)[0m     @     0x7fb2bdb12e11 at::TensorIterator::for_each()
[2m[36m(pid=78270)[0m     @     0x7fb2c082bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78270)[0m     @     0x7fb2c084ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78270)[0m     @     0x7fb2bd88c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78270)[0m     @     0x7fb2bd88ac3f at::native::copy_impl()
[2m[36m(pid=78275)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78275)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78275)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78275)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78275)[0m *** SIGSEGV (@0x0) received by PID 78275 (TID 0x7fbe7765a700) from PID 0; stack trace: ***
[2m[36m(pid=78275)[0m     @     0x7fbe77233390 (unknown)
[2m[36m(pid=78275)[0m     @     0x7f8f7939bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78275)[0m     @     0x7f8f7668f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78275)[0m     @     0x7f8f76692977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78275)[0m     @     0x7f8f76692b53 at::TensorIterator::for_each()
[2m[36m(pid=78275)[0m     @     0x7f8f76692e11 at::TensorIterator::for_each()
[2m[36m(pid=78275)[0m     @     0x7f8f793abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78275)[0m     @     0x7f8f793cecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78275)[0m     @     0x7f8f7640c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78275)[0m     @     0x7f8f7640ac3f at::native::copy_impl()
[2m[36m(pid=78209)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78209)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78209)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78209)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78209)[0m *** SIGSEGV (@0x0) received by PID 78209 (TID 0x7f51127b5700) from PID 0; stack trace: ***
[2m[36m(pid=78209)[0m     @     0x7f511238e390 (unknown)
[2m[36m(pid=78209)[0m     @     0x7f22145c2fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78186)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78186)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78186)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78186)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78186)[0m *** SIGSEGV (@0x0) received by PID 78186 (TID 0x7fb1add32700) from PID 0; stack trace: ***
[2m[36m(pid=78186)[0m     @     0x7fb1ad90b390 (unknown)
[2m[36m(pid=78186)[0m     @     0x7f82afa70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78186)[0m     @     0x7f82acd6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78186)[0m     @     0x7f82acd67977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78186)[0m     @     0x7f82acd67b53 at::TensorIterator::for_each()
[2m[36m(pid=78186)[0m     @     0x7f82acd67e11 at::TensorIterator::for_each()
[2m[36m(pid=78186)[0m     @     0x7f82afa80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78186)[0m     @     0x7f82afaa3cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78186)[0m     @     0x7f82acae1009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78186)[0m     @     0x7f82acadfc3f at::native::copy_impl()
[2m[36m(pid=78186)[0m     @     0x7f82acae0ed4 at::native::copy_()
[2m[36m(pid=78194)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78194)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78194)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78194)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78194)[0m *** SIGSEGV (@0x0) received by PID 78194 (TID 0x7f4978897700) from PID 0; stack trace: ***
[2m[36m(pid=78194)[0m     @     0x7f4978470390 (unknown)
[2m[36m(pid=78194)[0m     @     0x7f1a7a5aafb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78194)[0m     @     0x7f1a7789e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78194)[0m     @     0x7f1a778a1977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78194)[0m     @     0x7f1a778a1b53 at::TensorIterator::for_each()
[2m[36m(pid=78194)[0m     @     0x7f1a778a1e11 at::TensorIterator::for_each()
[2m[36m(pid=78265)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78265)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78265)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78265)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78265)[0m *** SIGSEGV (@0x0) received by PID 78265 (TID 0x7f924cd8b700) from PID 0; stack trace: ***
[2m[36m(pid=78265)[0m     @     0x7f924c964390 (unknown)
[2m[36m(pid=78265)[0m     @     0x7f634e9f3fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78265)[0m     @     0x7f634bce764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78265)[0m     @     0x7f634bcea977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78265)[0m     @     0x7f634bceab53 at::TensorIterator::for_each()
[2m[36m(pid=78265)[0m     @     0x7f634bceae11 at::TensorIterator::for_each()
[2m[36m(pid=78265)[0m     @     0x7f634ea03c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78265)[0m     @     0x7f634ea26cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78265)[0m     @     0x7f634ba64009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78265)[0m     @     0x7f634ba62c3f at::native::copy_impl()
[2m[36m(pid=78265)[0m     @     0x7f634ba63ed4 at::native::copy_()
[2m[36m(pid=78236)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78236)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78236)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78236)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78236)[0m *** SIGSEGV (@0x0) received by PID 78236 (TID 0x7fe1ffd1d700) from PID 0; stack trace: ***
[2m[36m(pid=78236)[0m     @     0x7fe1ff8f6390 (unknown)
[2m[36m(pid=78236)[0m     @     0x7fb301b15fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78236)[0m     @     0x7fb2fee0964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78236)[0m     @     0x7fb2fee0c977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78236)[0m     @     0x7fb2fee0cb53 at::TensorIterator::for_each()
[2m[36m(pid=78236)[0m     @     0x7fb2fee0ce11 at::TensorIterator::for_each()
[2m[36m(pid=78236)[0m     @     0x7fb301b25c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78236)[0m     @     0x7fb301b48cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78236)[0m     @     0x7fb2feb86009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78236)[0m     @     0x7fb2feb84c3f at::native::copy_impl()
[2m[36m(pid=78236)[0m     @     0x7fb2feb85ed4 at::native::copy_()
[2m[36m(pid=78278)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78278)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78278)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78278)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78278)[0m *** SIGSEGV (@0x0) received by PID 78278 (TID 0x7fea011ff700) from PID 0; stack trace: ***
[2m[36m(pid=78278)[0m     @     0x7fea00dd8390 (unknown)
[2m[36m(pid=78278)[0m     @     0x7fbb02e96fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78278)[0m     @     0x7fbb0018a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78278)[0m     @     0x7fbb0018d977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78278)[0m     @     0x7fbb0018db53 at::TensorIterator::for_each()
[2m[36m(pid=78278)[0m     @     0x7fbb0018de11 at::TensorIterator::for_each()
[2m[36m(pid=78278)[0m     @     0x7fbb02ea6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78278)[0m     @     0x7fbb02ec9cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78278)[0m     @     0x7fbafff07009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78278)[0m     @     0x7fbafff05c3f at::native::copy_impl()
[2m[36m(pid=78278)[0m     @     0x7fbafff06ed4 at::native::copy_()
[2m[36m(pid=78193)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78193)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78193)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78193)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78193)[0m *** SIGSEGV (@0x0) received by PID 78193 (TID 0x7f80d5cb3700) from PID 0; stack trace: ***
[2m[36m(pid=78193)[0m     @     0x7f80d588c390 (unknown)
[2m[36m(pid=78193)[0m     @     0x7f51d7a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78193)[0m     @     0x7f51d4d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78193)[0m     @     0x7f51d4d67977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78193)[0m     @     0x7f51d4d67b53 at::TensorIterator::for_each()
[2m[36m(pid=78193)[0m     @     0x7f51d4d67e11 at::TensorIterator::for_each()
[2m[36m(pid=78193)[0m     @     0x7f51d7a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78193)[0m     @     0x7f51d7aa3cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78193)[0m     @     0x7f51d4ae1009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78260)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78260)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78260)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78260)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78260)[0m *** SIGSEGV (@0x0) received by PID 78260 (TID 0x7fcd93fd8700) from PID 0; stack trace: ***
[2m[36m(pid=78260)[0m     @     0x7fcd93bb1390 (unknown)
[2m[36m(pid=78260)[0m     @     0x7f9e95d6cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78260)[0m     @     0x7f9e9306064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78260)[0m     @     0x7f9e93063977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78260)[0m     @     0x7f9e93063b53 at::TensorIterator::for_each()
[2m[36m(pid=78260)[0m     @     0x7f9e93063e11 at::TensorIterator::for_each()
[2m[36m(pid=78260)[0m     @     0x7f9e95d7cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78260)[0m     @     0x7f9e95d9fcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78260)[0m     @     0x7f9e92ddd009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78260)[0m     @     0x7f9e92ddbc3f at::native::copy_impl()
[2m[36m(pid=78320)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78320)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78320)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78320)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78320)[0m *** SIGSEGV (@0x0) received by PID 78320 (TID 0x7f703997e700) from PID 0; stack trace: ***
[2m[36m(pid=78320)[0m     @     0x7f7039557390 (unknown)
[2m[36m(pid=78320)[0m     @     0x7f413b75afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78320)[0m     @     0x7f4138a4e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78320)[0m     @     0x7f4138a51977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78320)[0m     @     0x7f4138a51b53 at::TensorIterator::for_each()
[2m[36m(pid=78320)[0m     @     0x7f4138a51e11 at::TensorIterator::for_each()
[2m[36m(pid=78320)[0m     @     0x7f413b76ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78320)[0m     @     0x7f413b78dcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78200)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78200)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78200)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78200)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78200)[0m *** SIGSEGV (@0x0) received by PID 78200 (TID 0x7ff706c48700) from PID 0; stack trace: ***
[2m[36m(pid=78200)[0m     @     0x7ff706821390 (unknown)
[2m[36m(pid=78200)[0m     @     0x7fc808a32fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78200)[0m     @     0x7fc805d2664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78200)[0m     @     0x7fc805d29977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78200)[0m     @     0x7fc805d29b53 at::TensorIterator::for_each()
[2m[36m(pid=78200)[0m     @     0x7fc805d29e11 at::TensorIterator::for_each()
[2m[36m(pid=78200)[0m     @     0x7fc808a42c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78253)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78253)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78253)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78253)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78253)[0m *** SIGSEGV (@0x0) received by PID 78253 (TID 0x7f1fe9baa700) from PID 0; stack trace: ***
[2m[36m(pid=78253)[0m     @     0x7f1fe9783390 (unknown)
[2m[36m(pid=78253)[0m     @     0x7ef0eb96bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78253)[0m     @     0x7ef0e8c5f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78253)[0m     @     0x7ef0e8c62977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78253)[0m     @     0x7ef0e8c62b53 at::TensorIterator::for_each()
[2m[36m(pid=78253)[0m     @     0x7ef0e8c62e11 at::TensorIterator::for_each()
[2m[36m(pid=78253)[0m     @     0x7ef0eb97bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78253)[0m     @     0x7ef0eb99ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78253)[0m     @     0x7ef0e89dc009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78253)[0m     @     0x7ef0e89dac3f at::native::copy_impl()
[2m[36m(pid=78253)[0m     @     0x7ef0e89dbed4 at::native::copy_()
[2m[36m(pid=78187)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78187)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78187)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78187)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78187)[0m *** SIGSEGV (@0x0) received by PID 78187 (TID 0x7f112a03b700) from PID 0; stack trace: ***
[2m[36m(pid=78187)[0m     @     0x7f1129c14390 (unknown)
[2m[36m(pid=78187)[0m     @     0x7ee22bd90fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78187)[0m     @     0x7ee22908464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78187)[0m     @     0x7ee229087977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78187)[0m     @     0x7ee229087b53 at::TensorIterator::for_each()
[2m[36m(pid=78187)[0m     @     0x7ee229087e11 at::TensorIterator::for_each()
[2m[36m(pid=78187)[0m     @     0x7ee22bda0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78187)[0m     @     0x7ee22bdc3cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78187)[0m     @     0x7ee228e01009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78237)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78237)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78237)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78237)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78237)[0m *** SIGSEGV (@0x0) received by PID 78237 (TID 0x7f254a377700) from PID 0; stack trace: ***
[2m[36m(pid=78237)[0m     @     0x7f2549f50390 (unknown)
[2m[36m(pid=78237)[0m     @     0x7ef64c09bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78237)[0m     @     0x7ef64938f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78237)[0m     @     0x7ef649392977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78237)[0m     @     0x7ef649392b53 at::TensorIterator::for_each()
[2m[36m(pid=78237)[0m     @     0x7ef649392e11 at::TensorIterator::for_each()
[2m[36m(pid=78237)[0m     @     0x7ef64c0abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78197)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78197)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78197)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78197)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78197)[0m *** SIGSEGV (@0x0) received by PID 78197 (TID 0x7f880f457700) from PID 0; stack trace: ***
[2m[36m(pid=78197)[0m     @     0x7f880f030390 (unknown)
[2m[36m(pid=78197)[0m     @     0x7f591118afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78197)[0m     @     0x7f590e47e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78197)[0m     @     0x7f590e481977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78197)[0m     @     0x7f590e481b53 at::TensorIterator::for_each()
[2m[36m(pid=78197)[0m     @     0x7f590e481e11 at::TensorIterator::for_each()
[2m[36m(pid=78197)[0m     @     0x7f591119ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78197)[0m     @     0x7f59111bdcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78252)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78252)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78252)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78252)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78252)[0m *** SIGSEGV (@0x0) received by PID 78252 (TID 0x7f9cecbe0700) from PID 0; stack trace: ***
[2m[36m(pid=78252)[0m     @     0x7f9cec7b9390 (unknown)
[2m[36m(pid=78252)[0m     @     0x7f6dee9c3fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78252)[0m     @     0x7f6debcb764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78252)[0m     @     0x7f6debcba977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78252)[0m     @     0x7f6debcbab53 at::TensorIterator::for_each()
[2m[36m(pid=78252)[0m     @     0x7f6debcbae11 at::TensorIterator::for_each()
[2m[36m(pid=78252)[0m     @     0x7f6dee9d3c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78252)[0m     @     0x7f6dee9f6cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78184)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78184)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78184)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78184)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78184)[0m *** SIGSEGV (@0x0) received by PID 78184 (TID 0x7fb68aeef700) from PID 0; stack trace: ***
[2m[36m(pid=78184)[0m     @     0x7fb68aac8390 (unknown)
[2m[36m(pid=78263)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78263)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78263)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78263)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78263)[0m *** SIGSEGV (@0x0) received by PID 78263 (TID 0x7f39a8730700) from PID 0; stack trace: ***
[2m[36m(pid=78263)[0m     @     0x7f39a8309390 (unknown)
[2m[36m(pid=78263)[0m     @     0x7f0aaa1a6fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78263)[0m     @     0x7f0aa749a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78263)[0m     @     0x7f0aa749d977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78263)[0m     @     0x7f0aa749db53 at::TensorIterator::for_each()
[2m[36m(pid=78263)[0m     @     0x7f0aa749de11 at::TensorIterator::for_each()
[2m[36m(pid=78263)[0m     @     0x7f0aaa1b6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78263)[0m     @     0x7f0aaa1d9cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78263)[0m     @     0x7f0aa7217009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78263)[0m     @     0x7f0aa7215c3f at::native::copy_impl()
[2m[36m(pid=78263)[0m     @     0x7f0aa7216ed4 at::native::copy_()
[2m[36m(pid=78282)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78282)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78282)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78282)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78282)[0m *** SIGSEGV (@0x0) received by PID 78282 (TID 0x7f98ca062700) from PID 0; stack trace: ***
[2m[36m(pid=78282)[0m     @     0x7f98c9c3b390 (unknown)
[2m[36m(pid=78282)[0m     @     0x7f69cbe63fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78282)[0m     @     0x7f69c915764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78282)[0m     @     0x7f69c915a977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78282)[0m     @     0x7f69c915ab53 at::TensorIterator::for_each()
[2m[36m(pid=78282)[0m     @     0x7f69c915ae11 at::TensorIterator::for_each()
[2m[36m(pid=78282)[0m     @     0x7f69cbe73c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78282)[0m     @     0x7f69cbe96cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78282)[0m     @     0x7f69c8ed4009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78282)[0m     @     0x7f69c8ed2c3f at::native::copy_impl()
[2m[36m(pid=78243)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78243)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78243)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78243)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78243)[0m *** SIGSEGV (@0x0) received by PID 78243 (TID 0x7f7642a96700) from PID 0; stack trace: ***
[2m[36m(pid=78243)[0m     @     0x7f764266f390 (unknown)
[2m[36m(pid=78243)[0m     @     0x7f4744770fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78243)[0m     @     0x7f4741a6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78243)[0m     @     0x7f4741a67977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78243)[0m     @     0x7f4741a67b53 at::TensorIterator::for_each()
[2m[36m(pid=78243)[0m     @     0x7f4741a67e11 at::TensorIterator::for_each()
[2m[36m(pid=78243)[0m     @     0x7f4744780c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78243)[0m     @     0x7f47447a3cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78243)[0m     @     0x7f47417e1009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78243)[0m     @     0x7f47417dfc3f at::native::copy_impl()
[2m[36m(pid=78274)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78274)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78274)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78274)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78274)[0m *** SIGSEGV (@0x0) received by PID 78274 (TID 0x7f4750c7a700) from PID 0; stack trace: ***
[2m[36m(pid=78274)[0m     @     0x7f4750853390 (unknown)
[2m[36m(pid=78274)[0m     @     0x7f1852885fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78274)[0m     @     0x7f184fb7964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78274)[0m     @     0x7f184fb7c977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78274)[0m     @     0x7f184fb7cb53 at::TensorIterator::for_each()
[2m[36m(pid=78274)[0m     @     0x7f184fb7ce11 at::TensorIterator::for_each()
[2m[36m(pid=78274)[0m     @     0x7f1852895c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78257)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78257)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78257)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78257)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78257)[0m *** SIGSEGV (@0x0) received by PID 78257 (TID 0x7fc24c6d1700) from PID 0; stack trace: ***
[2m[36m(pid=78257)[0m     @     0x7fc24c2aa390 (unknown)
[2m[36m(pid=78257)[0m     @     0x7f934e4c7fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78257)[0m     @     0x7f934b7bb64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78257)[0m     @     0x7f934b7be977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78257)[0m     @     0x7f934b7beb53 at::TensorIterator::for_each()
[2m[36m(pid=78257)[0m     @     0x7f934b7bee11 at::TensorIterator::for_each()
[2m[36m(pid=78257)[0m     @     0x7f934e4d7c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78257)[0m     @     0x7f934e4facfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78257)[0m     @     0x7f934b538009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78257)[0m     @     0x7f934b536c3f at::native::copy_impl()
[2m[36m(pid=78247)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78247)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78247)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78247)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78247)[0m *** SIGSEGV (@0x0) received by PID 78247 (TID 0x7f8aae198700) from PID 0; stack trace: ***
[2m[36m(pid=78247)[0m     @     0x7f8aadd71390 (unknown)
[2m[36m(pid=78247)[0m     @     0x7f5baff89fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78247)[0m     @     0x7f5bad27d64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78247)[0m     @     0x7f5bad280977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78247)[0m     @     0x7f5bad280b53 at::TensorIterator::for_each()
[2m[36m(pid=78247)[0m     @     0x7f5bad280e11 at::TensorIterator::for_each()
[2m[36m(pid=78247)[0m     @     0x7f5baff99c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78247)[0m     @     0x7f5baffbccfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78240)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78240)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78240)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78240)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78240)[0m *** SIGSEGV (@0x0) received by PID 78240 (TID 0x7fb560d50700) from PID 0; stack trace: ***
[2m[36m(pid=78240)[0m     @     0x7fb560929390 (unknown)
[2m[36m(pid=78240)[0m     @     0x7f86629ebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78240)[0m     @     0x7f865fcdf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78240)[0m     @     0x7f865fce2977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78240)[0m     @     0x7f865fce2b53 at::TensorIterator::for_each()
[2m[36m(pid=78240)[0m     @     0x7f865fce2e11 at::TensorIterator::for_each()
[2m[36m(pid=78240)[0m     @     0x7f86629fbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78240)[0m     @     0x7f8662a1ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78272)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78272)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78272)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78272)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78272)[0m *** SIGSEGV (@0x0) received by PID 78272 (TID 0x7f4fad0ef700) from PID 0; stack trace: ***
[2m[36m(pid=78272)[0m     @     0x7f4faccc8390 (unknown)
[2m[36m(pid=78272)[0m     @     0x7f20aee96fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78272)[0m     @     0x7f20ac18a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78272)[0m     @     0x7f20ac18d977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78272)[0m     @     0x7f20ac18db53 at::TensorIterator::for_each()
[2m[36m(pid=78272)[0m     @     0x7f20ac18de11 at::TensorIterator::for_each()
[2m[36m(pid=78272)[0m     @     0x7f20aeea6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78272)[0m     @     0x7f20aeec9cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78210)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78210)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78210)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78210)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78210)[0m *** SIGSEGV (@0x0) received by PID 78210 (TID 0x7fc077ba7700) from PID 0; stack trace: ***
[2m[36m(pid=78210)[0m     @     0x7fc077780390 (unknown)
[2m[36m(pid=78210)[0m     @     0x7f9179896fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78210)[0m     @     0x7f9176b8a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78210)[0m     @     0x7f9176b8d977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78210)[0m     @     0x7f9176b8db53 at::TensorIterator::for_each()
[2m[36m(pid=78210)[0m     @     0x7f9176b8de11 at::TensorIterator::for_each()
[2m[36m(pid=78210)[0m     @     0x7f91798a6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78210)[0m     @     0x7f91798c9cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78210)[0m     @     0x7f9176907009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78210)[0m     @     0x7f9176905c3f at::native::copy_impl()
[2m[36m(pid=78206)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78206)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78206)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78206)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78206)[0m *** SIGSEGV (@0x0) received by PID 78206 (TID 0x7f08eb83a700) from PID 0; stack trace: ***
[2m[36m(pid=78206)[0m     @     0x7f08eb413390 (unknown)
[2m[36m(pid=78277)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78277)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78277)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78277)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78277)[0m *** SIGSEGV (@0x0) received by PID 78277 (TID 0x7fd343e9e700) from PID 0; stack trace: ***
[2m[36m(pid=78214)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78214)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78214)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78214)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78214)[0m *** SIGSEGV (@0x0) received by PID 78214 (TID 0x7f6ad7e91700) from PID 0; stack trace: ***
[2m[36m(pid=78214)[0m     @     0x7f6ad7a6a390 (unknown)
[2m[36m(pid=78182)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78182)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78182)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78182)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78182)[0m *** SIGSEGV (@0x0) received by PID 78182 (TID 0x7f35dc2b3700) from PID 0; stack trace: ***
[2m[36m(pid=78182)[0m     @     0x7f35dbe8c390 (unknown)
[2m[36m(pid=78182)[0m     @     0x7f06de082fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78182)[0m     @     0x7f06db37664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78259)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78259)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78259)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78188)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78188)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78188)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78188)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78188)[0m *** SIGSEGV (@0x0) received by PID 78188 (TID 0x7f486914d700) from PID 0; stack trace: ***
[2m[36m(pid=78188)[0m     @     0x7f4868d26390 (unknown)
[2m[36m(pid=78188)[0m     @     0x7f196abc9fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78262)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78262)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78262)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78262)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78262)[0m *** SIGSEGV (@0x0) received by PID 78262 (TID 0x7f2c4da1a700) from PID 0; stack trace: ***
[2m[36m(pid=78262)[0m     @     0x7f2c4d5f3390 (unknown)
[2m[36m(pid=78286)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78286)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78286)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78286)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78286)[0m *** SIGSEGV (@0x0) received by PID 78286 (TID 0x7f1a696ee700) from PID 0; stack trace: ***
[2m[36m(pid=78286)[0m     @     0x7f1a692c7390 (unknown)
[2m[36m(pid=78286)[0m     @     0x7eeb6b4c1fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78286)[0m     @     0x7eeb687b564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78250)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78250)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78250)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78250)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78250)[0m *** SIGSEGV (@0x0) received by PID 78250 (TID 0x7fb7f2607700) from PID 0; stack trace: ***
[2m[36m(pid=78250)[0m     @     0x7fb7f21e0390 (unknown)
[2m[36m(pid=78199)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78199)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78199)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78199)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78199)[0m *** SIGSEGV (@0x0) received by PID 78199 (TID 0x7fc59cc8e700) from PID 0; stack trace: ***
[2m[36m(pid=78199)[0m     @     0x7fc59c867390 (unknown)
[2m[36m(pid=78199)[0m     @     0x7f969e9ebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78199)[0m     @     0x7f969bcdf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78304)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78304)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78304)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78304)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78304)[0m *** SIGSEGV (@0x0) received by PID 78304 (TID 0x7fed61f9a700) from PID 0; stack trace: ***
[2m[36m(pid=78304)[0m     @     0x7fed61b73390 (unknown)
[2m[36m(pid=78304)[0m     @     0x7fbe63c81fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78304)[0m     @     0x7fbe60f7564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78304)[0m     @     0x7fbe60f78977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78304)[0m     @     0x7fbe60f78b53 at::TensorIterator::for_each()
[2m[36m(pid=78280)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78280)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78280)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78280)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78280)[0m *** SIGSEGV (@0x0) received by PID 78280 (TID 0x7f84bc1d4700) from PID 0; stack trace: ***
[2m[36m(pid=78280)[0m     @     0x7f84bbdad390 (unknown)
[2m[36m(pid=78280)[0m     @     0x7f55bdfb8fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78280)[0m     @     0x7f55bb2ac64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78280)[0m     @     0x7f55bb2af977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78280)[0m     @     0x7f55bb2afb53 at::TensorIterator::for_each()
[2m[36m(pid=78281)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78281)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78281)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78281)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78281)[0m *** SIGSEGV (@0x0) received by PID 78281 (TID 0x7fabb67ee700) from PID 0; stack trace: ***
[2m[36m(pid=78281)[0m     @     0x7fabb63c7390 (unknown)
[2m[36m(pid=78281)[0m     @     0x7f7cb85c2fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78180)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78180)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78180)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78180)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78180)[0m *** SIGSEGV (@0x0) received by PID 78180 (TID 0x7fe58d08f700) from PID 0; stack trace: ***
[2m[36m(pid=78180)[0m     @     0x7fe58cc68390 (unknown)
[2m[36m(pid=78180)[0m     @     0x7fb68ebc9fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78180)[0m     @     0x7fb68bebd64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78211)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78211)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78211)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78211)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78211)[0m *** SIGSEGV (@0x0) received by PID 78211 (TID 0x7fb60e3b5700) from PID 0; stack trace: ***
[2m[36m(pid=78211)[0m     @     0x7fb60df8e390 (unknown)
[2m[36m(pid=78204)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78204)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78204)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78204)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78204)[0m *** SIGSEGV (@0x0) received by PID 78204 (TID 0x7f255194a700) from PID 0; stack trace: ***
[2m[36m(pid=78204)[0m     @     0x7f2551523390 (unknown)
[2m[36m(pid=78204)[0m     @     0x7ef65375afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78204)[0m     @     0x7ef650a4e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78204)[0m     @     0x7ef650a51977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78204)[0m     @     0x7ef650a51b53 at::TensorIterator::for_each()
[2m[36m(pid=78218)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78218)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78218)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78218)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78218)[0m *** SIGSEGV (@0x0) received by PID 78218 (TID 0x7fb77b365700) from PID 0; stack trace: ***
[2m[36m(pid=78218)[0m     @     0x7fb77af3e390 (unknown)
[2m[36m(pid=78218)[0m     @     0x7f887d11dfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78218)[0m     @     0x7f887a41164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78218)[0m     @     0x7f887a414977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78218)[0m     @     0x7f887a414b53 at::TensorIterator::for_each()
[2m[36m(pid=78196)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78196)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78196)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78196)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78196)[0m *** SIGSEGV (@0x0) received by PID 78196 (TID 0x7fa96bdf2700) from PID 0; stack trace: ***
[2m[36m(pid=78196)[0m     @     0x7fa96b9cb390 (unknown)
[2m[36m(pid=78196)[0m     @     0x7f7a6db55fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78196)[0m     @     0x7f7a6ae4964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78196)[0m     @     0x7f7a6ae4c977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78196)[0m     @     0x7f7a6ae4cb53 at::TensorIterator::for_each()
[2m[36m(pid=78242)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78242)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78242)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78242)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78242)[0m *** SIGSEGV (@0x0) received by PID 78242 (TID 0x7f327f70c700) from PID 0; stack trace: ***
[2m[36m(pid=78242)[0m     @     0x7f327f2e5390 (unknown)
[2m[36m(pid=78242)[0m     @     0x7f03814a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78242)[0m     @     0x7f037e79464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78242)[0m     @     0x7f037e797977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78242)[0m     @     0x7f037e797b53 at::TensorIterator::for_each()
[2m[36m(pid=78185)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78185)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78185)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78185)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78185)[0m *** SIGSEGV (@0x0) received by PID 78185 (TID 0x7f4375194700) from PID 0; stack trace: ***
[2m[36m(pid=78185)[0m     @     0x7f4374d6d390 (unknown)
[2m[36m(pid=78185)[0m     @     0x7f1476eebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78185)[0m     @     0x7f14741df64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78185)[0m     @     0x7f14741e2977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78185)[0m     @     0x7f14741e2b53 at::TensorIterator::for_each()
[2m[36m(pid=78185)[0m     @     0x7f14741e2e11 at::TensorIterator::for_each()
[2m[36m(pid=78216)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78216)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78216)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78216)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78216)[0m *** SIGSEGV (@0x0) received by PID 78216 (TID 0x7fe2d8426700) from PID 0; stack trace: ***
[2m[36m(pid=78216)[0m     @     0x7fe2d7fff390 (unknown)
[2m[36m(pid=78216)[0m     @     0x7fb3da082fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78216)[0m     @     0x7fb3d737664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78216)[0m     @     0x7fb3d7379977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78189)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78189)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78189)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78189)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78189)[0m *** SIGSEGV (@0x0) received by PID 78189 (TID 0x7f6180bb8700) from PID 0; stack trace: ***
[2m[36m(pid=78189)[0m     @     0x7f6180791390 (unknown)
[2m[36m(pid=78189)[0m     @     0x7f3282885fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78189)[0m     @     0x7f327fb7964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78189)[0m     @     0x7f327fb7c977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78189)[0m     @     0x7f327fb7cb53 at::TensorIterator::for_each()
[2m[36m(pid=78322)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78322)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78322)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78322)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78322)[0m *** SIGSEGV (@0x0) received by PID 78322 (TID 0x7f250527e700) from PID 0; stack trace: ***
[2m[36m(pid=78322)[0m     @     0x7f2504e57390 (unknown)
[2m[36m(pid=78322)[0m     @     0x7ef607049fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78322)[0m     @     0x7ef60433d64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78322)[0m     @     0x7ef604340977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78322)[0m     @     0x7ef604340b53 at::TensorIterator::for_each()
[2m[36m(pid=78290)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78290)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78290)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78290)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78290)[0m *** SIGSEGV (@0x0) received by PID 78290 (TID 0x7f9487998700) from PID 0; stack trace: ***
[2m[36m(pid=78290)[0m     @     0x7f9487571390 (unknown)
[2m[36m(pid=78290)[0m     @     0x7f6589784fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78290)[0m     @     0x7f6586a7864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78290)[0m     @     0x7f6586a7b977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78290)[0m     @     0x7f6586a7bb53 at::TensorIterator::for_each()
[2m[36m(pid=78178)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78178)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78178)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78178)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78178)[0m *** SIGSEGV (@0x0) received by PID 78178 (TID 0x7fc38be5c700) from PID 0; stack trace: ***
[2m[36m(pid=78178)[0m     @     0x7fc38ba35390 (unknown)
[2m[36m(pid=78178)[0m     @     0x7f948d9c8fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78178)[0m     @     0x7f948acbc64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78178)[0m     @     0x7f948acbf977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78178)[0m     @     0x7f948acbfb53 at::TensorIterator::for_each()
[2m[36m(pid=78195)[0m     @     0x7eebec330009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78195)[0m     @     0x7eebec32ec3f at::native::copy_impl()
[2m[36m(pid=78195)[0m     @     0x7eebec32fed4 at::native::copy_()
[2m[36m(pid=78195)[0m     @     0x7eebeca725cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78195)[0m     @     0x7eebecb7a148 at::Tensor::copy_()
[2m[36m(pid=78246)[0m     @     0x7f661904a390 (unknown)
[2m[36m(pid=78246)[0m     @     0x7f371b11bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78246)[0m     @     0x7f371840f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78246)[0m     @     0x7f3718412977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78246)[0m     @     0x7f3718412b53 at::TensorIterator::for_each()
[2m[36m(pid=78268)[0m     @     0x7f68cad9b390 (unknown)
[2m[36m(pid=78268)[0m     @     0x7f39ccf73fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78268)[0m     @     0x7f39ca26764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78268)[0m     @     0x7f39ca26a977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78268)[0m     @     0x7f39ca26ab53 at::TensorIterator::for_each()
[2m[36m(pid=78256)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78256)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78256)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78256)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78256)[0m *** SIGSEGV (@0x0) received by PID 78256 (TID 0x7ff430848700) from PID 0; stack trace: ***
[2m[36m(pid=78256)[0m     @     0x7ff430421390 (unknown)
[2m[36m(pid=78256)[0m     @     0x7fc532555fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78256)[0m     @     0x7fc52f84964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78256)[0m     @     0x7fc52f84c977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78181)[0m     @     0x7efe3d3ff390 (unknown)
[2m[36m(pid=78181)[0m     @     0x7ecf3f623fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78181)[0m     @     0x7ecf3c91764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78181)[0m     @     0x7ecf3c91a977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78181)[0m     @     0x7ecf3c91ab53 at::TensorIterator::for_each()
[2m[36m(pid=78301)[0m     @     0x7ed1b6db0009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78301)[0m     @     0x7ed1b6daec3f at::native::copy_impl()
[2m[36m(pid=78301)[0m     @     0x7ed1b6dafed4 at::native::copy_()
[2m[36m(pid=78301)[0m     @     0x7ed1b74f25cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78202)[0m     @     0x7f4614d67977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78202)[0m     @     0x7f4614d67b53 at::TensorIterator::for_each()
[2m[36m(pid=78202)[0m     @     0x7f4614d67e11 at::TensorIterator::for_each()
[2m[36m(pid=78202)[0m     @     0x7f4617a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78202)[0m     @     0x7f4617aa3cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78202)[0m     @     0x7f4614ae1009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78202)[0m     @     0x7f4614adfc3f at::native::copy_impl()
[2m[36m(pid=78254)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78254)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78254)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78254)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78254)[0m *** SIGSEGV (@0x0) received by PID 78254 (TID 0x7f29f765c700) from PID 0; stack trace: ***
[2m[36m(pid=78254)[0m     @     0x7f29f7235390 (unknown)
[2m[36m(pid=78254)[0m     @     0x7efaf939bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78254)[0m     @     0x7efaf668f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78254)[0m     @     0x7efaf6692977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78190)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78190)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78190)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78190)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78190)[0m *** SIGSEGV (@0x0) received by PID 78190 (TID 0x7f1889235700) from PID 0; stack trace: ***
[2m[36m(pid=78190)[0m     @     0x7f1888e0e390 (unknown)
[2m[36m(pid=78190)[0m     @     0x7ee98b000fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78245)[0m     @     0x7f3a0038e390 (unknown)
[2m[36m(pid=78245)[0m     @     0x7f0b025adfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78245)[0m     @     0x7f0aff8a164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78245)[0m     @     0x7f0aff8a4977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78245)[0m     @     0x7f0aff8a4b53 at::TensorIterator::for_each()
[2m[36m(pid=78198)[0m     @     0x7f71bd14afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78198)[0m     @     0x7f71ba43e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78198)[0m     @     0x7f71ba441977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78198)[0m     @     0x7f71ba441b53 at::TensorIterator::for_each()
[2m[36m(pid=78198)[0m     @     0x7f71ba441e11 at::TensorIterator::for_each()
[2m[36m(pid=78255)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78255)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78255)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78255)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78255)[0m *** SIGSEGV (@0x0) received by PID 78255 (TID 0x7fc0cb4a3700) from PID 0; stack trace: ***
[2m[36m(pid=78255)[0m     @     0x7fc0cb07c390 (unknown)
[2m[36m(pid=78255)[0m     @     0x7f91cd2aefb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78255)[0m     @     0x7f91ca5a264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78255)[0m     @     0x7f91ca5a5977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78192)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78192)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78192)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78192)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78192)[0m *** SIGSEGV (@0x0) received by PID 78192 (TID 0x7fb1a51c2700) from PID 0; stack trace: ***
[2m[36m(pid=78192)[0m     @     0x7fb1a4d9b390 (unknown)
[2m[36m(pid=78192)[0m     @     0x7f82a6eebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78192)[0m     @     0x7f82a41df64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78192)[0m     @     0x7f82a41e2977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78285)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78285)[0m *** SIGSEGV (@0x0) received by PID 78285 (TID 0x7faf57869700) from PID 0; stack trace: ***
[2m[36m(pid=78285)[0m     @     0x7faf57442390 (unknown)
[2m[36m(pid=78285)[0m     @     0x7f80594a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78285)[0m     @     0x7f805679464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78285)[0m     @     0x7f8056797977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78285)[0m     @     0x7f8056797b53 at::TensorIterator::for_each()
[2m[36m(pid=78248)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78248)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78248)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78248)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78248)[0m *** SIGSEGV (@0x0) received by PID 78248 (TID 0x7f5854192700) from PID 0; stack trace: ***
[2m[36m(pid=78248)[0m     @     0x7f5853d6b390 (unknown)
[2m[36m(pid=78248)[0m     @     0x7f2955f70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78248)[0m     @     0x7f295326464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78248)[0m     @     0x7f2953267977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78248)[0m     @     0x7f2953267b53 at::TensorIterator::for_each()
[2m[36m(pid=78273)[0m     @     0x7f68d1b28fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78273)[0m     @     0x7f68cee1c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78273)[0m     @     0x7f68cee1f977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78273)[0m     @     0x7f68cee1fb53 at::TensorIterator::for_each()
[2m[36m(pid=78273)[0m     @     0x7f68cee1fe11 at::TensorIterator::for_each()
[2m[36m(pid=78273)[0m     @     0x7f68d1b38c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78273)[0m     @     0x7f68d1b5bcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78179)[0m     @     0x7fbf04a42c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78179)[0m     @     0x7fbf04a65cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78179)[0m     @     0x7fbf01aa3009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78179)[0m     @     0x7fbf01aa1c3f at::native::copy_impl()
[2m[36m(pid=78179)[0m     @     0x7fbf01aa2ed4 at::native::copy_()
[2m[36m(pid=78179)[0m     @     0x7fbf021e55cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78316)[0m     @     0x7f8daaedf009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78316)[0m     @     0x7f8daaeddc3f at::native::copy_impl()
[2m[36m(pid=78316)[0m     @     0x7f8daaedeed4 at::native::copy_()
[2m[36m(pid=78316)[0m     @     0x7f8dab6215cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78316)[0m     @     0x7f8dab729148 at::Tensor::copy_()
[2m[36m(pid=78294)[0m     @     0x7f5b0640bed4 at::native::copy_()
[2m[36m(pid=78294)[0m     @     0x7f5b06b4e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78294)[0m     @     0x7f5b06c56148 at::Tensor::copy_()
[2m[36m(pid=78294)[0m     @     0x7f5b0884d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78294)[0m     @     0x7f5b06b4e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78266)[0m     @     0x7fbe1fccfed4 at::native::copy_()
[2m[36m(pid=78266)[0m     @     0x7fbe204125cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78266)[0m     @     0x7fbe2051a148 at::Tensor::copy_()
[2m[36m(pid=78266)[0m     @     0x7fbe22111989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78266)[0m     @     0x7fbe204125cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78318)[0m     @     0x7f4cb40c1cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78318)[0m     @     0x7f4cb10ff009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78318)[0m     @     0x7f4cb10fdc3f at::native::copy_impl()
[2m[36m(pid=78318)[0m     @     0x7f4cb10feed4 at::native::copy_()
[2m[36m(pid=78318)[0m     @     0x7f4cb18415cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78302)[0m     @     0x7eea4a39eed4 at::native::copy_()
[2m[36m(pid=78302)[0m     @     0x7eea4aae15cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78302)[0m     @     0x7eea4abe9148 at::Tensor::copy_()
[2m[36m(pid=78302)[0m     @     0x7eea4c7e0989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78302)[0m     @     0x7eea4aae15cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78306)[0m     @     0x7f2a4708ded4 at::native::copy_()
[2m[36m(pid=78306)[0m     @     0x7f2a477d05cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78306)[0m     @     0x7f2a478d8148 at::Tensor::copy_()
[2m[36m(pid=78306)[0m     @     0x7f2a494cf989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78306)[0m     @     0x7f2a477d05cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78295)[0m     @     0x7ef1bb95ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78295)[0m     @     0x7ef1b899c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78295)[0m     @     0x7ef1b899ac3f at::native::copy_impl()
[2m[36m(pid=78295)[0m     @     0x7ef1b899bed4 at::native::copy_()
[2m[36m(pid=78295)[0m     @     0x7ef1b90de5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78295)[0m     @     0x7ef1b91e6148 at::Tensor::copy_()
[2m[36m(pid=78309)[0m     @     0x7fc61717b5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78309)[0m     @     0x7fc617283148 at::Tensor::copy_()
[2m[36m(pid=78309)[0m     @     0x7fc618e7a989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78309)[0m     @     0x7fc61717b5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78309)[0m     @     0x7fc617283148 at::Tensor::copy_()
[2m[36m(pid=78288)[0m     @     0x7fa7f1ea1cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78288)[0m     @     0x7fa7eeedf009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78288)[0m     @     0x7fa7eeeddc3f at::native::copy_impl()
[2m[36m(pid=78288)[0m     @     0x7fa7eeedeed4 at::native::copy_()
[2m[36m(pid=78288)[0m     @     0x7fa7ef6215cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78288)[0m     @     0x7fa7ef729148 at::Tensor::copy_()
[2m[36m(pid=78270)[0m     @     0x7fb2bd88bed4 at::native::copy_()
[2m[36m(pid=78270)[0m     @     0x7fb2bdfce5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78270)[0m     @     0x7fb2be0d6148 at::Tensor::copy_()
[2m[36m(pid=78270)[0m     @     0x7fb2bfccd989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78270)[0m     @     0x7fb2bdfce5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78275)[0m     @     0x7f8f7640bed4 at::native::copy_()
[2m[36m(pid=78275)[0m     @     0x7f8f76b4e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78275)[0m     @     0x7f8f76c56148 at::Tensor::copy_()
[2m[36m(pid=78275)[0m     @     0x7f8f7884d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78258)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=78258)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=78258)[0m *** Aborted at 1604573765 (unix time) try "date -d @1604573765" if you are using GNU date ***
[2m[36m(pid=78258)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78258)[0m *** SIGSEGV (@0x0) received by PID 78258 (TID 0x7fddc9a4f700) from PID 0; stack trace: ***
[2m[36m(pid=78258)[0m     @     0x7fddc9628390 (unknown)
[2m[36m(pid=78258)[0m     @     0x7faecb85bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78258)[0m     @     0x7faec8b4f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78209)[0m     @     0x7f22118b664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78209)[0m     @     0x7f22118b9977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78209)[0m     @     0x7f22118b9b53 at::TensorIterator::for_each()
[2m[36m(pid=78209)[0m     @     0x7f22118b9e11 at::TensorIterator::for_each()
[2m[36m(pid=78209)[0m     @     0x7f22145d2c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78209)[0m     @     0x7f22145f5cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78186)[0m     @     0x7f82ad2235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78186)[0m     @     0x7f82ad32b148 at::Tensor::copy_()
[2m[36m(pid=78186)[0m     @     0x7f82aef22989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78186)[0m     @     0x7f82ad2235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78186)[0m     @     0x7f82ad32b148 at::Tensor::copy_()
[2m[36m(pid=78186)[0m     @     0x7f82b35e1bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78186)[0m     @     0x55f187788fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78186)[0m     @     0x55f1876e3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78186)[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78186)[0m     @     0x55f18776fa20 method_vectorcall
[2m[36m(pid=78186)[0m     @     0x55f1876e3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78186)[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78186)[0m     @     0x55f18776f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78186)[0m     @     0x55f1876e4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78194)[0m     @     0x7f1a7a5bac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78194)[0m     @     0x7f1a7a5ddcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78194)[0m     @     0x7f1a7761b009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78194)[0m     @     0x7f1a77619c3f at::native::copy_impl()
[2m[36m(pid=78194)[0m     @     0x7f1a7761aed4 at::native::copy_()
[2m[36m(pid=78194)[0m     @     0x7f1a77d5d5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78265)[0m     @     0x7f634c1a65cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78265)[0m     @     0x7f634c2ae148 at::Tensor::copy_()
[2m[36m(pid=78265)[0m     @     0x7f634dea5989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78265)[0m     @     0x7f634c1a65cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78236)[0m     @     0x7fb2ff2c85cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78236)[0m     @     0x7fb2ff3d0148 at::Tensor::copy_()
[2m[36m(pid=78236)[0m     @     0x7fb300fc7989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78236)[0m     @     0x7fb2ff2c85cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78278)[0m     @     0x7fbb006495cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78278)[0m     @     0x7fbb00751148 at::Tensor::copy_()
[2m[36m(pid=78278)[0m     @     0x7fbb02348989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78278)[0m     @     0x7fbb006495cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78278)[0m     @     0x7fbb00751148 at::Tensor::copy_()
[2m[36m(pid=78278)[0m     @     0x7fbb06a07bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78278)[0m     @     0x5609a19d9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78278)[0m     @     0x5609a1934b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78278)[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78278)[0m     @     0x5609a19c0a20 method_vectorcall
[2m[36m(pid=78278)[0m     @     0x5609a1934bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78278)[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78278)[0m     @     0x5609a19c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78278)[0m     @     0x5609a1935689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78278)[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78278)[0m     @     0x5609a19c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78278)[0m     @     0x5609a1935689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78278)[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78278)[0m     @     0x5609a19c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78278)[0m     @     0x5609a1935689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78278)[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78193)[0m     @     0x7f51d4adfc3f at::native::copy_impl()
[2m[36m(pid=78193)[0m     @     0x7f51d4ae0ed4 at::native::copy_()
[2m[36m(pid=78193)[0m     @     0x7f51d52235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78193)[0m     @     0x7f51d532b148 at::Tensor::copy_()
[2m[36m(pid=78193)[0m     @     0x7f51d6f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78193)[0m     @     0x7f51d52235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78260)[0m     @     0x7f9e92ddced4 at::native::copy_()
[2m[36m(pid=78260)[0m     @     0x7f9e9351f5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78260)[0m     @     0x7f9e93627148 at::Tensor::copy_()
[2m[36m(pid=78260)[0m     @     0x7f9e9521e989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78260)[0m     @     0x7f9e9351f5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78260)[0m     @     0x7f9e93627148 at::Tensor::copy_()
[2m[36m(pid=78260)[0m     @     0x7f9e998ddbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78260)[0m     @     0x562a4f515fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78260)[0m     @     0x562a4f470b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78260)[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78260)[0m     @     0x562a4f4fca20 method_vectorcall
[2m[36m(pid=78260)[0m     @     0x562a4f470bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78260)[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78260)[0m     @     0x562a4f4fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78260)[0m     @     0x562a4f471689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78260)[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78260)[0m     @     0x562a4f4fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78260)[0m     @     0x562a4f471689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78260)[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78320)[0m     @     0x7f41387cb009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78320)[0m     @     0x7f41387c9c3f at::native::copy_impl()
[2m[36m(pid=78320)[0m     @     0x7f41387caed4 at::native::copy_()
[2m[36m(pid=78320)[0m     @     0x7f4138f0d5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78320)[0m     @     0x7f4139015148 at::Tensor::copy_()
[2m[36m(pid=78320)[0m     @     0x7f413ac0c989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78200)[0m     @     0x7fc808a65cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78200)[0m     @     0x7fc805aa3009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78200)[0m     @     0x7fc805aa1c3f at::native::copy_impl()
[2m[36m(pid=78200)[0m     @     0x7fc805aa2ed4 at::native::copy_()
[2m[36m(pid=78200)[0m     @     0x7fc8061e55cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78200)[0m     @     0x7fc8062ed148 at::Tensor::copy_()
[2m[36m(pid=78200)[0m     @     0x7fc807ee4989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78253)[0m     @     0x7ef0e911e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78253)[0m     @     0x7ef0e9226148 at::Tensor::copy_()
[2m[36m(pid=78253)[0m     @     0x7ef0eae1d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78253)[0m     @     0x7ef0e911e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78253)[0m     @     0x7ef0e9226148 at::Tensor::copy_()
[2m[36m(pid=78253)[0m     @     0x7ef0ef4dcbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78253)[0m     @     0x559ddc215fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78253)[0m     @     0x559ddc170b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78253)[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78253)[0m     @     0x559ddc1fca20 method_vectorcall
[2m[36m(pid=78253)[0m     @     0x559ddc170bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78253)[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78253)[0m     @     0x559ddc1fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78253)[0m     @     0x559ddc171689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78253)[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78253)[0m     @     0x559ddc1fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78253)[0m     @     0x559ddc171689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78253)[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78253)[0m     @     0x559ddc1fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78253)[0m     @     0x559ddc171689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78253)[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78187)[0m     @     0x7ee228dffc3f at::native::copy_impl()
[2m[36m(pid=78187)[0m     @     0x7ee228e00ed4 at::native::copy_()
[2m[36m(pid=78187)[0m     @     0x7ee2295435cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78187)[0m     @     0x7ee22964b148 at::Tensor::copy_()
[2m[36m(pid=78187)[0m     @     0x7ee22b242989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78187)[0m     @     0x7ee2295435cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78237)[0m     @     0x7ef64c0cecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78237)[0m     @     0x7ef64910c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78237)[0m     @     0x7ef64910ac3f at::native::copy_impl()
[2m[36m(pid=78237)[0m     @     0x7ef64910bed4 at::native::copy_()
[2m[36m(pid=78237)[0m     @     0x7ef64984e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78237)[0m     @     0x7ef649956148 at::Tensor::copy_()
[2m[36m(pid=78237)[0m     @     0x7ef64b54d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78197)[0m     @     0x7f590e1fb009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78197)[0m     @     0x7f590e1f9c3f at::native::copy_impl()
[2m[36m(pid=78197)[0m     @     0x7f590e1faed4 at::native::copy_()
[2m[36m(pid=78197)[0m     @     0x7f590e93d5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78197)[0m     @     0x7f590ea45148 at::Tensor::copy_()
[2m[36m(pid=78197)[0m     @     0x7f591063c989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78252)[0m     @     0x7f6deba34009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78252)[0m     @     0x7f6deba32c3f at::native::copy_impl()
[2m[36m(pid=78252)[0m     @     0x7f6deba33ed4 at::native::copy_()
[2m[36m(pid=78252)[0m     @     0x7f6dec1765cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78252)[0m     @     0x7f6dec27e148 at::Tensor::copy_()
[2m[36m(pid=78252)[0m     @     0x7f6dede75989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78184)[0m     @     0x7f878ccdbfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78184)[0m     @     0x7f8789fcf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78184)[0m     @     0x7f8789fd2977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78184)[0m     @     0x7f8789fd2b53 at::TensorIterator::for_each()
[2m[36m(pid=78184)[0m     @     0x7f8789fd2e11 at::TensorIterator::for_each()
[2m[36m(pid=78184)[0m     @     0x7f878ccebc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78184)[0m     @     0x7f878cd0ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78184)[0m     @     0x7f8789d4c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78184)[0m     @     0x7f8789d4ac3f at::native::copy_impl()
[2m[36m(pid=78263)[0m     @     0x7f0aa79595cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78263)[0m     @     0x7f0aa7a61148 at::Tensor::copy_()
[2m[36m(pid=78263)[0m     @     0x7f0aa9658989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78263)[0m     @     0x7f0aa79595cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78263)[0m     @     0x7f0aa7a61148 at::Tensor::copy_()
[2m[36m(pid=78263)[0m     @     0x7f0aadd17bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78263)[0m     @     0x564300978fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78263)[0m     @     0x5643008d3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78263)[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78263)[0m     @     0x56430095fa20 method_vectorcall
[2m[36m(pid=78263)[0m     @     0x5643008d3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78263)[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78263)[0m     @     0x56430095f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78263)[0m     @     0x5643008d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78263)[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78263)[0m     @     0x56430095f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78263)[0m     @     0x5643008d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78263)[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78263)[0m     @     0x56430095f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78263)[0m     @     0x5643008d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78263)[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78282)[0m     @     0x7f69c8ed3ed4 at::native::copy_()
[2m[36m(pid=78282)[0m     @     0x7f69c96165cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78282)[0m     @     0x7f69c971e148 at::Tensor::copy_()
[2m[36m(pid=78282)[0m     @     0x7f69cb315989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78282)[0m     @     0x7f69c96165cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78282)[0m     @     0x7f69c971e148 at::Tensor::copy_()
[2m[36m(pid=78282)[0m     @     0x7f69cf9d4bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78282)[0m     @     0x560e651d3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78282)[0m     @     0x560e6512eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78282)[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78282)[0m     @     0x560e651baa20 method_vectorcall
[2m[36m(pid=78282)[0m     @     0x560e6512ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78282)[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78282)[0m     @     0x560e651ba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78282)[0m     @     0x560e6512f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78282)[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78282)[0m     @     0x560e651ba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78282)[0m     @     0x560e6512f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78282)[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78282)[0m     @     0x560e651ba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78282)[0m     @     0x560e6512f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78282)[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78243)[0m     @     0x7f47417e0ed4 at::native::copy_()
[2m[36m(pid=78243)[0m     @     0x7f4741f235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78243)[0m     @     0x7f474202b148 at::Tensor::copy_()
[2m[36m(pid=78243)[0m     @     0x7f4743c22989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78243)[0m     @     0x7f4741f235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78243)[0m     @     0x7f474202b148 at::Tensor::copy_()
[2m[36m(pid=78274)[0m     @     0x7f18528b8cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78274)[0m     @     0x7f184f8f6009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78274)[0m     @     0x7f184f8f4c3f at::native::copy_impl()
[2m[36m(pid=78274)[0m     @     0x7f184f8f5ed4 at::native::copy_()
[2m[36m(pid=78274)[0m     @     0x7f18500385cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78274)[0m     @     0x7f1850140148 at::Tensor::copy_()
[2m[36m(pid=78274)[0m     @     0x7f1851d37989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78257)[0m     @     0x7f934b537ed4 at::native::copy_()
[2m[36m(pid=78257)[0m     @     0x7f934bc7a5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78257)[0m     @     0x7f934bd82148 at::Tensor::copy_()
[2m[36m(pid=78257)[0m     @     0x7f934d979989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78257)[0m     @     0x7f934bc7a5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78257)[0m     @     0x7f934bd82148 at::Tensor::copy_()
[2m[36m(pid=78247)[0m     @     0x7f5bacffa009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78247)[0m     @     0x7f5bacff8c3f at::native::copy_impl()
[2m[36m(pid=78247)[0m     @     0x7f5bacff9ed4 at::native::copy_()
[2m[36m(pid=78247)[0m     @     0x7f5bad73c5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78247)[0m     @     0x7f5bad844148 at::Tensor::copy_()
[2m[36m(pid=78247)[0m     @     0x7f5baf43b989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78240)[0m     @     0x7f865fa5c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78240)[0m     @     0x7f865fa5ac3f at::native::copy_impl()
[2m[36m(pid=78240)[0m     @     0x7f865fa5bed4 at::native::copy_()
[2m[36m(pid=78240)[0m     @     0x7f866019e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78240)[0m     @     0x7f86602a6148 at::Tensor::copy_()
[2m[36m(pid=78240)[0m     @     0x7f8661e9d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78272)[0m     @     0x7f20abf07009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78272)[0m     @     0x7f20abf05c3f at::native::copy_impl()
[2m[36m(pid=78272)[0m     @     0x7f20abf06ed4 at::native::copy_()
[2m[36m(pid=78272)[0m     @     0x7f20ac6495cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78272)[0m     @     0x7f20ac751148 at::Tensor::copy_()
[2m[36m(pid=78272)[0m     @     0x7f20ae348989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78210)[0m     @     0x7f9176906ed4 at::native::copy_()
[2m[36m(pid=78210)[0m     @     0x7f91770495cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78210)[0m     @     0x7f9177151148 at::Tensor::copy_()
[2m[36m(pid=78210)[0m     @     0x7f9178d48989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78210)[0m     @     0x7f91770495cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78210)[0m     @     0x7f9177151148 at::Tensor::copy_()
[2m[36m(pid=78210)[0m     @     0x7f917d407bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78210)[0m     @     0x555ca7e3cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78210)[0m     @     0x555ca7d97b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78210)[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78210)[0m     @     0x555ca7e23a20 method_vectorcall
[2m[36m(pid=78210)[0m     @     0x555ca7d97bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78210)[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78210)[0m     @     0x555ca7e23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78210)[0m     @     0x555ca7d98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78210)[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78210)[0m     @     0x555ca7e23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78210)[0m     @     0x555ca7d98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78210)[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78210)[0m     @     0x555ca7e23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78206)[0m     @     0x7ed9ed4a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78206)[0m     @     0x7ed9ea79464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78206)[0m     @     0x7ed9ea797977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78206)[0m     @     0x7ed9ea797b53 at::TensorIterator::for_each()
[2m[36m(pid=78206)[0m     @     0x7ed9ea797e11 at::TensorIterator::for_each()
[2m[36m(pid=78206)[0m     @     0x7ed9ed4b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78206)[0m     @     0x7ed9ed4d3cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78206)[0m     @     0x7ed9ea511009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78277)[0m     @     0x7fd343a77390 (unknown)
[2m[36m(pid=78277)[0m     @     0x7fa445c7ffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78277)[0m     @     0x7fa442f7364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78277)[0m     @     0x7fa442f76977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78277)[0m     @     0x7fa442f76b53 at::TensorIterator::for_each()
[2m[36m(pid=78277)[0m     @     0x7fa442f76e11 at::TensorIterator::for_each()
[2m[36m(pid=78277)[0m     @     0x7fa445c8fc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78277)[0m     @     0x7fa445cb2cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78214)[0m     @     0x7f3bd9c3cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78214)[0m     @     0x7f3bd6f3064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78214)[0m     @     0x7f3bd6f33977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78214)[0m     @     0x7f3bd6f33b53 at::TensorIterator::for_each()
[2m[36m(pid=78214)[0m     @     0x7f3bd6f33e11 at::TensorIterator::for_each()
[2m[36m(pid=78214)[0m     @     0x7f3bd9c4cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78214)[0m     @     0x7f3bd9c6fcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78182)[0m     @     0x7f06db379977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78182)[0m     @     0x7f06db379b53 at::TensorIterator::for_each()
[2m[36m(pid=78182)[0m     @     0x7f06db379e11 at::TensorIterator::for_each()
[2m[36m(pid=78182)[0m     @     0x7f06de092c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78182)[0m     @     0x7f06de0b5cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78182)[0m     @     0x7f06db0f3009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78182)[0m     @     0x7f06db0f1c3f at::native::copy_impl()
[2m[36m(pid=78182)[0m     @     0x7f06db0f2ed4 at::native::copy_()
[2m[36m(pid=78259)[0m PC: @                0x0 (unknown)
[2m[36m(pid=78259)[0m *** SIGSEGV (@0x0) received by PID 78259 (TID 0x7f638077c700) from PID 0; stack trace: ***
[2m[36m(pid=78259)[0m     @     0x7f6380355390 (unknown)
[2m[36m(pid=78259)[0m     @     0x7f3482507fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78259)[0m     @     0x7f347f7fb64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78259)[0m     @     0x7f347f7fe977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78259)[0m     @     0x7f347f7feb53 at::TensorIterator::for_each()
[2m[36m(pid=78259)[0m     @     0x7f347f7fee11 at::TensorIterator::for_each()
[2m[36m(pid=78259)[0m     @     0x7f3482517c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78188)[0m     @     0x7f1967ebd64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78188)[0m     @     0x7f1967ec0977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78188)[0m     @     0x7f1967ec0b53 at::TensorIterator::for_each()
[2m[36m(pid=78188)[0m     @     0x7f1967ec0e11 at::TensorIterator::for_each()
[2m[36m(pid=78188)[0m     @     0x7f196abd9c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78188)[0m     @     0x7f196abfccfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78262)[0m     @     0x7efd4f7f6fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78262)[0m     @     0x7efd4caea64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78262)[0m     @     0x7efd4caed977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78262)[0m     @     0x7efd4caedb53 at::TensorIterator::for_each()
[2m[36m(pid=78262)[0m     @     0x7efd4caede11 at::TensorIterator::for_each()
[2m[36m(pid=78262)[0m     @     0x7efd4f806c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78262)[0m     @     0x7efd4f829cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78262)[0m     @     0x7efd4c867009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78286)[0m     @     0x7eeb687b8977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78286)[0m     @     0x7eeb687b8b53 at::TensorIterator::for_each()
[2m[36m(pid=78286)[0m     @     0x7eeb687b8e11 at::TensorIterator::for_each()
[2m[36m(pid=78286)[0m     @     0x7eeb6b4d1c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78286)[0m     @     0x7eeb6b4f4cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78250)[0m     @     0x7f88f43b1fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78250)[0m     @     0x7f88f16a564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78250)[0m     @     0x7f88f16a8977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78250)[0m     @     0x7f88f16a8b53 at::TensorIterator::for_each()
[2m[36m(pid=78250)[0m     @     0x7f88f16a8e11 at::TensorIterator::for_each()
[2m[36m(pid=78250)[0m     @     0x7f88f43c1c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78250)[0m     @     0x7f88f43e4cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78250)[0m     @     0x7f88f1422009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78250)[0m     @     0x7f88f1420c3f at::native::copy_impl()
[2m[36m(pid=78199)[0m     @     0x7f969bce2977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78199)[0m     @     0x7f969bce2b53 at::TensorIterator::for_each()
[2m[36m(pid=78199)[0m     @     0x7f969bce2e11 at::TensorIterator::for_each()
[2m[36m(pid=78199)[0m     @     0x7f969e9fbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78199)[0m     @     0x7f969ea1ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78199)[0m     @     0x7f969ba5c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78199)[0m     @     0x7f969ba5ac3f at::native::copy_impl()
[2m[36m(pid=78304)[0m     @     0x7fbe60f78e11 at::TensorIterator::for_each()
[2m[36m(pid=78304)[0m     @     0x7fbe63c91c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78304)[0m     @     0x7fbe63cb4cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78304)[0m     @     0x7fbe60cf2009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78304)[0m     @     0x7fbe60cf0c3f at::native::copy_impl()
[2m[36m(pid=78280)[0m     @     0x7f55bb2afe11 at::TensorIterator::for_each()
[2m[36m(pid=78280)[0m     @     0x7f55bdfc8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78280)[0m     @     0x7f55bdfebcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78280)[0m     @     0x7f55bb029009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78280)[0m     @     0x7f55bb027c3f at::native::copy_impl()
[2m[36m(pid=78281)[0m     @     0x7f7cb58b664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78281)[0m     @     0x7f7cb58b9977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78281)[0m     @     0x7f7cb58b9b53 at::TensorIterator::for_each()
[2m[36m(pid=78180)[0m     @     0x7fb68bec0977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78180)[0m     @     0x7fb68bec0b53 at::TensorIterator::for_each()
[2m[36m(pid=78180)[0m     @     0x7fb68bec0e11 at::TensorIterator::for_each()
[2m[36m(pid=78211)[0m     @     0x7f871009bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=78211)[0m     @     0x7f870d38f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78204)[0m     @     0x7ef650a51e11 at::TensorIterator::for_each()
[2m[36m(pid=78204)[0m     @     0x7ef65376ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78204)[0m     @     0x7ef65378dcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78204)[0m     @     0x7ef6507cb009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78204)[0m     @     0x7ef6507c9c3f at::native::copy_impl()
[2m[36m(pid=78218)[0m     @     0x7f887a414e11 at::TensorIterator::for_each()
[2m[36m(pid=78218)[0m     @     0x7f887d12dc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78218)[0m     @     0x7f887d150cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78218)[0m     @     0x7f887a18e009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78218)[0m     @     0x7f887a18cc3f at::native::copy_impl()
[2m[36m(pid=78196)[0m     @     0x7f7a6ae4ce11 at::TensorIterator::for_each()
[2m[36m(pid=78196)[0m     @     0x7f7a6db65c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78196)[0m     @     0x7f7a6db88cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78196)[0m     @     0x7f7a6abc6009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78196)[0m     @     0x7f7a6abc4c3f at::native::copy_impl()
[2m[36m(pid=78242)[0m     @     0x7f037e797e11 at::TensorIterator::for_each()
[2m[36m(pid=78242)[0m     @     0x7f03814b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78242)[0m     @     0x7f03814d3cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78242)[0m     @     0x7f037e511009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78242)[0m     @     0x7f037e50fc3f at::native::copy_impl()
[2m[36m(pid=78185)[0m     @     0x7f1476efbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78185)[0m     @     0x7f1476f1ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78185)[0m     @     0x7f1473f5c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78185)[0m     @     0x7f1473f5ac3f at::native::copy_impl()
[2m[36m(pid=78185)[0m     @     0x7f1473f5bed4 at::native::copy_()
[2m[36m(pid=78216)[0m     @     0x7fb3d7379b53 at::TensorIterator::for_each()
[2m[36m(pid=78216)[0m     @     0x7fb3d7379e11 at::TensorIterator::for_each()
[2m[36m(pid=78216)[0m     @     0x7fb3da092c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78216)[0m     @     0x7fb3da0b5cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78216)[0m     @     0x7fb3d70f3009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78189)[0m     @     0x7f327fb7ce11 at::TensorIterator::for_each()
[2m[36m(pid=78189)[0m     @     0x7f3282895c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78189)[0m     @     0x7f32828b8cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78189)[0m     @     0x7f327f8f6009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78189)[0m     @     0x7f327f8f4c3f at::native::copy_impl()
[2m[36m(pid=78322)[0m     @     0x7ef604340e11 at::TensorIterator::for_each()
[2m[36m(pid=78322)[0m     @     0x7ef607059c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78322)[0m     @     0x7ef60707ccfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78322)[0m     @     0x7ef6040ba009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78322)[0m     @     0x7ef6040b8c3f at::native::copy_impl()
[2m[36m(pid=78322)[0m     @     0x7ef6040b9ed4 at::native::copy_()
[2m[36m(pid=78322)[0m     @     0x7ef6047fc5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78290)[0m     @     0x7f6586a7be11 at::TensorIterator::for_each()
[2m[36m(pid=78290)[0m     @     0x7f6589794c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78290)[0m     @     0x7f65897b7cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78290)[0m     @     0x7f65867f5009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78290)[0m     @     0x7f65867f3c3f at::native::copy_impl()
[2m[36m(pid=78290)[0m     @     0x7f65867f4ed4 at::native::copy_()
[2m[36m(pid=78178)[0m     @     0x7f948acbfe11 at::TensorIterator::for_each()
[2m[36m(pid=78178)[0m     @     0x7f948d9d8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78178)[0m     @     0x7f948d9fbcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78178)[0m     @     0x7f948aa39009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78178)[0m     @     0x7f948aa37c3f at::native::copy_impl()
[2m[36m(pid=78178)[0m     @     0x7f948aa38ed4 at::native::copy_()
[2m[36m(pid=78195)[0m     @     0x7eebee771989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78195)[0m     @     0x7eebeca725cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78195)[0m     @     0x7eebecb7a148 at::Tensor::copy_()
[2m[36m(pid=78195)[0m     @     0x7eebf2e30bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78195)[0m     @     0x55ec07efafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78195)[0m     @     0x55ec07e55b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78195)[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78195)[0m     @     0x55ec07ee1a20 method_vectorcall
[2m[36m(pid=78195)[0m     @     0x55ec07e55bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78195)[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78195)[0m     @     0x55ec07ee1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78195)[0m     @     0x55ec07e56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78195)[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78195)[0m     @     0x55ec07ee1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78195)[0m     @     0x55ec07e56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78195)[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78195)[0m     @     0x55ec07ee1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78195)[0m     @     0x55ec07e56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78195)[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78246)[0m     @     0x7f3718412e11 at::TensorIterator::for_each()
[2m[36m(pid=78246)[0m     @     0x7f371b12bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78246)[0m     @     0x7f371b14ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78246)[0m     @     0x7f371818c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78246)[0m     @     0x7f371818ac3f at::native::copy_impl()
[2m[36m(pid=78246)[0m     @     0x7f371818bed4 at::native::copy_()
[2m[36m(pid=78268)[0m     @     0x7f39ca26ae11 at::TensorIterator::for_each()
[2m[36m(pid=78268)[0m     @     0x7f39ccf83c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78268)[0m     @     0x7f39ccfa6cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78268)[0m     @     0x7f39c9fe4009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78268)[0m     @     0x7f39c9fe2c3f at::native::copy_impl()
[2m[36m(pid=78268)[0m     @     0x7f39c9fe3ed4 at::native::copy_()
[2m[36m(pid=78268)[0m     @     0x7f39ca7265cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78256)[0m     @     0x7fc52f84cb53 at::TensorIterator::for_each()
[2m[36m(pid=78256)[0m     @     0x7fc52f84ce11 at::TensorIterator::for_each()
[2m[36m(pid=78256)[0m     @     0x7fc532565c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78256)[0m     @     0x7fc532588cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78181)[0m     @     0x7ecf3c91ae11 at::TensorIterator::for_each()
[2m[36m(pid=78181)[0m     @     0x7ecf3f633c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78181)[0m     @     0x7ecf3f656cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78181)[0m     @     0x7ecf3c694009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78181)[0m     @     0x7ecf3c692c3f at::native::copy_impl()
[2m[36m(pid=78181)[0m     @     0x7ecf3c693ed4 at::native::copy_()
[2m[36m(pid=78301)[0m     @     0x7ed1b75fa148 at::Tensor::copy_()
[2m[36m(pid=78301)[0m     @     0x7ed1b91f1989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78301)[0m     @     0x7ed1b74f25cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78301)[0m     @     0x7ed1b75fa148 at::Tensor::copy_()
[2m[36m(pid=78301)[0m     @     0x7ed1bd8b0bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78301)[0m     @     0x5636f5e3cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78301)[0m     @     0x5636f5d97b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78301)[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78301)[0m     @     0x5636f5e23a20 method_vectorcall
[2m[36m(pid=78301)[0m     @     0x5636f5d97bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78301)[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78301)[0m     @     0x5636f5e23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78301)[0m     @     0x5636f5d98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78301)[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78301)[0m     @     0x5636f5e23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78301)[0m     @     0x5636f5d98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78301)[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78301)[0m     @     0x5636f5e23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78301)[0m     @     0x5636f5d98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78301)[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78202)[0m     @     0x7f4614ae0ed4 at::native::copy_()
[2m[36m(pid=78202)[0m     @     0x7f46152235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78202)[0m     @     0x7f461532b148 at::Tensor::copy_()
[2m[36m(pid=78202)[0m     @     0x7f4616f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78202)[0m     @     0x7f46152235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78254)[0m     @     0x7efaf6692b53 at::TensorIterator::for_each()
[2m[36m(pid=78254)[0m     @     0x7efaf6692e11 at::TensorIterator::for_each()
[2m[36m(pid=78254)[0m     @     0x7efaf93abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78254)[0m     @     0x7efaf93cecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78254)[0m     @     0x7efaf640c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78254)[0m     @     0x7efaf640ac3f at::native::copy_impl()
[2m[36m(pid=78190)[0m     @     0x7ee9882f464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=78190)[0m     @     0x7ee9882f7977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78245)[0m     @     0x7f0aff8a4e11 at::TensorIterator::for_each()
[2m[36m(pid=78245)[0m     @     0x7f0b025bdc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78245)[0m     @     0x7f0b025e0cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78245)[0m     @     0x7f0aff61e009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78245)[0m     @     0x7f0aff61cc3f at::native::copy_impl()
[2m[36m(pid=78245)[0m     @     0x7f0aff61ded4 at::native::copy_()
[2m[36m(pid=78245)[0m     @     0x7f0affd605cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78198)[0m     @     0x7f71bd15ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78198)[0m     @     0x7f71bd17dcfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78198)[0m     @     0x7f71ba1bb009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78198)[0m     @     0x7f71ba1b9c3f at::native::copy_impl()
[2m[36m(pid=78198)[0m     @     0x7f71ba1baed4 at::native::copy_()
[2m[36m(pid=78198)[0m     @     0x7f71ba8fd5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78255)[0m     @     0x7f91ca5a5b53 at::TensorIterator::for_each()
[2m[36m(pid=78255)[0m     @     0x7f91ca5a5e11 at::TensorIterator::for_each()
[2m[36m(pid=78255)[0m     @     0x7f91cd2bec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78255)[0m     @     0x7f91cd2e1cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78192)[0m     @     0x7f82a41e2b53 at::TensorIterator::for_each()
[2m[36m(pid=78192)[0m     @     0x7f82a41e2e11 at::TensorIterator::for_each()
[2m[36m(pid=78192)[0m     @     0x7f82a6efbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78192)[0m     @     0x7f82a6f1ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78192)[0m     @     0x7f82a3f5c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78192)[0m     @     0x7f82a3f5ac3f at::native::copy_impl()
[2m[36m(pid=78285)[0m     @     0x7f8056797e11 at::TensorIterator::for_each()
[2m[36m(pid=78285)[0m     @     0x7f80594b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78285)[0m     @     0x7f80594d3cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78285)[0m     @     0x7f8056511009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78285)[0m     @     0x7f805650fc3f at::native::copy_impl()
[2m[36m(pid=78248)[0m     @     0x7f2953267e11 at::TensorIterator::for_each()
[2m[36m(pid=78248)[0m     @     0x7f2955f80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78248)[0m     @     0x7f2955fa3cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78248)[0m     @     0x7f2952fe1009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78248)[0m     @     0x7f2952fdfc3f at::native::copy_impl()
[2m[36m(pid=78248)[0m     @     0x7f2952fe0ed4 at::native::copy_()
[2m[36m(pid=78273)[0m     @     0x7f68ceb99009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78273)[0m     @     0x7f68ceb97c3f at::native::copy_impl()
[2m[36m(pid=78273)[0m     @     0x7f68ceb98ed4 at::native::copy_()
[2m[36m(pid=78273)[0m     @     0x7f68cf2db5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78179)[0m     @     0x7fbf022ed148 at::Tensor::copy_()
[2m[36m(pid=78179)[0m     @     0x7fbf03ee4989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78179)[0m     @     0x7fbf021e55cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78179)[0m     @     0x7fbf022ed148 at::Tensor::copy_()
[2m[36m(pid=78179)[0m     @     0x7fbf085a3bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78179)[0m     @     0x55a8ac400fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78179)[0m     @     0x55a8ac35bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78179)[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78179)[0m     @     0x55a8ac3e7a20 method_vectorcall
[2m[36m(pid=78179)[0m     @     0x55a8ac35bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78179)[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78179)[0m     @     0x55a8ac3e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78316)[0m     @     0x7f8dad320989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78316)[0m     @     0x7f8dab6215cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78316)[0m     @     0x7f8dab729148 at::Tensor::copy_()
[2m[36m(pid=78316)[0m     @     0x7f8db19dfbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78316)[0m     @     0x55d45b8e0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78316)[0m     @     0x55d45b83bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78316)[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78316)[0m     @     0x55d45b8c7a20 method_vectorcall
[2m[36m(pid=78316)[0m     @     0x55d45b83bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78316)[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78316)[0m     @     0x55d45b8c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78316)[0m     @     0x55d45b83c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78316)[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78316)[0m     @     0x55d45b8c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78316)[0m     @     0x55d45b83c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78316)[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78316)[0m     @     0x55d45b8c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78316)[0m     @     0x55d45b83c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78316)[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78294)[0m     @     0x7f5b06c56148 at::Tensor::copy_()
[2m[36m(pid=78294)[0m     @     0x7f5b0cf0cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78294)[0m     @     0x5555960f1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78294)[0m     @     0x55559604cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78294)[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78294)[0m     @     0x5555960d8a20 method_vectorcall
[2m[36m(pid=78294)[0m     @     0x55559604cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78294)[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78294)[0m     @     0x5555960d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78294)[0m     @     0x55559604d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78294)[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78294)[0m     @     0x5555960d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78294)[0m     @     0x55559604d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78294)[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78294)[0m     @     0x5555960d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78294)[0m     @     0x55559604d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78294)[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78266)[0m     @     0x7fbe2051a148 at::Tensor::copy_()
[2m[36m(pid=78266)[0m     @     0x7fbe267d0bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78266)[0m     @     0x55a75a047fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78266)[0m     @     0x55a759fa2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78266)[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78266)[0m     @     0x55a75a02ea20 method_vectorcall
[2m[36m(pid=78266)[0m     @     0x55a759fa2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78266)[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78266)[0m     @     0x55a75a02e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78266)[0m     @     0x55a759fa3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78266)[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78266)[0m     @     0x55a75a02e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78266)[0m     @     0x55a759fa3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78266)[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78266)[0m     @     0x55a75a02e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78266)[0m     @     0x55a759fa3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78266)[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78318)[0m     @     0x7f4cb1949148 at::Tensor::copy_()
[2m[36m(pid=78318)[0m     @     0x7f4cb3540989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78318)[0m     @     0x7f4cb18415cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78318)[0m     @     0x7f4cb1949148 at::Tensor::copy_()
[2m[36m(pid=78318)[0m     @     0x7f4cb7bffbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78318)[0m     @     0x5573e8cbffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78318)[0m     @     0x5573e8c1ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78318)[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName
[2m[36m(pid=78318)[0m     @     0x5573e8ca6a20 method_vectorcall
[2m[36m(pid=78318)[0m     @     0x5573e8c1abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78318)[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName
[2m[36m(pid=78318)[0m     @     0x5573e8ca6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78318)[0m     @     0x5573e8c1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78318)[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName
[2m[36m(pid=78318)[0m     @     0x5573e8ca6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78318)[0m     @     0x5573e8c1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78318)[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName
[2m[36m(pid=78318)[0m     @     0x5573e8ca6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78318)[0m     @     0x5573e8c1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78318)[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName
[2m[36m(pid=78302)[0m     @     0x7eea4abe9148 at::Tensor::copy_()
[2m[36m(pid=78302)[0m     @     0x7eea50e9fbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78302)[0m     @     0x56277340cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78302)[0m     @     0x562773367b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78302)[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78302)[0m     @     0x5627733f3a20 method_vectorcall
[2m[36m(pid=78302)[0m     @     0x562773367bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78302)[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78302)[0m     @     0x5627733f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78302)[0m     @     0x562773368689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78302)[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78302)[0m     @     0x5627733f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78302)[0m     @     0x562773368689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78302)[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78302)[0m     @     0x5627733f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78302)[0m     @     0x562773368689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78302)[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78306)[0m     @     0x7f2a478d8148 at::Tensor::copy_()
[2m[36m(pid=78306)[0m     @     0x7f2a4db8ebd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78306)[0m     @     0x55c968b5dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78306)[0m     @     0x55c968ab8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78306)[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName
[2m[36m(pid=78306)[0m     @     0x55c968b44a20 method_vectorcall
[2m[36m(pid=78306)[0m     @     0x55c968ab8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78306)[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName
[2m[36m(pid=78306)[0m     @     0x55c968b44643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78306)[0m     @     0x55c968ab9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78306)[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName
[2m[36m(pid=78306)[0m     @     0x55c968b44643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78306)[0m     @     0x55c968ab9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78306)[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName
[2m[36m(pid=78306)[0m     @     0x55c968b44643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78306)[0m     @     0x55c968ab9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78306)[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName
[2m[36m(pid=78295)[0m     @     0x7ef1baddd989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78295)[0m     @     0x7ef1b90de5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78295)[0m     @     0x7ef1b91e6148 at::Tensor::copy_()
[2m[36m(pid=78295)[0m     @     0x7ef1bf49cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78295)[0m     @     0x55d64265ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78295)[0m     @     0x55d6425bab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78295)[0m     @     0x55d642645baf _PyEval_EvalCodeWithName
[2m[36m(pid=78295)[0m     @     0x55d642646a20 method_vectorcall
[2m[36m(pid=78295)[0m     @     0x55d6425babfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78295)[0m     @     0x55d642645baf _PyEval_EvalCodeWithName
[2m[36m(pid=78295)[0m     @     0x55d642646643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78295)[0m     @     0x55d6425bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78295)[0m     @     0x55d642645baf _PyEval_EvalCodeWithName
[2m[36m(pid=78295)[0m     @     0x55d642646643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78295)[0m     @     0x55d6425bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78295)[0m     @     0x55d642645baf _PyEval_EvalCodeWithName
[2m[36m(pid=78295)[0m     @     0x55d642646643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78295)[0m     @     0x55d6425bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78295)[0m     @     0x55d642645baf _PyEval_EvalCodeWithName
[2m[36m(pid=78309)[0m     @     0x7fc61d539bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78309)[0m     @     0x5639ef26afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78309)[0m     @     0x5639ef1c5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78309)[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName
[2m[36m(pid=78309)[0m     @     0x5639ef251a20 method_vectorcall
[2m[36m(pid=78309)[0m     @     0x5639ef1c5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78309)[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName
[2m[36m(pid=78309)[0m     @     0x5639ef251643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78309)[0m     @     0x5639ef1c6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78309)[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName
[2m[36m(pid=78309)[0m     @     0x5639ef251643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78309)[0m     @     0x5639ef1c6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78309)[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName
[2m[36m(pid=78309)[0m     @     0x5639ef251643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78309)[0m     @     0x5639ef1c6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78309)[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName
[2m[36m(pid=78288)[0m     @     0x7fa7f1320989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78288)[0m     @     0x7fa7ef6215cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78288)[0m     @     0x7fa7ef729148 at::Tensor::copy_()
[2m[36m(pid=78288)[0m     @     0x7fa7f59dfbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78288)[0m     @     0x562c37e37fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78288)[0m     @     0x562c37d92b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78288)[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78288)[0m     @     0x562c37e1ea20 method_vectorcall
[2m[36m(pid=78288)[0m     @     0x562c37d92bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78288)[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78288)[0m     @     0x562c37e1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78288)[0m     @     0x562c37d93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78288)[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78288)[0m     @     0x562c37e1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78288)[0m     @     0x562c37d93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78288)[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78288)[0m     @     0x562c37e1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78288)[0m     @     0x562c37d93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78288)[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78270)[0m     @     0x7fb2be0d6148 at::Tensor::copy_()
[2m[36m(pid=78270)[0m     @     0x7fb2c438cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78270)[0m     @     0x55847c7acfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78270)[0m     @     0x55847c707b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78270)[0m     @     0x55847c792baf _PyEval_EvalCodeWithName
[2m[36m(pid=78270)[0m     @     0x55847c793a20 method_vectorcall
[2m[36m(pid=78270)[0m     @     0x55847c707bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78270)[0m     @     0x55847c792baf _PyEval_EvalCodeWithName
[2m[36m(pid=78270)[0m     @     0x55847c793643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78270)[0m     @     0x55847c708689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78270)[0m     @     0x55847c792baf _PyEval_EvalCodeWithName
[2m[36m(pid=78270)[0m     @     0x55847c793643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78270)[0m     @     0x55847c708689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78270)[0m     @     0x55847c792baf _PyEval_EvalCodeWithName
[2m[36m(pid=78270)[0m     @     0x55847c793643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78270)[0m     @     0x55847c708689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78270)[0m     @     0x55847c792baf _PyEval_EvalCodeWithName
[2m[36m(pid=78275)[0m     @     0x7f8f76b4e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78275)[0m     @     0x7f8f76c56148 at::Tensor::copy_()
[2m[36m(pid=78275)[0m     @     0x7f8f7cf0cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78275)[0m     @     0x561bc95fefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78275)[0m     @     0x561bc9559b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78275)[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=78275)[0m     @     0x561bc95e5a20 method_vectorcall
[2m[36m(pid=78275)[0m     @     0x561bc9559bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78275)[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=78275)[0m     @     0x561bc95e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78275)[0m     @     0x561bc955a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78275)[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=78275)[0m     @     0x561bc95e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78275)[0m     @     0x561bc955a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78275)[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=78275)[0m     @     0x561bc95e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78275)[0m     @     0x561bc955a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78275)[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=78258)[0m     @     0x7faec8b52977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78258)[0m     @     0x7faec8b52b53 at::TensorIterator::for_each()
[2m[36m(pid=78258)[0m     @     0x7faec8b52e11 at::TensorIterator::for_each()
[2m[36m(pid=78258)[0m     @     0x7faecb86bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78258)[0m     @     0x7faecb88ecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78209)[0m     @     0x7f2211633009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78209)[0m     @     0x7f2211631c3f at::native::copy_impl()
[2m[36m(pid=78209)[0m     @     0x7f2211632ed4 at::native::copy_()
[2m[36m(pid=78209)[0m     @     0x7f2211d755cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78186)[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78186)[0m     @     0x55f18776f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78186)[0m     @     0x55f1876e4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78186)[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78186)[0m     @     0x55f18776f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78186)[0m     @     0x55f1876e4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78186)[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78194)[0m     @     0x7f1a77e65148 at::Tensor::copy_()
[2m[36m(pid=78194)[0m     @     0x7f1a79a5c989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78194)[0m     @     0x7f1a77d5d5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78194)[0m     @     0x7f1a77e65148 at::Tensor::copy_()
[2m[36m(pid=78194)[0m     @     0x7f1a7e11bbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78194)[0m     @     0x55b10f015fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78194)[0m     @     0x55b10ef70b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78194)[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78194)[0m     @     0x55b10effca20 method_vectorcall
[2m[36m(pid=78194)[0m     @     0x55b10ef70bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78194)[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78194)[0m     @     0x55b10effc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78194)[0m     @     0x55b10ef71689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78194)[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78194)[0m     @     0x55b10effc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78194)[0m     @     0x55b10ef71689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78265)[0m     @     0x7f634c2ae148 at::Tensor::copy_()
[2m[36m(pid=78265)[0m     @     0x7f6352564bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78265)[0m     @     0x55cc80ebdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78265)[0m     @     0x55cc80e18b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78265)[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78265)[0m     @     0x55cc80ea4a20 method_vectorcall
[2m[36m(pid=78265)[0m     @     0x55cc80e18bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78265)[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78265)[0m     @     0x55cc80ea4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78265)[0m     @     0x55cc80e19689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78265)[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78265)[0m     @     0x55cc80ea4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78265)[0m     @     0x55cc80e19689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78265)[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78265)[0m     @     0x55cc80ea4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78265)[0m     @     0x55cc80e19689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78265)[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78236)[0m     @     0x7fb2ff3d0148 at::Tensor::copy_()
[2m[36m(pid=78236)[0m     @     0x7fb305686bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78236)[0m     @     0x557ab78f9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78236)[0m     @     0x557ab7854b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78236)[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78236)[0m     @     0x557ab78e0a20 method_vectorcall
[2m[36m(pid=78236)[0m     @     0x557ab7854bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78236)[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78236)[0m     @     0x557ab78e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78236)[0m     @     0x557ab7855689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78236)[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78236)[0m     @     0x557ab78e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78236)[0m     @     0x557ab7855689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78236)[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78236)[0m     @     0x557ab78e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78236)[0m     @     0x557ab7855689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78236)[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78193)[0m     @     0x7f51d532b148 at::Tensor::copy_()
[2m[36m(pid=78193)[0m     @     0x7f51db5e1bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78193)[0m     @     0x55ebb1328fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78193)[0m     @     0x55ebb1283b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78193)[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78193)[0m     @     0x55ebb130fa20 method_vectorcall
[2m[36m(pid=78193)[0m     @     0x55ebb1283bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78193)[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78193)[0m     @     0x55ebb130f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78193)[0m     @     0x55ebb1284689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78193)[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78193)[0m     @     0x55ebb130f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78193)[0m     @     0x55ebb1284689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78193)[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78193)[0m     @     0x55ebb130f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78193)[0m     @     0x55ebb1284689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78193)[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78260)[0m     @     0x562a4f4fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78260)[0m     @     0x562a4f471689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78260)[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78320)[0m     @     0x7f4138f0d5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78320)[0m     @     0x7f4139015148 at::Tensor::copy_()
[2m[36m(pid=78320)[0m     @     0x7f413f2cbbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78320)[0m     @     0x5640b091efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78320)[0m     @     0x5640b0879b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78320)[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName
[2m[36m(pid=78320)[0m     @     0x5640b0905a20 method_vectorcall
[2m[36m(pid=78320)[0m     @     0x5640b0879bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78320)[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName
[2m[36m(pid=78320)[0m     @     0x5640b0905643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78320)[0m     @     0x5640b087a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78320)[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName
[2m[36m(pid=78320)[0m     @     0x5640b0905643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78320)[0m     @     0x5640b087a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78320)[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName
[2m[36m(pid=78320)[0m     @     0x5640b0905643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78320)[0m     @     0x5640b087a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78320)[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName
[2m[36m(pid=78200)[0m     @     0x7fc8061e55cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78200)[0m     @     0x7fc8062ed148 at::Tensor::copy_()
[2m[36m(pid=78200)[0m     @     0x7fc80c5a3bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78200)[0m     @     0x5577cfe26fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78200)[0m     @     0x5577cfd81b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78200)[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78200)[0m     @     0x5577cfe0da20 method_vectorcall
[2m[36m(pid=78200)[0m     @     0x5577cfd81bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78200)[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78200)[0m     @     0x5577cfe0d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78200)[0m     @     0x5577cfd82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78200)[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78200)[0m     @     0x5577cfe0d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78200)[0m     @     0x5577cfd82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78200)[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78200)[0m     @     0x5577cfe0d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78200)[0m     @     0x5577cfd82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78200)[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78187)[0m     @     0x7ee22964b148 at::Tensor::copy_()
[2m[36m(pid=78187)[0m     @     0x7ee22f901bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78187)[0m     @     0x55d12d9dcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78187)[0m     @     0x55d12d937b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78187)[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78187)[0m     @     0x55d12d9c3a20 method_vectorcall
[2m[36m(pid=78187)[0m     @     0x55d12d937bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78187)[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78187)[0m     @     0x55d12d9c3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78187)[0m     @     0x55d12d938689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78187)[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78187)[0m     @     0x55d12d9c3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78187)[0m     @     0x55d12d938689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78187)[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78187)[0m     @     0x55d12d9c3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78187)[0m     @     0x55d12d938689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78187)[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=78237)[0m     @     0x7ef64984e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78237)[0m     @     0x7ef649956148 at::Tensor::copy_()
[2m[36m(pid=78237)[0m     @     0x7ef64fc0cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78237)[0m     @     0x55aae00b9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78237)[0m     @     0x55aae0014b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78237)[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78237)[0m     @     0x55aae00a0a20 method_vectorcall
[2m[36m(pid=78237)[0m     @     0x55aae0014bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78237)[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78237)[0m     @     0x55aae00a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78237)[0m     @     0x55aae0015689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78237)[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78237)[0m     @     0x55aae00a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78237)[0m     @     0x55aae0015689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78237)[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78237)[0m     @     0x55aae00a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78197)[0m     @     0x7f590e93d5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78197)[0m     @     0x7f590ea45148 at::Tensor::copy_()
[2m[36m(pid=78197)[0m     @     0x7f5914cfbbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78197)[0m     @     0x55c66f224fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78197)[0m     @     0x55c66f17fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78197)[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78197)[0m     @     0x55c66f20ba20 method_vectorcall
[2m[36m(pid=78197)[0m     @     0x55c66f17fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78197)[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78197)[0m     @     0x55c66f20b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78197)[0m     @     0x55c66f180689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78197)[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78197)[0m     @     0x55c66f20b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78197)[0m     @     0x55c66f180689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78197)[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78197)[0m     @     0x55c66f20b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78197)[0m     @     0x55c66f180689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78197)[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78252)[0m     @     0x7f6dec1765cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78252)[0m     @     0x7f6dec27e148 at::Tensor::copy_()
[2m[36m(pid=78252)[0m     @     0x7f6df2534bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78252)[0m     @     0x5641419f9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78252)[0m     @     0x564141954b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78252)[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78252)[0m     @     0x5641419e0a20 method_vectorcall
[2m[36m(pid=78252)[0m     @     0x564141954bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78252)[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78252)[0m     @     0x5641419e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78252)[0m     @     0x564141955689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78252)[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78252)[0m     @     0x5641419e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78252)[0m     @     0x564141955689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78252)[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78252)[0m     @     0x5641419e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78252)[0m     @     0x564141955689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78252)[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78184)[0m     @     0x7f8789d4bed4 at::native::copy_()
[2m[36m(pid=78184)[0m     @     0x7f878a48e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78243)[0m     @     0x7f47482e1bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78243)[0m     @     0x556445605fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78243)[0m     @     0x556445560b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78243)[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78243)[0m     @     0x5564455eca20 method_vectorcall
[2m[36m(pid=78243)[0m     @     0x556445560bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78243)[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78243)[0m     @     0x5564455ec643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78243)[0m     @     0x556445561689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78243)[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78243)[0m     @     0x5564455ec643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78243)[0m     @     0x556445561689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78243)[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78243)[0m     @     0x5564455ec643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78243)[0m     @     0x556445561689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78243)[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78274)[0m     @     0x7f18500385cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78274)[0m     @     0x7f1850140148 at::Tensor::copy_()
[2m[36m(pid=78274)[0m     @     0x7f18563f6bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78274)[0m     @     0x55a4f7269fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78274)[0m     @     0x55a4f71c4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78274)[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78274)[0m     @     0x55a4f7250a20 method_vectorcall
[2m[36m(pid=78274)[0m     @     0x55a4f71c4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78274)[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78274)[0m     @     0x55a4f7250643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78274)[0m     @     0x55a4f71c5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78274)[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78274)[0m     @     0x55a4f7250643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78274)[0m     @     0x55a4f71c5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78274)[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78274)[0m     @     0x55a4f7250643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78274)[0m     @     0x55a4f71c5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78274)[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78257)[0m     @     0x7f9352038bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78257)[0m     @     0x558ac9a10fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78257)[0m     @     0x558ac996bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78257)[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78257)[0m     @     0x558ac99f7a20 method_vectorcall
[2m[36m(pid=78257)[0m     @     0x558ac996bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78257)[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78257)[0m     @     0x558ac99f7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78257)[0m     @     0x558ac996c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78257)[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78257)[0m     @     0x558ac99f7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78257)[0m     @     0x558ac996c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78257)[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78257)[0m     @     0x558ac99f7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78257)[0m     @     0x558ac996c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78257)[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78247)[0m     @     0x7f5bad73c5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78247)[0m     @     0x7f5bad844148 at::Tensor::copy_()
[2m[36m(pid=78247)[0m     @     0x7f5bb3afabd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78247)[0m     @     0x5559f62bbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78247)[0m     @     0x5559f6216b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78247)[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=78247)[0m     @     0x5559f62a2a20 method_vectorcall
[2m[36m(pid=78247)[0m     @     0x5559f6216bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78247)[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=78247)[0m     @     0x5559f62a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78247)[0m     @     0x5559f6217689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78247)[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=78247)[0m     @     0x5559f62a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78247)[0m     @     0x5559f6217689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78247)[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=78247)[0m     @     0x5559f62a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78247)[0m     @     0x5559f6217689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78247)[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=78240)[0m     @     0x7f866019e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78240)[0m     @     0x7f86602a6148 at::Tensor::copy_()
[2m[36m(pid=78240)[0m     @     0x7f866655cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78240)[0m     @     0x55b31a3f7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78240)[0m     @     0x55b31a352b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78240)[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78240)[0m     @     0x55b31a3dea20 method_vectorcall
[2m[36m(pid=78240)[0m     @     0x55b31a352bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78240)[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78240)[0m     @     0x55b31a3de643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78240)[0m     @     0x55b31a353689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78240)[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78240)[0m     @     0x55b31a3de643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78240)[0m     @     0x55b31a353689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78240)[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78240)[0m     @     0x55b31a3de643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78240)[0m     @     0x55b31a353689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78240)[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78272)[0m     @     0x7f20ac6495cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78272)[0m     @     0x7f20ac751148 at::Tensor::copy_()
[2m[36m(pid=78272)[0m     @     0x7f20b2a07bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78272)[0m     @     0x55dc46faffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78272)[0m     @     0x55dc46f0ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78272)[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName
[2m[36m(pid=78272)[0m     @     0x55dc46f96a20 method_vectorcall
[2m[36m(pid=78272)[0m     @     0x55dc46f0abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78272)[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName
[2m[36m(pid=78272)[0m     @     0x55dc46f96643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78272)[0m     @     0x55dc46f0b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78272)[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName
[2m[36m(pid=78272)[0m     @     0x55dc46f96643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78272)[0m     @     0x55dc46f0b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78272)[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName
[2m[36m(pid=78272)[0m     @     0x55dc46f96643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78272)[0m     @     0x55dc46f0b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78272)[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName
[2m[36m(pid=78210)[0m     @     0x555ca7d98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78210)[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName
[2m[36m(pid=78206)[0m     @     0x7ed9ea50fc3f at::native::copy_impl()
[2m[36m(pid=78206)[0m     @     0x7ed9ea510ed4 at::native::copy_()
[2m[36m(pid=78206)[0m     @     0x7ed9eac535cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78277)[0m     @     0x7fa442cf0009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78277)[0m     @     0x7fa442ceec3f at::native::copy_impl()
[2m[36m(pid=78277)[0m     @     0x7fa442cefed4 at::native::copy_()
[2m[36m(pid=78214)[0m     @     0x7f3bd6cad009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78214)[0m     @     0x7f3bd6cabc3f at::native::copy_impl()
[2m[36m(pid=78214)[0m     @     0x7f3bd6caced4 at::native::copy_()
[2m[36m(pid=78182)[0m     @     0x7f06db8355cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78182)[0m     @     0x7f06db93d148 at::Tensor::copy_()
[2m[36m(pid=78182)[0m     @     0x7f06dd534989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78259)[0m     @     0x7f348253acfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78259)[0m     @     0x7f347f578009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78259)[0m     @     0x7f347f576c3f at::native::copy_impl()
[2m[36m(pid=78188)[0m     @     0x7f1967c3a009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78188)[0m     @     0x7f1967c38c3f at::native::copy_impl()
[2m[36m(pid=78188)[0m     @     0x7f1967c39ed4 at::native::copy_()
[2m[36m(pid=78262)[0m     @     0x7efd4c865c3f at::native::copy_impl()
[2m[36m(pid=78262)[0m     @     0x7efd4c866ed4 at::native::copy_()
[2m[36m(pid=78262)[0m     @     0x7efd4cfa95cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78286)[0m     @     0x7eeb68532009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78286)[0m     @     0x7eeb68530c3f at::native::copy_impl()
[2m[36m(pid=78286)[0m     @     0x7eeb68531ed4 at::native::copy_()
[2m[36m(pid=78250)[0m     @     0x7f88f1421ed4 at::native::copy_()
[2m[36m(pid=78250)[0m     @     0x7f88f1b645cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78199)[0m     @     0x7f969ba5bed4 at::native::copy_()
[2m[36m(pid=78199)[0m     @     0x7f969c19e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78199)[0m     @     0x7f969c2a6148 at::Tensor::copy_()
[2m[36m(pid=78304)[0m     @     0x7fbe60cf1ed4 at::native::copy_()
[2m[36m(pid=78304)[0m     @     0x7fbe614345cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78304)[0m     @     0x7fbe6153c148 at::Tensor::copy_()
[2m[36m(pid=78281)[0m     @     0x7f7cb58b9e11 at::TensorIterator::for_each()
[2m[36m(pid=78281)[0m     @     0x7f7cb85d2c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78281)[0m     @     0x7f7cb85f5cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78281)[0m     @     0x7f7cb5633009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78281)[0m     @     0x7f7cb5631c3f at::native::copy_impl()
[2m[36m(pid=78281)[0m     @     0x7f7cb5632ed4 at::native::copy_()
[2m[36m(pid=78180)[0m     @     0x7fb68ebd9c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78180)[0m     @     0x7fb68ebfccfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78180)[0m     @     0x7fb68bc3a009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78180)[0m     @     0x7fb68bc38c3f at::native::copy_impl()
[2m[36m(pid=78180)[0m     @     0x7fb68bc39ed4 at::native::copy_()
[2m[36m(pid=78211)[0m     @     0x7f870d392977 at::TensorIterator::serial_for_each()
[2m[36m(pid=78211)[0m     @     0x7f870d392b53 at::TensorIterator::for_each()
[2m[36m(pid=78204)[0m     @     0x7ef6507caed4 at::native::copy_()
[2m[36m(pid=78204)[0m     @     0x7ef650f0d5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78204)[0m     @     0x7ef651015148 at::Tensor::copy_()
[2m[36m(pid=78218)[0m     @     0x7f887a18ded4 at::native::copy_()
[2m[36m(pid=78218)[0m     @     0x7f887a8d05cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78218)[0m     @     0x7f887a9d8148 at::Tensor::copy_()
[2m[36m(pid=78196)[0m     @     0x7f7a6abc5ed4 at::native::copy_()
[2m[36m(pid=78196)[0m     @     0x7f7a6b3085cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78196)[0m     @     0x7f7a6b410148 at::Tensor::copy_()
[2m[36m(pid=78242)[0m     @     0x7f037e510ed4 at::native::copy_()
[2m[36m(pid=78242)[0m     @     0x7f037ec535cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78242)[0m     @     0x7f037ed5b148 at::Tensor::copy_()
[2m[36m(pid=78242)[0m     @     0x7f0380952989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78185)[0m     @     0x7f147469e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78185)[0m     @     0x7f14747a6148 at::Tensor::copy_()
[2m[36m(pid=78185)[0m     @     0x7f147639d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78185)[0m     @     0x7f147469e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78216)[0m     @     0x7fb3d70f1c3f at::native::copy_impl()
[2m[36m(pid=78216)[0m     @     0x7fb3d70f2ed4 at::native::copy_()
[2m[36m(pid=78216)[0m     @     0x7fb3d78355cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78216)[0m     @     0x7fb3d793d148 at::Tensor::copy_()
[2m[36m(pid=78189)[0m     @     0x7f327f8f5ed4 at::native::copy_()
[2m[36m(pid=78189)[0m     @     0x7f32800385cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78189)[0m     @     0x7f3280140148 at::Tensor::copy_()
[2m[36m(pid=78189)[0m     @     0x7f3281d37989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78322)[0m     @     0x7ef604904148 at::Tensor::copy_()
[2m[36m(pid=78322)[0m     @     0x7ef6064fb989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78322)[0m     @     0x7ef6047fc5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78290)[0m     @     0x7f6586f375cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78290)[0m     @     0x7f658703f148 at::Tensor::copy_()
[2m[36m(pid=78178)[0m     @     0x7f948b17b5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78178)[0m     @     0x7f948b283148 at::Tensor::copy_()
[2m[36m(pid=78178)[0m     @     0x7f948ce7a989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78246)[0m     @     0x7f37188ce5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78246)[0m     @     0x7f37189d6148 at::Tensor::copy_()
[2m[36m(pid=78246)[0m     @     0x7f371a5cd989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78268)[0m     @     0x7f39ca82e148 at::Tensor::copy_()
[2m[36m(pid=78268)[0m     @     0x7f39cc425989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78256)[0m     @     0x7fc52f5c6009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78256)[0m     @     0x7fc52f5c4c3f at::native::copy_impl()
[2m[36m(pid=78256)[0m     @     0x7fc52f5c5ed4 at::native::copy_()
[2m[36m(pid=78181)[0m     @     0x7ecf3cdd65cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78181)[0m     @     0x7ecf3cede148 at::Tensor::copy_()
[2m[36m(pid=78181)[0m     @     0x7ecf3ead5989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78202)[0m     @     0x7f461532b148 at::Tensor::copy_()
[2m[36m(pid=78202)[0m     @     0x7f461b5e1bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78202)[0m     @     0x563b4b58cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78202)[0m     @     0x563b4b4e7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78202)[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName
[2m[36m(pid=78202)[0m     @     0x563b4b573a20 method_vectorcall
[2m[36m(pid=78202)[0m     @     0x563b4b4e7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78202)[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName
[2m[36m(pid=78202)[0m     @     0x563b4b573643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78202)[0m     @     0x563b4b4e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78202)[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName
[2m[36m(pid=78202)[0m     @     0x563b4b573643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78202)[0m     @     0x563b4b4e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78202)[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName
[2m[36m(pid=78202)[0m     @     0x563b4b573643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78202)[0m     @     0x563b4b4e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78202)[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName
[2m[36m(pid=78254)[0m     @     0x7efaf640bed4 at::native::copy_()
[2m[36m(pid=78254)[0m     @     0x7efaf6b4e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78190)[0m     @     0x7ee9882f7b53 at::TensorIterator::for_each()
[2m[36m(pid=78245)[0m     @     0x7f0affe68148 at::Tensor::copy_()
[2m[36m(pid=78245)[0m     @     0x7f0b01a5f989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78198)[0m     @     0x7f71baa05148 at::Tensor::copy_()
[2m[36m(pid=78198)[0m     @     0x7f71bc5fc989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78255)[0m     @     0x7f91ca31f009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78255)[0m     @     0x7f91ca31dc3f at::native::copy_impl()
[2m[36m(pid=78255)[0m     @     0x7f91ca31eed4 at::native::copy_()
[2m[36m(pid=78192)[0m     @     0x7f82a3f5bed4 at::native::copy_()
[2m[36m(pid=78192)[0m     @     0x7f82a469e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78285)[0m     @     0x7f8056510ed4 at::native::copy_()
[2m[36m(pid=78285)[0m     @     0x7f8056c535cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78248)[0m     @     0x7f29537235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78248)[0m     @     0x7f295382b148 at::Tensor::copy_()
[2m[36m(pid=78273)[0m     @     0x7f68cf3e3148 at::Tensor::copy_()
[2m[36m(pid=78273)[0m     @     0x7f68d0fda989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78179)[0m     @     0x55a8ac35c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78179)[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78179)[0m     @     0x55a8ac3e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78179)[0m     @     0x55a8ac35c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78179)[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78179)[0m     @     0x55a8ac3e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78179)[0m     @     0x55a8ac35c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78179)[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=78258)[0m     @     0x7faec88cc009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78258)[0m     @     0x7faec88cac3f at::native::copy_impl()
[2m[36m(pid=78258)[0m     @     0x7faec88cbed4 at::native::copy_()
[2m[36m(pid=78258)[0m     @     0x7faec900e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78209)[0m     @     0x7f2211e7d148 at::Tensor::copy_()
[2m[36m(pid=78209)[0m     @     0x7f2213a74989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78209)[0m     @     0x7f2211d755cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78194)[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78194)[0m     @     0x55b10effc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78194)[0m     @     0x55b10ef71689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78194)[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78237)[0m     @     0x55aae0015689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78237)[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78184)[0m     @     0x7f878a596148 at::Tensor::copy_()
[2m[36m(pid=78184)[0m     @     0x7f878c18d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78184)[0m     @     0x7f878a48e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78206)[0m     @     0x7ed9ead5b148 at::Tensor::copy_()
[2m[36m(pid=78206)[0m     @     0x7ed9ec952989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78206)[0m     @     0x7ed9eac535cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78277)[0m     @     0x7fa4434325cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78277)[0m     @     0x7fa44353a148 at::Tensor::copy_()
[2m[36m(pid=78277)[0m     @     0x7fa445131989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78214)[0m     @     0x7f3bd73ef5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78214)[0m     @     0x7f3bd74f7148 at::Tensor::copy_()
[2m[36m(pid=78214)[0m     @     0x7f3bd90ee989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78214)[0m     @     0x7f3bd73ef5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78182)[0m     @     0x7f06db8355cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78182)[0m     @     0x7f06db93d148 at::Tensor::copy_()
[2m[36m(pid=78182)[0m     @     0x7f06e1bf3bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78182)[0m     @     0x564b1595cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78182)[0m     @     0x564b158b7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78182)[0m     @     0x564b15942baf _PyEval_EvalCodeWithName
[2m[36m(pid=78182)[0m     @     0x564b15943a20 method_vectorcall
[2m[36m(pid=78182)[0m     @     0x564b158b7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78182)[0m     @     0x564b15942baf _PyEval_EvalCodeWithName
[2m[36m(pid=78182)[0m     @     0x564b15943643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78182)[0m     @     0x564b158b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78182)[0m     @     0x564b15942baf _PyEval_EvalCodeWithName
[2m[36m(pid=78182)[0m     @     0x564b15943643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78182)[0m     @     0x564b158b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78182)[0m     @     0x564b15942baf _PyEval_EvalCodeWithName
[2m[36m(pid=78182)[0m     @     0x564b15943643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78182)[0m     @     0x564b158b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78182)[0m     @     0x564b15942baf _PyEval_EvalCodeWithName
[2m[36m(pid=78259)[0m     @     0x7f347f577ed4 at::native::copy_()
[2m[36m(pid=78259)[0m     @     0x7f347fcba5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78259)[0m     @     0x7f347fdc2148 at::Tensor::copy_()
[2m[36m(pid=78188)[0m     @     0x7f196837c5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78188)[0m     @     0x7f1968484148 at::Tensor::copy_()
[2m[36m(pid=78188)[0m     @     0x7f196a07b989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78188)[0m     @     0x7f196837c5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78262)[0m     @     0x7efd4d0b1148 at::Tensor::copy_()
[2m[36m(pid=78262)[0m     @     0x7efd4eca8989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78262)[0m     @     0x7efd4cfa95cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78286)[0m     @     0x7eeb68c745cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78286)[0m     @     0x7eeb68d7c148 at::Tensor::copy_()
[2m[36m(pid=78286)[0m     @     0x7eeb6a973989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78286)[0m     @     0x7eeb68c745cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78250)[0m     @     0x7f88f1c6c148 at::Tensor::copy_()
[2m[36m(pid=78250)[0m     @     0x7f88f3863989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78250)[0m     @     0x7f88f1b645cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78250)[0m     @     0x7f88f1c6c148 at::Tensor::copy_()
[2m[36m(pid=78199)[0m     @     0x7f969de9d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78199)[0m     @     0x7f969c19e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78199)[0m     @     0x7f969c2a6148 at::Tensor::copy_()
[2m[36m(pid=78199)[0m     @     0x7f96a255cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78199)[0m     @     0x5557b6cfdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78199)[0m     @     0x5557b6c58b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78199)[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78199)[0m     @     0x5557b6ce4a20 method_vectorcall
[2m[36m(pid=78199)[0m     @     0x5557b6c58bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78199)[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78304)[0m     @     0x7fbe63133989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78304)[0m     @     0x7fbe614345cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78280)[0m     @     0x7f55bb028ed4 at::native::copy_()
[2m[36m(pid=78281)[0m     @     0x7f7cb5d755cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78180)[0m     @     0x7fb68c37c5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78180)[0m     @     0x7fb68c484148 at::Tensor::copy_()
[2m[36m(pid=78180)[0m     @     0x7fb68e07b989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78211)[0m     @     0x7f870d392e11 at::TensorIterator::for_each()
[2m[36m(pid=78204)[0m     @     0x7ef652c0c989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78204)[0m     @     0x7ef650f0d5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78218)[0m     @     0x7f887c5cf989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78218)[0m     @     0x7f887a8d05cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78196)[0m     @     0x7f7a6d007989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78196)[0m     @     0x7f7a6b3085cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78242)[0m     @     0x7f037ec535cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78242)[0m     @     0x7f037ed5b148 at::Tensor::copy_()
[2m[36m(pid=78242)[0m     @     0x7f0385011bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78242)[0m     @     0x564268e2afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78242)[0m     @     0x564268d85b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78242)[0m     @     0x564268e10baf _PyEval_EvalCodeWithName
[2m[36m(pid=78242)[0m     @     0x564268e11a20 method_vectorcall
[2m[36m(pid=78242)[0m     @     0x564268d85bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78242)[0m     @     0x564268e10baf _PyEval_EvalCodeWithName
[2m[36m(pid=78242)[0m     @     0x564268e11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78242)[0m     @     0x564268d86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78242)[0m     @     0x564268e10baf _PyEval_EvalCodeWithName
[2m[36m(pid=78242)[0m     @     0x564268e11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78242)[0m     @     0x564268d86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78242)[0m     @     0x564268e10baf _PyEval_EvalCodeWithName
[2m[36m(pid=78242)[0m     @     0x564268e11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78242)[0m     @     0x564268d86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78242)[0m     @     0x564268e10baf _PyEval_EvalCodeWithName
[2m[36m(pid=78185)[0m     @     0x7f14747a6148 at::Tensor::copy_()
[2m[36m(pid=78185)[0m     @     0x7f147aa5cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78185)[0m     @     0x564e5eae2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78185)[0m     @     0x564e5ea3db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78185)[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName
[2m[36m(pid=78185)[0m     @     0x564e5eac9a20 method_vectorcall
[2m[36m(pid=78185)[0m     @     0x564e5ea3dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78185)[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName
[2m[36m(pid=78185)[0m     @     0x564e5eac9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78185)[0m     @     0x564e5ea3e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78185)[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName
[2m[36m(pid=78185)[0m     @     0x564e5eac9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78185)[0m     @     0x564e5ea3e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78185)[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName
[2m[36m(pid=78185)[0m     @     0x564e5eac9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78185)[0m     @     0x564e5ea3e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78185)[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName
[2m[36m(pid=78216)[0m     @     0x7fb3d9534989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78216)[0m     @     0x7fb3d78355cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78216)[0m     @     0x7fb3d793d148 at::Tensor::copy_()
[2m[36m(pid=78216)[0m     @     0x7fb3ddbf3bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78216)[0m     @     0x564758455fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78216)[0m     @     0x5647583b0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78216)[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78216)[0m     @     0x56475843ca20 method_vectorcall
[2m[36m(pid=78216)[0m     @     0x5647583b0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78216)[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78216)[0m     @     0x56475843c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78216)[0m     @     0x5647583b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78216)[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78216)[0m     @     0x56475843c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78216)[0m     @     0x5647583b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78216)[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78216)[0m     @     0x56475843c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78216)[0m     @     0x5647583b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78216)[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78189)[0m     @     0x7f32800385cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78189)[0m     @     0x7f3280140148 at::Tensor::copy_()
[2m[36m(pid=78189)[0m     @     0x7f32863f6bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78189)[0m     @     0x55e03194efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78189)[0m     @     0x55e0318a9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78189)[0m     @     0x55e031934baf _PyEval_EvalCodeWithName
[2m[36m(pid=78189)[0m     @     0x55e031935a20 method_vectorcall
[2m[36m(pid=78189)[0m     @     0x55e0318a9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78189)[0m     @     0x55e031934baf _PyEval_EvalCodeWithName
[2m[36m(pid=78189)[0m     @     0x55e031935643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78189)[0m     @     0x55e0318aa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78189)[0m     @     0x55e031934baf _PyEval_EvalCodeWithName
[2m[36m(pid=78189)[0m     @     0x55e031935643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78189)[0m     @     0x55e0318aa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78189)[0m     @     0x55e031934baf _PyEval_EvalCodeWithName
[2m[36m(pid=78189)[0m     @     0x55e031935643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78189)[0m     @     0x55e0318aa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78189)[0m     @     0x55e031934baf _PyEval_EvalCodeWithName
[2m[36m(pid=78322)[0m     @     0x7ef604904148 at::Tensor::copy_()
[2m[36m(pid=78322)[0m     @     0x7ef60abbabd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78322)[0m     @     0x55960dd7bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78322)[0m     @     0x55960dcd6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78322)[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=78322)[0m     @     0x55960dd62a20 method_vectorcall
[2m[36m(pid=78322)[0m     @     0x55960dcd6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78322)[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=78322)[0m     @     0x55960dd62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78322)[0m     @     0x55960dcd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78322)[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=78322)[0m     @     0x55960dd62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78322)[0m     @     0x55960dcd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78322)[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=78322)[0m     @     0x55960dd62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78322)[0m     @     0x55960dcd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78322)[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=78290)[0m     @     0x7f6588c36989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78290)[0m     @     0x7f6586f375cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78290)[0m     @     0x7f658703f148 at::Tensor::copy_()
[2m[36m(pid=78178)[0m     @     0x7f948b17b5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78178)[0m     @     0x7f948b283148 at::Tensor::copy_()
[2m[36m(pid=78178)[0m     @     0x7f9491539bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78178)[0m     @     0x5578546a5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78178)[0m     @     0x557854600b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78178)[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78178)[0m     @     0x55785468ca20 method_vectorcall
[2m[36m(pid=78178)[0m     @     0x557854600bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78178)[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78178)[0m     @     0x55785468c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78178)[0m     @     0x557854601689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78178)[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78178)[0m     @     0x55785468c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78178)[0m     @     0x557854601689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78178)[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78178)[0m     @     0x55785468c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78178)[0m     @     0x557854601689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78178)[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78246)[0m     @     0x7f37188ce5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78246)[0m     @     0x7f37189d6148 at::Tensor::copy_()
[2m[36m(pid=78246)[0m     @     0x7f371ec8cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78246)[0m     @     0x5637395fdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78246)[0m     @     0x563739558b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78246)[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78246)[0m     @     0x5637395e4a20 method_vectorcall
[2m[36m(pid=78246)[0m     @     0x563739558bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78246)[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78246)[0m     @     0x5637395e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78246)[0m     @     0x563739559689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78246)[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78246)[0m     @     0x5637395e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78246)[0m     @     0x563739559689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78246)[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78246)[0m     @     0x5637395e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78246)[0m     @     0x563739559689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78246)[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78268)[0m     @     0x7f39ca7265cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78268)[0m     @     0x7f39ca82e148 at::Tensor::copy_()
[2m[36m(pid=78268)[0m     @     0x7f39d0ae4bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78268)[0m     @     0x5572a4f30fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78268)[0m     @     0x5572a4e8bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78268)[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName
[2m[36m(pid=78268)[0m     @     0x5572a4f17a20 method_vectorcall
[2m[36m(pid=78268)[0m     @     0x5572a4e8bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78268)[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName
[2m[36m(pid=78268)[0m     @     0x5572a4f17643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78268)[0m     @     0x5572a4e8c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78268)[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName
[2m[36m(pid=78268)[0m     @     0x5572a4f17643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78268)[0m     @     0x5572a4e8c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78268)[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName
[2m[36m(pid=78268)[0m     @     0x5572a4f17643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78268)[0m     @     0x5572a4e8c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78268)[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName
[2m[36m(pid=78256)[0m     @     0x7fc52fd085cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78256)[0m     @     0x7fc52fe10148 at::Tensor::copy_()
[2m[36m(pid=78256)[0m     @     0x7fc531a07989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78181)[0m     @     0x7ecf3cdd65cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78181)[0m     @     0x7ecf3cede148 at::Tensor::copy_()
[2m[36m(pid=78181)[0m     @     0x7ecf43194bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78181)[0m     @     0x55da0edf1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78181)[0m     @     0x55da0ed4cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78181)[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78181)[0m     @     0x55da0edd8a20 method_vectorcall
[2m[36m(pid=78181)[0m     @     0x55da0ed4cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78181)[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78181)[0m     @     0x55da0edd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78181)[0m     @     0x55da0ed4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78181)[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78181)[0m     @     0x55da0edd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78181)[0m     @     0x55da0ed4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78181)[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78181)[0m     @     0x55da0edd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78181)[0m     @     0x55da0ed4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78181)[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78254)[0m     @     0x7efaf6c56148 at::Tensor::copy_()
[2m[36m(pid=78254)[0m     @     0x7efaf884d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78254)[0m     @     0x7efaf6b4e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78190)[0m     @     0x7ee9882f7e11 at::TensorIterator::for_each()
[2m[36m(pid=78190)[0m     @     0x7ee98b010c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78190)[0m     @     0x7ee98b033cfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78245)[0m     @     0x7f0affd605cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78245)[0m     @     0x7f0affe68148 at::Tensor::copy_()
[2m[36m(pid=78245)[0m     @     0x7f0b0611ebd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78245)[0m     @     0x55a5070d7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78245)[0m     @     0x55a507032b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78245)[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78245)[0m     @     0x55a5070bea20 method_vectorcall
[2m[36m(pid=78245)[0m     @     0x55a507032bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78245)[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78245)[0m     @     0x55a5070be643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78245)[0m     @     0x55a507033689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78245)[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78245)[0m     @     0x55a5070be643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78245)[0m     @     0x55a507033689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78245)[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78245)[0m     @     0x55a5070be643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78245)[0m     @     0x55a507033689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78245)[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78198)[0m     @     0x7f71ba8fd5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78198)[0m     @     0x7f71baa05148 at::Tensor::copy_()
[2m[36m(pid=78198)[0m     @     0x7f71c0cbbbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78198)[0m     @     0x5558e60e3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78198)[0m     @     0x5558e603eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78198)[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78198)[0m     @     0x5558e60caa20 method_vectorcall
[2m[36m(pid=78198)[0m     @     0x5558e603ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78198)[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78198)[0m     @     0x5558e60ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78198)[0m     @     0x5558e603f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78198)[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78198)[0m     @     0x5558e60ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78198)[0m     @     0x5558e603f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78198)[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78198)[0m     @     0x5558e60ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78198)[0m     @     0x5558e603f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78198)[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78255)[0m     @     0x7f91caa615cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78255)[0m     @     0x7f91cab69148 at::Tensor::copy_()
[2m[36m(pid=78255)[0m     @     0x7f91cc760989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78192)[0m     @     0x7f82a47a6148 at::Tensor::copy_()
[2m[36m(pid=78192)[0m     @     0x7f82a639d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78192)[0m     @     0x7f82a469e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78285)[0m     @     0x7f8056d5b148 at::Tensor::copy_()
[2m[36m(pid=78285)[0m     @     0x7f8058952989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78285)[0m     @     0x7f8056c535cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78285)[0m     @     0x7f8056d5b148 at::Tensor::copy_()
[2m[36m(pid=78285)[0m     @     0x7f805d011bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78285)[0m     @     0x55dbf075bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78248)[0m     @     0x7f2955422989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78248)[0m     @     0x7f29537235cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78248)[0m     @     0x7f295382b148 at::Tensor::copy_()
[2m[36m(pid=78248)[0m     @     0x7f2959ae1bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78248)[0m     @     0x55c0820b8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78248)[0m     @     0x55c082013b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78248)[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78248)[0m     @     0x55c08209fa20 method_vectorcall
[2m[36m(pid=78248)[0m     @     0x55c082013bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78248)[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78248)[0m     @     0x55c08209f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78248)[0m     @     0x55c082014689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78248)[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78248)[0m     @     0x55c08209f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78248)[0m     @     0x55c082014689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78248)[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78248)[0m     @     0x55c08209f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78248)[0m     @     0x55c082014689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78248)[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78273)[0m     @     0x7f68cf2db5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78273)[0m     @     0x7f68cf3e3148 at::Tensor::copy_()
[2m[36m(pid=78273)[0m     @     0x7f68d5699bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78273)[0m     @     0x56469afadfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78273)[0m     @     0x56469af08b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78273)[0m     @     0x56469af93baf _PyEval_EvalCodeWithName
[2m[36m(pid=78273)[0m     @     0x56469af94a20 method_vectorcall
[2m[36m(pid=78273)[0m     @     0x56469af08bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78273)[0m     @     0x56469af93baf _PyEval_EvalCodeWithName
[2m[36m(pid=78273)[0m     @     0x56469af94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78273)[0m     @     0x56469af09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78273)[0m     @     0x56469af93baf _PyEval_EvalCodeWithName
[2m[36m(pid=78273)[0m     @     0x56469af94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78273)[0m     @     0x56469af09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78273)[0m     @     0x56469af93baf _PyEval_EvalCodeWithName
[2m[36m(pid=78273)[0m     @     0x56469af94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78273)[0m     @     0x56469af09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78273)[0m     @     0x56469af93baf _PyEval_EvalCodeWithName
[2m[36m(pid=78258)[0m     @     0x7faec9116148 at::Tensor::copy_()
[2m[36m(pid=78258)[0m     @     0x7faecad0d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78209)[0m     @     0x7f2211e7d148 at::Tensor::copy_()
[2m[36m(pid=78209)[0m     @     0x7f2218133bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78209)[0m     @     0x560229878fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78209)[0m     @     0x5602297d3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78209)[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78209)[0m     @     0x56022985fa20 method_vectorcall
[2m[36m(pid=78209)[0m     @     0x5602297d3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78209)[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78209)[0m     @     0x56022985f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78209)[0m     @     0x5602297d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78209)[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78209)[0m     @     0x56022985f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78209)[0m     @     0x5602297d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78209)[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78209)[0m     @     0x56022985f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78209)[0m     @     0x5602297d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78209)[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78184)[0m     @     0x7f878a596148 at::Tensor::copy_()
[2m[36m(pid=78184)[0m     @     0x7f879084cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78184)[0m     @     0x562793d34fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78184)[0m     @     0x562793c8fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78184)[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78184)[0m     @     0x562793d1ba20 method_vectorcall
[2m[36m(pid=78184)[0m     @     0x562793c8fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78184)[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78184)[0m     @     0x562793d1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78184)[0m     @     0x562793c90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78184)[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78184)[0m     @     0x562793d1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78184)[0m     @     0x562793c90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78184)[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78184)[0m     @     0x562793d1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78184)[0m     @     0x562793c90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78184)[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78206)[0m     @     0x7ed9ead5b148 at::Tensor::copy_()
[2m[36m(pid=78206)[0m     @     0x7ed9f1011bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78206)[0m     @     0x55db22644fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78206)[0m     @     0x55db2259fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78206)[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78206)[0m     @     0x55db2262ba20 method_vectorcall
[2m[36m(pid=78206)[0m     @     0x55db2259fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78206)[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78206)[0m     @     0x55db2262b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78206)[0m     @     0x55db225a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78206)[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78206)[0m     @     0x55db2262b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78206)[0m     @     0x55db225a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78206)[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78206)[0m     @     0x55db2262b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78206)[0m     @     0x55db225a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78206)[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78277)[0m     @     0x7fa4434325cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78277)[0m     @     0x7fa44353a148 at::Tensor::copy_()
[2m[36m(pid=78277)[0m     @     0x7fa4497f0bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78277)[0m     @     0x561594dddfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78277)[0m     @     0x561594d38b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78277)[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78277)[0m     @     0x561594dc4a20 method_vectorcall
[2m[36m(pid=78277)[0m     @     0x561594d38bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78277)[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78277)[0m     @     0x561594dc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78277)[0m     @     0x561594d39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78277)[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78277)[0m     @     0x561594dc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78277)[0m     @     0x561594d39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78277)[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78277)[0m     @     0x561594dc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78277)[0m     @     0x561594d39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78277)[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78214)[0m     @     0x7f3bd74f7148 at::Tensor::copy_()
[2m[36m(pid=78214)[0m     @     0x7f3bdd7adbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78214)[0m     @     0x564de17a5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78214)[0m     @     0x564de1700b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78214)[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78214)[0m     @     0x564de178ca20 method_vectorcall
[2m[36m(pid=78214)[0m     @     0x564de1700bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78214)[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78214)[0m     @     0x564de178c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78214)[0m     @     0x564de1701689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78214)[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78214)[0m     @     0x564de178c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78214)[0m     @     0x564de1701689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78214)[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78214)[0m     @     0x564de178c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78214)[0m     @     0x564de1701689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78214)[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78259)[0m     @     0x7f34819b9989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78259)[0m     @     0x7f347fcba5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78259)[0m     @     0x7f347fdc2148 at::Tensor::copy_()
[2m[36m(pid=78259)[0m     @     0x7f3486078bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78259)[0m     @     0x55e54a9f1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78259)[0m     @     0x55e54a94cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78259)[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78259)[0m     @     0x55e54a9d8a20 method_vectorcall
[2m[36m(pid=78259)[0m     @     0x55e54a94cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78259)[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78259)[0m     @     0x55e54a9d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78259)[0m     @     0x55e54a94d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78259)[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78259)[0m     @     0x55e54a9d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78259)[0m     @     0x55e54a94d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78259)[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78259)[0m     @     0x55e54a9d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78259)[0m     @     0x55e54a94d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78259)[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=78188)[0m     @     0x7f1968484148 at::Tensor::copy_()
[2m[36m(pid=78188)[0m     @     0x7f196e31ebd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78188)[0m     @     0x559ef41a8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78188)[0m     @     0x559ef4103b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78188)[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78188)[0m     @     0x559ef418fa20 method_vectorcall
[2m[36m(pid=78188)[0m     @     0x559ef4103bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78188)[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78188)[0m     @     0x559ef418f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78188)[0m     @     0x559ef4104689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78188)[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78188)[0m     @     0x559ef418f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78188)[0m     @     0x559ef4104689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78188)[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78188)[0m     @     0x559ef418f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78188)[0m     @     0x559ef4104689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78188)[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78262)[0m     @     0x7efd4d0b1148 at::Tensor::copy_()
[2m[36m(pid=78262)[0m     @     0x7efd53367bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78262)[0m     @     0x56120eb09fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78262)[0m     @     0x56120ea64b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78262)[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78262)[0m     @     0x56120eaf0a20 method_vectorcall
[2m[36m(pid=78262)[0m     @     0x56120ea64bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78262)[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78262)[0m     @     0x56120eaf0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78262)[0m     @     0x56120ea65689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78262)[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78262)[0m     @     0x56120eaf0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78262)[0m     @     0x56120ea65689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78262)[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78262)[0m     @     0x56120eaf0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78262)[0m     @     0x56120ea65689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78262)[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78286)[0m     @     0x7eeb68d7c148 at::Tensor::copy_()
[2m[36m(pid=78286)[0m     @     0x7eeb6f032bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78286)[0m     @     0x563564879fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78286)[0m     @     0x5635647d4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78286)[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78286)[0m     @     0x563564860a20 method_vectorcall
[2m[36m(pid=78286)[0m     @     0x5635647d4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78286)[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78286)[0m     @     0x563564860643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78286)[0m     @     0x5635647d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78286)[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78286)[0m     @     0x563564860643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78286)[0m     @     0x5635647d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78286)[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78286)[0m     @     0x563564860643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78286)[0m     @     0x5635647d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78286)[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78250)[0m     @     0x7f88f7f22bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78250)[0m     @     0x55d570d54fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78250)[0m     @     0x55d570cafb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78250)[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78250)[0m     @     0x55d570d3ba20 method_vectorcall
[2m[36m(pid=78250)[0m     @     0x55d570cafbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78250)[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78250)[0m     @     0x55d570d3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78250)[0m     @     0x55d570cb0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78250)[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78250)[0m     @     0x55d570d3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78250)[0m     @     0x55d570cb0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78250)[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78250)[0m     @     0x55d570d3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78250)[0m     @     0x55d570cb0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78250)[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=78199)[0m     @     0x5557b6ce4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78199)[0m     @     0x5557b6c59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78199)[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78199)[0m     @     0x5557b6ce4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78199)[0m     @     0x5557b6c59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78199)[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78199)[0m     @     0x5557b6ce4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78199)[0m     @     0x5557b6c59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78199)[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName
[2m[36m(pid=78304)[0m     @     0x7fbe6153c148 at::Tensor::copy_()
[2m[36m(pid=78304)[0m     @     0x7fbe677f2bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78304)[0m     @     0x5583c1dd9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78304)[0m     @     0x5583c1d34b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78304)[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78304)[0m     @     0x5583c1dc0a20 method_vectorcall
[2m[36m(pid=78304)[0m     @     0x5583c1d34bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78304)[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78304)[0m     @     0x5583c1dc0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78304)[0m     @     0x5583c1d35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78304)[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78304)[0m     @     0x5583c1dc0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78304)[0m     @     0x5583c1d35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78304)[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78304)[0m     @     0x5583c1dc0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78304)[0m     @     0x5583c1d35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78304)[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78280)[0m     @     0x7f55bb76b5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78280)[0m     @     0x7f55bb873148 at::Tensor::copy_()
[2m[36m(pid=78280)[0m     @     0x7f55bd46a989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78281)[0m     @     0x7f7cb5e7d148 at::Tensor::copy_()
[2m[36m(pid=78281)[0m     @     0x7f7cb7a74989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78281)[0m     @     0x7f7cb5d755cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78281)[0m     @     0x7f7cb5e7d148 at::Tensor::copy_()
[2m[36m(pid=78281)[0m     @     0x7f7cbc133bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78180)[0m     @     0x7fb68c37c5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78180)[0m     @     0x7fb68c484148 at::Tensor::copy_()
[2m[36m(pid=78180)[0m     @     0x7fb69231ebd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78180)[0m     @     0x5634c4facfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78180)[0m     @     0x5634c4f07b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78180)[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName
[2m[36m(pid=78180)[0m     @     0x5634c4f93a20 method_vectorcall
[2m[36m(pid=78180)[0m     @     0x5634c4f07bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78180)[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName
[2m[36m(pid=78180)[0m     @     0x5634c4f93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78180)[0m     @     0x5634c4f08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78180)[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName
[2m[36m(pid=78180)[0m     @     0x5634c4f93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78180)[0m     @     0x5634c4f08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78180)[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName
[2m[36m(pid=78180)[0m     @     0x5634c4f93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78180)[0m     @     0x5634c4f08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78180)[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName
[2m[36m(pid=78211)[0m     @     0x7f87100abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=78211)[0m     @     0x7f87100cecfd at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=78211)[0m     @     0x7f870d10c009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78204)[0m     @     0x7ef651015148 at::Tensor::copy_()
[2m[36m(pid=78204)[0m     @     0x7ef6572cbbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78204)[0m     @     0x5629f6616fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78204)[0m     @     0x5629f6571b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78204)[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78204)[0m     @     0x5629f65fda20 method_vectorcall
[2m[36m(pid=78204)[0m     @     0x5629f6571bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78204)[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78204)[0m     @     0x5629f65fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78204)[0m     @     0x5629f6572689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78204)[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78204)[0m     @     0x5629f65fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78204)[0m     @     0x5629f6572689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78204)[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78204)[0m     @     0x5629f65fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78204)[0m     @     0x5629f6572689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78204)[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78218)[0m     @     0x7f887a9d8148 at::Tensor::copy_()
[2m[36m(pid=78218)[0m     @     0x7f8880c8ebd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78218)[0m     @     0x55b738286fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78218)[0m     @     0x55b7381e1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78218)[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78218)[0m     @     0x55b73826da20 method_vectorcall
[2m[36m(pid=78218)[0m     @     0x55b7381e1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78218)[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78218)[0m     @     0x55b73826d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78218)[0m     @     0x55b7381e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78218)[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78218)[0m     @     0x55b73826d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78218)[0m     @     0x55b7381e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78218)[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78218)[0m     @     0x55b73826d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78218)[0m     @     0x55b7381e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78218)[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78196)[0m     @     0x7f7a6b410148 at::Tensor::copy_()
[2m[36m(pid=78196)[0m     @     0x7f7a716c6bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78196)[0m     @     0x5641cc370fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78196)[0m     @     0x5641cc2cbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78196)[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName
[2m[36m(pid=78196)[0m     @     0x5641cc357a20 method_vectorcall
[2m[36m(pid=78196)[0m     @     0x5641cc2cbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78196)[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName
[2m[36m(pid=78196)[0m     @     0x5641cc357643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78196)[0m     @     0x5641cc2cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78196)[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName
[2m[36m(pid=78196)[0m     @     0x5641cc357643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78196)[0m     @     0x5641cc2cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78196)[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName
[2m[36m(pid=78196)[0m     @     0x5641cc357643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78196)[0m     @     0x5641cc2cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78196)[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName
[2m[36m(pid=78290)[0m     @     0x7f658d2f5bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78290)[0m     @     0x55a83b0c3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78290)[0m     @     0x55a83b01eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78290)[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78290)[0m     @     0x55a83b0aaa20 method_vectorcall
[2m[36m(pid=78290)[0m     @     0x55a83b01ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78290)[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78290)[0m     @     0x55a83b0aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78290)[0m     @     0x55a83b01f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78290)[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78290)[0m     @     0x55a83b0aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78290)[0m     @     0x55a83b01f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78290)[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78290)[0m     @     0x55a83b0aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78290)[0m     @     0x55a83b01f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78290)[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=78256)[0m     @     0x7fc52fd085cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78256)[0m     @     0x7fc52fe10148 at::Tensor::copy_()
[2m[36m(pid=78256)[0m     @     0x7fc5360c6bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78256)[0m     @     0x56285fc72fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78256)[0m     @     0x56285fbcdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78256)[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName
[2m[36m(pid=78256)[0m     @     0x56285fc59a20 method_vectorcall
[2m[36m(pid=78256)[0m     @     0x56285fbcdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78256)[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName
[2m[36m(pid=78256)[0m     @     0x56285fc59643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78256)[0m     @     0x56285fbce689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78256)[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName
[2m[36m(pid=78256)[0m     @     0x56285fc59643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78256)[0m     @     0x56285fbce689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78256)[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName
[2m[36m(pid=78256)[0m     @     0x56285fc59643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78256)[0m     @     0x56285fbce689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78256)[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName
[2m[36m(pid=78254)[0m     @     0x7efaf6c56148 at::Tensor::copy_()
[2m[36m(pid=78254)[0m     @     0x7efafcf0cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78254)[0m     @     0x5572ae3b9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78254)[0m     @     0x5572ae314b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78254)[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78254)[0m     @     0x5572ae3a0a20 method_vectorcall
[2m[36m(pid=78254)[0m     @     0x5572ae314bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78254)[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78254)[0m     @     0x5572ae3a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78254)[0m     @     0x5572ae315689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78254)[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78254)[0m     @     0x5572ae3a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78254)[0m     @     0x5572ae315689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78254)[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78254)[0m     @     0x5572ae3a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78254)[0m     @     0x5572ae315689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78254)[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78190)[0m     @     0x7ee988071009 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=78190)[0m     @     0x7ee98806fc3f at::native::copy_impl()
[2m[36m(pid=78255)[0m     @     0x7f91caa615cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78255)[0m     @     0x7f91cab69148 at::Tensor::copy_()
[2m[36m(pid=78255)[0m     @     0x7f91d0e1fbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78255)[0m     @     0x55d9737f5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78255)[0m     @     0x55d973750b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78255)[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78255)[0m     @     0x55d9737dca20 method_vectorcall
[2m[36m(pid=78255)[0m     @     0x55d973750bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78255)[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78255)[0m     @     0x55d9737dc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78255)[0m     @     0x55d973751689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78255)[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78255)[0m     @     0x55d9737dc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78255)[0m     @     0x55d973751689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78255)[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78255)[0m     @     0x55d9737dc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78255)[0m     @     0x55d973751689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78255)[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78192)[0m     @     0x7f82a47a6148 at::Tensor::copy_()
[2m[36m(pid=78192)[0m     @     0x7f82aaa5cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78192)[0m     @     0x55d8f213efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78192)[0m     @     0x55d8f2099b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78192)[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName
[2m[36m(pid=78192)[0m     @     0x55d8f2125a20 method_vectorcall
[2m[36m(pid=78192)[0m     @     0x55d8f2099bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78192)[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName
[2m[36m(pid=78192)[0m     @     0x55d8f2125643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78192)[0m     @     0x55d8f209a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78192)[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName
[2m[36m(pid=78192)[0m     @     0x55d8f2125643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78192)[0m     @     0x55d8f209a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78192)[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName
[2m[36m(pid=78192)[0m     @     0x55d8f2125643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78192)[0m     @     0x55d8f209a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78192)[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName
[2m[36m(pid=78285)[0m     @     0x55dbf06b6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78285)[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName
[2m[36m(pid=78285)[0m     @     0x55dbf0742a20 method_vectorcall
[2m[36m(pid=78285)[0m     @     0x55dbf06b6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78285)[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName
[2m[36m(pid=78285)[0m     @     0x55dbf0742643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78285)[0m     @     0x55dbf06b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78285)[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName
[2m[36m(pid=78285)[0m     @     0x55dbf0742643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78285)[0m     @     0x55dbf06b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78285)[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName
[2m[36m(pid=78285)[0m     @     0x55dbf0742643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78285)[0m     @     0x55dbf06b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78285)[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName
[2m[36m(pid=78258)[0m     @     0x7faec900e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78258)[0m     @     0x7faec9116148 at::Tensor::copy_()
[2m[36m(pid=78258)[0m     @     0x7faecf3ccbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78258)[0m     @     0x5644a9738fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78258)[0m     @     0x5644a9693b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78258)[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78258)[0m     @     0x5644a971fa20 method_vectorcall
[2m[36m(pid=78258)[0m     @     0x5644a9693bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78258)[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78258)[0m     @     0x5644a971f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78258)[0m     @     0x5644a9694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78258)[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78258)[0m     @     0x5644a971f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78258)[0m     @     0x5644a9694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78258)[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78258)[0m     @     0x5644a971f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78258)[0m     @     0x5644a9694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78258)[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=78280)[0m     @     0x7f55bb76b5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78280)[0m     @     0x7f55bb873148 at::Tensor::copy_()
[2m[36m(pid=78280)[0m     @     0x7f55c1b29bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78280)[0m     @     0x55ec48c96fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78280)[0m     @     0x55ec48bf1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78280)[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78280)[0m     @     0x55ec48c7da20 method_vectorcall
[2m[36m(pid=78280)[0m     @     0x55ec48bf1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78280)[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78280)[0m     @     0x55ec48c7d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78280)[0m     @     0x55ec48bf2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78280)[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78280)[0m     @     0x55ec48c7d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78280)[0m     @     0x55ec48bf2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78280)[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78280)[0m     @     0x55ec48c7d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78280)[0m     @     0x55ec48bf2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78280)[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=78281)[0m     @     0x55d385661fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78281)[0m     @     0x55d3855bcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78281)[0m     @     0x55d385647baf _PyEval_EvalCodeWithName
[2m[36m(pid=78281)[0m     @     0x55d385648a20 method_vectorcall
[2m[36m(pid=78281)[0m     @     0x55d3855bcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78281)[0m     @     0x55d385647baf _PyEval_EvalCodeWithName
[2m[36m(pid=78281)[0m     @     0x55d385648643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78281)[0m     @     0x55d3855bd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78281)[0m     @     0x55d385647baf _PyEval_EvalCodeWithName
[2m[36m(pid=78281)[0m     @     0x55d385648643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78281)[0m     @     0x55d3855bd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78281)[0m     @     0x55d385647baf _PyEval_EvalCodeWithName
[2m[36m(pid=78281)[0m     @     0x55d385648643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78281)[0m     @     0x55d3855bd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78281)[0m     @     0x55d385647baf _PyEval_EvalCodeWithName
[2m[36m(pid=78211)[0m     @     0x7f870d10ac3f at::native::copy_impl()
[2m[36m(pid=78190)[0m     @     0x7ee988070ed4 at::native::copy_()
[2m[36m(pid=78190)[0m     @     0x7ee9887b35cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78190)[0m     @     0x7ee9888bb148 at::Tensor::copy_()
[2m[36m(pid=78190)[0m     @     0x7ee98a4b2989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78190)[0m     @     0x7ee9887b35cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78190)[0m     @     0x7ee9888bb148 at::Tensor::copy_()
[2m[36m(pid=78190)[0m     @     0x7ee98eb71bd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78190)[0m     @     0x55fb572dafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78190)[0m     @     0x55fb57235b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78190)[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78190)[0m     @     0x55fb572c1a20 method_vectorcall
[2m[36m(pid=78190)[0m     @     0x55fb57235bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78190)[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78190)[0m     @     0x55fb572c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78190)[0m     @     0x55fb57236689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78190)[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78190)[0m     @     0x55fb572c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78190)[0m     @     0x55fb57236689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78190)[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78190)[0m     @     0x55fb572c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78190)[0m     @     0x55fb57236689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78190)[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=78211)[0m     @     0x7f870d10bed4 at::native::copy_()
[2m[36m(pid=78211)[0m     @     0x7f870d84e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78211)[0m     @     0x7f870d956148 at::Tensor::copy_()
[2m[36m(pid=78211)[0m     @     0x7f870f54d989 torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=78211)[0m     @     0x7f870d84e5cc c10::Dispatcher::callWithDispatchKey<>()
[2m[36m(pid=78211)[0m     @     0x7f870d956148 at::Tensor::copy_()
[2m[36m(pid=78211)[0m     @     0x7f8713c0cbd4 torch::autograd::THPVariable_copy_()
[2m[36m(pid=78211)[0m     @     0x55ee72f8dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=78211)[0m     @     0x55ee72ee8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78211)[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName
[2m[36m(pid=78211)[0m     @     0x55ee72f74a20 method_vectorcall
[2m[36m(pid=78211)[0m     @     0x55ee72ee8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78211)[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName
[2m[36m(pid=78211)[0m     @     0x55ee72f74643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78211)[0m     @     0x55ee72ee9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78211)[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName
[2m[36m(pid=78211)[0m     @     0x55ee72f74643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78211)[0m     @     0x55ee72ee9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78211)[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName
[2m[36m(pid=78211)[0m     @     0x55ee72f74643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=78211)[0m     @     0x55ee72ee9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=78211)[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName
2020-11-05 10:56:05,941	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.
2020-11-05 10:56:05,952	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.
2020-11-05 10:56:05,954	ERROR trial_runner.py:567 -- Trial PPO_jss_env_7c602_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=78267, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
2020-11-05 10:56:05,963	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.
2020-11-05 10:56:05,963	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.
2020-11-05 10:56:05,963	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff50168bc201000000.
== Status ==
Memory usage on this node: 22.4/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_7c602_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_7c602_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_7c602_00000_0_2020-11-05_10-55-58/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

== Status ==
Memory usage on this node: 22.2/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_7c602_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_7c602_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_7c602_00000_0_2020-11-05_10-55-58/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
2020-11-05 10:56:05,987	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_7c602_00000])
