2020-11-05 10:18:36,609	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 15.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_44f23_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=11304)[0m 2020-11-05 10:18:39,444	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=11325)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11325)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11325)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11325)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11325)[0m *** SIGSEGV (@0x0) received by PID 11325 (TID 0x7f622c3df700) from PID 0; stack trace: ***
[2m[36m(pid=11288)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11288)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11288)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11312)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11312)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11312)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11312)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11312)[0m *** SIGSEGV (@0x0) received by PID 11312 (TID 0x7f12babab700) from PID 0; stack trace: ***
[2m[36m(pid=11286)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11286)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11286)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11341)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11341)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11341)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11338)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11338)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11338)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11338)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11338)[0m *** SIGSEGV (@0x0) received by PID 11338 (TID 0x7fec3c368700) from PID 0; stack trace: ***
[2m[36m(pid=11334)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11334)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11334)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11334)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11334)[0m *** SIGSEGV (@0x0) received by PID 11334 (TID 0x7f5725f6e700) from PID 0; stack trace: ***
[2m[36m(pid=11334)[0m     @     0x7f5725b47390 (unknown)
[2m[36m(pid=11334)[0m     @     0x7f28257f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11334)[0m     @     0x7f2824f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11299)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11299)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11299)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11299)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11299)[0m *** SIGSEGV (@0x0) received by PID 11299 (TID 0x7f72cc1ba700) from PID 0; stack trace: ***
[2m[36m(pid=11299)[0m     @     0x7f72cbd93390 (unknown)
[2m[36m(pid=11299)[0m     @     0x7f43cbd1ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11299)[0m     @     0x7f43cb4497db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11263)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11263)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11263)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11263)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11263)[0m *** SIGSEGV (@0x0) received by PID 11263 (TID 0x7f96c5a2c700) from PID 0; stack trace: ***
[2m[36m(pid=11263)[0m     @     0x7f96c5605390 (unknown)
[2m[36m(pid=11263)[0m     @     0x7f67c55a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11332)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11332)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11332)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11332)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11332)[0m *** SIGSEGV (@0x0) received by PID 11332 (TID 0x7fa9c9881700) from PID 0; stack trace: ***
[2m[36m(pid=11332)[0m     @     0x7fa9c945a390 (unknown)
[2m[36m(pid=11332)[0m     @     0x7f7ac93ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11332)[0m     @     0x7f7ac8af77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11297)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11297)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11297)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11297)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11297)[0m *** SIGSEGV (@0x0) received by PID 11297 (TID 0x7fa6a7288700) from PID 0; stack trace: ***
[2m[36m(pid=11297)[0m     @     0x7fa6a6e61390 (unknown)
[2m[36m(pid=11297)[0m     @     0x7f77a6ddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11293)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11293)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11293)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11293)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11293)[0m *** SIGSEGV (@0x0) received by PID 11293 (TID 0x7f332c7e7700) from PID 0; stack trace: ***
[2m[36m(pid=11293)[0m     @     0x7f332c3c0390 (unknown)
[2m[36m(pid=11293)[0m     @     0x7f042c363f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11328)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11328)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11328)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11328)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11328)[0m *** SIGSEGV (@0x0) received by PID 11328 (TID 0x7faaed714700) from PID 0; stack trace: ***
[2m[36m(pid=11328)[0m     @     0x7faaed2ed390 (unknown)
[2m[36m(pid=11328)[0m     @     0x7f7bed0c1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11289)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11289)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11289)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11289)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11289)[0m *** SIGSEGV (@0x0) received by PID 11289 (TID 0x7f42e211f700) from PID 0; stack trace: ***
[2m[36m(pid=11289)[0m     @     0x7f42e1cf8390 (unknown)
[2m[36m(pid=11289)[0m     @     0x7f13e1c0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11289)[0m     @     0x7f13e13387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11302)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11302)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11302)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11302)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11302)[0m *** SIGSEGV (@0x0) received by PID 11302 (TID 0x7fe435505700) from PID 0; stack trace: ***
[2m[36m(pid=11302)[0m     @     0x7fe4350de390 (unknown)
[2m[36m(pid=11302)[0m     @     0x7fb535088f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11302)[0m     @     0x7fb5347b37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11311)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11311)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11311)[0m *** Aborted at 1604571524 (unix time) try "date -d @1604571524" if you are using GNU date ***
[2m[36m(pid=11311)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11311)[0m *** SIGSEGV (@0x0) received by PID 11311 (TID 0x7f1fbaf03700) from PID 0; stack trace: ***
[2m[36m(pid=11311)[0m     @     0x7f1fbaadc390 (unknown)
[2m[36m(pid=11311)[0m     @     0x7ef0ba601f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11311)[0m     @     0x7ef0b9d2c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11325)[0m     @     0x7f622bfb8390 (unknown)
[2m[36m(pid=11325)[0m     @     0x7f332be0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11325)[0m     @     0x7f332b5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11325)[0m     @     0x7f332b5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11325)[0m     @     0x7f332b539ad3 at::TensorIterator::for_each()
[2m[36m(pid=11288)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11288)[0m *** SIGSEGV (@0x0) received by PID 11288 (TID 0x7efe2d8ea700) from PID 0; stack trace: ***
[2m[36m(pid=11288)[0m     @     0x7efe2d4c3390 (unknown)
[2m[36m(pid=11288)[0m     @     0x7ecf2d476f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11288)[0m     @     0x7ecf2cba17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11288)[0m     @     0x7ecf2cba48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11312)[0m     @     0x7f12ba784390 (unknown)
[2m[36m(pid=11312)[0m     @     0x7ee3ba5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11312)[0m     @     0x7ee3b9ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11312)[0m     @     0x7ee3b9cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11312)[0m     @     0x7ee3b9cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=11286)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11286)[0m *** SIGSEGV (@0x0) received by PID 11286 (TID 0x7f82c8583700) from PID 0; stack trace: ***
[2m[36m(pid=11286)[0m     @     0x7f82c815c390 (unknown)
[2m[36m(pid=11286)[0m     @     0x7f53c7eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11286)[0m     @     0x7f53c75e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11286)[0m     @     0x7f53c75e48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11341)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11341)[0m *** SIGSEGV (@0x0) received by PID 11341 (TID 0x7f7437d81700) from PID 0; stack trace: ***
[2m[36m(pid=11341)[0m     @     0x7f743795a390 (unknown)
[2m[36m(pid=11341)[0m     @     0x7f45378def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11341)[0m     @     0x7f45370097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11341)[0m     @     0x7f453700c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11341)[0m     @     0x7f453700cad3 at::TensorIterator::for_each()
[2m[36m(pid=11338)[0m     @     0x7fec3bf41390 (unknown)
[2m[36m(pid=11338)[0m     @     0x7fbd3be0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11338)[0m     @     0x7fbd3b5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11338)[0m     @     0x7fbd3b5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11338)[0m     @     0x7fbd3b539ad3 at::TensorIterator::for_each()
[2m[36m(pid=11334)[0m     @     0x7f2824f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11334)[0m     @     0x7f2824f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=11299)[0m     @     0x7f43cb44c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11299)[0m     @     0x7f43cb44cad3 at::TensorIterator::for_each()
[2m[36m(pid=11263)[0m     @     0x7f67c4ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11263)[0m     @     0x7f67c4cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11332)[0m     @     0x7f7ac8afa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11332)[0m     @     0x7f7ac8afaad3 at::TensorIterator::for_each()
[2m[36m(pid=11297)[0m     @     0x7f77a65097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11297)[0m     @     0x7f77a650c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11293)[0m     @     0x7f042ba8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11293)[0m     @     0x7f042ba918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11269)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11269)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11277)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11277)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11328)[0m     @     0x7f7bec7ec7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11328)[0m     @     0x7f7bec7ef8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11289)[0m     @     0x7f13e133b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11289)[0m     @     0x7f13e133bad3 at::TensorIterator::for_each()
[2m[36m(pid=11302)[0m     @     0x7fb5347b68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11311)[0m     @     0x7ef0b9d2f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11311)[0m     @     0x7ef0b9d2fad3 at::TensorIterator::for_each()
[2m[36m(pid=11209)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11209)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11259)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11259)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11259)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11305)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11305)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11305)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11213)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11213)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11213)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11213)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11213)[0m *** SIGSEGV (@0x0) received by PID 11213 (TID 0x7f4eecb07700) from PID 0; stack trace: ***
[2m[36m(pid=11212)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11212)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11212)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11212)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11212)[0m *** SIGSEGV (@0x0) received by PID 11212 (TID 0x7fe975b8c700) from PID 0; stack trace: ***
[2m[36m(pid=11212)[0m     @     0x7fe975765390 (unknown)
[2m[36m(pid=11270)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11270)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11270)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11278)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11278)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11278)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11278)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11278)[0m *** SIGSEGV (@0x0) received by PID 11278 (TID 0x7efeb434c700) from PID 0; stack trace: ***
[2m[36m(pid=11278)[0m     @     0x7efeb3f25390 (unknown)
[2m[36m(pid=11278)[0m     @     0x7ecfb3e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11278)[0m     @     0x7ecfb35367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11276)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11276)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11276)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11276)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11276)[0m *** SIGSEGV (@0x0) received by PID 11276 (TID 0x7fa2e8ca7700) from PID 0; stack trace: ***
[2m[36m(pid=11276)[0m     @     0x7fa2e8880390 (unknown)
[2m[36m(pid=11276)[0m     @     0x7f73e87f7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11276)[0m     @     0x7f73e7f227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11276)[0m     @     0x7f73e7f258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11267)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11267)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11267)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11267)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11267)[0m *** SIGSEGV (@0x0) received by PID 11267 (TID 0x7f3a12f47700) from PID 0; stack trace: ***
[2m[36m(pid=11267)[0m     @     0x7f3a12b20390 (unknown)
[2m[36m(pid=11267)[0m     @     0x7f0b12a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11267)[0m     @     0x7f0b1214c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11308)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11308)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11308)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11308)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11308)[0m *** SIGSEGV (@0x0) received by PID 11308 (TID 0x7fc00d755700) from PID 0; stack trace: ***
[2m[36m(pid=11308)[0m     @     0x7fc00d32e390 (unknown)
[2m[36m(pid=11308)[0m     @     0x7f910d28af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11308)[0m     @     0x7f910c9b57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11225)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11225)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11225)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11225)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11225)[0m *** SIGSEGV (@0x0) received by PID 11225 (TID 0x7fe4abee1700) from PID 0; stack trace: ***
[2m[36m(pid=11225)[0m     @     0x7fe4ababa390 (unknown)
[2m[36m(pid=11225)[0m     @     0x7fb5aba48f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11225)[0m     @     0x7fb5ab1737db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11225)[0m     @     0x7fb5ab1768f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11199)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11199)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11199)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11199)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11199)[0m *** SIGSEGV (@0x0) received by PID 11199 (TID 0x7fc75dafa700) from PID 0; stack trace: ***
[2m[36m(pid=11199)[0m     @     0x7fc75d6d3390 (unknown)
[2m[36m(pid=11199)[0m     @     0x7f985d674f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11199)[0m     @     0x7f985cd9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11224)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11224)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11224)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11224)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11224)[0m *** SIGSEGV (@0x0) received by PID 11224 (TID 0x7f596fa3b700) from PID 0; stack trace: ***
[2m[36m(pid=11224)[0m     @     0x7f596f614390 (unknown)
[2m[36m(pid=11224)[0m     @     0x7f2a6f5b2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11224)[0m     @     0x7f2a6ecdd7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11228)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11228)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11228)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11228)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11228)[0m *** SIGSEGV (@0x0) received by PID 11228 (TID 0x7ff2d255d700) from PID 0; stack trace: ***
[2m[36m(pid=11228)[0m     @     0x7ff2d2136390 (unknown)
[2m[36m(pid=11228)[0m     @     0x7fc3d20f5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11228)[0m     @     0x7fc3d18207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11265)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11265)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11265)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11265)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11265)[0m *** SIGSEGV (@0x0) received by PID 11265 (TID 0x7f64ede0e700) from PID 0; stack trace: ***
[2m[36m(pid=11265)[0m     @     0x7f64ed9e7390 (unknown)
[2m[36m(pid=11265)[0m     @     0x7f35ed7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11265)[0m     @     0x7f35ecf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11196)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11196)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11196)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11196)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11196)[0m *** SIGSEGV (@0x0) received by PID 11196 (TID 0x7feccd1f0700) from PID 0; stack trace: ***
[2m[36m(pid=11196)[0m     @     0x7fecccdc9390 (unknown)
[2m[36m(pid=11196)[0m     @     0x7fbdccd24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11196)[0m     @     0x7fbdcc44f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11196)[0m     @     0x7fbdcc4528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11196)[0m     @     0x7fbdcc452ad3 at::TensorIterator::for_each()
[2m[36m(pid=11258)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11258)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11258)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11258)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11258)[0m *** SIGSEGV (@0x0) received by PID 11258 (TID 0x7f848f080700) from PID 0; stack trace: ***
[2m[36m(pid=11258)[0m     @     0x7f848ec59390 (unknown)
[2m[36m(pid=11258)[0m     @     0x7f558ead1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11227)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11227)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11227)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11227)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11227)[0m *** SIGSEGV (@0x0) received by PID 11227 (TID 0x7f31e74d6700) from PID 0; stack trace: ***
[2m[36m(pid=11227)[0m     @     0x7f31e70af390 (unknown)
[2m[36m(pid=11227)[0m     @     0x7f02e7052f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11227)[0m     @     0x7f02e677d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11275)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11275)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11275)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11275)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11275)[0m *** SIGSEGV (@0x0) received by PID 11275 (TID 0x7effdd79e700) from PID 0; stack trace: ***
[2m[36m(pid=11275)[0m     @     0x7effdd377390 (unknown)
[2m[36m(pid=11275)[0m     @     0x7ed0dd2fcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11275)[0m     @     0x7ed0dca277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11275)[0m     @     0x7ed0dca2a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11215)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11215)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11215)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11215)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11215)[0m *** SIGSEGV (@0x0) received by PID 11215 (TID 0x7f264a497700) from PID 0; stack trace: ***
[2m[36m(pid=11215)[0m     @     0x7f264a070390 (unknown)
[2m[36m(pid=11215)[0m     @     0x7ef74a005f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11215)[0m     @     0x7ef7497307db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11215)[0m     @     0x7ef7497338f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11215)[0m     @     0x7ef749733ad3 at::TensorIterator::for_each()
[2m[36m(pid=11215)[0m     @     0x7ef749733d91 at::TensorIterator::for_each()
[2m[36m(pid=11284)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11284)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11284)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11284)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11284)[0m *** SIGSEGV (@0x0) received by PID 11284 (TID 0x7f166ce33700) from PID 0; stack trace: ***
[2m[36m(pid=11284)[0m     @     0x7f166ca0c390 (unknown)
[2m[36m(pid=11284)[0m     @     0x7ee76c774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11284)[0m     @     0x7ee76be9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11301)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11301)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11301)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11301)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11301)[0m *** SIGSEGV (@0x0) received by PID 11301 (TID 0x7f33e5a61700) from PID 0; stack trace: ***
[2m[36m(pid=11301)[0m     @     0x7f33e563a390 (unknown)
[2m[36m(pid=11301)[0m     @     0x7f04e55e4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11301)[0m     @     0x7f04e4d0f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11210)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11210)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11210)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11210)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11210)[0m *** SIGSEGV (@0x0) received by PID 11210 (TID 0x7ff4bfee8700) from PID 0; stack trace: ***
[2m[36m(pid=11210)[0m     @     0x7ff4bfac1390 (unknown)
[2m[36m(pid=11210)[0m     @     0x7fc5bfa48f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11210)[0m     @     0x7fc5bf1737db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11210)[0m     @     0x7fc5bf1768f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11210)[0m     @     0x7fc5bf176ad3 at::TensorIterator::for_each()
[2m[36m(pid=11211)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11211)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11211)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11211)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11211)[0m *** SIGSEGV (@0x0) received by PID 11211 (TID 0x7feac33ee700) from PID 0; stack trace: ***
[2m[36m(pid=11211)[0m     @     0x7feac2fc7390 (unknown)
[2m[36m(pid=11211)[0m     @     0x7fbbc2f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11211)[0m     @     0x7fbbc263e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11211)[0m     @     0x7fbbc26418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11211)[0m     @     0x7fbbc2641ad3 at::TensorIterator::for_each()
[2m[36m(pid=11202)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11202)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11202)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11202)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11202)[0m *** SIGSEGV (@0x0) received by PID 11202 (TID 0x7fa106aa9700) from PID 0; stack trace: ***
[2m[36m(pid=11202)[0m     @     0x7fa106682390 (unknown)
[2m[36m(pid=11202)[0m     @     0x7f720657cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11202)[0m     @     0x7f7205ca77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11202)[0m     @     0x7f7205caa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11202)[0m     @     0x7f7205caaad3 at::TensorIterator::for_each()
[2m[36m(pid=11325)[0m     @     0x7f332b539d91 at::TensorIterator::for_each()
[2m[36m(pid=11325)[0m     @     0x7f332be1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11325)[0m     @     0x7f332be3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11325)[0m     @     0x7f332b2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11325)[0m     @     0x7f332b2df388 at::native::copy_impl()
[2m[36m(pid=11325)[0m     @     0x7f332b2e15a4 at::native::copy_()
[2m[36m(pid=11325)[0m     @     0x7f332b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=11325)[0m     @     0x7f332de9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11325)[0m     @     0x7f332b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=11325)[0m     @     0x7f3331a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11325)[0m     @     0x558aad5d9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11325)[0m     @     0x558aad534b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11325)[0m     @     0x558aad5bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11325)[0m     @     0x558aad5c0a20 method_vectorcall
[2m[36m(pid=11325)[0m     @     0x558aad534bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11325)[0m     @     0x558aad5bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11325)[0m     @     0x558aad5c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11325)[0m     @     0x558aad535689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11325)[0m     @     0x558aad5bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11325)[0m     @     0x558aad5c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11325)[0m     @     0x558aad535689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11325)[0m     @     0x558aad5bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11325)[0m     @     0x558aad5c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11325)[0m     @     0x558aad535689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11325)[0m     @     0x558aad5bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11325)[0m     @     0x558aad5c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11325)[0m     @     0x558aad535689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11264)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11264)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11264)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11264)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11264)[0m *** SIGSEGV (@0x0) received by PID 11264 (TID 0x7fe0f1d06700) from PID 0; stack trace: ***
[2m[36m(pid=11264)[0m     @     0x7fe0f18df390 (unknown)
[2m[36m(pid=11264)[0m     @     0x7fb1f17f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11264)[0m     @     0x7fb1f0f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11264)[0m     @     0x7fb1f0f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11264)[0m     @     0x7fb1f0f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=11264)[0m     @     0x7fb1f0f27d91 at::TensorIterator::for_each()
[2m[36m(pid=11264)[0m     @     0x7fb1f180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11288)[0m     @     0x7ecf2cba4ad3 at::TensorIterator::for_each()
[2m[36m(pid=11288)[0m     @     0x7ecf2cba4d91 at::TensorIterator::for_each()
[2m[36m(pid=11288)[0m     @     0x7ecf2d487b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11288)[0m     @     0x7ecf2d4aac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11288)[0m     @     0x7ecf2c94ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11288)[0m     @     0x7ecf2c94a388 at::native::copy_impl()
[2m[36m(pid=11288)[0m     @     0x7ecf2c94c5a4 at::native::copy_()
[2m[36m(pid=11288)[0m     @     0x7ecf2d0374f5 at::Tensor::copy_()
[2m[36m(pid=11288)[0m     @     0x7ecf2f50a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11288)[0m     @     0x7ecf2d0374f5 at::Tensor::copy_()
[2m[36m(pid=11288)[0m     @     0x7ecf330e279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11288)[0m     @     0x55bb21964fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11288)[0m     @     0x55bb218bfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11288)[0m     @     0x55bb2194abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11288)[0m     @     0x55bb2194ba20 method_vectorcall
[2m[36m(pid=11288)[0m     @     0x55bb218bfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11288)[0m     @     0x55bb2194abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11288)[0m     @     0x55bb2194b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11288)[0m     @     0x55bb218c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11288)[0m     @     0x55bb2194abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11288)[0m     @     0x55bb2194b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11274)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11274)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11274)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11274)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11274)[0m *** SIGSEGV (@0x0) received by PID 11274 (TID 0x7f8b988ba700) from PID 0; stack trace: ***
[2m[36m(pid=11274)[0m     @     0x7f8b98493390 (unknown)
[2m[36m(pid=11274)[0m     @     0x7f5c983e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11274)[0m     @     0x7f5c97b0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11274)[0m     @     0x7f5c97b118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11274)[0m     @     0x7f5c97b11ad3 at::TensorIterator::for_each()
[2m[36m(pid=11274)[0m     @     0x7f5c97b11d91 at::TensorIterator::for_each()
[2m[36m(pid=11274)[0m     @     0x7f5c983f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11274)[0m     @     0x7f5c98417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11312)[0m     @     0x7ee3b9cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=11312)[0m     @     0x7ee3ba5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11312)[0m     @     0x7ee3ba5d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11312)[0m     @     0x7ee3b9a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11312)[0m     @     0x7ee3b9a78388 at::native::copy_impl()
[2m[36m(pid=11312)[0m     @     0x7ee3b9a7a5a4 at::native::copy_()
[2m[36m(pid=11312)[0m     @     0x7ee3ba1654f5 at::Tensor::copy_()
[2m[36m(pid=11312)[0m     @     0x7ee3bc6388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11312)[0m     @     0x7ee3ba1654f5 at::Tensor::copy_()
[2m[36m(pid=11312)[0m     @     0x7ee3c021079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11312)[0m     @     0x55fbb7477fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11312)[0m     @     0x55fbb73d2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11312)[0m     @     0x55fbb745dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11312)[0m     @     0x55fbb745ea20 method_vectorcall
[2m[36m(pid=11312)[0m     @     0x55fbb73d2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11312)[0m     @     0x55fbb745dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11312)[0m     @     0x55fbb745e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11312)[0m     @     0x55fbb73d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11312)[0m     @     0x55fbb745dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11312)[0m     @     0x55fbb745e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11312)[0m     @     0x55fbb73d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11312)[0m     @     0x55fbb745dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11312)[0m     @     0x55fbb745e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11312)[0m     @     0x55fbb73d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11312)[0m     @     0x55fbb745dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11312)[0m     @     0x55fbb745e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11312)[0m     @     0x55fbb73d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11291)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11291)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11291)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11291)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11291)[0m *** SIGSEGV (@0x0) received by PID 11291 (TID 0x7f6c4b48f700) from PID 0; stack trace: ***
[2m[36m(pid=11291)[0m     @     0x7f6c4b068390 (unknown)
[2m[36m(pid=11291)[0m     @     0x7f3d4b014f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11291)[0m     @     0x7f3d4a73f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11291)[0m     @     0x7f3d4a7428f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11291)[0m     @     0x7f3d4a742ad3 at::TensorIterator::for_each()
[2m[36m(pid=11291)[0m     @     0x7f3d4a742d91 at::TensorIterator::for_each()
[2m[36m(pid=11291)[0m     @     0x7f3d4b025b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11291)[0m     @     0x7f3d4b048c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11286)[0m     @     0x7f53c75e4ad3 at::TensorIterator::for_each()
[2m[36m(pid=11286)[0m     @     0x7f53c75e4d91 at::TensorIterator::for_each()
[2m[36m(pid=11286)[0m     @     0x7f53c7ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11286)[0m     @     0x7f53c7eeac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11286)[0m     @     0x7f53c738ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11286)[0m     @     0x7f53c738a388 at::native::copy_impl()
[2m[36m(pid=11286)[0m     @     0x7f53c738c5a4 at::native::copy_()
[2m[36m(pid=11286)[0m     @     0x7f53c7a774f5 at::Tensor::copy_()
[2m[36m(pid=11286)[0m     @     0x7f53c9f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11341)[0m     @     0x7f453700cd91 at::TensorIterator::for_each()
[2m[36m(pid=11341)[0m     @     0x7f45378efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11341)[0m     @     0x7f4537912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11341)[0m     @     0x7f4536db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11341)[0m     @     0x7f4536db2388 at::native::copy_impl()
[2m[36m(pid=11341)[0m     @     0x7f4536db45a4 at::native::copy_()
[2m[36m(pid=11341)[0m     @     0x7f453749f4f5 at::Tensor::copy_()
[2m[36m(pid=11341)[0m     @     0x7f45399728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11341)[0m     @     0x7f453749f4f5 at::Tensor::copy_()
[2m[36m(pid=11341)[0m     @     0x7f453d54a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11341)[0m     @     0x564a72b37fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11341)[0m     @     0x564a72a92b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11341)[0m     @     0x564a72b1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11341)[0m     @     0x564a72b1ea20 method_vectorcall
[2m[36m(pid=11341)[0m     @     0x564a72a92bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11341)[0m     @     0x564a72b1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11341)[0m     @     0x564a72b1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11341)[0m     @     0x564a72a93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11341)[0m     @     0x564a72b1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11341)[0m     @     0x564a72b1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11341)[0m     @     0x564a72a93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11341)[0m     @     0x564a72b1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11341)[0m     @     0x564a72b1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11341)[0m     @     0x564a72a93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11341)[0m     @     0x564a72b1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11341)[0m     @     0x564a72b1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11341)[0m     @     0x564a72a93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11223)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11223)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11223)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11223)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11223)[0m *** SIGSEGV (@0x0) received by PID 11223 (TID 0x7f20218d6700) from PID 0; stack trace: ***
[2m[36m(pid=11223)[0m     @     0x7f20214af390 (unknown)
[2m[36m(pid=11223)[0m     @     0x7ef1213ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11223)[0m     @     0x7ef120af77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11223)[0m     @     0x7ef120afa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11223)[0m     @     0x7ef120afaad3 at::TensorIterator::for_each()
[2m[36m(pid=11223)[0m     @     0x7ef120afad91 at::TensorIterator::for_each()
[2m[36m(pid=11223)[0m     @     0x7ef1213ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11223)[0m     @     0x7ef121400c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11338)[0m     @     0x7fbd3b539d91 at::TensorIterator::for_each()
[2m[36m(pid=11338)[0m     @     0x7fbd3be1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11338)[0m     @     0x7fbd3be3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11338)[0m     @     0x7fbd3b2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11338)[0m     @     0x7fbd3b2df388 at::native::copy_impl()
[2m[36m(pid=11338)[0m     @     0x7fbd3b2e15a4 at::native::copy_()
[2m[36m(pid=11338)[0m     @     0x7fbd3b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=11338)[0m     @     0x7fbd3de9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11338)[0m     @     0x7fbd3b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=11338)[0m     @     0x7fbd41a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11338)[0m     @     0x563f77faefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11338)[0m     @     0x563f77f09b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11338)[0m     @     0x563f77f94baf _PyEval_EvalCodeWithName
[2m[36m(pid=11338)[0m     @     0x563f77f95a20 method_vectorcall
[2m[36m(pid=11338)[0m     @     0x563f77f09bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11338)[0m     @     0x563f77f94baf _PyEval_EvalCodeWithName
[2m[36m(pid=11338)[0m     @     0x563f77f95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11338)[0m     @     0x563f77f0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11338)[0m     @     0x563f77f94baf _PyEval_EvalCodeWithName
[2m[36m(pid=11338)[0m     @     0x563f77f95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11338)[0m     @     0x563f77f0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11338)[0m     @     0x563f77f94baf _PyEval_EvalCodeWithName
[2m[36m(pid=11338)[0m     @     0x563f77f95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11338)[0m     @     0x563f77f0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11338)[0m     @     0x563f77f94baf _PyEval_EvalCodeWithName
[2m[36m(pid=11338)[0m     @     0x563f77f95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11338)[0m     @     0x563f77f0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11205)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11205)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11205)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11205)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11205)[0m *** SIGSEGV (@0x0) received by PID 11205 (TID 0x7f01b999b700) from PID 0; stack trace: ***
[2m[36m(pid=11205)[0m     @     0x7f01b9574390 (unknown)
[2m[36m(pid=11205)[0m     @     0x7ed2b94e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11205)[0m     @     0x7ed2b8c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11205)[0m     @     0x7ed2b8c118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11205)[0m     @     0x7ed2b8c11ad3 at::TensorIterator::for_each()
[2m[36m(pid=11205)[0m     @     0x7ed2b8c11d91 at::TensorIterator::for_each()
[2m[36m(pid=11205)[0m     @     0x7ed2b94f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11205)[0m     @     0x7ed2b9517c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11281)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11281)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11281)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11281)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11281)[0m *** SIGSEGV (@0x0) received by PID 11281 (TID 0x7f61f7b75700) from PID 0; stack trace: ***
[2m[36m(pid=11281)[0m     @     0x7f61f774e390 (unknown)
[2m[36m(pid=11281)[0m     @     0x7f32f761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11281)[0m     @     0x7f32f6d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11281)[0m     @     0x7f32f6d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11281)[0m     @     0x7f32f6d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=11281)[0m     @     0x7f32f6d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=11281)[0m     @     0x7f32f7630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11204)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11204)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11204)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11204)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11204)[0m *** SIGSEGV (@0x0) received by PID 11204 (TID 0x7f90851f4700) from PID 0; stack trace: ***
[2m[36m(pid=11204)[0m     @     0x7f9084dcd390 (unknown)
[2m[36m(pid=11204)[0m     @     0x7f6184c74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11204)[0m     @     0x7f618439f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11204)[0m     @     0x7f61843a28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11204)[0m     @     0x7f61843a2ad3 at::TensorIterator::for_each()
[2m[36m(pid=11204)[0m     @     0x7f61843a2d91 at::TensorIterator::for_each()
[2m[36m(pid=11204)[0m     @     0x7f6184c85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11204)[0m     @     0x7f6184ca8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11204)[0m     @     0x7f618414aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11272)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11272)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11272)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11272)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11272)[0m *** SIGSEGV (@0x0) received by PID 11272 (TID 0x7f5eeabf1700) from PID 0; stack trace: ***
[2m[36m(pid=11272)[0m     @     0x7f5eea7ca390 (unknown)
[2m[36m(pid=11272)[0m     @     0x7f2fea74ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11272)[0m     @     0x7f2fe9e797db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11272)[0m     @     0x7f2fe9e7c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11272)[0m     @     0x7f2fe9e7cad3 at::TensorIterator::for_each()
[2m[36m(pid=11208)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11208)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11208)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11208)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11208)[0m *** SIGSEGV (@0x0) received by PID 11208 (TID 0x7f19d333c700) from PID 0; stack trace: ***
[2m[36m(pid=11208)[0m     @     0x7f19d2f15390 (unknown)
[2m[36m(pid=11208)[0m     @     0x7eead2e93f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11266)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11266)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11266)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11266)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11266)[0m *** SIGSEGV (@0x0) received by PID 11266 (TID 0x7f2670dbe700) from PID 0; stack trace: ***
[2m[36m(pid=11266)[0m     @     0x7f2670997390 (unknown)
[2m[36m(pid=11266)[0m     @     0x7ef770825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11266)[0m     @     0x7ef76ff507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11266)[0m     @     0x7ef76ff538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11266)[0m     @     0x7ef76ff53ad3 at::TensorIterator::for_each()
[2m[36m(pid=11195)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11195)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11195)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11195)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11195)[0m *** SIGSEGV (@0x0) received by PID 11195 (TID 0x7f24c5188700) from PID 0; stack trace: ***
[2m[36m(pid=11195)[0m     @     0x7f24c4d61390 (unknown)
[2m[36m(pid=11195)[0m     @     0x7ef5c497ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11195)[0m     @     0x7ef5c40aa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11195)[0m     @     0x7ef5c40ad8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11195)[0m     @     0x7ef5c40adad3 at::TensorIterator::for_each()
[2m[36m(pid=11314)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11314)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11314)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11314)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11314)[0m *** SIGSEGV (@0x0) received by PID 11314 (TID 0x7fc71748f700) from PID 0; stack trace: ***
[2m[36m(pid=11314)[0m     @     0x7fc717068390 (unknown)
[2m[36m(pid=11314)[0m     @     0x7f9816f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11314)[0m     @     0x7f981663e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11314)[0m     @     0x7f98166418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11314)[0m     @     0x7f9816641ad3 at::TensorIterator::for_each()
[2m[36m(pid=11314)[0m     @     0x7f9816641d91 at::TensorIterator::for_each()
[2m[36m(pid=11314)[0m     @     0x7f9816f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11197)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11197)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11197)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11197)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11197)[0m *** SIGSEGV (@0x0) received by PID 11197 (TID 0x7fe406855700) from PID 0; stack trace: ***
[2m[36m(pid=11197)[0m     @     0x7fe40642e390 (unknown)
[2m[36m(pid=11197)[0m     @     0x7fb5062fef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11197)[0m     @     0x7fb505a297db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11197)[0m     @     0x7fb505a2c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11197)[0m     @     0x7fb505a2cad3 at::TensorIterator::for_each()
[2m[36m(pid=11197)[0m     @     0x7fb505a2cd91 at::TensorIterator::for_each()
[2m[36m(pid=11197)[0m     @     0x7fb50630fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11214)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11214)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11214)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11214)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11214)[0m *** SIGSEGV (@0x0) received by PID 11214 (TID 0x7f9564ede700) from PID 0; stack trace: ***
[2m[36m(pid=11214)[0m     @     0x7f9564ab7390 (unknown)
[2m[36m(pid=11214)[0m     @     0x7f6664825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11214)[0m     @     0x7f6663f507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11214)[0m     @     0x7f6663f538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11214)[0m     @     0x7f6663f53ad3 at::TensorIterator::for_each()
[2m[36m(pid=11214)[0m     @     0x7f6663f53d91 at::TensorIterator::for_each()
[2m[36m(pid=11214)[0m     @     0x7f6664836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11214)[0m     @     0x7f6664859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11330)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11330)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11330)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11330)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11330)[0m *** SIGSEGV (@0x0) received by PID 11330 (TID 0x7f0f9f3c0700) from PID 0; stack trace: ***
[2m[36m(pid=11330)[0m     @     0x7f0f9ef99390 (unknown)
[2m[36m(pid=11330)[0m     @     0x7ee09ef13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11330)[0m     @     0x7ee09e63e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11330)[0m     @     0x7ee09e6418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11330)[0m     @     0x7ee09e641ad3 at::TensorIterator::for_each()
[2m[36m(pid=11330)[0m     @     0x7ee09e641d91 at::TensorIterator::for_each()
[2m[36m(pid=11330)[0m     @     0x7ee09ef24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11330)[0m     @     0x7ee09ef47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11233)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11233)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11233)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11233)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11233)[0m *** SIGSEGV (@0x0) received by PID 11233 (TID 0x7f4d9253c700) from PID 0; stack trace: ***
[2m[36m(pid=11233)[0m     @     0x7f4d92115390 (unknown)
[2m[36m(pid=11233)[0m     @     0x7f1e91e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11233)[0m     @     0x7f1e9154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11233)[0m     @     0x7f1e915528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11233)[0m     @     0x7f1e91552ad3 at::TensorIterator::for_each()
[2m[36m(pid=11233)[0m     @     0x7f1e91552d91 at::TensorIterator::for_each()
[2m[36m(pid=11233)[0m     @     0x7f1e91e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11233)[0m     @     0x7f1e91e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11233)[0m     @     0x7f1e912faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11260)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11260)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11260)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11260)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11260)[0m *** SIGSEGV (@0x0) received by PID 11260 (TID 0x7f7f1625c700) from PID 0; stack trace: ***
[2m[36m(pid=11260)[0m     @     0x7f7f15e35390 (unknown)
[2m[36m(pid=11260)[0m     @     0x7f5015de4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11260)[0m     @     0x7f501550f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11260)[0m     @     0x7f50155128f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11260)[0m     @     0x7f5015512ad3 at::TensorIterator::for_each()
[2m[36m(pid=11260)[0m     @     0x7f5015512d91 at::TensorIterator::for_each()
[2m[36m(pid=11260)[0m     @     0x7f5015df5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11260)[0m     @     0x7f5015e18c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11260)[0m     @     0x7f50152baa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11260)[0m     @     0x7f50152b8388 at::native::copy_impl()
[2m[36m(pid=11334)[0m     @     0x7f2824f27d91 at::TensorIterator::for_each()
[2m[36m(pid=11334)[0m     @     0x7f282580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11334)[0m     @     0x7f282582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11334)[0m     @     0x7f2824ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11334)[0m     @     0x7f2824ccd388 at::native::copy_impl()
[2m[36m(pid=11334)[0m     @     0x7f2824ccf5a4 at::native::copy_()
[2m[36m(pid=11334)[0m     @     0x7f28253ba4f5 at::Tensor::copy_()
[2m[36m(pid=11334)[0m     @     0x7f282788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11334)[0m     @     0x7f28253ba4f5 at::Tensor::copy_()
[2m[36m(pid=11334)[0m     @     0x7f282b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11334)[0m     @     0x55e38a90dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11334)[0m     @     0x55e38a868b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11334)[0m     @     0x55e38a8f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11334)[0m     @     0x55e38a8f4a20 method_vectorcall
[2m[36m(pid=11334)[0m     @     0x55e38a868bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11334)[0m     @     0x55e38a8f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11334)[0m     @     0x55e38a8f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11334)[0m     @     0x55e38a869689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11334)[0m     @     0x55e38a8f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11334)[0m     @     0x55e38a8f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11334)[0m     @     0x55e38a869689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11334)[0m     @     0x55e38a8f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11334)[0m     @     0x55e38a8f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11334)[0m     @     0x55e38a869689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11334)[0m     @     0x55e38a8f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11334)[0m     @     0x55e38a8f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11334)[0m     @     0x55e38a869689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11299)[0m     @     0x7f43cb44cd91 at::TensorIterator::for_each()
[2m[36m(pid=11299)[0m     @     0x7f43cbd2fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11299)[0m     @     0x7f43cbd52c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11299)[0m     @     0x7f43cb1f4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11299)[0m     @     0x7f43cb1f2388 at::native::copy_impl()
[2m[36m(pid=11299)[0m     @     0x7f43cb1f45a4 at::native::copy_()
[2m[36m(pid=11299)[0m     @     0x7f43cb8df4f5 at::Tensor::copy_()
[2m[36m(pid=11299)[0m     @     0x7f43cddb28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11299)[0m     @     0x7f43cb8df4f5 at::Tensor::copy_()
[2m[36m(pid=11299)[0m     @     0x7f43d198a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11299)[0m     @     0x5589cddbbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11299)[0m     @     0x5589cdd16b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11299)[0m     @     0x5589cdda1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11299)[0m     @     0x5589cdda2a20 method_vectorcall
[2m[36m(pid=11299)[0m     @     0x5589cdd16bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11299)[0m     @     0x5589cdda1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11299)[0m     @     0x5589cdda2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11299)[0m     @     0x5589cdd17689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11299)[0m     @     0x5589cdda1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11299)[0m     @     0x5589cdda2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11299)[0m     @     0x5589cdd17689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11299)[0m     @     0x5589cdda1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11299)[0m     @     0x5589cdda2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11299)[0m     @     0x5589cdd17689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11299)[0m     @     0x5589cdda1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11299)[0m     @     0x5589cdda2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11299)[0m     @     0x5589cdd17689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11232)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11232)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11232)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11232)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11232)[0m *** SIGSEGV (@0x0) received by PID 11232 (TID 0x7f3ca81e7700) from PID 0; stack trace: ***
[2m[36m(pid=11232)[0m     @     0x7f3ca7dc0390 (unknown)
[2m[36m(pid=11232)[0m     @     0x7f0da7d5ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11232)[0m     @     0x7f0da74897db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11232)[0m     @     0x7f0da748c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11232)[0m     @     0x7f0da748cad3 at::TensorIterator::for_each()
[2m[36m(pid=11232)[0m     @     0x7f0da748cd91 at::TensorIterator::for_each()
[2m[36m(pid=11232)[0m     @     0x7f0da7d6fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11232)[0m     @     0x7f0da7d92c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11232)[0m     @     0x7f0da7234a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11232)[0m     @     0x7f0da7232388 at::native::copy_impl()
[2m[36m(pid=11263)[0m     @     0x7f67c4cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=11263)[0m     @     0x7f67c4cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=11263)[0m     @     0x7f67c55b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11263)[0m     @     0x7f67c55d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11263)[0m     @     0x7f67c4a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11263)[0m     @     0x7f67c4a78388 at::native::copy_impl()
[2m[36m(pid=11263)[0m     @     0x7f67c4a7a5a4 at::native::copy_()
[2m[36m(pid=11263)[0m     @     0x7f67c51654f5 at::Tensor::copy_()
[2m[36m(pid=11263)[0m     @     0x7f67c76388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11263)[0m     @     0x7f67c51654f5 at::Tensor::copy_()
[2m[36m(pid=11263)[0m     @     0x7f67cb21079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11263)[0m     @     0x55685e881fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11263)[0m     @     0x55685e7dcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11263)[0m     @     0x55685e867baf _PyEval_EvalCodeWithName
[2m[36m(pid=11263)[0m     @     0x55685e868a20 method_vectorcall
[2m[36m(pid=11263)[0m     @     0x55685e7dcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11263)[0m     @     0x55685e867baf _PyEval_EvalCodeWithName
[2m[36m(pid=11263)[0m     @     0x55685e868643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11263)[0m     @     0x55685e7dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11263)[0m     @     0x55685e867baf _PyEval_EvalCodeWithName
[2m[36m(pid=11263)[0m     @     0x55685e868643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11263)[0m     @     0x55685e7dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11263)[0m     @     0x55685e867baf _PyEval_EvalCodeWithName
[2m[36m(pid=11263)[0m     @     0x55685e868643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11263)[0m     @     0x55685e7dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11263)[0m     @     0x55685e867baf _PyEval_EvalCodeWithName
[2m[36m(pid=11263)[0m     @     0x55685e868643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11263)[0m     @     0x55685e7dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11332)[0m     @     0x7f7ac8afad91 at::TensorIterator::for_each()
[2m[36m(pid=11332)[0m     @     0x7f7ac93ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11332)[0m     @     0x7f7ac9400c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11332)[0m     @     0x7f7ac88a2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11332)[0m     @     0x7f7ac88a0388 at::native::copy_impl()
[2m[36m(pid=11332)[0m     @     0x7f7ac88a25a4 at::native::copy_()
[2m[36m(pid=11332)[0m     @     0x7f7ac8f8d4f5 at::Tensor::copy_()
[2m[36m(pid=11332)[0m     @     0x7f7acb4608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11332)[0m     @     0x7f7ac8f8d4f5 at::Tensor::copy_()
[2m[36m(pid=11332)[0m     @     0x7f7acf03879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11332)[0m     @     0x562afba28fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11332)[0m     @     0x562afb983b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11332)[0m     @     0x562afba0ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11332)[0m     @     0x562afba0fa20 method_vectorcall
[2m[36m(pid=11332)[0m     @     0x562afb983bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11332)[0m     @     0x562afba0ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11332)[0m     @     0x562afba0f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11332)[0m     @     0x562afb984689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11332)[0m     @     0x562afba0ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11332)[0m     @     0x562afba0f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11332)[0m     @     0x562afb984689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11332)[0m     @     0x562afba0ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11332)[0m     @     0x562afba0f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11332)[0m     @     0x562afb984689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11332)[0m     @     0x562afba0ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11332)[0m     @     0x562afba0f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11332)[0m     @     0x562afb984689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11336)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11336)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11336)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11336)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11336)[0m *** SIGSEGV (@0x0) received by PID 11336 (TID 0x7f78dfa01700) from PID 0; stack trace: ***
[2m[36m(pid=11336)[0m     @     0x7f78df5da390 (unknown)
[2m[36m(pid=11336)[0m     @     0x7f49df43af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11336)[0m     @     0x7f49deb657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11336)[0m     @     0x7f49deb688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11336)[0m     @     0x7f49deb68ad3 at::TensorIterator::for_each()
[2m[36m(pid=11336)[0m     @     0x7f49deb68d91 at::TensorIterator::for_each()
[2m[36m(pid=11336)[0m     @     0x7f49df44bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11336)[0m     @     0x7f49df46ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11336)[0m     @     0x7f49de910a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11336)[0m     @     0x7f49de90e388 at::native::copy_impl()
[2m[36m(pid=11297)[0m     @     0x7f77a650cad3 at::TensorIterator::for_each()
[2m[36m(pid=11297)[0m     @     0x7f77a650cd91 at::TensorIterator::for_each()
[2m[36m(pid=11297)[0m     @     0x7f77a6defb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11297)[0m     @     0x7f77a6e12c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11297)[0m     @     0x7f77a62b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11297)[0m     @     0x7f77a62b2388 at::native::copy_impl()
[2m[36m(pid=11297)[0m     @     0x7f77a62b45a4 at::native::copy_()
[2m[36m(pid=11297)[0m     @     0x7f77a699f4f5 at::Tensor::copy_()
[2m[36m(pid=11297)[0m     @     0x7f77a8e728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11297)[0m     @     0x7f77a699f4f5 at::Tensor::copy_()
[2m[36m(pid=11297)[0m     @     0x7f77aca4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11297)[0m     @     0x55d25fcc3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11297)[0m     @     0x55d25fc1eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11297)[0m     @     0x55d25fca9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11297)[0m     @     0x55d25fcaaa20 method_vectorcall
[2m[36m(pid=11297)[0m     @     0x55d25fc1ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11297)[0m     @     0x55d25fca9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11297)[0m     @     0x55d25fcaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11297)[0m     @     0x55d25fc1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11297)[0m     @     0x55d25fca9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11297)[0m     @     0x55d25fcaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11297)[0m     @     0x55d25fc1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11297)[0m     @     0x55d25fca9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11297)[0m     @     0x55d25fcaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11297)[0m     @     0x55d25fc1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11297)[0m     @     0x55d25fca9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11297)[0m     @     0x55d25fcaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11297)[0m     @     0x55d25fc1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11218)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11218)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11218)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11218)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11218)[0m *** SIGSEGV (@0x0) received by PID 11218 (TID 0x7f4272c27700) from PID 0; stack trace: ***
[2m[36m(pid=11218)[0m     @     0x7f4272800390 (unknown)
[2m[36m(pid=11218)[0m     @     0x7f137270af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11218)[0m     @     0x7f1371e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11218)[0m     @     0x7f1371e388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11218)[0m     @     0x7f1371e38ad3 at::TensorIterator::for_each()
[2m[36m(pid=11218)[0m     @     0x7f1371e38d91 at::TensorIterator::for_each()
[2m[36m(pid=11218)[0m     @     0x7f137271bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11218)[0m     @     0x7f137273ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11218)[0m     @     0x7f1371be0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11218)[0m     @     0x7f1371bde388 at::native::copy_impl()
[2m[36m(pid=11293)[0m     @     0x7f042ba91ad3 at::TensorIterator::for_each()
[2m[36m(pid=11293)[0m     @     0x7f042ba91d91 at::TensorIterator::for_each()
[2m[36m(pid=11293)[0m     @     0x7f042c374b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11293)[0m     @     0x7f042c397c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11293)[0m     @     0x7f042b839a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11293)[0m     @     0x7f042b837388 at::native::copy_impl()
[2m[36m(pid=11293)[0m     @     0x7f042b8395a4 at::native::copy_()
[2m[36m(pid=11293)[0m     @     0x7f042bf244f5 at::Tensor::copy_()
[2m[36m(pid=11293)[0m     @     0x7f042e3f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11293)[0m     @     0x7f042bf244f5 at::Tensor::copy_()
[2m[36m(pid=11293)[0m     @     0x7f0431fcf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11293)[0m     @     0x562401c3efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11293)[0m     @     0x562401b99b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11293)[0m     @     0x562401c24baf _PyEval_EvalCodeWithName
[2m[36m(pid=11293)[0m     @     0x562401c25a20 method_vectorcall
[2m[36m(pid=11293)[0m     @     0x562401b99bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11293)[0m     @     0x562401c24baf _PyEval_EvalCodeWithName
[2m[36m(pid=11293)[0m     @     0x562401c25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11293)[0m     @     0x562401b9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11293)[0m     @     0x562401c24baf _PyEval_EvalCodeWithName
[2m[36m(pid=11293)[0m     @     0x562401c25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11293)[0m     @     0x562401b9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11293)[0m     @     0x562401c24baf _PyEval_EvalCodeWithName
[2m[36m(pid=11293)[0m     @     0x562401c25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11293)[0m     @     0x562401b9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11293)[0m     @     0x562401c24baf _PyEval_EvalCodeWithName
[2m[36m(pid=11293)[0m     @     0x562401c25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11293)[0m     @     0x562401b9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11269)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11269)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11269)[0m *** SIGSEGV (@0x0) received by PID 11269 (TID 0x7fb2937e2700) from PID 0; stack trace: ***
[2m[36m(pid=11269)[0m     @     0x7fb2933bb390 (unknown)
[2m[36m(pid=11269)[0m     @     0x7f8393229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11269)[0m     @     0x7f83929547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11269)[0m     @     0x7f83929578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11269)[0m     @     0x7f8392957ad3 at::TensorIterator::for_each()
[2m[36m(pid=11269)[0m     @     0x7f8392957d91 at::TensorIterator::for_each()
[2m[36m(pid=11269)[0m     @     0x7f839323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11269)[0m     @     0x7f839325dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11269)[0m     @     0x7f83926ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11269)[0m     @     0x7f83926fd388 at::native::copy_impl()
[2m[36m(pid=11269)[0m     @     0x7f83926ff5a4 at::native::copy_()
[2m[36m(pid=11201)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11201)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11201)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11201)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11201)[0m *** SIGSEGV (@0x0) received by PID 11201 (TID 0x7fbece922700) from PID 0; stack trace: ***
[2m[36m(pid=11201)[0m     @     0x7fbece4fb390 (unknown)
[2m[36m(pid=11201)[0m     @     0x7f8fce48cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11201)[0m     @     0x7f8fcdbb77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11201)[0m     @     0x7f8fcdbba8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11201)[0m     @     0x7f8fcdbbaad3 at::TensorIterator::for_each()
[2m[36m(pid=11201)[0m     @     0x7f8fcdbbad91 at::TensorIterator::for_each()
[2m[36m(pid=11201)[0m     @     0x7f8fce49db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11201)[0m     @     0x7f8fce4c0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11201)[0m     @     0x7f8fcd962a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11201)[0m     @     0x7f8fcd960388 at::native::copy_impl()
[2m[36m(pid=11206)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11206)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11206)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11206)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11206)[0m *** SIGSEGV (@0x0) received by PID 11206 (TID 0x7f564be77700) from PID 0; stack trace: ***
[2m[36m(pid=11206)[0m     @     0x7f564ba50390 (unknown)
[2m[36m(pid=11206)[0m     @     0x7f274b8def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11206)[0m     @     0x7f274b0097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11206)[0m     @     0x7f274b00c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11206)[0m     @     0x7f274b00cad3 at::TensorIterator::for_each()
[2m[36m(pid=11206)[0m     @     0x7f274b00cd91 at::TensorIterator::for_each()
[2m[36m(pid=11206)[0m     @     0x7f274b8efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11206)[0m     @     0x7f274b912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11206)[0m     @     0x7f274adb4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11206)[0m     @     0x7f274adb2388 at::native::copy_impl()
[2m[36m(pid=11277)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11277)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11277)[0m *** SIGSEGV (@0x0) received by PID 11277 (TID 0x7fdc939a0700) from PID 0; stack trace: ***
[2m[36m(pid=11277)[0m     @     0x7fdc93579390 (unknown)
[2m[36m(pid=11277)[0m     @     0x7fad9350df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11277)[0m     @     0x7fad92c387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11277)[0m     @     0x7fad92c3b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11277)[0m     @     0x7fad92c3bad3 at::TensorIterator::for_each()
[2m[36m(pid=11277)[0m     @     0x7fad92c3bd91 at::TensorIterator::for_each()
[2m[36m(pid=11277)[0m     @     0x7fad9351eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11277)[0m     @     0x7fad93541c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11277)[0m     @     0x7fad929e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11277)[0m     @     0x7fad929e1388 at::native::copy_impl()
[2m[36m(pid=11328)[0m     @     0x7f7bec7efad3 at::TensorIterator::for_each()
[2m[36m(pid=11328)[0m     @     0x7f7bec7efd91 at::TensorIterator::for_each()
[2m[36m(pid=11328)[0m     @     0x7f7bed0d2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11328)[0m     @     0x7f7bed0f5c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11328)[0m     @     0x7f7bec597a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11328)[0m     @     0x7f7bec595388 at::native::copy_impl()
[2m[36m(pid=11328)[0m     @     0x7f7bec5975a4 at::native::copy_()
[2m[36m(pid=11328)[0m     @     0x7f7becc824f5 at::Tensor::copy_()
[2m[36m(pid=11328)[0m     @     0x7f7bef1558de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11328)[0m     @     0x7f7becc824f5 at::Tensor::copy_()
[2m[36m(pid=11328)[0m     @     0x7f7bf2d2d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11328)[0m     @     0x556c2753cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11328)[0m     @     0x556c27497b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11328)[0m     @     0x556c27522baf _PyEval_EvalCodeWithName
[2m[36m(pid=11328)[0m     @     0x556c27523a20 method_vectorcall
[2m[36m(pid=11328)[0m     @     0x556c27497bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11279)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11279)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11279)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11279)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11279)[0m *** SIGSEGV (@0x0) received by PID 11279 (TID 0x7fa6621d1700) from PID 0; stack trace: ***
[2m[36m(pid=11279)[0m     @     0x7fa661daa390 (unknown)
[2m[36m(pid=11279)[0m     @     0x7f7761d52f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11279)[0m     @     0x7f776147d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11279)[0m     @     0x7f77614808f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11279)[0m     @     0x7f7761480ad3 at::TensorIterator::for_each()
[2m[36m(pid=11279)[0m     @     0x7f7761480d91 at::TensorIterator::for_each()
[2m[36m(pid=11279)[0m     @     0x7f7761d63b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11279)[0m     @     0x7f7761d86c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11279)[0m     @     0x7f7761228a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11279)[0m     @     0x7f7761226388 at::native::copy_impl()
[2m[36m(pid=11289)[0m     @     0x7f13e133bd91 at::TensorIterator::for_each()
[2m[36m(pid=11289)[0m     @     0x7f13e1c1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11289)[0m     @     0x7f13e1c41c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11289)[0m     @     0x7f13e10e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11289)[0m     @     0x7f13e10e1388 at::native::copy_impl()
[2m[36m(pid=11289)[0m     @     0x7f13e10e35a4 at::native::copy_()
[2m[36m(pid=11289)[0m     @     0x7f13e17ce4f5 at::Tensor::copy_()
[2m[36m(pid=11289)[0m     @     0x7f13e3ca18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11289)[0m     @     0x7f13e17ce4f5 at::Tensor::copy_()
[2m[36m(pid=11289)[0m     @     0x7f13e787979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11289)[0m     @     0x5637e09b2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11289)[0m     @     0x5637e090db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11289)[0m     @     0x5637e0998baf _PyEval_EvalCodeWithName
[2m[36m(pid=11289)[0m     @     0x5637e0999a20 method_vectorcall
[2m[36m(pid=11289)[0m     @     0x5637e090dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11289)[0m     @     0x5637e0998baf _PyEval_EvalCodeWithName
[2m[36m(pid=11289)[0m     @     0x5637e0999643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11289)[0m     @     0x5637e090e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11289)[0m     @     0x5637e0998baf _PyEval_EvalCodeWithName
[2m[36m(pid=11289)[0m     @     0x5637e0999643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11289)[0m     @     0x5637e090e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11289)[0m     @     0x5637e0998baf _PyEval_EvalCodeWithName
[2m[36m(pid=11289)[0m     @     0x5637e0999643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11289)[0m     @     0x5637e090e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11289)[0m     @     0x5637e0998baf _PyEval_EvalCodeWithName
[2m[36m(pid=11289)[0m     @     0x5637e0999643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11289)[0m     @     0x5637e090e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11302)[0m     @     0x7fb5347b6ad3 at::TensorIterator::for_each()
[2m[36m(pid=11302)[0m     @     0x7fb5347b6d91 at::TensorIterator::for_each()
[2m[36m(pid=11302)[0m     @     0x7fb535099b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11302)[0m     @     0x7fb5350bcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11302)[0m     @     0x7fb53455ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11302)[0m     @     0x7fb53455c388 at::native::copy_impl()
[2m[36m(pid=11302)[0m     @     0x7fb53455e5a4 at::native::copy_()
[2m[36m(pid=11302)[0m     @     0x7fb534c494f5 at::Tensor::copy_()
[2m[36m(pid=11302)[0m     @     0x7fb53711c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11302)[0m     @     0x7fb534c494f5 at::Tensor::copy_()
[2m[36m(pid=11302)[0m     @     0x7fb53acf479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11302)[0m     @     0x55cc25403fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11302)[0m     @     0x55cc2535eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11302)[0m     @     0x55cc253e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11302)[0m     @     0x55cc253eaa20 method_vectorcall
[2m[36m(pid=11302)[0m     @     0x55cc2535ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11302)[0m     @     0x55cc253e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11302)[0m     @     0x55cc253ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11302)[0m     @     0x55cc2535f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11302)[0m     @     0x55cc253e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11302)[0m     @     0x55cc253ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11302)[0m     @     0x55cc2535f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11302)[0m     @     0x55cc253e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11302)[0m     @     0x55cc253ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11302)[0m     @     0x55cc2535f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11302)[0m     @     0x55cc253e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11302)[0m     @     0x55cc253ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11302)[0m     @     0x55cc2535f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11200)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11200)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11200)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11200)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11200)[0m *** SIGSEGV (@0x0) received by PID 11200 (TID 0x7f90c4d0d700) from PID 0; stack trace: ***
[2m[36m(pid=11200)[0m     @     0x7f90c48e6390 (unknown)
[2m[36m(pid=11200)[0m     @     0x7f61c473ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11200)[0m     @     0x7f61c3e697db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11200)[0m     @     0x7f61c3e6c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11200)[0m     @     0x7f61c3e6cad3 at::TensorIterator::for_each()
[2m[36m(pid=11200)[0m     @     0x7f61c3e6cd91 at::TensorIterator::for_each()
[2m[36m(pid=11200)[0m     @     0x7f61c474fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11200)[0m     @     0x7f61c4772c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11200)[0m     @     0x7f61c3c14a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11200)[0m     @     0x7f61c3c12388 at::native::copy_impl()
[2m[36m(pid=11200)[0m     @     0x7f61c3c145a4 at::native::copy_()
[2m[36m(pid=11273)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11273)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11273)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11273)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11273)[0m *** SIGSEGV (@0x0) received by PID 11273 (TID 0x7f272b428700) from PID 0; stack trace: ***
[2m[36m(pid=11273)[0m     @     0x7f272b001390 (unknown)
[2m[36m(pid=11273)[0m     @     0x7ef82af94f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11273)[0m     @     0x7ef82a6bf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11273)[0m     @     0x7ef82a6c28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11273)[0m     @     0x7ef82a6c2ad3 at::TensorIterator::for_each()
[2m[36m(pid=11273)[0m     @     0x7ef82a6c2d91 at::TensorIterator::for_each()
[2m[36m(pid=11273)[0m     @     0x7ef82afa5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11273)[0m     @     0x7ef82afc8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11280)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11280)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11280)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11280)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11280)[0m *** SIGSEGV (@0x0) received by PID 11280 (TID 0x7fc255c17700) from PID 0; stack trace: ***
[2m[36m(pid=11280)[0m     @     0x7fc2557f0390 (unknown)
[2m[36m(pid=11280)[0m     @     0x7f93556f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11280)[0m     @     0x7f9354e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11280)[0m     @     0x7f9354e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11280)[0m     @     0x7f9354e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=11280)[0m     @     0x7f9354e22d91 at::TensorIterator::for_each()
[2m[36m(pid=11280)[0m     @     0x7f9355705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11280)[0m     @     0x7f9355728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11280)[0m     @     0x7f9354bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11280)[0m     @     0x7f9354bc8388 at::native::copy_impl()
[2m[36m(pid=11311)[0m     @     0x7ef0b9d2fd91 at::TensorIterator::for_each()
[2m[36m(pid=11311)[0m     @     0x7ef0ba612b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11311)[0m     @     0x7ef0ba635c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11311)[0m     @     0x7ef0b9ad7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11311)[0m     @     0x7ef0b9ad5388 at::native::copy_impl()
[2m[36m(pid=11311)[0m     @     0x7ef0b9ad75a4 at::native::copy_()
[2m[36m(pid=11311)[0m     @     0x7ef0ba1c24f5 at::Tensor::copy_()
[2m[36m(pid=11311)[0m     @     0x7ef0bc6958de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11311)[0m     @     0x7ef0ba1c24f5 at::Tensor::copy_()
[2m[36m(pid=11311)[0m     @     0x7ef0c026d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11311)[0m     @     0x555e30525fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11311)[0m     @     0x555e30480b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11311)[0m     @     0x555e3050bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11311)[0m     @     0x555e3050ca20 method_vectorcall
[2m[36m(pid=11311)[0m     @     0x555e30480bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11311)[0m     @     0x555e3050bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11311)[0m     @     0x555e3050c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11311)[0m     @     0x555e30481689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11311)[0m     @     0x555e3050bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11311)[0m     @     0x555e3050c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11311)[0m     @     0x555e30481689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11311)[0m     @     0x555e3050bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11311)[0m     @     0x555e3050c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11311)[0m     @     0x555e30481689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11311)[0m     @     0x555e3050bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11311)[0m     @     0x555e3050c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11311)[0m     @     0x555e30481689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11209)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11209)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11209)[0m *** SIGSEGV (@0x0) received by PID 11209 (TID 0x7f8edb964700) from PID 0; stack trace: ***
[2m[36m(pid=11209)[0m     @     0x7f8edb53d390 (unknown)
[2m[36m(pid=11209)[0m     @     0x7f5fdb43af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11209)[0m     @     0x7f5fdab657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11209)[0m     @     0x7f5fdab688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11209)[0m     @     0x7f5fdab68ad3 at::TensorIterator::for_each()
[2m[36m(pid=11209)[0m     @     0x7f5fdab68d91 at::TensorIterator::for_each()
[2m[36m(pid=11209)[0m     @     0x7f5fdb44bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11209)[0m     @     0x7f5fdb46ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11209)[0m     @     0x7f5fda910a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11209)[0m     @     0x7f5fda90e388 at::native::copy_impl()
[2m[36m(pid=11198)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11198)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11198)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11198)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11198)[0m *** SIGSEGV (@0x0) received by PID 11198 (TID 0x7fe3bd2ec700) from PID 0; stack trace: ***
[2m[36m(pid=11198)[0m     @     0x7fe3bcec5390 (unknown)
[2m[36m(pid=11198)[0m     @     0x7fb4bce77f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11198)[0m     @     0x7fb4bc5a27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11198)[0m     @     0x7fb4bc5a58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11198)[0m     @     0x7fb4bc5a5ad3 at::TensorIterator::for_each()
[2m[36m(pid=11198)[0m     @     0x7fb4bc5a5d91 at::TensorIterator::for_each()
[2m[36m(pid=11198)[0m     @     0x7fb4bce88b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11198)[0m     @     0x7fb4bceabc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11198)[0m     @     0x7fb4bc34da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11198)[0m     @     0x7fb4bc34b388 at::native::copy_impl()
[2m[36m(pid=11198)[0m     @     0x7fb4bc34d5a4 at::native::copy_()
[2m[36m(pid=11259)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11259)[0m *** SIGSEGV (@0x0) received by PID 11259 (TID 0x7f400c7e3700) from PID 0; stack trace: ***
[2m[36m(pid=11259)[0m     @     0x7f400c3bc390 (unknown)
[2m[36m(pid=11259)[0m     @     0x7f110c363f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11259)[0m     @     0x7f110ba8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11259)[0m     @     0x7f110ba918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11259)[0m     @     0x7f110ba91ad3 at::TensorIterator::for_each()
[2m[36m(pid=11259)[0m     @     0x7f110ba91d91 at::TensorIterator::for_each()
[2m[36m(pid=11259)[0m     @     0x7f110c374b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11259)[0m     @     0x7f110c397c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11259)[0m     @     0x7f110b839a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11259)[0m     @     0x7f110b837388 at::native::copy_impl()
[2m[36m(pid=11259)[0m     @     0x7f110b8395a4 at::native::copy_()
[2m[36m(pid=11230)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11230)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11230)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11230)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11230)[0m *** SIGSEGV (@0x0) received by PID 11230 (TID 0x7f093bfbc700) from PID 0; stack trace: ***
[2m[36m(pid=11230)[0m     @     0x7f093bb95390 (unknown)
[2m[36m(pid=11230)[0m     @     0x7eda3baf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11230)[0m     @     0x7eda3b2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11230)[0m     @     0x7eda3b2238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11230)[0m     @     0x7eda3b223ad3 at::TensorIterator::for_each()
[2m[36m(pid=11230)[0m     @     0x7eda3b223d91 at::TensorIterator::for_each()
[2m[36m(pid=11230)[0m     @     0x7eda3bb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11230)[0m     @     0x7eda3bb29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11230)[0m     @     0x7eda3afcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11230)[0m     @     0x7eda3afc9388 at::native::copy_impl()
[2m[36m(pid=11230)[0m     @     0x7eda3afcb5a4 at::native::copy_()
[2m[36m(pid=11318)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11318)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11318)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11318)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11318)[0m *** SIGSEGV (@0x0) received by PID 11318 (TID 0x7f9098e5f700) from PID 0; stack trace: ***
[2m[36m(pid=11318)[0m     @     0x7f9098a38390 (unknown)
[2m[36m(pid=11318)[0m     @     0x7f6198774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11318)[0m     @     0x7f6197e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11318)[0m     @     0x7f6197ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11318)[0m     @     0x7f6197ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=11318)[0m     @     0x7f6197ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=11318)[0m     @     0x7f6198785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11318)[0m     @     0x7f61987a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11318)[0m     @     0x7f6197c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11318)[0m     @     0x7f6197c48388 at::native::copy_impl()
[2m[36m(pid=11318)[0m     @     0x7f6197c4a5a4 at::native::copy_()
[2m[36m(pid=11305)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11305)[0m *** SIGSEGV (@0x0) received by PID 11305 (TID 0x7f049d230700) from PID 0; stack trace: ***
[2m[36m(pid=11305)[0m     @     0x7f049ce09390 (unknown)
[2m[36m(pid=11305)[0m     @     0x7ed59cd89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11305)[0m     @     0x7ed59c4b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11305)[0m     @     0x7ed59c4b78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11305)[0m     @     0x7ed59c4b7ad3 at::TensorIterator::for_each()
[2m[36m(pid=11305)[0m     @     0x7ed59c4b7d91 at::TensorIterator::for_each()
[2m[36m(pid=11305)[0m     @     0x7ed59cd9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11305)[0m     @     0x7ed59cdbdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11305)[0m     @     0x7ed59c25fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11305)[0m     @     0x7ed59c25d388 at::native::copy_impl()
[2m[36m(pid=11305)[0m     @     0x7ed59c25f5a4 at::native::copy_()
[2m[36m(pid=11221)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11221)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11221)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11221)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11221)[0m *** SIGSEGV (@0x0) received by PID 11221 (TID 0x7fd3627c6700) from PID 0; stack trace: ***
[2m[36m(pid=11221)[0m     @     0x7fd36239f390 (unknown)
[2m[36m(pid=11221)[0m     @     0x7fa4622fef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11221)[0m     @     0x7fa461a297db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11221)[0m     @     0x7fa461a2c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11221)[0m     @     0x7fa461a2cad3 at::TensorIterator::for_each()
[2m[36m(pid=11221)[0m     @     0x7fa461a2cd91 at::TensorIterator::for_each()
[2m[36m(pid=11221)[0m     @     0x7fa46230fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11221)[0m     @     0x7fa462332c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11221)[0m     @     0x7fa4617d4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11221)[0m     @     0x7fa4617d2388 at::native::copy_impl()
[2m[36m(pid=11290)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11290)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11290)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11290)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11290)[0m *** SIGSEGV (@0x0) received by PID 11290 (TID 0x7fdac0a72700) from PID 0; stack trace: ***
[2m[36m(pid=11290)[0m     @     0x7fdac064b390 (unknown)
[2m[36m(pid=11290)[0m     @     0x7fabc0563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11290)[0m     @     0x7fabbfc8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11213)[0m     @     0x7f4eec6e0390 (unknown)
[2m[36m(pid=11213)[0m     @     0x7f1fec67af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11213)[0m     @     0x7f1febda57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11213)[0m     @     0x7f1febda88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11213)[0m     @     0x7f1febda8ad3 at::TensorIterator::for_each()
[2m[36m(pid=11213)[0m     @     0x7f1febda8d91 at::TensorIterator::for_each()
[2m[36m(pid=11213)[0m     @     0x7f1fec68bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11213)[0m     @     0x7f1fec6aec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11213)[0m     @     0x7f1febb50a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11213)[0m     @     0x7f1febb4e388 at::native::copy_impl()
[2m[36m(pid=11212)[0m     @     0x7fba742d0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11212)[0m     @     0x7fba739fb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11212)[0m     @     0x7fba739fe8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11212)[0m     @     0x7fba739fead3 at::TensorIterator::for_each()
[2m[36m(pid=11212)[0m     @     0x7fba739fed91 at::TensorIterator::for_each()
[2m[36m(pid=11212)[0m     @     0x7fba742e1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11212)[0m     @     0x7fba74304c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11212)[0m     @     0x7fba737a6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11212)[0m     @     0x7fba737a4388 at::native::copy_impl()
[2m[36m(pid=11212)[0m     @     0x7fba737a65a4 at::native::copy_()
[2m[36m(pid=11271)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11271)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11271)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11271)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11271)[0m *** SIGSEGV (@0x0) received by PID 11271 (TID 0x7efc6c78b700) from PID 0; stack trace: ***
[2m[36m(pid=11271)[0m     @     0x7efc6c364390 (unknown)
[2m[36m(pid=11271)[0m     @     0x7ecd6c2def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11271)[0m     @     0x7ecd6ba097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11271)[0m     @     0x7ecd6ba0c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11271)[0m     @     0x7ecd6ba0cad3 at::TensorIterator::for_each()
[2m[36m(pid=11271)[0m     @     0x7ecd6ba0cd91 at::TensorIterator::for_each()
[2m[36m(pid=11271)[0m     @     0x7ecd6c2efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11216)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11216)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11216)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11216)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11216)[0m *** SIGSEGV (@0x0) received by PID 11216 (TID 0x7f71aa91c700) from PID 0; stack trace: ***
[2m[36m(pid=11216)[0m     @     0x7f71aa4f5390 (unknown)
[2m[36m(pid=11216)[0m     @     0x7f42aa467f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11216)[0m     @     0x7f42a9b927db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11283)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11283)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11283)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11283)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11283)[0m *** SIGSEGV (@0x0) received by PID 11283 (TID 0x7f50eb722700) from PID 0; stack trace: ***
[2m[36m(pid=11283)[0m     @     0x7f50eb2fb390 (unknown)
[2m[36m(pid=11283)[0m     @     0x7f21eb229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11283)[0m     @     0x7f21ea9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11283)[0m     @     0x7f21ea9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11283)[0m     @     0x7f21ea957ad3 at::TensorIterator::for_each()
[2m[36m(pid=11283)[0m     @     0x7f21ea957d91 at::TensorIterator::for_each()
[2m[36m(pid=11283)[0m     @     0x7f21eb23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11283)[0m     @     0x7f21eb25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11283)[0m     @     0x7f21ea6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11268)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11268)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11268)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11268)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11268)[0m *** SIGSEGV (@0x0) received by PID 11268 (TID 0x7f516c8c8700) from PID 0; stack trace: ***
[2m[36m(pid=11268)[0m     @     0x7f516c4a1390 (unknown)
[2m[36m(pid=11268)[0m     @     0x7f226c3e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11268)[0m     @     0x7f226bb0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11268)[0m     @     0x7f226bb118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11268)[0m     @     0x7f226bb11ad3 at::TensorIterator::for_each()
[2m[36m(pid=11256)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=11256)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=11256)[0m *** Aborted at 1604571525 (unix time) try "date -d @1604571525" if you are using GNU date ***
[2m[36m(pid=11256)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11256)[0m *** SIGSEGV (@0x0) received by PID 11256 (TID 0x7fafce870700) from PID 0; stack trace: ***
[2m[36m(pid=11256)[0m     @     0x7fafce449390 (unknown)
[2m[36m(pid=11256)[0m     @     0x7f80ce365f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11256)[0m     @     0x7f80cda907db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11270)[0m PC: @                0x0 (unknown)
[2m[36m(pid=11270)[0m *** SIGSEGV (@0x0) received by PID 11270 (TID 0x7f977fccf700) from PID 0; stack trace: ***
[2m[36m(pid=11270)[0m     @     0x7f977f8a8390 (unknown)
[2m[36m(pid=11270)[0m     @     0x7f687f84cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=11270)[0m     @     0x7f687ef777db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11270)[0m     @     0x7f687ef7a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11270)[0m     @     0x7f687ef7aad3 at::TensorIterator::for_each()
[2m[36m(pid=11270)[0m     @     0x7f687ef7ad91 at::TensorIterator::for_each()
[2m[36m(pid=11270)[0m     @     0x7f687f85db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11270)[0m     @     0x7f687f880c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11270)[0m     @     0x7f687ed22a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11278)[0m     @     0x7ecfb35398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11278)[0m     @     0x7ecfb3539ad3 at::TensorIterator::for_each()
[2m[36m(pid=11278)[0m     @     0x7ecfb3539d91 at::TensorIterator::for_each()
[2m[36m(pid=11278)[0m     @     0x7ecfb3e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11278)[0m     @     0x7ecfb3e3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11276)[0m     @     0x7f73e7f25ad3 at::TensorIterator::for_each()
[2m[36m(pid=11276)[0m     @     0x7f73e7f25d91 at::TensorIterator::for_each()
[2m[36m(pid=11276)[0m     @     0x7f73e8808b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11276)[0m     @     0x7f73e882bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11276)[0m     @     0x7f73e7ccda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11276)[0m     @     0x7f73e7ccb388 at::native::copy_impl()
[2m[36m(pid=11276)[0m     @     0x7f73e7ccd5a4 at::native::copy_()
[2m[36m(pid=11267)[0m     @     0x7f0b1214f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11267)[0m     @     0x7f0b1214fad3 at::TensorIterator::for_each()
[2m[36m(pid=11267)[0m     @     0x7f0b1214fd91 at::TensorIterator::for_each()
[2m[36m(pid=11267)[0m     @     0x7f0b12a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11267)[0m     @     0x7f0b12a55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11267)[0m     @     0x7f0b11ef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11267)[0m     @     0x7f0b11ef5388 at::native::copy_impl()
[2m[36m(pid=11308)[0m     @     0x7f910c9b88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11308)[0m     @     0x7f910c9b8ad3 at::TensorIterator::for_each()
[2m[36m(pid=11308)[0m     @     0x7f910c9b8d91 at::TensorIterator::for_each()
[2m[36m(pid=11308)[0m     @     0x7f910d29bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11308)[0m     @     0x7f910d2bec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11308)[0m     @     0x7f910c760a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11308)[0m     @     0x7f910c75e388 at::native::copy_impl()
[2m[36m(pid=11225)[0m     @     0x7fb5ab176ad3 at::TensorIterator::for_each()
[2m[36m(pid=11225)[0m     @     0x7fb5ab176d91 at::TensorIterator::for_each()
[2m[36m(pid=11225)[0m     @     0x7fb5aba59b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11225)[0m     @     0x7fb5aba7cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11225)[0m     @     0x7fb5aaf1ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11225)[0m     @     0x7fb5aaf1c388 at::native::copy_impl()
[2m[36m(pid=11225)[0m     @     0x7fb5aaf1e5a4 at::native::copy_()
[2m[36m(pid=11199)[0m     @     0x7f985cda28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11199)[0m     @     0x7f985cda2ad3 at::TensorIterator::for_each()
[2m[36m(pid=11199)[0m     @     0x7f985cda2d91 at::TensorIterator::for_each()
[2m[36m(pid=11199)[0m     @     0x7f985d685b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11224)[0m     @     0x7f2a6ece08f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11224)[0m     @     0x7f2a6ece0ad3 at::TensorIterator::for_each()
[2m[36m(pid=11224)[0m     @     0x7f2a6ece0d91 at::TensorIterator::for_each()
[2m[36m(pid=11224)[0m     @     0x7f2a6f5c3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11224)[0m     @     0x7f2a6f5e6c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11224)[0m     @     0x7f2a6ea88a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11228)[0m     @     0x7fc3d18238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11228)[0m     @     0x7fc3d1823ad3 at::TensorIterator::for_each()
[2m[36m(pid=11228)[0m     @     0x7fc3d1823d91 at::TensorIterator::for_each()
[2m[36m(pid=11228)[0m     @     0x7fc3d2106b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11228)[0m     @     0x7fc3d2129c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11228)[0m     @     0x7fc3d15cba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11228)[0m     @     0x7fc3d15c9388 at::native::copy_impl()
[2m[36m(pid=11228)[0m     @     0x7fc3d15cb5a4 at::native::copy_()
[2m[36m(pid=11265)[0m     @     0x7f35ecf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11265)[0m     @     0x7f35ecf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=11265)[0m     @     0x7f35ecf27d91 at::TensorIterator::for_each()
[2m[36m(pid=11265)[0m     @     0x7f35ed80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11265)[0m     @     0x7f35ed82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11265)[0m     @     0x7f35ecccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11265)[0m     @     0x7f35ecccd388 at::native::copy_impl()
[2m[36m(pid=11196)[0m     @     0x7fbdcc452d91 at::TensorIterator::for_each()
[2m[36m(pid=11196)[0m     @     0x7fbdccd35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11196)[0m     @     0x7fbdccd58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11196)[0m     @     0x7fbdcc1faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11196)[0m     @     0x7fbdcc1f8388 at::native::copy_impl()
[2m[36m(pid=11196)[0m     @     0x7fbdcc1fa5a4 at::native::copy_()
[2m[36m(pid=11196)[0m     @     0x7fbdcc8e54f5 at::Tensor::copy_()
[2m[36m(pid=11196)[0m     @     0x7fbdcedb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11258)[0m     @     0x7f558e1fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11258)[0m     @     0x7f558e1ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11258)[0m     @     0x7f558e1ffad3 at::TensorIterator::for_each()
[2m[36m(pid=11258)[0m     @     0x7f558e1ffd91 at::TensorIterator::for_each()
[2m[36m(pid=11258)[0m     @     0x7f558eae2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11258)[0m     @     0x7f558eb05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11258)[0m     @     0x7f558dfa7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11227)[0m     @     0x7f02e67808f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11227)[0m     @     0x7f02e6780ad3 at::TensorIterator::for_each()
[2m[36m(pid=11227)[0m     @     0x7f02e6780d91 at::TensorIterator::for_each()
[2m[36m(pid=11227)[0m     @     0x7f02e7063b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11227)[0m     @     0x7f02e7086c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11227)[0m     @     0x7f02e6528a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11227)[0m     @     0x7f02e6526388 at::native::copy_impl()
[2m[36m(pid=11275)[0m     @     0x7ed0dca2aad3 at::TensorIterator::for_each()
[2m[36m(pid=11275)[0m     @     0x7ed0dca2ad91 at::TensorIterator::for_each()
[2m[36m(pid=11275)[0m     @     0x7ed0dd30db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11275)[0m     @     0x7ed0dd330c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11275)[0m     @     0x7ed0dc7d2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11275)[0m     @     0x7ed0dc7d0388 at::native::copy_impl()
[2m[36m(pid=11275)[0m     @     0x7ed0dc7d25a4 at::native::copy_()
[2m[36m(pid=11215)[0m     @     0x7ef74a016b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11215)[0m     @     0x7ef74a039c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11215)[0m     @     0x7ef7494dba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11215)[0m     @     0x7ef7494d9388 at::native::copy_impl()
[2m[36m(pid=11215)[0m     @     0x7ef7494db5a4 at::native::copy_()
[2m[36m(pid=11215)[0m     @     0x7ef749bc64f5 at::Tensor::copy_()
[2m[36m(pid=11215)[0m     @     0x7ef74c0998de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11284)[0m     @     0x7ee76bea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11284)[0m     @     0x7ee76bea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=11284)[0m     @     0x7ee76bea2d91 at::TensorIterator::for_each()
[2m[36m(pid=11284)[0m     @     0x7ee76c785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11284)[0m     @     0x7ee76c7a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11284)[0m     @     0x7ee76bc4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11301)[0m     @     0x7f04e4d128f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11301)[0m     @     0x7f04e4d12ad3 at::TensorIterator::for_each()
[2m[36m(pid=11301)[0m     @     0x7f04e4d12d91 at::TensorIterator::for_each()
[2m[36m(pid=11301)[0m     @     0x7f04e55f5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11301)[0m     @     0x7f04e5618c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11301)[0m     @     0x7f04e4abaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11301)[0m     @     0x7f04e4ab8388 at::native::copy_impl()
[2m[36m(pid=11210)[0m     @     0x7fc5bf176d91 at::TensorIterator::for_each()
[2m[36m(pid=11210)[0m     @     0x7fc5bfa59b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11210)[0m     @     0x7fc5bfa7cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11210)[0m     @     0x7fc5bef1ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11210)[0m     @     0x7fc5bef1c388 at::native::copy_impl()
[2m[36m(pid=11210)[0m     @     0x7fc5bef1e5a4 at::native::copy_()
[2m[36m(pid=11211)[0m     @     0x7fbbc2641d91 at::TensorIterator::for_each()
[2m[36m(pid=11211)[0m     @     0x7fbbc2f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11211)[0m     @     0x7fbbc2f47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11211)[0m     @     0x7fbbc23e9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11211)[0m     @     0x7fbbc23e7388 at::native::copy_impl()
[2m[36m(pid=11211)[0m     @     0x7fbbc23e95a4 at::native::copy_()
[2m[36m(pid=11211)[0m     @     0x7fbbc2ad44f5 at::Tensor::copy_()
[2m[36m(pid=11202)[0m     @     0x7f7205caad91 at::TensorIterator::for_each()
[2m[36m(pid=11202)[0m     @     0x7f720658db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11202)[0m     @     0x7f72065b0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11202)[0m     @     0x7f7205a52a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11202)[0m     @     0x7f7205a50388 at::native::copy_impl()
[2m[36m(pid=11202)[0m     @     0x7f7205a525a4 at::native::copy_()
[2m[36m(pid=11202)[0m     @     0x7f720613d4f5 at::Tensor::copy_()
[2m[36m(pid=11264)[0m     @     0x7fb1f182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11264)[0m     @     0x7fb1f0ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11264)[0m     @     0x7fb1f0ccd388 at::native::copy_impl()
[2m[36m(pid=11264)[0m     @     0x7fb1f0ccf5a4 at::native::copy_()
[2m[36m(pid=11264)[0m     @     0x7fb1f13ba4f5 at::Tensor::copy_()
[2m[36m(pid=11264)[0m     @     0x7fb1f388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11288)[0m     @     0x55bb218c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11288)[0m     @     0x55bb2194abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11288)[0m     @     0x55bb2194b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11288)[0m     @     0x55bb218c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11288)[0m     @     0x55bb2194abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11288)[0m     @     0x55bb2194b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11288)[0m     @     0x55bb218c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11274)[0m     @     0x7f5c978b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11274)[0m     @     0x7f5c978b7388 at::native::copy_impl()
[2m[36m(pid=11274)[0m     @     0x7f5c978b95a4 at::native::copy_()
[2m[36m(pid=11274)[0m     @     0x7f5c97fa44f5 at::Tensor::copy_()
[2m[36m(pid=11274)[0m     @     0x7f5c9a4778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11291)[0m     @     0x7f3d4a4eaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11291)[0m     @     0x7f3d4a4e8388 at::native::copy_impl()
[2m[36m(pid=11291)[0m     @     0x7f3d4a4ea5a4 at::native::copy_()
[2m[36m(pid=11291)[0m     @     0x7f3d4abd54f5 at::Tensor::copy_()
[2m[36m(pid=11291)[0m     @     0x7f3d4d0a88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11286)[0m     @     0x7f53c7a774f5 at::Tensor::copy_()
[2m[36m(pid=11286)[0m     @     0x7f53cdb2279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11286)[0m     @     0x564adbb14fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11286)[0m     @     0x564adba6fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11286)[0m     @     0x564adbafabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11286)[0m     @     0x564adbafba20 method_vectorcall
[2m[36m(pid=11286)[0m     @     0x564adba6fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11286)[0m     @     0x564adbafabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11286)[0m     @     0x564adbafb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11286)[0m     @     0x564adba70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11286)[0m     @     0x564adbafabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11286)[0m     @     0x564adbafb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11286)[0m     @     0x564adba70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11286)[0m     @     0x564adbafabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11286)[0m     @     0x564adbafb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11286)[0m     @     0x564adba70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11286)[0m     @     0x564adbafabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11286)[0m     @     0x564adbafb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11286)[0m     @     0x564adba70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11223)[0m     @     0x7ef1208a2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11223)[0m     @     0x7ef1208a0388 at::native::copy_impl()
[2m[36m(pid=11223)[0m     @     0x7ef1208a25a4 at::native::copy_()
[2m[36m(pid=11223)[0m     @     0x7ef120f8d4f5 at::Tensor::copy_()
[2m[36m(pid=11223)[0m     @     0x7ef1234608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11205)[0m     @     0x7ed2b89b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11205)[0m     @     0x7ed2b89b7388 at::native::copy_impl()
[2m[36m(pid=11205)[0m     @     0x7ed2b89b95a4 at::native::copy_()
[2m[36m(pid=11205)[0m     @     0x7ed2b90a44f5 at::Tensor::copy_()
[2m[36m(pid=11281)[0m     @     0x7f32f7653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11281)[0m     @     0x7f32f6af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11281)[0m     @     0x7f32f6af3388 at::native::copy_impl()
[2m[36m(pid=11281)[0m     @     0x7f32f6af55a4 at::native::copy_()
[2m[36m(pid=11204)[0m     @     0x7f6184148388 at::native::copy_impl()
[2m[36m(pid=11204)[0m     @     0x7f618414a5a4 at::native::copy_()
[2m[36m(pid=11204)[0m     @     0x7f61848354f5 at::Tensor::copy_()
[2m[36m(pid=11204)[0m     @     0x7f6186d088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11272)[0m     @     0x7f2fe9e7cd91 at::TensorIterator::for_each()
[2m[36m(pid=11272)[0m     @     0x7f2fea75fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11272)[0m     @     0x7f2fea782c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11272)[0m     @     0x7f2fe9c24a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11272)[0m     @     0x7f2fe9c22388 at::native::copy_impl()
[2m[36m(pid=11208)[0m     @     0x7eead25be7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=11208)[0m     @     0x7eead25c18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11266)[0m     @     0x7ef76ff53d91 at::TensorIterator::for_each()
[2m[36m(pid=11266)[0m     @     0x7ef770836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11266)[0m     @     0x7ef770859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11266)[0m     @     0x7ef76fcfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11266)[0m     @     0x7ef76fcf9388 at::native::copy_impl()
[2m[36m(pid=11266)[0m     @     0x7ef76fcfb5a4 at::native::copy_()
[2m[36m(pid=11195)[0m     @     0x7ef5c40add91 at::TensorIterator::for_each()
[2m[36m(pid=11195)[0m     @     0x7ef5c4990b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11195)[0m     @     0x7ef5c49b3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11314)[0m     @     0x7f9816f47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11314)[0m     @     0x7f98163e9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11314)[0m     @     0x7f98163e7388 at::native::copy_impl()
[2m[36m(pid=11314)[0m     @     0x7f98163e95a4 at::native::copy_()
[2m[36m(pid=11314)[0m     @     0x7f9816ad44f5 at::Tensor::copy_()
[2m[36m(pid=11314)[0m     @     0x7f9818fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11197)[0m     @     0x7fb506332c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11197)[0m     @     0x7fb5057d4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11197)[0m     @     0x7fb5057d2388 at::native::copy_impl()
[2m[36m(pid=11197)[0m     @     0x7fb5057d45a4 at::native::copy_()
[2m[36m(pid=11214)[0m     @     0x7f6663cfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11214)[0m     @     0x7f6663cf9388 at::native::copy_impl()
[2m[36m(pid=11214)[0m     @     0x7f6663cfb5a4 at::native::copy_()
[2m[36m(pid=11214)[0m     @     0x7f66643e64f5 at::Tensor::copy_()
[2m[36m(pid=11214)[0m     @     0x7f66668b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11330)[0m     @     0x7ee09e3e9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11330)[0m     @     0x7ee09e3e7388 at::native::copy_impl()
[2m[36m(pid=11330)[0m     @     0x7ee09e3e95a4 at::native::copy_()
[2m[36m(pid=11330)[0m     @     0x7ee09ead44f5 at::Tensor::copy_()
[2m[36m(pid=11330)[0m     @     0x7ee0a0fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11233)[0m     @     0x7f1e912f8388 at::native::copy_impl()
[2m[36m(pid=11233)[0m     @     0x7f1e912fa5a4 at::native::copy_()
[2m[36m(pid=11233)[0m     @     0x7f1e919e54f5 at::Tensor::copy_()
[2m[36m(pid=11233)[0m     @     0x7f1e93eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11260)[0m     @     0x7f50152ba5a4 at::native::copy_()
[2m[36m(pid=11260)[0m     @     0x7f50159a54f5 at::Tensor::copy_()
[2m[36m(pid=11260)[0m     @     0x7f5017e788de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11260)[0m     @     0x7f50159a54f5 at::Tensor::copy_()
[2m[36m(pid=11260)[0m     @     0x7f501ba5079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11232)[0m     @     0x7f0da72345a4 at::native::copy_()
[2m[36m(pid=11232)[0m     @     0x7f0da791f4f5 at::Tensor::copy_()
[2m[36m(pid=11232)[0m     @     0x7f0da9df28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11232)[0m     @     0x7f0da791f4f5 at::Tensor::copy_()
[2m[36m(pid=11336)[0m     @     0x7f49de9105a4 at::native::copy_()
[2m[36m(pid=11336)[0m     @     0x7f49deffb4f5 at::Tensor::copy_()
[2m[36m(pid=11336)[0m     @     0x7f49e14ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11218)[0m     @     0x7f1371be05a4 at::native::copy_()
[2m[36m(pid=11218)[0m     @     0x7f13722cb4f5 at::Tensor::copy_()
[2m[36m(pid=11218)[0m     @     0x7f137479e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11269)[0m     @     0x7f8392dea4f5 at::Tensor::copy_()
[2m[36m(pid=11269)[0m     @     0x7f83952bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11269)[0m     @     0x7f8392dea4f5 at::Tensor::copy_()
[2m[36m(pid=11269)[0m     @     0x7f8398e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11269)[0m     @     0x5602121d2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11269)[0m     @     0x56021212db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11269)[0m     @     0x5602121b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11269)[0m     @     0x5602121b9a20 method_vectorcall
[2m[36m(pid=11269)[0m     @     0x56021212dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11269)[0m     @     0x5602121b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11269)[0m     @     0x5602121b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11269)[0m     @     0x56021212e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11269)[0m     @     0x5602121b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11269)[0m     @     0x5602121b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11269)[0m     @     0x56021212e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11201)[0m     @     0x7f8fcd9625a4 at::native::copy_()
[2m[36m(pid=11201)[0m     @     0x7f8fce04d4f5 at::Tensor::copy_()
[2m[36m(pid=11201)[0m     @     0x7f8fd05208de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11201)[0m     @     0x7f8fce04d4f5 at::Tensor::copy_()
[2m[36m(pid=11201)[0m     @     0x7f8fd40f879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11201)[0m     @     0x55e98456ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11201)[0m     @     0x55e9844cab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11201)[0m     @     0x55e984555baf _PyEval_EvalCodeWithName
[2m[36m(pid=11201)[0m     @     0x55e984556a20 method_vectorcall
[2m[36m(pid=11201)[0m     @     0x55e9844cabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11201)[0m     @     0x55e984555baf _PyEval_EvalCodeWithName
[2m[36m(pid=11201)[0m     @     0x55e984556643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11201)[0m     @     0x55e9844cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11201)[0m     @     0x55e984555baf _PyEval_EvalCodeWithName
[2m[36m(pid=11201)[0m     @     0x55e984556643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11201)[0m     @     0x55e9844cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11201)[0m     @     0x55e984555baf _PyEval_EvalCodeWithName
[2m[36m(pid=11201)[0m     @     0x55e984556643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11201)[0m     @     0x55e9844cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11201)[0m     @     0x55e984555baf _PyEval_EvalCodeWithName
[2m[36m(pid=11206)[0m     @     0x7f274adb45a4 at::native::copy_()
[2m[36m(pid=11206)[0m     @     0x7f274b49f4f5 at::Tensor::copy_()
[2m[36m(pid=11206)[0m     @     0x7f274d9728de torch::autograd::VariableType::(anonymous namespace)::copy_()
2020-11-05 10:18:45,166	WARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.
[2m[36m(pid=11277)[0m     @     0x7fad929e35a4 at::native::copy_()
[2m[36m(pid=11277)[0m     @     0x7fad930ce4f5 at::Tensor::copy_()
[2m[36m(pid=11277)[0m     @     0x7fad955a18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11277)[0m     @     0x7fad930ce4f5 at::Tensor::copy_()
[2m[36m(pid=11328)[0m     @     0x556c27522baf _PyEval_EvalCodeWithName
[2m[36m(pid=11328)[0m     @     0x556c27523643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11328)[0m     @     0x556c27498689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11328)[0m     @     0x556c27522baf _PyEval_EvalCodeWithName
[2m[36m(pid=11328)[0m     @     0x556c27523643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11328)[0m     @     0x556c27498689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11328)[0m     @     0x556c27522baf _PyEval_EvalCodeWithName
[2m[36m(pid=11328)[0m     @     0x556c27523643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11328)[0m     @     0x556c27498689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11328)[0m     @     0x556c27522baf _PyEval_EvalCodeWithName
[2m[36m(pid=11328)[0m     @     0x556c27523643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11328)[0m     @     0x556c27498689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11279)[0m     @     0x7f77612285a4 at::native::copy_()
[2m[36m(pid=11279)[0m     @     0x7f77619134f5 at::Tensor::copy_()
[2m[36m(pid=11279)[0m     @     0x7f7763de68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11200)[0m     @     0x7f61c42ff4f5 at::Tensor::copy_()
[2m[36m(pid=11200)[0m     @     0x7f61c67d28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11200)[0m     @     0x7f61c42ff4f5 at::Tensor::copy_()
[2m[36m(pid=11200)[0m     @     0x7f61ca1a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11200)[0m     @     0x5646d473efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11200)[0m     @     0x5646d4699b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11200)[0m     @     0x5646d4724baf _PyEval_EvalCodeWithName
[2m[36m(pid=11200)[0m     @     0x5646d4725a20 method_vectorcall
[2m[36m(pid=11200)[0m     @     0x5646d4699bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11200)[0m     @     0x5646d4724baf _PyEval_EvalCodeWithName
[2m[36m(pid=11200)[0m     @     0x5646d4725643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11200)[0m     @     0x5646d469a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11200)[0m     @     0x5646d4724baf _PyEval_EvalCodeWithName
[2m[36m(pid=11200)[0m     @     0x5646d4725643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11200)[0m     @     0x5646d469a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11200)[0m     @     0x5646d4724baf _PyEval_EvalCodeWithName
[2m[36m(pid=11200)[0m     @     0x5646d4725643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11200)[0m     @     0x5646d469a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11200)[0m     @     0x5646d4724baf _PyEval_EvalCodeWithName
[2m[36m(pid=11200)[0m     @     0x5646d4725643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11200)[0m     @     0x5646d469a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11273)[0m     @     0x7ef82a46aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11273)[0m     @     0x7ef82a468388 at::native::copy_impl()
[2m[36m(pid=11273)[0m     @     0x7ef82a46a5a4 at::native::copy_()
[2m[36m(pid=11273)[0m     @     0x7ef82ab554f5 at::Tensor::copy_()
[2m[36m(pid=11273)[0m     @     0x7ef82d0288de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11280)[0m     @     0x7f9354bca5a4 at::native::copy_()
[2m[36m(pid=11280)[0m     @     0x7f93552b54f5 at::Tensor::copy_()
[2m[36m(pid=11280)[0m     @     0x7f93577888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11280)[0m     @     0x7f93552b54f5 at::Tensor::copy_()
[2m[36m(pid=11280)[0m     @     0x7f935b36079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11280)[0m     @     0x564458a5cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11280)[0m     @     0x5644589b7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11280)[0m     @     0x564458a42baf _PyEval_EvalCodeWithName
[2m[36m(pid=11280)[0m     @     0x564458a43a20 method_vectorcall
[2m[36m(pid=11280)[0m     @     0x5644589b7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11280)[0m     @     0x564458a42baf _PyEval_EvalCodeWithName
[2m[36m(pid=11280)[0m     @     0x564458a43643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11280)[0m     @     0x5644589b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11280)[0m     @     0x564458a42baf _PyEval_EvalCodeWithName
[2m[36m(pid=11280)[0m     @     0x564458a43643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11280)[0m     @     0x5644589b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11280)[0m     @     0x564458a42baf _PyEval_EvalCodeWithName
[2m[36m(pid=11280)[0m     @     0x564458a43643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11209)[0m     @     0x7f5fda9105a4 at::native::copy_()
[2m[36m(pid=11209)[0m     @     0x7f5fdaffb4f5 at::Tensor::copy_()
[2m[36m(pid=11209)[0m     @     0x7f5fdd4ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11209)[0m     @     0x7f5fdaffb4f5 at::Tensor::copy_()
[2m[36m(pid=11209)[0m     @     0x7f5fe10a679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11209)[0m     @     0x556a84f50fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11209)[0m     @     0x556a84eabb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11209)[0m     @     0x556a84f36baf _PyEval_EvalCodeWithName
[2m[36m(pid=11209)[0m     @     0x556a84f37a20 method_vectorcall
[2m[36m(pid=11209)[0m     @     0x556a84eabbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11209)[0m     @     0x556a84f36baf _PyEval_EvalCodeWithName
[2m[36m(pid=11209)[0m     @     0x556a84f37643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11209)[0m     @     0x556a84eac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11209)[0m     @     0x556a84f36baf _PyEval_EvalCodeWithName
[2m[36m(pid=11209)[0m     @     0x556a84f37643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11209)[0m     @     0x556a84eac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11209)[0m     @     0x556a84f36baf _PyEval_EvalCodeWithName
[2m[36m(pid=11209)[0m     @     0x556a84f37643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11209)[0m     @     0x556a84eac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11209)[0m     @     0x556a84f36baf _PyEval_EvalCodeWithName
[2m[36m(pid=11209)[0m     @     0x556a84f37643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11209)[0m     @     0x556a84eac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11198)[0m     @     0x7fb4bca384f5 at::Tensor::copy_()
[2m[36m(pid=11198)[0m     @     0x7fb4bef0b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11198)[0m     @     0x7fb4bca384f5 at::Tensor::copy_()
[2m[36m(pid=11198)[0m     @     0x7fb4c2ae379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11198)[0m     @     0x564b2cf58fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11198)[0m     @     0x564b2ceb3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11198)[0m     @     0x564b2cf3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11198)[0m     @     0x564b2cf3fa20 method_vectorcall
[2m[36m(pid=11198)[0m     @     0x564b2ceb3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11198)[0m     @     0x564b2cf3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11198)[0m     @     0x564b2cf3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11198)[0m     @     0x564b2ceb4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11198)[0m     @     0x564b2cf3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11198)[0m     @     0x564b2cf3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11198)[0m     @     0x564b2ceb4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11198)[0m     @     0x564b2cf3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11198)[0m     @     0x564b2cf3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11198)[0m     @     0x564b2ceb4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11198)[0m     @     0x564b2cf3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11198)[0m     @     0x564b2cf3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11198)[0m     @     0x564b2ceb4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11259)[0m     @     0x7f110bf244f5 at::Tensor::copy_()
[2m[36m(pid=11259)[0m     @     0x7f110e3f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11259)[0m     @     0x7f110bf244f5 at::Tensor::copy_()
[2m[36m(pid=11259)[0m     @     0x7f1111fcf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11259)[0m     @     0x562faf175fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11259)[0m     @     0x562faf0d0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11259)[0m     @     0x562faf15bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11259)[0m     @     0x562faf15ca20 method_vectorcall
[2m[36m(pid=11259)[0m     @     0x562faf0d0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11259)[0m     @     0x562faf15bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11259)[0m     @     0x562faf15c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11259)[0m     @     0x562faf0d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11259)[0m     @     0x562faf15bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11259)[0m     @     0x562faf15c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11259)[0m     @     0x562faf0d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11259)[0m     @     0x562faf15bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11259)[0m     @     0x562faf15c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11259)[0m     @     0x562faf0d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11259)[0m     @     0x562faf15bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11259)[0m     @     0x562faf15c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11259)[0m     @     0x562faf0d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11230)[0m     @     0x7eda3b6b64f5 at::Tensor::copy_()
[2m[36m(pid=11230)[0m     @     0x7eda3db898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11230)[0m     @     0x7eda3b6b64f5 at::Tensor::copy_()
[2m[36m(pid=11230)[0m     @     0x7eda4176179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11230)[0m     @     0x556312476fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11230)[0m     @     0x5563123d1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11230)[0m     @     0x55631245cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11230)[0m     @     0x55631245da20 method_vectorcall
[2m[36m(pid=11230)[0m     @     0x5563123d1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11230)[0m     @     0x55631245cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11230)[0m     @     0x55631245d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11230)[0m     @     0x5563123d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11230)[0m     @     0x55631245cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11230)[0m     @     0x55631245d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11230)[0m     @     0x5563123d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11230)[0m     @     0x55631245cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11230)[0m     @     0x55631245d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11230)[0m     @     0x5563123d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11230)[0m     @     0x55631245cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11230)[0m     @     0x55631245d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11230)[0m     @     0x5563123d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11318)[0m     @     0x7f61983354f5 at::Tensor::copy_()
[2m[36m(pid=11318)[0m     @     0x7f619a8088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11318)[0m     @     0x7f61983354f5 at::Tensor::copy_()
[2m[36m(pid=11318)[0m     @     0x7f619e3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11318)[0m     @     0x5579e122afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11318)[0m     @     0x5579e1185b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11318)[0m     @     0x5579e1210baf _PyEval_EvalCodeWithName
[2m[36m(pid=11318)[0m     @     0x5579e1211a20 method_vectorcall
[2m[36m(pid=11318)[0m     @     0x5579e1185bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11318)[0m     @     0x5579e1210baf _PyEval_EvalCodeWithName
[2m[36m(pid=11318)[0m     @     0x5579e1211643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11318)[0m     @     0x5579e1186689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11318)[0m     @     0x5579e1210baf _PyEval_EvalCodeWithName
[2m[36m(pid=11318)[0m     @     0x5579e1211643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11318)[0m     @     0x5579e1186689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11318)[0m     @     0x5579e1210baf _PyEval_EvalCodeWithName
[2m[36m(pid=11318)[0m     @     0x5579e1211643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11318)[0m     @     0x5579e1186689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11318)[0m     @     0x5579e1210baf _PyEval_EvalCodeWithName
[2m[36m(pid=11318)[0m     @     0x5579e1211643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11318)[0m     @     0x5579e1186689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11305)[0m     @     0x7ed59c94a4f5 at::Tensor::copy_()
[2m[36m(pid=11305)[0m     @     0x7ed59ee1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11305)[0m     @     0x7ed59c94a4f5 at::Tensor::copy_()
[2m[36m(pid=11305)[0m     @     0x7ed5a29f579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11305)[0m     @     0x5592a9a80fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11305)[0m     @     0x5592a99dbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11305)[0m     @     0x5592a9a66baf _PyEval_EvalCodeWithName
[2m[36m(pid=11305)[0m     @     0x5592a9a67a20 method_vectorcall
[2m[36m(pid=11305)[0m     @     0x5592a99dbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11305)[0m     @     0x5592a9a66baf _PyEval_EvalCodeWithName
[2m[36m(pid=11305)[0m     @     0x5592a9a67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11305)[0m     @     0x5592a99dc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11305)[0m     @     0x5592a9a66baf _PyEval_EvalCodeWithName
[2m[36m(pid=11305)[0m     @     0x5592a9a67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11305)[0m     @     0x5592a99dc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11305)[0m     @     0x5592a9a66baf _PyEval_EvalCodeWithName
[2m[36m(pid=11305)[0m     @     0x5592a9a67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11305)[0m     @     0x5592a99dc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11305)[0m     @     0x5592a9a66baf _PyEval_EvalCodeWithName
[2m[36m(pid=11305)[0m     @     0x5592a9a67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11305)[0m     @     0x5592a99dc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11221)[0m     @     0x7fa4617d45a4 at::native::copy_()
[2m[36m(pid=11221)[0m     @     0x7fa461ebf4f5 at::Tensor::copy_()
[2m[36m(pid=11221)[0m     @     0x7fa4643928de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11221)[0m     @     0x7fa461ebf4f5 at::Tensor::copy_()
[2m[36m(pid=11221)[0m     @     0x7fa467f6a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11221)[0m     @     0x555b6b5abfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11221)[0m     @     0x555b6b506b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11221)[0m     @     0x555b6b591baf _PyEval_EvalCodeWithName
[2m[36m(pid=11221)[0m     @     0x555b6b592a20 method_vectorcall
[2m[36m(pid=11221)[0m     @     0x555b6b506bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11221)[0m     @     0x555b6b591baf _PyEval_EvalCodeWithName
[2m[36m(pid=11221)[0m     @     0x555b6b592643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11221)[0m     @     0x555b6b507689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11221)[0m     @     0x555b6b591baf _PyEval_EvalCodeWithName
[2m[36m(pid=11221)[0m     @     0x555b6b592643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11221)[0m     @     0x555b6b507689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11221)[0m     @     0x555b6b591baf _PyEval_EvalCodeWithName
[2m[36m(pid=11221)[0m     @     0x555b6b592643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11221)[0m     @     0x555b6b507689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11221)[0m     @     0x555b6b591baf _PyEval_EvalCodeWithName
[2m[36m(pid=11221)[0m     @     0x555b6b592643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11221)[0m     @     0x555b6b507689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11290)[0m     @     0x7fabbfc918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11290)[0m     @     0x7fabbfc91ad3 at::TensorIterator::for_each()
[2m[36m(pid=11213)[0m     @     0x7f1febb505a4 at::native::copy_()
[2m[36m(pid=11213)[0m     @     0x7f1fec23b4f5 at::Tensor::copy_()
[2m[36m(pid=11213)[0m     @     0x7f1fee70e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11212)[0m     @     0x7fba73e914f5 at::Tensor::copy_()
[2m[36m(pid=11212)[0m     @     0x7fba763648de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11212)[0m     @     0x7fba73e914f5 at::Tensor::copy_()
[2m[36m(pid=11212)[0m     @     0x7fba79b3279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11212)[0m     @     0x559abfc3cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11212)[0m     @     0x559abfb97b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11212)[0m     @     0x559abfc22baf _PyEval_EvalCodeWithName
[2m[36m(pid=11212)[0m     @     0x559abfc23a20 method_vectorcall
[2m[36m(pid=11212)[0m     @     0x559abfb97bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11212)[0m     @     0x559abfc22baf _PyEval_EvalCodeWithName
[2m[36m(pid=11212)[0m     @     0x559abfc23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11212)[0m     @     0x559abfb98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11212)[0m     @     0x559abfc22baf _PyEval_EvalCodeWithName
[2m[36m(pid=11212)[0m     @     0x559abfc23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11212)[0m     @     0x559abfb98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11212)[0m     @     0x559abfc22baf _PyEval_EvalCodeWithName
[2m[36m(pid=11212)[0m     @     0x559abfc23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11212)[0m     @     0x559abfb98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11212)[0m     @     0x559abfc22baf _PyEval_EvalCodeWithName
[2m[36m(pid=11212)[0m     @     0x559abfc23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11212)[0m     @     0x559abfb98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11271)[0m     @     0x7ecd6c312c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11271)[0m     @     0x7ecd6b7b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11271)[0m     @     0x7ecd6b7b2388 at::native::copy_impl()
[2m[36m(pid=11271)[0m     @     0x7ecd6b7b45a4 at::native::copy_()
[2m[36m(pid=11216)[0m     @     0x7f42a9b958f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11216)[0m     @     0x7f42a9b95ad3 at::TensorIterator::for_each()
[2m[36m(pid=11283)[0m     @     0x7f21ea6fd388 at::native::copy_impl()
[2m[36m(pid=11283)[0m     @     0x7f21ea6ff5a4 at::native::copy_()
[2m[36m(pid=11283)[0m     @     0x7f21eadea4f5 at::Tensor::copy_()
[2m[36m(pid=11283)[0m     @     0x7f21ed2bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11283)[0m     @     0x7f21eadea4f5 at::Tensor::copy_()
[2m[36m(pid=11283)[0m     @     0x7f21f0e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11283)[0m     @     0x555ca7744fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11283)[0m     @     0x555ca769fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11283)[0m     @     0x555ca772abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11283)[0m     @     0x555ca772ba20 method_vectorcall
[2m[36m(pid=11283)[0m     @     0x555ca769fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11283)[0m     @     0x555ca772abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11283)[0m     @     0x555ca772b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11283)[0m     @     0x555ca76a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11283)[0m     @     0x555ca772abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11283)[0m     @     0x555ca772b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11268)[0m     @     0x7f226bb11d91 at::TensorIterator::for_each()
[2m[36m(pid=11268)[0m     @     0x7f226c3f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11268)[0m     @     0x7f226c417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11268)[0m     @     0x7f226b8b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11268)[0m     @     0x7f226b8b7388 at::native::copy_impl()
[2m[36m(pid=11268)[0m     @     0x7f226b8b95a4 at::native::copy_()
[2m[36m(pid=11268)[0m     @     0x7f226bfa44f5 at::Tensor::copy_()
[2m[36m(pid=11256)[0m     @     0x7f80cda938f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=11256)[0m     @     0x7f80cda93ad3 at::TensorIterator::for_each()
[2m[36m(pid=11270)[0m     @     0x7f687ed20388 at::native::copy_impl()
[2m[36m(pid=11270)[0m     @     0x7f687ed225a4 at::native::copy_()
[2m[36m(pid=11270)[0m     @     0x7f687f40d4f5 at::Tensor::copy_()
[2m[36m(pid=11270)[0m     @     0x7f68818e08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11270)[0m     @     0x7f687f40d4f5 at::Tensor::copy_()
[2m[36m(pid=11270)[0m     @     0x7f68854b879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11270)[0m     @     0x5636cccc2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11270)[0m     @     0x5636ccc1db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11278)[0m     @     0x7ecfb32e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11278)[0m     @     0x7ecfb32df388 at::native::copy_impl()
[2m[36m(pid=11278)[0m     @     0x7ecfb32e15a4 at::native::copy_()
[2m[36m(pid=11278)[0m     @     0x7ecfb39cc4f5 at::Tensor::copy_()
[2m[36m(pid=11276)[0m     @     0x7f73e83b84f5 at::Tensor::copy_()
[2m[36m(pid=11276)[0m     @     0x7f73ea88b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11276)[0m     @     0x7f73e83b84f5 at::Tensor::copy_()
[2m[36m(pid=11276)[0m     @     0x7f73ee46379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11276)[0m     @     0x55da99929fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11276)[0m     @     0x55da99884b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11276)[0m     @     0x55da9990fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11276)[0m     @     0x55da99910a20 method_vectorcall
[2m[36m(pid=11276)[0m     @     0x55da99884bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11276)[0m     @     0x55da9990fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11267)[0m     @     0x7f0b11ef75a4 at::native::copy_()
[2m[36m(pid=11267)[0m     @     0x7f0b125e24f5 at::Tensor::copy_()
[2m[36m(pid=11267)[0m     @     0x7f0b14ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11308)[0m     @     0x7f910c7605a4 at::native::copy_()
[2m[36m(pid=11308)[0m     @     0x7f910ce4b4f5 at::Tensor::copy_()
[2m[36m(pid=11308)[0m     @     0x7f910f31e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11225)[0m     @     0x7fb5ab6094f5 at::Tensor::copy_()
[2m[36m(pid=11225)[0m     @     0x7fb5adadc8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11225)[0m     @     0x7fb5ab6094f5 at::Tensor::copy_()
[2m[36m(pid=11225)[0m     @     0x7fb5b16b479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11225)[0m     @     0x56510ea01fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11225)[0m     @     0x56510e95cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11225)[0m     @     0x56510e9e7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11225)[0m     @     0x56510e9e8a20 method_vectorcall
[2m[36m(pid=11225)[0m     @     0x56510e95cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11225)[0m     @     0x56510e9e7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11225)[0m     @     0x56510e9e8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11225)[0m     @     0x56510e95d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11225)[0m     @     0x56510e9e7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11225)[0m     @     0x56510e9e8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11225)[0m     @     0x56510e95d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11225)[0m     @     0x56510e9e7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11225)[0m     @     0x56510e9e8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11225)[0m     @     0x56510e95d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11199)[0m     @     0x7f985d6a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11199)[0m     @     0x7f985cb4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11199)[0m     @     0x7f985cb48388 at::native::copy_impl()
[2m[36m(pid=11199)[0m     @     0x7f985cb4a5a4 at::native::copy_()
[2m[36m(pid=11224)[0m     @     0x7f2a6ea86388 at::native::copy_impl()
[2m[36m(pid=11224)[0m     @     0x7f2a6ea885a4 at::native::copy_()
[2m[36m(pid=11224)[0m     @     0x7f2a6f1734f5 at::Tensor::copy_()
[2m[36m(pid=11228)[0m     @     0x7fc3d1cb64f5 at::Tensor::copy_()
[2m[36m(pid=11228)[0m     @     0x7fc3d41898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11228)[0m     @     0x7fc3d1cb64f5 at::Tensor::copy_()
[2m[36m(pid=11265)[0m     @     0x7f35ecccf5a4 at::native::copy_()
[2m[36m(pid=11265)[0m     @     0x7f35ed3ba4f5 at::Tensor::copy_()
[2m[36m(pid=11265)[0m     @     0x7f35ef88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11196)[0m     @     0x7fbdcc8e54f5 at::Tensor::copy_()
[2m[36m(pid=11196)[0m     @     0x7fbdd299079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11196)[0m     @     0x5621386bcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11196)[0m     @     0x562138617b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11196)[0m     @     0x5621386a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11196)[0m     @     0x5621386a3a20 method_vectorcall
[2m[36m(pid=11196)[0m     @     0x562138617bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11196)[0m     @     0x5621386a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11196)[0m     @     0x5621386a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11196)[0m     @     0x562138618689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11196)[0m     @     0x5621386a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11196)[0m     @     0x5621386a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11196)[0m     @     0x562138618689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11196)[0m     @     0x5621386a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11196)[0m     @     0x5621386a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11196)[0m     @     0x562138618689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11196)[0m     @     0x5621386a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11196)[0m     @     0x5621386a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11196)[0m     @     0x562138618689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11258)[0m     @     0x7f558dfa5388 at::native::copy_impl()
[2m[36m(pid=11258)[0m     @     0x7f558dfa75a4 at::native::copy_()
[2m[36m(pid=11258)[0m     @     0x7f558e6924f5 at::Tensor::copy_()
[2m[36m(pid=11227)[0m     @     0x7f02e65285a4 at::native::copy_()
[2m[36m(pid=11227)[0m     @     0x7f02e6c134f5 at::Tensor::copy_()
[2m[36m(pid=11227)[0m     @     0x7f02e90e68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11275)[0m     @     0x7ed0dcebd4f5 at::Tensor::copy_()
[2m[36m(pid=11275)[0m     @     0x7ed0df3908de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11275)[0m     @     0x7ed0dcebd4f5 at::Tensor::copy_()
[2m[36m(pid=11275)[0m     @     0x7ed0e2f6879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11275)[0m     @     0x557680446fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11275)[0m     @     0x5576803a1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11275)[0m     @     0x55768042cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11275)[0m     @     0x55768042da20 method_vectorcall
[2m[36m(pid=11275)[0m     @     0x5576803a1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11275)[0m     @     0x55768042cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11215)[0m     @     0x7ef749bc64f5 at::Tensor::copy_()
[2m[36m(pid=11215)[0m     @     0x7ef74fc7179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11215)[0m     @     0x56114833efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11215)[0m     @     0x561148299b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11215)[0m     @     0x561148324baf _PyEval_EvalCodeWithName
[2m[36m(pid=11215)[0m     @     0x561148325a20 method_vectorcall
[2m[36m(pid=11215)[0m     @     0x561148299bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11215)[0m     @     0x561148324baf _PyEval_EvalCodeWithName
[2m[36m(pid=11215)[0m     @     0x561148325643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11215)[0m     @     0x56114829a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11215)[0m     @     0x561148324baf _PyEval_EvalCodeWithName
[2m[36m(pid=11215)[0m     @     0x561148325643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11215)[0m     @     0x56114829a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11215)[0m     @     0x561148324baf _PyEval_EvalCodeWithName
[2m[36m(pid=11215)[0m     @     0x561148325643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11215)[0m     @     0x56114829a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11215)[0m     @     0x561148324baf _PyEval_EvalCodeWithName
[2m[36m(pid=11215)[0m     @     0x561148325643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11215)[0m     @     0x56114829a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11284)[0m     @     0x7ee76bc48388 at::native::copy_impl()
[2m[36m(pid=11284)[0m     @     0x7ee76bc4a5a4 at::native::copy_()
[2m[36m(pid=11284)[0m     @     0x7ee76c3354f5 at::Tensor::copy_()
[2m[36m(pid=11284)[0m     @     0x7ee76e8088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11301)[0m     @     0x7f04e4aba5a4 at::native::copy_()
[2m[36m(pid=11301)[0m     @     0x7f04e51a54f5 at::Tensor::copy_()
[2m[36m(pid=11301)[0m     @     0x7f04e76788de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11301)[0m     @     0x7f04e51a54f5 at::Tensor::copy_()
[2m[36m(pid=11210)[0m     @     0x7fc5bf6094f5 at::Tensor::copy_()
[2m[36m(pid=11210)[0m     @     0x7fc5c1adc8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11210)[0m     @     0x7fc5bf6094f5 at::Tensor::copy_()
[2m[36m(pid=11210)[0m     @     0x7fc5c56b479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11210)[0m     @     0x55bc93d51fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11210)[0m     @     0x55bc93cacb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11210)[0m     @     0x55bc93d37baf _PyEval_EvalCodeWithName
[2m[36m(pid=11210)[0m     @     0x55bc93d38a20 method_vectorcall
[2m[36m(pid=11211)[0m     @     0x7fbbc4fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11211)[0m     @     0x7fbbc2ad44f5 at::Tensor::copy_()
[2m[36m(pid=11211)[0m     @     0x7fbbc8b7f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11211)[0m     @     0x563ce9cdffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11211)[0m     @     0x563ce9c3ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11211)[0m     @     0x563ce9cc5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11211)[0m     @     0x563ce9cc6a20 method_vectorcall
[2m[36m(pid=11211)[0m     @     0x563ce9c3abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11211)[0m     @     0x563ce9cc5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11211)[0m     @     0x563ce9cc6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11211)[0m     @     0x563ce9c3b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11211)[0m     @     0x563ce9cc5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11211)[0m     @     0x563ce9cc6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11211)[0m     @     0x563ce9c3b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11211)[0m     @     0x563ce9cc5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11211)[0m     @     0x563ce9cc6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11211)[0m     @     0x563ce9c3b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11211)[0m     @     0x563ce9cc5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11211)[0m     @     0x563ce9cc6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11211)[0m     @     0x563ce9c3b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11202)[0m     @     0x7f72086108de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11202)[0m     @     0x7f720613d4f5 at::Tensor::copy_()
[2m[36m(pid=11202)[0m     @     0x7f720c1e879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11202)[0m     @     0x55b248b95fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11202)[0m     @     0x55b248af0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11202)[0m     @     0x55b248b7bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11202)[0m     @     0x55b248b7ca20 method_vectorcall
[2m[36m(pid=11202)[0m     @     0x55b248af0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11202)[0m     @     0x55b248b7bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11202)[0m     @     0x55b248b7c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11202)[0m     @     0x55b248af1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11202)[0m     @     0x55b248b7bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11202)[0m     @     0x55b248b7c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11202)[0m     @     0x55b248af1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11202)[0m     @     0x55b248b7bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11202)[0m     @     0x55b248b7c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11202)[0m     @     0x55b248af1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11202)[0m     @     0x55b248b7bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11202)[0m     @     0x55b248b7c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11202)[0m     @     0x55b248af1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11264)[0m     @     0x7fb1f13ba4f5 at::Tensor::copy_()
[2m[36m(pid=11264)[0m     @     0x7fb1f746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11264)[0m     @     0x55f81b0b6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11264)[0m     @     0x55f81b011b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11264)[0m     @     0x55f81b09cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11264)[0m     @     0x55f81b09da20 method_vectorcall
[2m[36m(pid=11264)[0m     @     0x55f81b011bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11264)[0m     @     0x55f81b09cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11264)[0m     @     0x55f81b09d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11264)[0m     @     0x55f81b012689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11264)[0m     @     0x55f81b09cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11264)[0m     @     0x55f81b09d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11264)[0m     @     0x55f81b012689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11264)[0m     @     0x55f81b09cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11264)[0m     @     0x55f81b09d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11264)[0m     @     0x55f81b012689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11264)[0m     @     0x55f81b09cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11264)[0m     @     0x55f81b09d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11264)[0m     @     0x55f81b012689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11274)[0m     @     0x7f5c97fa44f5 at::Tensor::copy_()
[2m[36m(pid=11274)[0m     @     0x7f5c9e04f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11274)[0m     @     0x558275cf1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11274)[0m     @     0x558275c4cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11274)[0m     @     0x558275cd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11274)[0m     @     0x558275cd8a20 method_vectorcall
[2m[36m(pid=11274)[0m     @     0x558275c4cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11274)[0m     @     0x558275cd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11274)[0m     @     0x558275cd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11274)[0m     @     0x558275c4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11274)[0m     @     0x558275cd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11274)[0m     @     0x558275cd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11274)[0m     @     0x558275c4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11274)[0m     @     0x558275cd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11274)[0m     @     0x558275cd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11274)[0m     @     0x558275c4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11274)[0m     @     0x558275cd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11274)[0m     @     0x558275cd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11274)[0m     @     0x558275c4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11291)[0m     @     0x7f3d4abd54f5 at::Tensor::copy_()
[2m[36m(pid=11291)[0m     @     0x7f3d50c8079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11291)[0m     @     0x55a5a938cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11291)[0m     @     0x55a5a92e7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11291)[0m     @     0x55a5a9372baf _PyEval_EvalCodeWithName
[2m[36m(pid=11291)[0m     @     0x55a5a9373a20 method_vectorcall
[2m[36m(pid=11291)[0m     @     0x55a5a92e7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11291)[0m     @     0x55a5a9372baf _PyEval_EvalCodeWithName
[2m[36m(pid=11291)[0m     @     0x55a5a9373643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11291)[0m     @     0x55a5a92e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11291)[0m     @     0x55a5a9372baf _PyEval_EvalCodeWithName
[2m[36m(pid=11291)[0m     @     0x55a5a9373643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11291)[0m     @     0x55a5a92e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11291)[0m     @     0x55a5a9372baf _PyEval_EvalCodeWithName
[2m[36m(pid=11291)[0m     @     0x55a5a9373643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11291)[0m     @     0x55a5a92e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11291)[0m     @     0x55a5a9372baf _PyEval_EvalCodeWithName
[2m[36m(pid=11291)[0m     @     0x55a5a9373643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11291)[0m     @     0x55a5a92e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11223)[0m     @     0x7ef120f8d4f5 at::Tensor::copy_()
[2m[36m(pid=11223)[0m     @     0x7ef12703879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11223)[0m     @     0x5606e0392fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11223)[0m     @     0x5606e02edb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11223)[0m     @     0x5606e0378baf _PyEval_EvalCodeWithName
[2m[36m(pid=11223)[0m     @     0x5606e0379a20 method_vectorcall
[2m[36m(pid=11223)[0m     @     0x5606e02edbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11223)[0m     @     0x5606e0378baf _PyEval_EvalCodeWithName
[2m[36m(pid=11223)[0m     @     0x5606e0379643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11223)[0m     @     0x5606e02ee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11223)[0m     @     0x5606e0378baf _PyEval_EvalCodeWithName
[2m[36m(pid=11223)[0m     @     0x5606e0379643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11223)[0m     @     0x5606e02ee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11223)[0m     @     0x5606e0378baf _PyEval_EvalCodeWithName
[2m[36m(pid=11223)[0m     @     0x5606e0379643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11223)[0m     @     0x5606e02ee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11223)[0m     @     0x5606e0378baf _PyEval_EvalCodeWithName
[2m[36m(pid=11223)[0m     @     0x5606e0379643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11223)[0m     @     0x5606e02ee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11205)[0m     @     0x7ed2bb5778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11205)[0m     @     0x7ed2b90a44f5 at::Tensor::copy_()
[2m[36m(pid=11205)[0m     @     0x7ed2bf14f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11205)[0m     @     0x55bd506b3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11205)[0m     @     0x55bd5060eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11205)[0m     @     0x55bd50699baf _PyEval_EvalCodeWithName
[2m[36m(pid=11205)[0m     @     0x55bd5069aa20 method_vectorcall
[2m[36m(pid=11205)[0m     @     0x55bd5060ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11205)[0m     @     0x55bd50699baf _PyEval_EvalCodeWithName
[2m[36m(pid=11205)[0m     @     0x55bd5069a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11205)[0m     @     0x55bd5060f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11205)[0m     @     0x55bd50699baf _PyEval_EvalCodeWithName
[2m[36m(pid=11205)[0m     @     0x55bd5069a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11205)[0m     @     0x55bd5060f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11205)[0m     @     0x55bd50699baf _PyEval_EvalCodeWithName
[2m[36m(pid=11205)[0m     @     0x55bd5069a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11205)[0m     @     0x55bd5060f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11205)[0m     @     0x55bd50699baf _PyEval_EvalCodeWithName
[2m[36m(pid=11205)[0m     @     0x55bd5069a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11205)[0m     @     0x55bd5060f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11281)[0m     @     0x7f32f71e04f5 at::Tensor::copy_()
[2m[36m(pid=11281)[0m     @     0x7f32f96b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11281)[0m     @     0x7f32f71e04f5 at::Tensor::copy_()
[2m[36m(pid=11281)[0m     @     0x7f32fd28b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11281)[0m     @     0x556e54930fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11281)[0m     @     0x556e5488bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11281)[0m     @     0x556e54916baf _PyEval_EvalCodeWithName
[2m[36m(pid=11281)[0m     @     0x556e54917a20 method_vectorcall
[2m[36m(pid=11281)[0m     @     0x556e5488bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11281)[0m     @     0x556e54916baf _PyEval_EvalCodeWithName
[2m[36m(pid=11281)[0m     @     0x556e54917643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11281)[0m     @     0x556e5488c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11281)[0m     @     0x556e54916baf _PyEval_EvalCodeWithName
[2m[36m(pid=11281)[0m     @     0x556e54917643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11281)[0m     @     0x556e5488c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11281)[0m     @     0x556e54916baf _PyEval_EvalCodeWithName
[2m[36m(pid=11281)[0m     @     0x556e54917643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11281)[0m     @     0x556e5488c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11281)[0m     @     0x556e54916baf _PyEval_EvalCodeWithName
[2m[36m(pid=11281)[0m     @     0x556e54917643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11281)[0m     @     0x556e5488c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11204)[0m     @     0x7f61848354f5 at::Tensor::copy_()
[2m[36m(pid=11204)[0m     @     0x7f618a8e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11204)[0m     @     0x5603bb693fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11204)[0m     @     0x5603bb5eeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11204)[0m     @     0x5603bb679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11204)[0m     @     0x5603bb67aa20 method_vectorcall
[2m[36m(pid=11204)[0m     @     0x5603bb5eebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11204)[0m     @     0x5603bb679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11204)[0m     @     0x5603bb67a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11204)[0m     @     0x5603bb5ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11204)[0m     @     0x5603bb679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11204)[0m     @     0x5603bb67a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11204)[0m     @     0x5603bb5ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11204)[0m     @     0x5603bb679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11204)[0m     @     0x5603bb67a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11204)[0m     @     0x5603bb5ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11204)[0m     @     0x5603bb679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11204)[0m     @     0x5603bb67a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11204)[0m     @     0x5603bb5ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11272)[0m     @     0x7f2fe9c245a4 at::native::copy_()
[2m[36m(pid=11272)[0m     @     0x7f2fea30f4f5 at::Tensor::copy_()
[2m[36m(pid=11272)[0m     @     0x7f2fec7e28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11272)[0m     @     0x7f2fea30f4f5 at::Tensor::copy_()
[2m[36m(pid=11272)[0m     @     0x7f2ff03ba79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11272)[0m     @     0x55b400155fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11272)[0m     @     0x55b4000b0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11272)[0m     @     0x55b40013bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11272)[0m     @     0x55b40013ca20 method_vectorcall
[2m[36m(pid=11272)[0m     @     0x55b4000b0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11272)[0m     @     0x55b40013bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11272)[0m     @     0x55b40013c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11208)[0m     @     0x7eead25c1ad3 at::TensorIterator::for_each()
[2m[36m(pid=11208)[0m     @     0x7eead25c1d91 at::TensorIterator::for_each()
[2m[36m(pid=11208)[0m     @     0x7eead2ea4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11208)[0m     @     0x7eead2ec7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11208)[0m     @     0x7eead2369a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11208)[0m     @     0x7eead2367388 at::native::copy_impl()
[2m[36m(pid=11266)[0m     @     0x7ef7703e64f5 at::Tensor::copy_()
[2m[36m(pid=11266)[0m     @     0x7ef7728b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11266)[0m     @     0x7ef7703e64f5 at::Tensor::copy_()
[2m[36m(pid=11266)[0m     @     0x7ef77649179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11266)[0m     @     0x565420eaafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11266)[0m     @     0x565420e05b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11266)[0m     @     0x565420e90baf _PyEval_EvalCodeWithName
[2m[36m(pid=11266)[0m     @     0x565420e91a20 method_vectorcall
[2m[36m(pid=11266)[0m     @     0x565420e05bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11266)[0m     @     0x565420e90baf _PyEval_EvalCodeWithName
[2m[36m(pid=11266)[0m     @     0x565420e91643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11266)[0m     @     0x565420e06689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11266)[0m     @     0x565420e90baf _PyEval_EvalCodeWithName
[2m[36m(pid=11266)[0m     @     0x565420e91643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11266)[0m     @     0x565420e06689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11266)[0m     @     0x565420e90baf _PyEval_EvalCodeWithName
[2m[36m(pid=11266)[0m     @     0x565420e91643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11266)[0m     @     0x565420e06689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11266)[0m     @     0x565420e90baf _PyEval_EvalCodeWithName
[2m[36m(pid=11266)[0m     @     0x565420e91643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11266)[0m     @     0x565420e06689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11195)[0m     @     0x7ef5c3e55a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11195)[0m     @     0x7ef5c3e53388 at::native::copy_impl()
[2m[36m(pid=11195)[0m     @     0x7ef5c3e555a4 at::native::copy_()
[2m[36m(pid=11195)[0m     @     0x7ef5c45404f5 at::Tensor::copy_()
[2m[36m(pid=11314)[0m     @     0x7f9816ad44f5 at::Tensor::copy_()
[2m[36m(pid=11314)[0m     @     0x7f981cb7f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11314)[0m     @     0x55dbb89bcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11314)[0m     @     0x55dbb8917b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11314)[0m     @     0x55dbb89a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11314)[0m     @     0x55dbb89a3a20 method_vectorcall
[2m[36m(pid=11314)[0m     @     0x55dbb8917bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11314)[0m     @     0x55dbb89a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11314)[0m     @     0x55dbb89a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11314)[0m     @     0x55dbb8918689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11314)[0m     @     0x55dbb89a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11314)[0m     @     0x55dbb89a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11314)[0m     @     0x55dbb8918689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11314)[0m     @     0x55dbb89a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11314)[0m     @     0x55dbb89a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11314)[0m     @     0x55dbb8918689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11314)[0m     @     0x55dbb89a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=11314)[0m     @     0x55dbb89a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11314)[0m     @     0x55dbb8918689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11197)[0m     @     0x7fb505ebf4f5 at::Tensor::copy_()
[2m[36m(pid=11197)[0m     @     0x7fb5083928de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11197)[0m     @     0x7fb505ebf4f5 at::Tensor::copy_()
[2m[36m(pid=11197)[0m     @     0x7fb50bf6a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11197)[0m     @     0x55c9cc085fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11197)[0m     @     0x55c9cbfe0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11197)[0m     @     0x55c9cc06bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11197)[0m     @     0x55c9cc06ca20 method_vectorcall
[2m[36m(pid=11197)[0m     @     0x55c9cbfe0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11197)[0m     @     0x55c9cc06bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11197)[0m     @     0x55c9cc06c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11197)[0m     @     0x55c9cbfe1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11197)[0m     @     0x55c9cc06bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11197)[0m     @     0x55c9cc06c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11197)[0m     @     0x55c9cbfe1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11197)[0m     @     0x55c9cc06bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11197)[0m     @     0x55c9cc06c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11197)[0m     @     0x55c9cbfe1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11197)[0m     @     0x55c9cc06bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11197)[0m     @     0x55c9cc06c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11197)[0m     @     0x55c9cbfe1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11214)[0m     @     0x7f66643e64f5 at::Tensor::copy_()
[2m[36m(pid=11214)[0m     @     0x7f666a49179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11214)[0m     @     0x55cb0921bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11214)[0m     @     0x55cb09176b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11214)[0m     @     0x55cb09201baf _PyEval_EvalCodeWithName
[2m[36m(pid=11214)[0m     @     0x55cb09202a20 method_vectorcall
[2m[36m(pid=11214)[0m     @     0x55cb09176bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11214)[0m     @     0x55cb09201baf _PyEval_EvalCodeWithName
[2m[36m(pid=11214)[0m     @     0x55cb09202643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11214)[0m     @     0x55cb09177689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11214)[0m     @     0x55cb09201baf _PyEval_EvalCodeWithName
[2m[36m(pid=11214)[0m     @     0x55cb09202643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11214)[0m     @     0x55cb09177689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11214)[0m     @     0x55cb09201baf _PyEval_EvalCodeWithName
[2m[36m(pid=11214)[0m     @     0x55cb09202643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11214)[0m     @     0x55cb09177689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11214)[0m     @     0x55cb09201baf _PyEval_EvalCodeWithName
[2m[36m(pid=11214)[0m     @     0x55cb09202643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11214)[0m     @     0x55cb09177689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11330)[0m     @     0x7ee09ead44f5 at::Tensor::copy_()
[2m[36m(pid=11330)[0m     @     0x7ee0a4b7f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11330)[0m     @     0x5560c54b2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11330)[0m     @     0x5560c540db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11330)[0m     @     0x5560c5498baf _PyEval_EvalCodeWithName
[2m[36m(pid=11330)[0m     @     0x5560c5499a20 method_vectorcall
[2m[36m(pid=11330)[0m     @     0x5560c540dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11330)[0m     @     0x5560c5498baf _PyEval_EvalCodeWithName
[2m[36m(pid=11330)[0m     @     0x5560c5499643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11330)[0m     @     0x5560c540e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11330)[0m     @     0x5560c5498baf _PyEval_EvalCodeWithName
[2m[36m(pid=11330)[0m     @     0x5560c5499643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11330)[0m     @     0x5560c540e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11330)[0m     @     0x5560c5498baf _PyEval_EvalCodeWithName
[2m[36m(pid=11330)[0m     @     0x5560c5499643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11330)[0m     @     0x5560c540e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11330)[0m     @     0x5560c5498baf _PyEval_EvalCodeWithName
[2m[36m(pid=11330)[0m     @     0x5560c5499643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11330)[0m     @     0x5560c540e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11233)[0m     @     0x7f1e919e54f5 at::Tensor::copy_()
[2m[36m(pid=11233)[0m     @     0x7f1e97a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11233)[0m     @     0x55f91afc0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11233)[0m     @     0x55f91af1bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11233)[0m     @     0x55f91afa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=11233)[0m     @     0x55f91afa7a20 method_vectorcall
[2m[36m(pid=11233)[0m     @     0x55f91af1bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11233)[0m     @     0x55f91afa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=11233)[0m     @     0x55f91afa7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11233)[0m     @     0x55f91af1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11233)[0m     @     0x55f91afa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=11233)[0m     @     0x55f91afa7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11233)[0m     @     0x55f91af1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11233)[0m     @     0x55f91afa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=11233)[0m     @     0x55f91afa7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11233)[0m     @     0x55f91af1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11233)[0m     @     0x55f91afa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=11233)[0m     @     0x55f91afa7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11233)[0m     @     0x55f91af1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11260)[0m     @     0x55ef58eeffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11260)[0m     @     0x55ef58e4ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11260)[0m     @     0x55ef58ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11260)[0m     @     0x55ef58ed6a20 method_vectorcall
[2m[36m(pid=11260)[0m     @     0x55ef58e4abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11260)[0m     @     0x55ef58ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11260)[0m     @     0x55ef58ed6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11260)[0m     @     0x55ef58e4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11260)[0m     @     0x55ef58ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11260)[0m     @     0x55ef58ed6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11260)[0m     @     0x55ef58e4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11260)[0m     @     0x55ef58ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11260)[0m     @     0x55ef58ed6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11260)[0m     @     0x55ef58e4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11260)[0m     @     0x55ef58ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=11260)[0m     @     0x55ef58ed6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11260)[0m     @     0x55ef58e4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11232)[0m     @     0x7f0dad9ca79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11232)[0m     @     0x55fb76067fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11232)[0m     @     0x55fb75fc2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11232)[0m     @     0x55fb7604dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11232)[0m     @     0x55fb7604ea20 method_vectorcall
[2m[36m(pid=11232)[0m     @     0x55fb75fc2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11232)[0m     @     0x55fb7604dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11232)[0m     @     0x55fb7604e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11232)[0m     @     0x55fb75fc3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11232)[0m     @     0x55fb7604dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11232)[0m     @     0x55fb7604e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11232)[0m     @     0x55fb75fc3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11232)[0m     @     0x55fb7604dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11232)[0m     @     0x55fb7604e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11232)[0m     @     0x55fb75fc3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11232)[0m     @     0x55fb7604dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11232)[0m     @     0x55fb7604e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11232)[0m     @     0x55fb75fc3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11336)[0m     @     0x7f49deffb4f5 at::Tensor::copy_()
[2m[36m(pid=11336)[0m     @     0x7f49e50a679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11336)[0m     @     0x559eaacdefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11336)[0m     @     0x559eaac39b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11336)[0m     @     0x559eaacc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=11336)[0m     @     0x559eaacc5a20 method_vectorcall
[2m[36m(pid=11336)[0m     @     0x559eaac39bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11336)[0m     @     0x559eaacc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=11336)[0m     @     0x559eaacc5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11336)[0m     @     0x559eaac3a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11336)[0m     @     0x559eaacc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=11336)[0m     @     0x559eaacc5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11336)[0m     @     0x559eaac3a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11336)[0m     @     0x559eaacc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=11336)[0m     @     0x559eaacc5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11336)[0m     @     0x559eaac3a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11336)[0m     @     0x559eaacc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=11336)[0m     @     0x559eaacc5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11336)[0m     @     0x559eaac3a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11218)[0m     @     0x7f13722cb4f5 at::Tensor::copy_()
[2m[36m(pid=11218)[0m     @     0x7f137837679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11218)[0m     @     0x56095f4bafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11218)[0m     @     0x56095f415b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11218)[0m     @     0x56095f4a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11218)[0m     @     0x56095f4a1a20 method_vectorcall
[2m[36m(pid=11218)[0m     @     0x56095f415bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11218)[0m     @     0x56095f4a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11218)[0m     @     0x56095f4a1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11218)[0m     @     0x56095f416689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11218)[0m     @     0x56095f4a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11218)[0m     @     0x56095f4a1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11218)[0m     @     0x56095f416689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11218)[0m     @     0x56095f4a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11218)[0m     @     0x56095f4a1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11218)[0m     @     0x56095f416689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11218)[0m     @     0x56095f4a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11218)[0m     @     0x56095f4a1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11218)[0m     @     0x56095f416689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11269)[0m     @     0x5602121b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11269)[0m     @     0x5602121b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11269)[0m     @     0x56021212e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11269)[0m     @     0x5602121b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11269)[0m     @     0x5602121b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11269)[0m     @     0x56021212e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11201)[0m     @     0x55e984556643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11201)[0m     @     0x55e9844cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11206)[0m     @     0x7f274b49f4f5 at::Tensor::copy_()
[2m[36m(pid=11206)[0m     @     0x7f275154a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11206)[0m     @     0x556053ed8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11206)[0m     @     0x556053e33b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11206)[0m     @     0x556053ebebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11206)[0m     @     0x556053ebfa20 method_vectorcall
[2m[36m(pid=11206)[0m     @     0x556053e33bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11206)[0m     @     0x556053ebebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11206)[0m     @     0x556053ebf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11206)[0m     @     0x556053e34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11206)[0m     @     0x556053ebebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11206)[0m     @     0x556053ebf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11206)[0m     @     0x556053e34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11206)[0m     @     0x556053ebebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11206)[0m     @     0x556053ebf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11206)[0m     @     0x556053e34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11206)[0m     @     0x556053ebebaf _PyEval_EvalCodeWithName
[2m[36m(pid=11206)[0m     @     0x556053ebf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11206)[0m     @     0x556053e34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11277)[0m     @     0x7fad9917979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11277)[0m     @     0x55fa2373afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11277)[0m     @     0x55fa23695b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11277)[0m     @     0x55fa23720baf _PyEval_EvalCodeWithName
[2m[36m(pid=11277)[0m     @     0x55fa23721a20 method_vectorcall
[2m[36m(pid=11277)[0m     @     0x55fa23695bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11277)[0m     @     0x55fa23720baf _PyEval_EvalCodeWithName
[2m[36m(pid=11277)[0m     @     0x55fa23721643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11277)[0m     @     0x55fa23696689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11277)[0m     @     0x55fa23720baf _PyEval_EvalCodeWithName
[2m[36m(pid=11277)[0m     @     0x55fa23721643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11277)[0m     @     0x55fa23696689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11277)[0m     @     0x55fa23720baf _PyEval_EvalCodeWithName
[2m[36m(pid=11277)[0m     @     0x55fa23721643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11277)[0m     @     0x55fa23696689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11277)[0m     @     0x55fa23720baf _PyEval_EvalCodeWithName
[2m[36m(pid=11277)[0m     @     0x55fa23721643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11277)[0m     @     0x55fa23696689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11279)[0m     @     0x7f77619134f5 at::Tensor::copy_()
[2m[36m(pid=11279)[0m     @     0x7f77679be79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11279)[0m     @     0x563b1181ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11279)[0m     @     0x563b1177ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11279)[0m     @     0x563b11805baf _PyEval_EvalCodeWithName
[2m[36m(pid=11279)[0m     @     0x563b11806a20 method_vectorcall
[2m[36m(pid=11279)[0m     @     0x563b1177abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11279)[0m     @     0x563b11805baf _PyEval_EvalCodeWithName
[2m[36m(pid=11279)[0m     @     0x563b11806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11279)[0m     @     0x563b1177b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11279)[0m     @     0x563b11805baf _PyEval_EvalCodeWithName
[2m[36m(pid=11279)[0m     @     0x563b11806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11279)[0m     @     0x563b1177b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11279)[0m     @     0x563b11805baf _PyEval_EvalCodeWithName
[2m[36m(pid=11279)[0m     @     0x563b11806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11279)[0m     @     0x563b1177b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11279)[0m     @     0x563b11805baf _PyEval_EvalCodeWithName
[2m[36m(pid=11279)[0m     @     0x563b11806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11279)[0m     @     0x563b1177b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11273)[0m     @     0x7ef82ab554f5 at::Tensor::copy_()
[2m[36m(pid=11273)[0m     @     0x7ef830c0079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11273)[0m     @     0x55dddbb54fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11273)[0m     @     0x55dddbaafb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11273)[0m     @     0x55dddbb3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11273)[0m     @     0x55dddbb3ba20 method_vectorcall
[2m[36m(pid=11273)[0m     @     0x55dddbaafbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11273)[0m     @     0x55dddbb3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11273)[0m     @     0x55dddbb3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11273)[0m     @     0x55dddbab0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11273)[0m     @     0x55dddbb3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11273)[0m     @     0x55dddbb3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11273)[0m     @     0x55dddbab0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11273)[0m     @     0x55dddbb3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11273)[0m     @     0x55dddbb3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11273)[0m     @     0x55dddbab0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11273)[0m     @     0x55dddbb3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11273)[0m     @     0x55dddbb3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11273)[0m     @     0x55dddbab0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11280)[0m     @     0x5644589b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11280)[0m     @     0x564458a42baf _PyEval_EvalCodeWithName
[2m[36m(pid=11280)[0m     @     0x564458a43643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11280)[0m     @     0x5644589b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11290)[0m     @     0x7fabbfc91d91 at::TensorIterator::for_each()
[2m[36m(pid=11290)[0m     @     0x7fabc0574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11290)[0m     @     0x7fabc0597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11213)[0m     @     0x7f1fec23b4f5 at::Tensor::copy_()
[2m[36m(pid=11213)[0m     @     0x7f1ff22e679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11213)[0m     @     0x558776903fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11213)[0m     @     0x55877685eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11213)[0m     @     0x5587768e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11213)[0m     @     0x5587768eaa20 method_vectorcall
[2m[36m(pid=11213)[0m     @     0x55877685ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11213)[0m     @     0x5587768e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11213)[0m     @     0x5587768ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11213)[0m     @     0x55877685f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11213)[0m     @     0x5587768e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11213)[0m     @     0x5587768ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11213)[0m     @     0x55877685f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11213)[0m     @     0x5587768e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11213)[0m     @     0x5587768ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11213)[0m     @     0x55877685f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11213)[0m     @     0x5587768e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=11213)[0m     @     0x5587768ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11213)[0m     @     0x55877685f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11271)[0m     @     0x7ecd6be9f4f5 at::Tensor::copy_()
[2m[36m(pid=11271)[0m     @     0x7ecd6e3728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11216)[0m     @     0x7f42a9b95d91 at::TensorIterator::for_each()
[2m[36m(pid=11216)[0m     @     0x7f42aa478b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11216)[0m     @     0x7f42aa49bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11283)[0m     @     0x555ca76a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11283)[0m     @     0x555ca772abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11283)[0m     @     0x555ca772b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11283)[0m     @     0x555ca76a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11283)[0m     @     0x555ca772abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11283)[0m     @     0x555ca772b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11283)[0m     @     0x555ca76a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11268)[0m     @     0x7f226e4778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11268)[0m     @     0x7f226bfa44f5 at::Tensor::copy_()
[2m[36m(pid=11256)[0m     @     0x7f80cda93d91 at::TensorIterator::for_each()
[2m[36m(pid=11256)[0m     @     0x7f80ce376b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=11256)[0m     @     0x7f80ce399c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=11270)[0m     @     0x5636ccca8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11270)[0m     @     0x5636ccca9a20 method_vectorcall
[2m[36m(pid=11270)[0m     @     0x5636ccc1dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11270)[0m     @     0x5636ccca8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11270)[0m     @     0x5636ccca9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11270)[0m     @     0x5636ccc1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11270)[0m     @     0x5636ccca8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11270)[0m     @     0x5636ccca9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11270)[0m     @     0x5636ccc1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11270)[0m     @     0x5636ccca8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11270)[0m     @     0x5636ccca9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11270)[0m     @     0x5636ccc1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11270)[0m     @     0x5636ccca8baf _PyEval_EvalCodeWithName
[2m[36m(pid=11270)[0m     @     0x5636ccca9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11270)[0m     @     0x5636ccc1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11278)[0m     @     0x7ecfb5e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11278)[0m     @     0x7ecfb39cc4f5 at::Tensor::copy_()
[2m[36m(pid=11278)[0m     @     0x7ecfb9a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11278)[0m     @     0x565161c57fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11278)[0m     @     0x565161bb2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11278)[0m     @     0x565161c3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11278)[0m     @     0x565161c3ea20 method_vectorcall
[2m[36m(pid=11278)[0m     @     0x565161bb2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11278)[0m     @     0x565161c3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11278)[0m     @     0x565161c3e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11278)[0m     @     0x565161bb3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11278)[0m     @     0x565161c3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11278)[0m     @     0x565161c3e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11278)[0m     @     0x565161bb3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11278)[0m     @     0x565161c3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11278)[0m     @     0x565161c3e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11278)[0m     @     0x565161bb3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11278)[0m     @     0x565161c3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11278)[0m     @     0x565161c3e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11278)[0m     @     0x565161bb3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11276)[0m     @     0x55da99910643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11276)[0m     @     0x55da99885689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11276)[0m     @     0x55da9990fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11276)[0m     @     0x55da99910643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11276)[0m     @     0x55da99885689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11276)[0m     @     0x55da9990fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11276)[0m     @     0x55da99910643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11276)[0m     @     0x55da99885689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11276)[0m     @     0x55da9990fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11276)[0m     @     0x55da99910643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11276)[0m     @     0x55da99885689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11267)[0m     @     0x7f0b125e24f5 at::Tensor::copy_()
[2m[36m(pid=11267)[0m     @     0x7f0b1868d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11267)[0m     @     0x55f393e14fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11267)[0m     @     0x55f393d6fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11267)[0m     @     0x55f393dfabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11267)[0m     @     0x55f393dfba20 method_vectorcall
[2m[36m(pid=11267)[0m     @     0x55f393d6fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11267)[0m     @     0x55f393dfabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11267)[0m     @     0x55f393dfb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11267)[0m     @     0x55f393d70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11267)[0m     @     0x55f393dfabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11267)[0m     @     0x55f393dfb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11267)[0m     @     0x55f393d70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11267)[0m     @     0x55f393dfabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11267)[0m     @     0x55f393dfb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11267)[0m     @     0x55f393d70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11267)[0m     @     0x55f393dfabaf _PyEval_EvalCodeWithName
[2m[36m(pid=11267)[0m     @     0x55f393dfb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11267)[0m     @     0x55f393d70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11308)[0m     @     0x7f910ce4b4f5 at::Tensor::copy_()
[2m[36m(pid=11308)[0m     @     0x7f9112ef679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11308)[0m     @     0x556e72693fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11308)[0m     @     0x556e725eeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11308)[0m     @     0x556e72679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11308)[0m     @     0x556e7267aa20 method_vectorcall
[2m[36m(pid=11308)[0m     @     0x556e725eebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11308)[0m     @     0x556e72679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11308)[0m     @     0x556e7267a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11308)[0m     @     0x556e725ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11308)[0m     @     0x556e72679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11308)[0m     @     0x556e7267a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11308)[0m     @     0x556e725ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11308)[0m     @     0x556e72679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11308)[0m     @     0x556e7267a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11308)[0m     @     0x556e725ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11308)[0m     @     0x556e72679baf _PyEval_EvalCodeWithName
[2m[36m(pid=11308)[0m     @     0x556e7267a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11308)[0m     @     0x556e725ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11225)[0m     @     0x56510e9e7baf _PyEval_EvalCodeWithName
[2m[36m(pid=11225)[0m     @     0x56510e9e8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11225)[0m     @     0x56510e95d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11199)[0m     @     0x7f985d2354f5 at::Tensor::copy_()
[2m[36m(pid=11199)[0m     @     0x7f985f7088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11199)[0m     @     0x7f985d2354f5 at::Tensor::copy_()
[2m[36m(pid=11199)[0m     @     0x7f98632e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11199)[0m     @     0x56310a663fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11199)[0m     @     0x56310a5beb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11199)[0m     @     0x56310a649baf _PyEval_EvalCodeWithName
[2m[36m(pid=11199)[0m     @     0x56310a64aa20 method_vectorcall
[2m[36m(pid=11199)[0m     @     0x56310a5bebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11199)[0m     @     0x56310a649baf _PyEval_EvalCodeWithName
[2m[36m(pid=11199)[0m     @     0x56310a64a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11199)[0m     @     0x56310a5bf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11199)[0m     @     0x56310a649baf _PyEval_EvalCodeWithName
[2m[36m(pid=11199)[0m     @     0x56310a64a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11199)[0m     @     0x56310a5bf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11199)[0m     @     0x56310a649baf _PyEval_EvalCodeWithName
[2m[36m(pid=11199)[0m     @     0x56310a64a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11199)[0m     @     0x56310a5bf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11224)[0m     @     0x7f2a716468de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11224)[0m     @     0x7f2a6f1734f5 at::Tensor::copy_()
[2m[36m(pid=11224)[0m     @     0x7f2a7521e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11224)[0m     @     0x55d4498fdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11224)[0m     @     0x55d449858b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11224)[0m     @     0x55d4498e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11224)[0m     @     0x55d4498e4a20 method_vectorcall
[2m[36m(pid=11224)[0m     @     0x55d449858bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11224)[0m     @     0x55d4498e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11224)[0m     @     0x55d4498e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11224)[0m     @     0x55d449859689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11224)[0m     @     0x55d4498e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11224)[0m     @     0x55d4498e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11224)[0m     @     0x55d449859689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11224)[0m     @     0x55d4498e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11224)[0m     @     0x55d4498e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11224)[0m     @     0x55d449859689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11224)[0m     @     0x55d4498e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11224)[0m     @     0x55d4498e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11224)[0m     @     0x55d449859689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11228)[0m     @     0x7fc3d7d6179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11228)[0m     @     0x55d9441cbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11228)[0m     @     0x55d944126b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11228)[0m     @     0x55d9441b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11228)[0m     @     0x55d9441b2a20 method_vectorcall
[2m[36m(pid=11228)[0m     @     0x55d944126bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11228)[0m     @     0x55d9441b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11228)[0m     @     0x55d9441b2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11228)[0m     @     0x55d944127689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11228)[0m     @     0x55d9441b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11228)[0m     @     0x55d9441b2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11228)[0m     @     0x55d944127689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11228)[0m     @     0x55d9441b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11228)[0m     @     0x55d9441b2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11228)[0m     @     0x55d944127689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11228)[0m     @     0x55d9441b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11228)[0m     @     0x55d9441b2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11228)[0m     @     0x55d944127689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11265)[0m     @     0x7f35ed3ba4f5 at::Tensor::copy_()
[2m[36m(pid=11265)[0m     @     0x7f35f346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11265)[0m     @     0x56305afeafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11265)[0m     @     0x56305af45b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11265)[0m     @     0x56305afd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11265)[0m     @     0x56305afd1a20 method_vectorcall
[2m[36m(pid=11265)[0m     @     0x56305af45bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11265)[0m     @     0x56305afd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11265)[0m     @     0x56305afd1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11265)[0m     @     0x56305af46689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11265)[0m     @     0x56305afd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11265)[0m     @     0x56305afd1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11265)[0m     @     0x56305af46689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11265)[0m     @     0x56305afd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11265)[0m     @     0x56305afd1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11265)[0m     @     0x56305af46689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11265)[0m     @     0x56305afd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=11265)[0m     @     0x56305afd1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11265)[0m     @     0x56305af46689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11258)[0m     @     0x7f5590b658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11258)[0m     @     0x7f558e6924f5 at::Tensor::copy_()
[2m[36m(pid=11258)[0m     @     0x7f559473d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11258)[0m     @     0x55816dbdbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11258)[0m     @     0x55816db36b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11258)[0m     @     0x55816dbc1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11258)[0m     @     0x55816dbc2a20 method_vectorcall
[2m[36m(pid=11258)[0m     @     0x55816db36bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11258)[0m     @     0x55816dbc1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11258)[0m     @     0x55816dbc2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11258)[0m     @     0x55816db37689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11258)[0m     @     0x55816dbc1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11258)[0m     @     0x55816dbc2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11258)[0m     @     0x55816db37689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11258)[0m     @     0x55816dbc1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11258)[0m     @     0x55816dbc2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11258)[0m     @     0x55816db37689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11258)[0m     @     0x55816dbc1baf _PyEval_EvalCodeWithName
[2m[36m(pid=11258)[0m     @     0x55816dbc2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11258)[0m     @     0x55816db37689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11227)[0m     @     0x7f02e6c134f5 at::Tensor::copy_()
[2m[36m(pid=11227)[0m     @     0x7f02eccbe79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11227)[0m     @     0x56352d0a4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11227)[0m     @     0x56352cfffb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11227)[0m     @     0x56352d08abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11227)[0m     @     0x56352d08ba20 method_vectorcall
[2m[36m(pid=11227)[0m     @     0x56352cfffbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11227)[0m     @     0x56352d08abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11227)[0m     @     0x56352d08b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11227)[0m     @     0x56352d000689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11227)[0m     @     0x56352d08abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11227)[0m     @     0x56352d08b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11227)[0m     @     0x56352d000689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11227)[0m     @     0x56352d08abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11227)[0m     @     0x56352d08b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11227)[0m     @     0x56352d000689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11227)[0m     @     0x56352d08abaf _PyEval_EvalCodeWithName
[2m[36m(pid=11227)[0m     @     0x56352d08b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11227)[0m     @     0x56352d000689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11275)[0m     @     0x55768042d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11275)[0m     @     0x5576803a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11275)[0m     @     0x55768042cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11275)[0m     @     0x55768042d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11275)[0m     @     0x5576803a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11275)[0m     @     0x55768042cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11275)[0m     @     0x55768042d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11275)[0m     @     0x5576803a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11275)[0m     @     0x55768042cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11275)[0m     @     0x55768042d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11275)[0m     @     0x5576803a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11284)[0m     @     0x7ee76c3354f5 at::Tensor::copy_()
[2m[36m(pid=11284)[0m     @     0x7ee7723e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11284)[0m     @     0x559a18640fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11284)[0m     @     0x559a1859bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11284)[0m     @     0x559a18626baf _PyEval_EvalCodeWithName
[2m[36m(pid=11284)[0m     @     0x559a18627a20 method_vectorcall
[2m[36m(pid=11284)[0m     @     0x559a1859bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11284)[0m     @     0x559a18626baf _PyEval_EvalCodeWithName
[2m[36m(pid=11284)[0m     @     0x559a18627643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11284)[0m     @     0x559a1859c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11284)[0m     @     0x559a18626baf _PyEval_EvalCodeWithName
[2m[36m(pid=11284)[0m     @     0x559a18627643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11284)[0m     @     0x559a1859c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11284)[0m     @     0x559a18626baf _PyEval_EvalCodeWithName
[2m[36m(pid=11284)[0m     @     0x559a18627643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11284)[0m     @     0x559a1859c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11284)[0m     @     0x559a18626baf _PyEval_EvalCodeWithName
[2m[36m(pid=11284)[0m     @     0x559a18627643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11284)[0m     @     0x559a1859c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11301)[0m     @     0x7f04eb25079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11301)[0m     @     0x5575b0249fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11301)[0m     @     0x5575b01a4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11301)[0m     @     0x5575b022fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11301)[0m     @     0x5575b0230a20 method_vectorcall
[2m[36m(pid=11301)[0m     @     0x5575b01a4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11301)[0m     @     0x5575b022fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11301)[0m     @     0x5575b0230643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11301)[0m     @     0x5575b01a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11301)[0m     @     0x5575b022fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11301)[0m     @     0x5575b0230643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11301)[0m     @     0x5575b01a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11301)[0m     @     0x5575b022fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11301)[0m     @     0x5575b0230643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11301)[0m     @     0x5575b01a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11301)[0m     @     0x5575b022fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11301)[0m     @     0x5575b0230643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11301)[0m     @     0x5575b01a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11210)[0m     @     0x55bc93cacbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11210)[0m     @     0x55bc93d37baf _PyEval_EvalCodeWithName
[2m[36m(pid=11210)[0m     @     0x55bc93d38643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11210)[0m     @     0x55bc93cad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11210)[0m     @     0x55bc93d37baf _PyEval_EvalCodeWithName
[2m[36m(pid=11210)[0m     @     0x55bc93d38643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11210)[0m     @     0x55bc93cad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11210)[0m     @     0x55bc93d37baf _PyEval_EvalCodeWithName
[2m[36m(pid=11210)[0m     @     0x55bc93d38643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11210)[0m     @     0x55bc93cad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11210)[0m     @     0x55bc93d37baf _PyEval_EvalCodeWithName
[2m[36m(pid=11210)[0m     @     0x55bc93d38643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11210)[0m     @     0x55bc93cad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11272)[0m     @     0x55b4000b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11272)[0m     @     0x55b40013bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11272)[0m     @     0x55b40013c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11272)[0m     @     0x55b4000b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11272)[0m     @     0x55b40013bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11272)[0m     @     0x55b40013c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11272)[0m     @     0x55b4000b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11272)[0m     @     0x55b40013bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11272)[0m     @     0x55b40013c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11272)[0m     @     0x55b4000b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11208)[0m     @     0x7eead23695a4 at::native::copy_()
[2m[36m(pid=11195)[0m     @     0x7ef5c6a138de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11195)[0m     @     0x7ef5c45404f5 at::Tensor::copy_()
[2m[36m(pid=11195)[0m     @     0x7ef5ca5eb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11195)[0m     @     0x55804f379fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11195)[0m     @     0x55804f2d4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11195)[0m     @     0x55804f35fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11195)[0m     @     0x55804f360a20 method_vectorcall
[2m[36m(pid=11195)[0m     @     0x55804f2d4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11195)[0m     @     0x55804f35fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11195)[0m     @     0x55804f360643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11195)[0m     @     0x55804f2d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11195)[0m     @     0x55804f35fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11195)[0m     @     0x55804f360643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11195)[0m     @     0x55804f2d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11195)[0m     @     0x55804f35fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11195)[0m     @     0x55804f360643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11195)[0m     @     0x55804f2d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11195)[0m     @     0x55804f35fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11195)[0m     @     0x55804f360643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11195)[0m     @     0x55804f2d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11290)[0m     @     0x7fabbfa39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11290)[0m     @     0x7fabbfa37388 at::native::copy_impl()
[2m[36m(pid=11290)[0m     @     0x7fabbfa395a4 at::native::copy_()
[2m[36m(pid=11271)[0m     @     0x7ecd6be9f4f5 at::Tensor::copy_()
[2m[36m(pid=11271)[0m     @     0x7ecd71f4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11271)[0m     @     0x56017a97bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11271)[0m     @     0x56017a8d6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11271)[0m     @     0x56017a961baf _PyEval_EvalCodeWithName
[2m[36m(pid=11271)[0m     @     0x56017a962a20 method_vectorcall
[2m[36m(pid=11271)[0m     @     0x56017a8d6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11271)[0m     @     0x56017a961baf _PyEval_EvalCodeWithName
[2m[36m(pid=11271)[0m     @     0x56017a962643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11271)[0m     @     0x56017a8d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11271)[0m     @     0x56017a961baf _PyEval_EvalCodeWithName
[2m[36m(pid=11271)[0m     @     0x56017a962643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11271)[0m     @     0x56017a8d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11271)[0m     @     0x56017a961baf _PyEval_EvalCodeWithName
[2m[36m(pid=11271)[0m     @     0x56017a962643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11271)[0m     @     0x56017a8d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11271)[0m     @     0x56017a961baf _PyEval_EvalCodeWithName
[2m[36m(pid=11271)[0m     @     0x56017a962643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11271)[0m     @     0x56017a8d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11216)[0m     @     0x7f42a993da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11216)[0m     @     0x7f42a993b388 at::native::copy_impl()
[2m[36m(pid=11216)[0m     @     0x7f42a993d5a4 at::native::copy_()
[2m[36m(pid=11268)[0m     @     0x7f227204f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11268)[0m     @     0x55d8e88ddfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11268)[0m     @     0x55d8e8838b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11268)[0m     @     0x55d8e88c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11268)[0m     @     0x55d8e88c4a20 method_vectorcall
[2m[36m(pid=11268)[0m     @     0x55d8e8838bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11268)[0m     @     0x55d8e88c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11268)[0m     @     0x55d8e88c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11268)[0m     @     0x55d8e8839689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11268)[0m     @     0x55d8e88c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11268)[0m     @     0x55d8e88c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11268)[0m     @     0x55d8e8839689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11268)[0m     @     0x55d8e88c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11268)[0m     @     0x55d8e88c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11268)[0m     @     0x55d8e8839689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11268)[0m     @     0x55d8e88c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=11268)[0m     @     0x55d8e88c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11268)[0m     @     0x55d8e8839689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11256)[0m     @     0x7f80cd83ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=11256)[0m     @     0x7f80cd839388 at::native::copy_impl()
[2m[36m(pid=11256)[0m     @     0x7f80cd83b5a4 at::native::copy_()
[2m[36m(pid=11199)[0m     @     0x56310a649baf _PyEval_EvalCodeWithName
[2m[36m(pid=11199)[0m     @     0x56310a64a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11199)[0m     @     0x56310a5bf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11208)[0m     @     0x7eead2a544f5 at::Tensor::copy_()
[2m[36m(pid=11208)[0m     @     0x7eead4f278de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11208)[0m     @     0x7eead2a544f5 at::Tensor::copy_()
[2m[36m(pid=11208)[0m     @     0x7eead8aff79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11208)[0m     @     0x561ec7116fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11208)[0m     @     0x561ec7071b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11208)[0m     @     0x561ec70fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11208)[0m     @     0x561ec70fda20 method_vectorcall
[2m[36m(pid=11290)[0m     @     0x7fabc01244f5 at::Tensor::copy_()
[2m[36m(pid=11290)[0m     @     0x7fabc25f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11216)[0m     @     0x7f42aa0284f5 at::Tensor::copy_()
[2m[36m(pid=11216)[0m     @     0x7f42ac4fb8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11216)[0m     @     0x7f42aa0284f5 at::Tensor::copy_()
[2m[36m(pid=11256)[0m     @     0x7f80cdf264f5 at::Tensor::copy_()
[2m[36m(pid=11256)[0m     @     0x7f80d03f98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=11256)[0m     @     0x7f80cdf264f5 at::Tensor::copy_()
[2m[36m(pid=11208)[0m     @     0x561ec7071bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11208)[0m     @     0x561ec70fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11208)[0m     @     0x561ec70fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11208)[0m     @     0x561ec7072689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11208)[0m     @     0x561ec70fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11208)[0m     @     0x561ec70fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11208)[0m     @     0x561ec7072689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11208)[0m     @     0x561ec70fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11208)[0m     @     0x561ec70fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11208)[0m     @     0x561ec7072689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11208)[0m     @     0x561ec70fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=11208)[0m     @     0x561ec70fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11208)[0m     @     0x561ec7072689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11290)[0m     @     0x7fabc01244f5 at::Tensor::copy_()
[2m[36m(pid=11290)[0m     @     0x7fabc61cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11290)[0m     @     0x55baf50a3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11290)[0m     @     0x55baf4ffeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11290)[0m     @     0x55baf5089baf _PyEval_EvalCodeWithName
[2m[36m(pid=11290)[0m     @     0x55baf508aa20 method_vectorcall
[2m[36m(pid=11290)[0m     @     0x55baf4ffebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11290)[0m     @     0x55baf5089baf _PyEval_EvalCodeWithName
[2m[36m(pid=11290)[0m     @     0x55baf508a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11290)[0m     @     0x55baf4fff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11290)[0m     @     0x55baf5089baf _PyEval_EvalCodeWithName
[2m[36m(pid=11290)[0m     @     0x55baf508a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11290)[0m     @     0x55baf4fff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11290)[0m     @     0x55baf5089baf _PyEval_EvalCodeWithName
[2m[36m(pid=11290)[0m     @     0x55baf508a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11290)[0m     @     0x55baf4fff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11290)[0m     @     0x55baf5089baf _PyEval_EvalCodeWithName
[2m[36m(pid=11290)[0m     @     0x55baf508a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11290)[0m     @     0x55baf4fff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11216)[0m     @     0x7f42b00d379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11216)[0m     @     0x5620fecaffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11216)[0m     @     0x5620fec0ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11216)[0m     @     0x5620fec95baf _PyEval_EvalCodeWithName
[2m[36m(pid=11216)[0m     @     0x5620fec96a20 method_vectorcall
[2m[36m(pid=11216)[0m     @     0x5620fec0abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11216)[0m     @     0x5620fec95baf _PyEval_EvalCodeWithName
[2m[36m(pid=11216)[0m     @     0x5620fec96643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11216)[0m     @     0x5620fec0b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11216)[0m     @     0x5620fec95baf _PyEval_EvalCodeWithName
[2m[36m(pid=11216)[0m     @     0x5620fec96643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11216)[0m     @     0x5620fec0b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11216)[0m     @     0x5620fec95baf _PyEval_EvalCodeWithName
[2m[36m(pid=11216)[0m     @     0x5620fec96643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11216)[0m     @     0x5620fec0b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11216)[0m     @     0x5620fec95baf _PyEval_EvalCodeWithName
[2m[36m(pid=11216)[0m     @     0x5620fec96643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11216)[0m     @     0x5620fec0b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11256)[0m     @     0x7f80d3fd179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=11256)[0m     @     0x563666d7dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=11256)[0m     @     0x563666cd8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11256)[0m     @     0x563666d63baf _PyEval_EvalCodeWithName
[2m[36m(pid=11256)[0m     @     0x563666d64a20 method_vectorcall
[2m[36m(pid=11256)[0m     @     0x563666cd8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11256)[0m     @     0x563666d63baf _PyEval_EvalCodeWithName
[2m[36m(pid=11256)[0m     @     0x563666d64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11256)[0m     @     0x563666cd9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11256)[0m     @     0x563666d63baf _PyEval_EvalCodeWithName
[2m[36m(pid=11256)[0m     @     0x563666d64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11256)[0m     @     0x563666cd9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11256)[0m     @     0x563666d63baf _PyEval_EvalCodeWithName
[2m[36m(pid=11256)[0m     @     0x563666d64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11256)[0m     @     0x563666cd9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=11256)[0m     @     0x563666d63baf _PyEval_EvalCodeWithName
[2m[36m(pid=11256)[0m     @     0x563666d64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=11256)[0m     @     0x563666cd9689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:18:45,316	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.
2020-11-05 10:18:45,316	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffa97540c201000000.
2020-11-05 10:18:45,327	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.
2020-11-05 10:18:45,327	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.
2020-11-05 10:18:45,336	ERROR trial_runner.py:567 -- Trial PPO_jss_env_44f23_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=11304, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
2020-11-05 10:18:45,338	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.
2020-11-05 10:18:45,339	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.
2020-11-05 10:18:45,339	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff90aded9101000000.
== Status ==
Memory usage on this node: 26.5/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_44f23_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_44f23_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_44f23_00000_0_2020-11-05_10-18-37/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

== Status ==
Memory usage on this node: 26.3/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_44f23_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_44f23_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_44f23_00000_0_2020-11-05_10-18-37/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

2020-11-05 10:18:45,350	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.
2020-11-05 10:18:45,351	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.
2020-11-05 10:18:45,351	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.
2020-11-05 10:18:45,351	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.
2020-11-05 10:18:45,351	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.
Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_44f23_00000])
