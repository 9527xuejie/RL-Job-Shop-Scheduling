2020-11-05 10:08:54,675	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_ea18c_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=43850)[0m 2020-11-05 10:08:57,503	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=43742)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43742)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43742)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43742)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43742)[0m *** SIGSEGV (@0x0) received by PID 43742 (TID 0x7f25f6ea7700) from PID 0; stack trace: ***
[2m[36m(pid=43742)[0m     @     0x7f25f6a80390 (unknown)
[2m[36m(pid=43742)[0m     @     0x7ef6f69ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43742)[0m     @     0x7ef6f60f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43742)[0m     @     0x7ef6f60fa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43742)[0m     @     0x7ef6f60faad3 at::TensorIterator::for_each()
[2m[36m(pid=43760)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43760)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43760)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43760)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43760)[0m *** SIGSEGV (@0x0) received by PID 43760 (TID 0x7fc1c236f700) from PID 0; stack trace: ***
[2m[36m(pid=43760)[0m     @     0x7fc1c1f48390 (unknown)
[2m[36m(pid=43760)[0m     @     0x7f92c1e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43760)[0m     @     0x7f92c154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43760)[0m     @     0x7f92c15528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43760)[0m     @     0x7f92c1552ad3 at::TensorIterator::for_each()
[2m[36m(pid=43772)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43772)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43772)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43772)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43772)[0m *** SIGSEGV (@0x0) received by PID 43772 (TID 0x7fbae825a700) from PID 0; stack trace: ***
[2m[36m(pid=43772)[0m     @     0x7fbae7e33390 (unknown)
[2m[36m(pid=43772)[0m     @     0x7f8be7ddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43772)[0m     @     0x7f8be75097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43772)[0m     @     0x7f8be750c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43769)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43769)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43769)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43769)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43769)[0m *** SIGSEGV (@0x0) received by PID 43769 (TID 0x7ffb82b31700) from PID 0; stack trace: ***
[2m[36m(pid=43769)[0m     @     0x7ffb8270a390 (unknown)
[2m[36m(pid=43763)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43763)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43763)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43763)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43763)[0m *** SIGSEGV (@0x0) received by PID 43763 (TID 0x7f2b34b09700) from PID 0; stack trace: ***
[2m[36m(pid=43763)[0m     @     0x7f2b346e2390 (unknown)
[2m[36m(pid=43763)[0m     @     0x7efc34563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43763)[0m     @     0x7efc33c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43763)[0m     @     0x7efc33c918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43763)[0m     @     0x7efc33c91ad3 at::TensorIterator::for_each()
[2m[36m(pid=43763)[0m     @     0x7efc33c91d91 at::TensorIterator::for_each()
[2m[36m(pid=43763)[0m     @     0x7efc34574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43763)[0m     @     0x7efc34597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43818)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43818)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43818)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43818)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43818)[0m *** SIGSEGV (@0x0) received by PID 43818 (TID 0x7ff5cce1e700) from PID 0; stack trace: ***
[2m[36m(pid=43818)[0m     @     0x7ff5cc9f7390 (unknown)
[2m[36m(pid=43818)[0m     @     0x7fc6cc774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43818)[0m     @     0x7fc6cbe9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43818)[0m     @     0x7fc6cbea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43818)[0m     @     0x7fc6cbea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=43818)[0m     @     0x7fc6cbea2d91 at::TensorIterator::for_each()
[2m[36m(pid=43818)[0m     @     0x7fc6cc785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43818)[0m     @     0x7fc6cc7a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43835)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43835)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43835)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43835)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43835)[0m *** SIGSEGV (@0x0) received by PID 43835 (TID 0x7fad204a6700) from PID 0; stack trace: ***
[2m[36m(pid=43835)[0m     @     0x7fad2007f390 (unknown)
[2m[36m(pid=43835)[0m     @     0x7f7e2001cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43835)[0m     @     0x7f7e1f7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43835)[0m     @     0x7f7e1f74a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43835)[0m     @     0x7f7e1f74aad3 at::TensorIterator::for_each()
[2m[36m(pid=43835)[0m     @     0x7f7e1f74ad91 at::TensorIterator::for_each()
[2m[36m(pid=43835)[0m     @     0x7f7e2002db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43835)[0m     @     0x7f7e20050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43835)[0m     @     0x7f7e1f4f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43835)[0m     @     0x7f7e1f4f0388 at::native::copy_impl()
[2m[36m(pid=43834)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43834)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43834)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43834)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43834)[0m *** SIGSEGV (@0x0) received by PID 43834 (TID 0x7fb060ad8700) from PID 0; stack trace: ***
[2m[36m(pid=43834)[0m     @     0x7fb0606b1390 (unknown)
[2m[36m(pid=43834)[0m     @     0x7f816060ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43834)[0m     @     0x7f815fd397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43834)[0m     @     0x7f815fd3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43834)[0m     @     0x7f815fd3cad3 at::TensorIterator::for_each()
[2m[36m(pid=43834)[0m     @     0x7f815fd3cd91 at::TensorIterator::for_each()
[2m[36m(pid=43834)[0m     @     0x7f816061fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43834)[0m     @     0x7f8160642c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43842)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43842)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43842)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43755)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43755)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43755)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43755)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43755)[0m *** SIGSEGV (@0x0) received by PID 43755 (TID 0x7f62658af700) from PID 0; stack trace: ***
[2m[36m(pid=43833)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43833)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43833)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43801)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43801)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43801)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43752)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43752)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43752)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43752)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43752)[0m *** SIGSEGV (@0x0) received by PID 43752 (TID 0x7fca5e14f700) from PID 0; stack trace: ***
[2m[36m(pid=43849)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43849)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43849)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43849)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43849)[0m *** SIGSEGV (@0x0) received by PID 43849 (TID 0x7f6e9eabb700) from PID 0; stack trace: ***
[2m[36m(pid=43849)[0m     @     0x7f6e9e694390 (unknown)
[2m[36m(pid=43849)[0m     @     0x7f3f9e5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43849)[0m     @     0x7f3f9dccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43849)[0m     @     0x7f3f9dcd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43849)[0m     @     0x7f3f9dcd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=43849)[0m     @     0x7f3f9dcd2d91 at::TensorIterator::for_each()
[2m[36m(pid=43849)[0m     @     0x7f3f9e5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43849)[0m     @     0x7f3f9e5d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43849)[0m     @     0x7f3f9da7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43828)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43828)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43828)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43828)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43828)[0m *** SIGSEGV (@0x0) received by PID 43828 (TID 0x7f700d3af700) from PID 0; stack trace: ***
[2m[36m(pid=43828)[0m     @     0x7f700cf88390 (unknown)
[2m[36m(pid=43828)[0m     @     0x7f410cea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43828)[0m     @     0x7f410c5cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43828)[0m     @     0x7f410c5d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43828)[0m     @     0x7f410c5d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=43828)[0m     @     0x7f410c5d2d91 at::TensorIterator::for_each()
[2m[36m(pid=43828)[0m     @     0x7f410ceb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43828)[0m     @     0x7f410ced8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43828)[0m     @     0x7f410c37aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43773)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43773)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43773)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43773)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43773)[0m *** SIGSEGV (@0x0) received by PID 43773 (TID 0x7ff04aea5700) from PID 0; stack trace: ***
[2m[36m(pid=43773)[0m     @     0x7ff04aa7e390 (unknown)
[2m[36m(pid=43773)[0m     @     0x7fc14a9fff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43773)[0m     @     0x7fc14a12a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43773)[0m     @     0x7fc14a12d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43773)[0m     @     0x7fc14a12dad3 at::TensorIterator::for_each()
[2m[36m(pid=43824)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43824)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43824)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43824)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43824)[0m *** SIGSEGV (@0x0) received by PID 43824 (TID 0x7f9a177d5700) from PID 0; stack trace: ***
[2m[36m(pid=43824)[0m     @     0x7f9a173ae390 (unknown)
[2m[36m(pid=43824)[0m     @     0x7f6b17229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43824)[0m     @     0x7f6b169547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43824)[0m     @     0x7f6b169578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43824)[0m     @     0x7f6b16957ad3 at::TensorIterator::for_each()
[2m[36m(pid=43824)[0m     @     0x7f6b16957d91 at::TensorIterator::for_each()
[2m[36m(pid=43824)[0m     @     0x7f6b1723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43824)[0m     @     0x7f6b1725dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43824)[0m     @     0x7f6b166ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43820)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43820)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43820)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43820)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43820)[0m *** SIGSEGV (@0x0) received by PID 43820 (TID 0x7fa8b5a55700) from PID 0; stack trace: ***
[2m[36m(pid=43874)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43874)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43874)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43874)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43874)[0m *** SIGSEGV (@0x0) received by PID 43874 (TID 0x7fe8236a1700) from PID 0; stack trace: ***
[2m[36m(pid=43874)[0m     @     0x7fe82327a390 (unknown)
[2m[36m(pid=43874)[0m     @     0x7fb9231fcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43874)[0m     @     0x7fb9229277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43874)[0m     @     0x7fb92292a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43874)[0m     @     0x7fb92292aad3 at::TensorIterator::for_each()
[2m[36m(pid=43827)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43827)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43827)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43827)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43827)[0m *** SIGSEGV (@0x0) received by PID 43827 (TID 0x7fbc4dacc700) from PID 0; stack trace: ***
[2m[36m(pid=43827)[0m     @     0x7fbc4d6a5390 (unknown)
[2m[36m(pid=43827)[0m     @     0x7f8d4d4dff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43827)[0m     @     0x7f8d4cc0a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43827)[0m     @     0x7f8d4cc0d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43827)[0m     @     0x7f8d4cc0dad3 at::TensorIterator::for_each()
[2m[36m(pid=43827)[0m     @     0x7f8d4cc0dd91 at::TensorIterator::for_each()
[2m[36m(pid=43827)[0m     @     0x7f8d4d4f0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43827)[0m     @     0x7f8d4d513c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43770)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43770)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43770)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43770)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43770)[0m *** SIGSEGV (@0x0) received by PID 43770 (TID 0x7fa58e9c4700) from PID 0; stack trace: ***
[2m[36m(pid=43770)[0m     @     0x7fa58e59d390 (unknown)
[2m[36m(pid=43836)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43836)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43836)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43836)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43836)[0m *** SIGSEGV (@0x0) received by PID 43836 (TID 0x7f45e8421700) from PID 0; stack trace: ***
[2m[36m(pid=43836)[0m     @     0x7f45e7ffa390 (unknown)
[2m[36m(pid=43836)[0m     @     0x7f16e7eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43836)[0m     @     0x7f16e75e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43766)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43766)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43766)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43766)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43766)[0m *** SIGSEGV (@0x0) received by PID 43766 (TID 0x7ffa4fcd6700) from PID 0; stack trace: ***
[2m[36m(pid=43766)[0m     @     0x7ffa4f8af390 (unknown)
[2m[36m(pid=43819)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43819)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43819)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43819)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43819)[0m *** SIGSEGV (@0x0) received by PID 43819 (TID 0x7f38dc7d1700) from PID 0; stack trace: ***
[2m[36m(pid=43819)[0m     @     0x7f38dc3aa390 (unknown)
[2m[36m(pid=43819)[0m     @     0x7f09dc333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43819)[0m     @     0x7f09dba5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43819)[0m     @     0x7f09dba618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43819)[0m     @     0x7f09dba61ad3 at::TensorIterator::for_each()
[2m[36m(pid=43832)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43832)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43832)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43832)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43832)[0m *** SIGSEGV (@0x0) received by PID 43832 (TID 0x7fca9c858700) from PID 0; stack trace: ***
[2m[36m(pid=43796)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43796)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43796)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43796)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43796)[0m *** SIGSEGV (@0x0) received by PID 43796 (TID 0x7f9e3e457700) from PID 0; stack trace: ***
[2m[36m(pid=43796)[0m     @     0x7f9e3e030390 (unknown)
[2m[36m(pid=43748)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43748)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43748)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43748)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43748)[0m *** SIGSEGV (@0x0) received by PID 43748 (TID 0x7fb5d6451700) from PID 0; stack trace: ***
[2m[36m(pid=43748)[0m     @     0x7fb5d602a390 (unknown)
[2m[36m(pid=43748)[0m     @     0x7f86d5e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43748)[0m     @     0x7f86d554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43748)[0m     @     0x7f86d55528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43748)[0m     @     0x7f86d5552ad3 at::TensorIterator::for_each()
[2m[36m(pid=43748)[0m     @     0x7f86d5552d91 at::TensorIterator::for_each()
[2m[36m(pid=43748)[0m     @     0x7f86d5e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43748)[0m     @     0x7f86d5e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43841)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43841)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43841)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43841)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43841)[0m *** SIGSEGV (@0x0) received by PID 43841 (TID 0x7f057a6f1700) from PID 0; stack trace: ***
[2m[36m(pid=43841)[0m     @     0x7f057a2ca390 (unknown)
[2m[36m(pid=43841)[0m     @     0x7ed67a279f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43841)[0m     @     0x7ed6799a47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43841)[0m     @     0x7ed6799a78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43841)[0m     @     0x7ed6799a7ad3 at::TensorIterator::for_each()
[2m[36m(pid=43841)[0m     @     0x7ed6799a7d91 at::TensorIterator::for_each()
[2m[36m(pid=43841)[0m     @     0x7ed67a28ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43826)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43826)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43826)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43826)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43826)[0m *** SIGSEGV (@0x0) received by PID 43826 (TID 0x7f59cff26700) from PID 0; stack trace: ***
[2m[36m(pid=43826)[0m     @     0x7f59cfaff390 (unknown)
[2m[36m(pid=43826)[0m     @     0x7f2acfac2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43826)[0m     @     0x7f2acf1ed7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43826)[0m     @     0x7f2acf1f08f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43826)[0m     @     0x7f2acf1f0ad3 at::TensorIterator::for_each()
[2m[36m(pid=43826)[0m     @     0x7f2acf1f0d91 at::TensorIterator::for_each()
[2m[36m(pid=43826)[0m     @     0x7f2acfad3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43826)[0m     @     0x7f2acfaf6c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43847)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43847)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43847)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43847)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43847)[0m *** SIGSEGV (@0x0) received by PID 43847 (TID 0x7f0b4e015700) from PID 0; stack trace: ***
[2m[36m(pid=43847)[0m     @     0x7f0b4dbee390 (unknown)
[2m[36m(pid=43847)[0m     @     0x7edc4db7af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43847)[0m     @     0x7edc4d2a57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43847)[0m     @     0x7edc4d2a88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43847)[0m     @     0x7edc4d2a8ad3 at::TensorIterator::for_each()
[2m[36m(pid=43847)[0m     @     0x7edc4d2a8d91 at::TensorIterator::for_each()
[2m[36m(pid=43847)[0m     @     0x7edc4db8bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43847)[0m     @     0x7edc4dbaec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43847)[0m     @     0x7edc4d050a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43847)[0m     @     0x7edc4d04e388 at::native::copy_impl()
[2m[36m(pid=43747)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43747)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43747)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43747)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43747)[0m *** SIGSEGV (@0x0) received by PID 43747 (TID 0x7f011fed9700) from PID 0; stack trace: ***
[2m[36m(pid=43747)[0m     @     0x7f011fab2390 (unknown)
[2m[36m(pid=43747)[0m     @     0x7ed21f8ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43747)[0m     @     0x7ed21eff77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43747)[0m     @     0x7ed21effa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43747)[0m     @     0x7ed21effaad3 at::TensorIterator::for_each()
[2m[36m(pid=43747)[0m     @     0x7ed21effad91 at::TensorIterator::for_each()
[2m[36m(pid=43747)[0m     @     0x7ed21f8ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43747)[0m     @     0x7ed21f900c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43878)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43878)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43878)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43878)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43878)[0m *** SIGSEGV (@0x0) received by PID 43878 (TID 0x7f7cbd6ea700) from PID 0; stack trace: ***
[2m[36m(pid=43878)[0m     @     0x7f7cbd2c3390 (unknown)
[2m[36m(pid=43878)[0m     @     0x7f4dbd24af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43878)[0m     @     0x7f4dbc9757db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43878)[0m     @     0x7f4dbc9788f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43878)[0m     @     0x7f4dbc978ad3 at::TensorIterator::for_each()
[2m[36m(pid=43878)[0m     @     0x7f4dbc978d91 at::TensorIterator::for_each()
[2m[36m(pid=43878)[0m     @     0x7f4dbd25bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43867)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43867)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43867)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43867)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43867)[0m *** SIGSEGV (@0x0) received by PID 43867 (TID 0x7fb2041e3700) from PID 0; stack trace: ***
[2m[36m(pid=43867)[0m     @     0x7fb203dbc390 (unknown)
[2m[36m(pid=43867)[0m     @     0x7f8303d66f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43867)[0m     @     0x7f83034917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43867)[0m     @     0x7f83034948f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43867)[0m     @     0x7f8303494ad3 at::TensorIterator::for_each()
[2m[36m(pid=43867)[0m     @     0x7f8303494d91 at::TensorIterator::for_each()
[2m[36m(pid=43867)[0m     @     0x7f8303d77b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43867)[0m     @     0x7f8303d9ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43867)[0m     @     0x7f830323ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43867)[0m     @     0x7f830323a388 at::native::copy_impl()
[2m[36m(pid=43813)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43813)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43813)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43813)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43813)[0m *** SIGSEGV (@0x0) received by PID 43813 (TID 0x7f19eebad700) from PID 0; stack trace: ***
[2m[36m(pid=43813)[0m     @     0x7f19ee786390 (unknown)
[2m[36m(pid=43813)[0m     @     0x7eeaee4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43813)[0m     @     0x7eeaedc247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43813)[0m     @     0x7eeaedc278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43813)[0m     @     0x7eeaedc27ad3 at::TensorIterator::for_each()
[2m[36m(pid=43813)[0m     @     0x7eeaedc27d91 at::TensorIterator::for_each()
[2m[36m(pid=43871)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43871)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43871)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43871)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43871)[0m *** SIGSEGV (@0x0) received by PID 43871 (TID 0x7f289950d700) from PID 0; stack trace: ***
[2m[36m(pid=43871)[0m     @     0x7f28990e6390 (unknown)
[2m[36m(pid=43871)[0m     @     0x7ef998f4ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43871)[0m     @     0x7ef99867a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43871)[0m     @     0x7ef99867d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43871)[0m     @     0x7ef99867dad3 at::TensorIterator::for_each()
[2m[36m(pid=43871)[0m     @     0x7ef99867dd91 at::TensorIterator::for_each()
[2m[36m(pid=43871)[0m     @     0x7ef998f60b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43871)[0m     @     0x7ef998f83c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43811)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43811)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43811)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43811)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43811)[0m *** SIGSEGV (@0x0) received by PID 43811 (TID 0x7ff366532700) from PID 0; stack trace: ***
[2m[36m(pid=43811)[0m     @     0x7ff36610b390 (unknown)
[2m[36m(pid=43811)[0m     @     0x7fc4660a8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43811)[0m     @     0x7fc4657d37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43811)[0m     @     0x7fc4657d68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43811)[0m     @     0x7fc4657d6ad3 at::TensorIterator::for_each()
[2m[36m(pid=43811)[0m     @     0x7fc4657d6d91 at::TensorIterator::for_each()
[2m[36m(pid=43775)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43775)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43775)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43775)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43775)[0m *** SIGSEGV (@0x0) received by PID 43775 (TID 0x7ff1f7e37700) from PID 0; stack trace: ***
[2m[36m(pid=43775)[0m     @     0x7ff1f7a10390 (unknown)
[2m[36m(pid=43775)[0m     @     0x7fc2f797af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43746)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43746)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43746)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43746)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43746)[0m *** SIGSEGV (@0x0) received by PID 43746 (TID 0x7f57635f1700) from PID 0; stack trace: ***
[2m[36m(pid=43746)[0m     @     0x7f57631ca390 (unknown)
[2m[36m(pid=43746)[0m     @     0x7f2863124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43746)[0m     @     0x7f286284f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43746)[0m     @     0x7f28628528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43746)[0m     @     0x7f2862852ad3 at::TensorIterator::for_each()
[2m[36m(pid=43746)[0m     @     0x7f2862852d91 at::TensorIterator::for_each()
[2m[36m(pid=43746)[0m     @     0x7f2863135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43823)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43823)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43823)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43823)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43823)[0m *** SIGSEGV (@0x0) received by PID 43823 (TID 0x7fcda50c0700) from PID 0; stack trace: ***
[2m[36m(pid=43823)[0m     @     0x7fcda4c99390 (unknown)
[2m[36m(pid=43823)[0m     @     0x7f9ea4b3bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43823)[0m     @     0x7f9ea42667db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43823)[0m     @     0x7f9ea42698f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43823)[0m     @     0x7f9ea4269ad3 at::TensorIterator::for_each()
[2m[36m(pid=43823)[0m     @     0x7f9ea4269d91 at::TensorIterator::for_each()
[2m[36m(pid=43823)[0m     @     0x7f9ea4b4cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43823)[0m     @     0x7f9ea4b6fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43823)[0m     @     0x7f9ea4011a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43823)[0m     @     0x7f9ea400f388 at::native::copy_impl()
[2m[36m(pid=43825)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43825)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43825)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43825)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43825)[0m *** SIGSEGV (@0x0) received by PID 43825 (TID 0x7f381a4b9700) from PID 0; stack trace: ***
[2m[36m(pid=43825)[0m     @     0x7f381a092390 (unknown)
[2m[36m(pid=43825)[0m     @     0x7f0919e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43825)[0m     @     0x7f091954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43825)[0m     @     0x7f09195528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43825)[0m     @     0x7f0919552ad3 at::TensorIterator::for_each()
[2m[36m(pid=43825)[0m     @     0x7f0919552d91 at::TensorIterator::for_each()
[2m[36m(pid=43825)[0m     @     0x7f0919e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43825)[0m     @     0x7f0919e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43757)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43757)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43757)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43757)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43757)[0m *** SIGSEGV (@0x0) received by PID 43757 (TID 0x7f695a395700) from PID 0; stack trace: ***
[2m[36m(pid=43757)[0m     @     0x7f6959f6e390 (unknown)
[2m[36m(pid=43757)[0m     @     0x7f3a59e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43757)[0m     @     0x7f3a5954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43757)[0m     @     0x7f3a595528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43757)[0m     @     0x7f3a59552ad3 at::TensorIterator::for_each()
[2m[36m(pid=43859)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43859)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43859)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43859)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43859)[0m *** SIGSEGV (@0x0) received by PID 43859 (TID 0x7f9295269700) from PID 0; stack trace: ***
[2m[36m(pid=43859)[0m     @     0x7f9294e42390 (unknown)
[2m[36m(pid=43859)[0m     @     0x7f6394dc9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43859)[0m     @     0x7f63944f47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43859)[0m     @     0x7f63944f78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43859)[0m     @     0x7f63944f7ad3 at::TensorIterator::for_each()
[2m[36m(pid=43859)[0m     @     0x7f63944f7d91 at::TensorIterator::for_each()
[2m[36m(pid=43859)[0m     @     0x7f6394ddab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43859)[0m     @     0x7f6394dfdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43859)[0m     @     0x7f639429fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43859)[0m     @     0x7f639429d388 at::native::copy_impl()
[2m[36m(pid=43812)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43812)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43812)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43812)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43812)[0m *** SIGSEGV (@0x0) received by PID 43812 (TID 0x7f4a88705700) from PID 0; stack trace: ***
[2m[36m(pid=43812)[0m     @     0x7f4a882de390 (unknown)
[2m[36m(pid=43812)[0m     @     0x7f1b87f2ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43812)[0m     @     0x7f1b8765a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43812)[0m     @     0x7f1b8765d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43812)[0m     @     0x7f1b8765dad3 at::TensorIterator::for_each()
[2m[36m(pid=43812)[0m     @     0x7f1b8765dd91 at::TensorIterator::for_each()
[2m[36m(pid=43812)[0m     @     0x7f1b87f40b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43812)[0m     @     0x7f1b87f63c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43812)[0m     @     0x7f1b87405a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43812)[0m     @     0x7f1b87403388 at::native::copy_impl()
[2m[36m(pid=43768)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43768)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43768)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43768)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43768)[0m *** SIGSEGV (@0x0) received by PID 43768 (TID 0x7f43bb287700) from PID 0; stack trace: ***
[2m[36m(pid=43768)[0m     @     0x7f43bae60390 (unknown)
[2m[36m(pid=43768)[0m     @     0x7f14baddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43768)[0m     @     0x7f14ba5097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43768)[0m     @     0x7f14ba50c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43768)[0m     @     0x7f14ba50cad3 at::TensorIterator::for_each()
[2m[36m(pid=43768)[0m     @     0x7f14ba50cd91 at::TensorIterator::for_each()
[2m[36m(pid=43768)[0m     @     0x7f14badefb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43768)[0m     @     0x7f14bae12c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43768)[0m     @     0x7f14ba2b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43768)[0m     @     0x7f14ba2b2388 at::native::copy_impl()
[2m[36m(pid=43858)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43858)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43858)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43858)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43858)[0m *** SIGSEGV (@0x0) received by PID 43858 (TID 0x7f8243d41700) from PID 0; stack trace: ***
[2m[36m(pid=43858)[0m     @     0x7f824391a390 (unknown)
[2m[36m(pid=43858)[0m     @     0x7f5343751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43858)[0m     @     0x7f5342e7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43858)[0m     @     0x7f5342e7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43858)[0m     @     0x7f5342e7fad3 at::TensorIterator::for_each()
[2m[36m(pid=43854)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43854)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43854)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43854)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43854)[0m *** SIGSEGV (@0x0) received by PID 43854 (TID 0x7f3dd440f700) from PID 0; stack trace: ***
[2m[36m(pid=43854)[0m     @     0x7f3dd3fe8390 (unknown)
[2m[36m(pid=43854)[0m     @     0x7f0ed3eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43854)[0m     @     0x7f0ed35e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43854)[0m     @     0x7f0ed35e48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43854)[0m     @     0x7f0ed35e4ad3 at::TensorIterator::for_each()
[2m[36m(pid=43854)[0m     @     0x7f0ed35e4d91 at::TensorIterator::for_each()
[2m[36m(pid=43854)[0m     @     0x7f0ed3ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43854)[0m     @     0x7f0ed3eeac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43854)[0m     @     0x7f0ed338ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43854)[0m     @     0x7f0ed338a388 at::native::copy_impl()
[2m[36m(pid=43817)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43817)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43817)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43817)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43817)[0m *** SIGSEGV (@0x0) received by PID 43817 (TID 0x7f7ec80b1700) from PID 0; stack trace: ***
[2m[36m(pid=43817)[0m     @     0x7f7ec7c8a390 (unknown)
[2m[36m(pid=43817)[0m     @     0x7f4fc79c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43817)[0m     @     0x7f4fc70f07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43817)[0m     @     0x7f4fc70f38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43817)[0m     @     0x7f4fc70f3ad3 at::TensorIterator::for_each()
[2m[36m(pid=43817)[0m     @     0x7f4fc70f3d91 at::TensorIterator::for_each()
[2m[36m(pid=43817)[0m     @     0x7f4fc79d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43817)[0m     @     0x7f4fc79f9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43741)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43741)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43741)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43741)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43741)[0m *** SIGSEGV (@0x0) received by PID 43741 (TID 0x7f4707436700) from PID 0; stack trace: ***
[2m[36m(pid=43741)[0m     @     0x7f470700f390 (unknown)
[2m[36m(pid=43741)[0m     @     0x7f1806c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43741)[0m     @     0x7f18063407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43745)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43745)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43745)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43745)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43745)[0m *** SIGSEGV (@0x0) received by PID 43745 (TID 0x7f159835b700) from PID 0; stack trace: ***
[2m[36m(pid=43745)[0m     @     0x7f1597f34390 (unknown)
[2m[36m(pid=43745)[0m     @     0x7ee697df0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43745)[0m     @     0x7ee69751b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43808)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43808)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43808)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43808)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43808)[0m *** SIGSEGV (@0x0) received by PID 43808 (TID 0x7fec6ff5e700) from PID 0; stack trace: ***
[2m[36m(pid=43808)[0m     @     0x7fec6fb37390 (unknown)
[2m[36m(pid=43743)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43743)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43743)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43743)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43743)[0m *** SIGSEGV (@0x0) received by PID 43743 (TID 0x7f29df284700) from PID 0; stack trace: ***
[2m[36m(pid=43743)[0m     @     0x7f29dee5d390 (unknown)
[2m[36m(pid=43743)[0m     @     0x7efadeddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43743)[0m     @     0x7efade5097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43740)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43740)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43740)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43740)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43740)[0m *** SIGSEGV (@0x0) received by PID 43740 (TID 0x7f43aaa3a700) from PID 0; stack trace: ***
[2m[36m(pid=43765)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43765)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43765)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43765)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43765)[0m *** SIGSEGV (@0x0) received by PID 43765 (TID 0x7f814c583700) from PID 0; stack trace: ***
[2m[36m(pid=43765)[0m     @     0x7f814c15c390 (unknown)
[2m[36m(pid=43761)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43761)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43761)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43761)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43761)[0m *** SIGSEGV (@0x0) received by PID 43761 (TID 0x7f43a943d700) from PID 0; stack trace: ***
[2m[36m(pid=43761)[0m     @     0x7f43a9016390 (unknown)
[2m[36m(pid=43761)[0m     @     0x7f14a8f4ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43761)[0m     @     0x7f14a867a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43815)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43815)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43815)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43815)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43815)[0m *** SIGSEGV (@0x0) received by PID 43815 (TID 0x7f076a8f5700) from PID 0; stack trace: ***
[2m[36m(pid=43839)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43839)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43839)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43839)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43839)[0m *** SIGSEGV (@0x0) received by PID 43839 (TID 0x7f96a4b07700) from PID 0; stack trace: ***
[2m[36m(pid=43756)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43756)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43756)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43756)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43756)[0m *** SIGSEGV (@0x0) received by PID 43756 (TID 0x7f4737725700) from PID 0; stack trace: ***
[2m[36m(pid=43756)[0m     @     0x7f47372fe390 (unknown)
[2m[36m(pid=43756)[0m     @     0x7f1837229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43756)[0m     @     0x7f18369547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43848)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43848)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43848)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43848)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43848)[0m *** SIGSEGV (@0x0) received by PID 43848 (TID 0x7f64f57cb700) from PID 0; stack trace: ***
[2m[36m(pid=43845)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43845)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43845)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43845)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43845)[0m *** SIGSEGV (@0x0) received by PID 43845 (TID 0x7f2b83ba8700) from PID 0; stack trace: ***
[2m[36m(pid=43845)[0m     @     0x7f2b83781390 (unknown)
[2m[36m(pid=43853)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43853)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43853)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43853)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43853)[0m *** SIGSEGV (@0x0) received by PID 43853 (TID 0x7fe029ad0700) from PID 0; stack trace: ***
[2m[36m(pid=43853)[0m     @     0x7fe0296a9390 (unknown)
[2m[36m(pid=43754)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43754)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43754)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43805)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43805)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43805)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43805)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43805)[0m *** SIGSEGV (@0x0) received by PID 43805 (TID 0x7f6127e2e700) from PID 0; stack trace: ***
[2m[36m(pid=43805)[0m     @     0x7f6127a07390 (unknown)
[2m[36m(pid=43805)[0m     @     0x7f32278def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43805)[0m     @     0x7f32270097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43862)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43862)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43862)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43862)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43862)[0m *** SIGSEGV (@0x0) received by PID 43862 (TID 0x7f3752e9f700) from PID 0; stack trace: ***
[2m[36m(pid=43822)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43822)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43822)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43798)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43798)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43798)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43816)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43816)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43816)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43816)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43816)[0m *** SIGSEGV (@0x0) received by PID 43816 (TID 0x7f35fb87a700) from PID 0; stack trace: ***
[2m[36m(pid=43816)[0m     @     0x7f35fb453390 (unknown)
[2m[36m(pid=43816)[0m     @     0x7f06fb229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43816)[0m     @     0x7f06fa9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43814)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43814)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43814)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43742)[0m     @     0x7ef6f60fad91 at::TensorIterator::for_each()
[2m[36m(pid=43742)[0m     @     0x7ef6f69ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43742)[0m     @     0x7ef6f6a00c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43742)[0m     @     0x7ef6f5ea2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43742)[0m     @     0x7ef6f5ea0388 at::native::copy_impl()
[2m[36m(pid=43742)[0m     @     0x7ef6f5ea25a4 at::native::copy_()
[2m[36m(pid=43759)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43759)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43759)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43759)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43759)[0m *** SIGSEGV (@0x0) received by PID 43759 (TID 0x7fe33ed04700) from PID 0; stack trace: ***
[2m[36m(pid=43759)[0m     @     0x7fe33e8dd390 (unknown)
[2m[36m(pid=43759)[0m     @     0x7fb43e70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43759)[0m     @     0x7fb43de357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43759)[0m     @     0x7fb43de388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43760)[0m     @     0x7f92c1552d91 at::TensorIterator::for_each()
[2m[36m(pid=43760)[0m     @     0x7f92c1e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43760)[0m     @     0x7f92c1e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43760)[0m     @     0x7f92c12faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43760)[0m     @     0x7f92c12f8388 at::native::copy_impl()
[2m[36m(pid=43760)[0m     @     0x7f92c12fa5a4 at::native::copy_()
[2m[36m(pid=43750)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43750)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43750)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43750)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43750)[0m *** SIGSEGV (@0x0) received by PID 43750 (TID 0x7f687859c700) from PID 0; stack trace: ***
[2m[36m(pid=43750)[0m     @     0x7f6878175390 (unknown)
[2m[36m(pid=43750)[0m     @     0x7f3977f2ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43750)[0m     @     0x7f397765a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43750)[0m     @     0x7f397765d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43772)[0m     @     0x7f8be750cad3 at::TensorIterator::for_each()
[2m[36m(pid=43772)[0m     @     0x7f8be750cd91 at::TensorIterator::for_each()
[2m[36m(pid=43772)[0m     @     0x7f8be7defb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43772)[0m     @     0x7f8be7e12c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43772)[0m     @     0x7f8be72b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43772)[0m     @     0x7f8be72b2388 at::native::copy_impl()
[2m[36m(pid=43838)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43838)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43838)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43838)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43838)[0m *** SIGSEGV (@0x0) received by PID 43838 (TID 0x7f5e378fd700) from PID 0; stack trace: ***
[2m[36m(pid=43838)[0m     @     0x7f5e374d6390 (unknown)
[2m[36m(pid=43838)[0m     @     0x7f2f3743af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43838)[0m     @     0x7f2f36b657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43838)[0m     @     0x7f2f36b688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43852)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43852)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43852)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43852)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43852)[0m *** SIGSEGV (@0x0) received by PID 43852 (TID 0x7fb83677d700) from PID 0; stack trace: ***
[2m[36m(pid=43852)[0m     @     0x7fb836356390 (unknown)
[2m[36m(pid=43852)[0m     @     0x7f89362def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43852)[0m     @     0x7f8935a097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43852)[0m     @     0x7f8935a0c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43769)[0m     @     0x7fcc8257cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43769)[0m     @     0x7fcc81ca77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43769)[0m     @     0x7fcc81caa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43769)[0m     @     0x7fcc81caaad3 at::TensorIterator::for_each()
[2m[36m(pid=43769)[0m     @     0x7fcc81caad91 at::TensorIterator::for_each()
[2m[36m(pid=43769)[0m     @     0x7fcc8258db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43769)[0m     @     0x7fcc825b0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43751)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43751)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43751)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43751)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43751)[0m *** SIGSEGV (@0x0) received by PID 43751 (TID 0x7f03a98b7700) from PID 0; stack trace: ***
[2m[36m(pid=43751)[0m     @     0x7f03a9490390 (unknown)
[2m[36m(pid=43751)[0m     @     0x7ed4a93ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43751)[0m     @     0x7ed4a8af77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43751)[0m     @     0x7ed4a8afa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43763)[0m     @     0x7efc33a39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43763)[0m     @     0x7efc33a37388 at::native::copy_impl()
[2m[36m(pid=43763)[0m     @     0x7efc33a395a4 at::native::copy_()
[2m[36m(pid=43763)[0m     @     0x7efc341244f5 at::Tensor::copy_()
[2m[36m(pid=43818)[0m     @     0x7fc6cbc4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43818)[0m     @     0x7fc6cbc48388 at::native::copy_impl()
[2m[36m(pid=43818)[0m     @     0x7fc6cbc4a5a4 at::native::copy_()
[2m[36m(pid=43818)[0m     @     0x7fc6cc3354f5 at::Tensor::copy_()
[2m[36m(pid=43835)[0m     @     0x7f7e1f4f25a4 at::native::copy_()
[2m[36m(pid=43835)[0m     @     0x7f7e1fbdd4f5 at::Tensor::copy_()
[2m[36m(pid=43835)[0m     @     0x7f7e220b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43835)[0m     @     0x7f7e1fbdd4f5 at::Tensor::copy_()
[2m[36m(pid=43834)[0m     @     0x7f815fae4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43834)[0m     @     0x7f815fae2388 at::native::copy_impl()
[2m[36m(pid=43834)[0m     @     0x7f815fae45a4 at::native::copy_()
[2m[36m(pid=43834)[0m     @     0x7f81601cf4f5 at::Tensor::copy_()
[2m[36m(pid=43834)[0m     @     0x7f81626a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43842)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43842)[0m *** SIGSEGV (@0x0) received by PID 43842 (TID 0x7fdf3e759700) from PID 0; stack trace: ***
[2m[36m(pid=43842)[0m     @     0x7fdf3e332390 (unknown)
[2m[36m(pid=43842)[0m     @     0x7fb03e2b9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43809)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43809)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43809)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43809)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43809)[0m *** SIGSEGV (@0x0) received by PID 43809 (TID 0x7fca39cd6700) from PID 0; stack trace: ***
[2m[36m(pid=43809)[0m     @     0x7fca398af390 (unknown)
[2m[36m(pid=43767)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43767)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43767)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43755)[0m     @     0x7f6265488390 (unknown)
[2m[36m(pid=43755)[0m     @     0x7f336540ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43755)[0m     @     0x7f3364b3a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43755)[0m     @     0x7f3364b3d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43804)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43804)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43804)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43804)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43804)[0m *** SIGSEGV (@0x0) received by PID 43804 (TID 0x7fd90b193700) from PID 0; stack trace: ***
[2m[36m(pid=43833)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43833)[0m *** SIGSEGV (@0x0) received by PID 43833 (TID 0x7f9a8e152700) from PID 0; stack trace: ***
[2m[36m(pid=43833)[0m     @     0x7f9a8dd2b390 (unknown)
[2m[36m(pid=43833)[0m     @     0x7f6b8dc0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43833)[0m     @     0x7f6b8d3387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43833)[0m     @     0x7f6b8d33b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43801)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43801)[0m *** SIGSEGV (@0x0) received by PID 43801 (TID 0x7f371b894700) from PID 0; stack trace: ***
[2m[36m(pid=43801)[0m     @     0x7f371b46d390 (unknown)
[2m[36m(pid=43801)[0m     @     0x7f081b229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43801)[0m     @     0x7f081a9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43821)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43821)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43821)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43831)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43831)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43831)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43752)[0m     @     0x7fca5dd28390 (unknown)
[2m[36m(pid=43752)[0m     @     0x7f9b5dc0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43752)[0m     @     0x7f9b5d3387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43752)[0m     @     0x7f9b5d33b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43849)[0m     @     0x7f3f9da78388 at::native::copy_impl()
[2m[36m(pid=43849)[0m     @     0x7f3f9da7a5a4 at::native::copy_()
[2m[36m(pid=43849)[0m     @     0x7f3f9e1654f5 at::Tensor::copy_()
[2m[36m(pid=43828)[0m     @     0x7f410c378388 at::native::copy_impl()
[2m[36m(pid=43828)[0m     @     0x7f410c37a5a4 at::native::copy_()
[2m[36m(pid=43828)[0m     @     0x7f410ca654f5 at::Tensor::copy_()
[2m[36m(pid=43828)[0m     @     0x7f410ef388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43773)[0m     @     0x7fc14a12dd91 at::TensorIterator::for_each()
[2m[36m(pid=43773)[0m     @     0x7fc14aa10b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43773)[0m     @     0x7fc14aa33c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43773)[0m     @     0x7fc149ed5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43773)[0m     @     0x7fc149ed3388 at::native::copy_impl()
[2m[36m(pid=43824)[0m     @     0x7f6b166fd388 at::native::copy_impl()
[2m[36m(pid=43824)[0m     @     0x7f6b166ff5a4 at::native::copy_()
[2m[36m(pid=43824)[0m     @     0x7f6b16dea4f5 at::Tensor::copy_()
[2m[36m(pid=43820)[0m     @     0x7fa8b562e390 (unknown)
[2m[36m(pid=43820)[0m     @     0x7f79b55e4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43820)[0m     @     0x7f79b4d0f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43820)[0m     @     0x7f79b4d128f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43874)[0m     @     0x7fb92292ad91 at::TensorIterator::for_each()
[2m[36m(pid=43874)[0m     @     0x7fb92320db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43874)[0m     @     0x7fb923230c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43874)[0m     @     0x7fb9226d2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43874)[0m     @     0x7fb9226d0388 at::native::copy_impl()
[2m[36m(pid=43827)[0m     @     0x7f8d4c9b5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43827)[0m     @     0x7f8d4c9b3388 at::native::copy_impl()
[2m[36m(pid=43827)[0m     @     0x7f8d4c9b55a4 at::native::copy_()
[2m[36m(pid=43770)[0m     @     0x7f768e4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43770)[0m     @     0x7f768dc247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43770)[0m     @     0x7f768dc278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43770)[0m     @     0x7f768dc27ad3 at::TensorIterator::for_each()
[2m[36m(pid=43836)[0m     @     0x7f16e75e48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43836)[0m     @     0x7f16e75e4ad3 at::TensorIterator::for_each()
[2m[36m(pid=43766)[0m     @     0x7fcb4f84cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43766)[0m     @     0x7fcb4ef777db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43766)[0m     @     0x7fcb4ef7a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43766)[0m     @     0x7fcb4ef7aad3 at::TensorIterator::for_each()
[2m[36m(pid=43819)[0m     @     0x7f09dba61d91 at::TensorIterator::for_each()
[2m[36m(pid=43819)[0m     @     0x7f09dc344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43819)[0m     @     0x7f09dc367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43819)[0m     @     0x7f09db809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43819)[0m     @     0x7f09db807388 at::native::copy_impl()
[2m[36m(pid=43832)[0m     @     0x7fca9c431390 (unknown)
[2m[36m(pid=43832)[0m     @     0x7f9b9c3e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43832)[0m     @     0x7f9b9bb0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43832)[0m     @     0x7f9b9bb118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43796)[0m     @     0x7f6f3de24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43796)[0m     @     0x7f6f3d54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43796)[0m     @     0x7f6f3d5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43796)[0m     @     0x7f6f3d552ad3 at::TensorIterator::for_each()
2020-11-05 10:09:02,857	WARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.
[2m[36m(pid=43748)[0m     @     0x7f86d52faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43748)[0m     @     0x7f86d52f8388 at::native::copy_impl()
[2m[36m(pid=43748)[0m     @     0x7f86d52fa5a4 at::native::copy_()
[2m[36m(pid=43748)[0m     @     0x7f86d59e54f5 at::Tensor::copy_()
[2m[36m(pid=43841)[0m     @     0x7ed67a2adc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43841)[0m     @     0x7ed67974fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43841)[0m     @     0x7ed67974d388 at::native::copy_impl()
[2m[36m(pid=43841)[0m     @     0x7ed67974f5a4 at::native::copy_()
[2m[36m(pid=43826)[0m     @     0x7f2acef98a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43826)[0m     @     0x7f2acef96388 at::native::copy_impl()
[2m[36m(pid=43826)[0m     @     0x7f2acef985a4 at::native::copy_()
[2m[36m(pid=43826)[0m     @     0x7f2acf6834f5 at::Tensor::copy_()
[2m[36m(pid=43847)[0m     @     0x7edc4d0505a4 at::native::copy_()
[2m[36m(pid=43847)[0m     @     0x7edc4d73b4f5 at::Tensor::copy_()
[2m[36m(pid=43847)[0m     @     0x7edc4fc0e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43747)[0m     @     0x7ed21eda2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43747)[0m     @     0x7ed21eda0388 at::native::copy_impl()
[2m[36m(pid=43747)[0m     @     0x7ed21eda25a4 at::native::copy_()
[2m[36m(pid=43878)[0m     @     0x7f4dbd27ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43878)[0m     @     0x7f4dbc720a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43878)[0m     @     0x7f4dbc71e388 at::native::copy_impl()
[2m[36m(pid=43878)[0m     @     0x7f4dbc7205a4 at::native::copy_()
[2m[36m(pid=43867)[0m     @     0x7f830323c5a4 at::native::copy_()
[2m[36m(pid=43867)[0m     @     0x7f83039274f5 at::Tensor::copy_()
[2m[36m(pid=43867)[0m     @     0x7f8305dfa8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43813)[0m     @     0x7eeaee50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43813)[0m     @     0x7eeaee52dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43813)[0m     @     0x7eeaed9cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43813)[0m     @     0x7eeaed9cd388 at::native::copy_impl()
[2m[36m(pid=43813)[0m     @     0x7eeaed9cf5a4 at::native::copy_()
[2m[36m(pid=43871)[0m     @     0x7ef998425a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43871)[0m     @     0x7ef998423388 at::native::copy_impl()
[2m[36m(pid=43871)[0m     @     0x7ef9984255a4 at::native::copy_()
[2m[36m(pid=43811)[0m     @     0x7fc4660b9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43811)[0m     @     0x7fc4660dcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43811)[0m     @     0x7fc46557ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43811)[0m     @     0x7fc46557c388 at::native::copy_impl()
[2m[36m(pid=43775)[0m     @     0x7fc2f70a57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43775)[0m     @     0x7fc2f70a88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43775)[0m     @     0x7fc2f70a8ad3 at::TensorIterator::for_each()
[2m[36m(pid=43746)[0m     @     0x7f2863158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43746)[0m     @     0x7f28625faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43746)[0m     @     0x7f28625f8388 at::native::copy_impl()
[2m[36m(pid=43746)[0m     @     0x7f28625fa5a4 at::native::copy_()
[2m[36m(pid=43746)[0m     @     0x7f2862ce54f5 at::Tensor::copy_()
[2m[36m(pid=43823)[0m     @     0x7f9ea40115a4 at::native::copy_()
[2m[36m(pid=43823)[0m     @     0x7f9ea46fc4f5 at::Tensor::copy_()
[2m[36m(pid=43823)[0m     @     0x7f9ea6bcf8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43823)[0m     @     0x7f9ea46fc4f5 at::Tensor::copy_()
[2m[36m(pid=43825)[0m     @     0x7f09192faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43825)[0m     @     0x7f09192f8388 at::native::copy_impl()
[2m[36m(pid=43825)[0m     @     0x7f09192fa5a4 at::native::copy_()
[2m[36m(pid=43825)[0m     @     0x7f09199e54f5 at::Tensor::copy_()
[2m[36m(pid=43825)[0m     @     0x7f091beb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43757)[0m     @     0x7f3a59552d91 at::TensorIterator::for_each()
[2m[36m(pid=43757)[0m     @     0x7f3a59e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43757)[0m     @     0x7f3a59e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43757)[0m     @     0x7f3a592faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43757)[0m     @     0x7f3a592f8388 at::native::copy_impl()
[2m[36m(pid=43757)[0m     @     0x7f3a592fa5a4 at::native::copy_()
[2m[36m(pid=43859)[0m     @     0x7f639429f5a4 at::native::copy_()
[2m[36m(pid=43859)[0m     @     0x7f639498a4f5 at::Tensor::copy_()
[2m[36m(pid=43859)[0m     @     0x7f6396e5d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43859)[0m     @     0x7f639498a4f5 at::Tensor::copy_()
[2m[36m(pid=43859)[0m     @     0x7f639aa3579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43859)[0m     @     0x55c149d89fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43859)[0m     @     0x55c149ce4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43859)[0m     @     0x55c149d6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43859)[0m     @     0x55c149d70a20 method_vectorcall
[2m[36m(pid=43859)[0m     @     0x55c149ce4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43859)[0m     @     0x55c149d6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43859)[0m     @     0x55c149d70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43812)[0m     @     0x7f1b874055a4 at::native::copy_()
[2m[36m(pid=43812)[0m     @     0x7f1b87af04f5 at::Tensor::copy_()
[2m[36m(pid=43812)[0m     @     0x7f1b89fc38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43812)[0m     @     0x7f1b87af04f5 at::Tensor::copy_()
[2m[36m(pid=43812)[0m     @     0x7f1b8db9b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43812)[0m     @     0x55b21f66efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43812)[0m     @     0x55b21f5c9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43812)[0m     @     0x55b21f654baf _PyEval_EvalCodeWithName
[2m[36m(pid=43812)[0m     @     0x55b21f655a20 method_vectorcall
[2m[36m(pid=43812)[0m     @     0x55b21f5c9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43812)[0m     @     0x55b21f654baf _PyEval_EvalCodeWithName
[2m[36m(pid=43812)[0m     @     0x55b21f655643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43812)[0m     @     0x55b21f5ca689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43812)[0m     @     0x55b21f654baf _PyEval_EvalCodeWithName
[2m[36m(pid=43812)[0m     @     0x55b21f655643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43812)[0m     @     0x55b21f5ca689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43812)[0m     @     0x55b21f654baf _PyEval_EvalCodeWithName
[2m[36m(pid=43812)[0m     @     0x55b21f655643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43812)[0m     @     0x55b21f5ca689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43812)[0m     @     0x55b21f654baf _PyEval_EvalCodeWithName
[2m[36m(pid=43812)[0m     @     0x55b21f655643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43812)[0m     @     0x55b21f5ca689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43768)[0m     @     0x7f14ba2b45a4 at::native::copy_()
[2m[36m(pid=43768)[0m     @     0x7f14ba99f4f5 at::Tensor::copy_()
[2m[36m(pid=43768)[0m     @     0x7f14bce728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43768)[0m     @     0x7f14ba99f4f5 at::Tensor::copy_()
[2m[36m(pid=43768)[0m     @     0x7f14c0a4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43768)[0m     @     0x56315566bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43768)[0m     @     0x5631555c6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43768)[0m     @     0x563155651baf _PyEval_EvalCodeWithName
[2m[36m(pid=43768)[0m     @     0x563155652a20 method_vectorcall
[2m[36m(pid=43768)[0m     @     0x5631555c6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43768)[0m     @     0x563155651baf _PyEval_EvalCodeWithName
[2m[36m(pid=43858)[0m     @     0x7f5342e7fd91 at::TensorIterator::for_each()
[2m[36m(pid=43858)[0m     @     0x7f5343762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43858)[0m     @     0x7f5343785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43858)[0m     @     0x7f5342c27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43858)[0m     @     0x7f5342c25388 at::native::copy_impl()
[2m[36m(pid=43858)[0m     @     0x7f5342c275a4 at::native::copy_()
[2m[36m(pid=43854)[0m     @     0x7f0ed338c5a4 at::native::copy_()
[2m[36m(pid=43854)[0m     @     0x7f0ed3a774f5 at::Tensor::copy_()
[2m[36m(pid=43854)[0m     @     0x7f0ed5f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43854)[0m     @     0x7f0ed3a774f5 at::Tensor::copy_()
[2m[36m(pid=43854)[0m     @     0x7f0ed9b2279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43854)[0m     @     0x560e18677fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43854)[0m     @     0x560e185d2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43854)[0m     @     0x560e1865dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43854)[0m     @     0x560e1865ea20 method_vectorcall
[2m[36m(pid=43854)[0m     @     0x560e185d2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43854)[0m     @     0x560e1865dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43854)[0m     @     0x560e1865e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43854)[0m     @     0x560e185d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43854)[0m     @     0x560e1865dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43854)[0m     @     0x560e1865e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43854)[0m     @     0x560e185d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43854)[0m     @     0x560e1865dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43854)[0m     @     0x560e1865e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43854)[0m     @     0x560e185d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43854)[0m     @     0x560e1865dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43854)[0m     @     0x560e1865e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43854)[0m     @     0x560e185d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43817)[0m     @     0x7f4fc6e9ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43817)[0m     @     0x7f4fc6e99388 at::native::copy_impl()
[2m[36m(pid=43817)[0m     @     0x7f4fc6e9b5a4 at::native::copy_()
[2m[36m(pid=43817)[0m     @     0x7f4fc75864f5 at::Tensor::copy_()
[2m[36m(pid=43817)[0m     @     0x7f4fc9a598de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43741)[0m     @     0x7f18063438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43741)[0m     @     0x7f1806343ad3 at::TensorIterator::for_each()
[2m[36m(pid=43741)[0m     @     0x7f1806343d91 at::TensorIterator::for_each()
[2m[36m(pid=43741)[0m     @     0x7f1806c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43741)[0m     @     0x7f1806c49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43745)[0m     @     0x7ee69751e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43745)[0m     @     0x7ee69751ead3 at::TensorIterator::for_each()
[2m[36m(pid=43745)[0m     @     0x7ee69751ed91 at::TensorIterator::for_each()
[2m[36m(pid=43745)[0m     @     0x7ee697e01b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43745)[0m     @     0x7ee697e24c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43758)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43758)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43758)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43758)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43758)[0m *** SIGSEGV (@0x0) received by PID 43758 (TID 0x7f7c21be5700) from PID 0; stack trace: ***
[2m[36m(pid=43758)[0m     @     0x7f7c217be390 (unknown)
[2m[36m(pid=43758)[0m     @     0x7f4d216f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43758)[0m     @     0x7f4d20e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43758)[0m     @     0x7f4d20e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43808)[0m     @     0x7fbd6fac8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43808)[0m     @     0x7fbd6f1f37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43808)[0m     @     0x7fbd6f1f68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43808)[0m     @     0x7fbd6f1f6ad3 at::TensorIterator::for_each()
[2m[36m(pid=43743)[0m     @     0x7efade50c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43743)[0m     @     0x7efade50cad3 at::TensorIterator::for_each()
[2m[36m(pid=43743)[0m     @     0x7efade50cd91 at::TensorIterator::for_each()
[2m[36m(pid=43743)[0m     @     0x7efadedefb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43740)[0m     @     0x7f43aa613390 (unknown)
[2m[36m(pid=43740)[0m     @     0x7f14aa395f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43740)[0m     @     0x7f14a9ac07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43740)[0m     @     0x7f14a9ac38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43740)[0m     @     0x7f14a9ac3ad3 at::TensorIterator::for_each()
[2m[36m(pid=43765)[0m     @     0x7f524c01cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43765)[0m     @     0x7f524b7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43765)[0m     @     0x7f524b74a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43765)[0m     @     0x7f524b74aad3 at::TensorIterator::for_each()
[2m[36m(pid=43761)[0m     @     0x7f14a867d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43761)[0m     @     0x7f14a867dad3 at::TensorIterator::for_each()
[2m[36m(pid=43761)[0m     @     0x7f14a867dd91 at::TensorIterator::for_each()
[2m[36m(pid=43761)[0m     @     0x7f14a8f60b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43761)[0m     @     0x7f14a8f83c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43744)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=43744)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=43744)[0m *** Aborted at 1604570942 (unix time) try "date -d @1604570942" if you are using GNU date ***
[2m[36m(pid=43744)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43744)[0m *** SIGSEGV (@0x0) received by PID 43744 (TID 0x7feec10cb700) from PID 0; stack trace: ***
[2m[36m(pid=43744)[0m     @     0x7feec0ca4390 (unknown)
[2m[36m(pid=43744)[0m     @     0x7fbfc0b3bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43744)[0m     @     0x7fbfc02667db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43815)[0m     @     0x7f076a4ce390 (unknown)
[2m[36m(pid=43815)[0m     @     0x7ed86a365f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43815)[0m     @     0x7ed869a907db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43815)[0m     @     0x7ed869a938f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43815)[0m     @     0x7ed869a93ad3 at::TensorIterator::for_each()
[2m[36m(pid=43839)[0m     @     0x7f96a46e0390 (unknown)
[2m[36m(pid=43839)[0m     @     0x7f67a4563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43839)[0m     @     0x7f67a3c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43839)[0m     @     0x7f67a3c918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43839)[0m     @     0x7f67a3c91ad3 at::TensorIterator::for_each()
[2m[36m(pid=43756)[0m     @     0x7f18369578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43756)[0m     @     0x7f1836957ad3 at::TensorIterator::for_each()
[2m[36m(pid=43756)[0m     @     0x7f1836957d91 at::TensorIterator::for_each()
[2m[36m(pid=43848)[0m     @     0x7f64f53a4390 (unknown)
[2m[36m(pid=43848)[0m     @     0x7f35f533af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43848)[0m     @     0x7f35f4a657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43848)[0m     @     0x7f35f4a688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43848)[0m     @     0x7f35f4a68ad3 at::TensorIterator::for_each()
[2m[36m(pid=43845)[0m     @     0x7efc8361ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43845)[0m     @     0x7efc82d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43845)[0m     @     0x7efc82d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43845)[0m     @     0x7efc82d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=43853)[0m     @     0x7fb129634f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43853)[0m     @     0x7fb128d5f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43853)[0m     @     0x7fb128d628f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43853)[0m     @     0x7fb128d62ad3 at::TensorIterator::for_each()
[2m[36m(pid=43754)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43754)[0m *** SIGSEGV (@0x0) received by PID 43754 (TID 0x7f9361e66700) from PID 0; stack trace: ***
[2m[36m(pid=43754)[0m     @     0x7f9361a3f390 (unknown)
[2m[36m(pid=43754)[0m     @     0x7f64617f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43805)[0m     @     0x7f322700c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43805)[0m     @     0x7f322700cad3 at::TensorIterator::for_each()
[2m[36m(pid=43862)[0m     @     0x7f3752a78390 (unknown)
[2m[36m(pid=43862)[0m     @     0x7f08529fff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43862)[0m     @     0x7f085212a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43862)[0m     @     0x7f085212d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43822)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43822)[0m *** SIGSEGV (@0x0) received by PID 43822 (TID 0x7f12ca945700) from PID 0; stack trace: ***
[2m[36m(pid=43822)[0m     @     0x7f12ca51e390 (unknown)
[2m[36m(pid=43822)[0m     @     0x7ee3ca34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43822)[0m     @     0x7ee3c9a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43798)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43798)[0m *** SIGSEGV (@0x0) received by PID 43798 (TID 0x7fae09c54700) from PID 0; stack trace: ***
[2m[36m(pid=43816)[0m     @     0x7f06fa9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43816)[0m     @     0x7f06fa957ad3 at::TensorIterator::for_each()
[2m[36m(pid=43814)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43814)[0m *** SIGSEGV (@0x0) received by PID 43814 (TID 0x7fe26d19f700) from PID 0; stack trace: ***
[2m[36m(pid=43742)[0m     @     0x7ef6f658d4f5 at::Tensor::copy_()
[2m[36m(pid=43742)[0m     @     0x7ef6f8a608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43742)[0m     @     0x7ef6f658d4f5 at::Tensor::copy_()
[2m[36m(pid=43742)[0m     @     0x7ef6fc63879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43742)[0m     @     0x565316e71fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43742)[0m     @     0x565316dccb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43742)[0m     @     0x565316e57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43742)[0m     @     0x565316e58a20 method_vectorcall
[2m[36m(pid=43742)[0m     @     0x565316dccbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43742)[0m     @     0x565316e57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43742)[0m     @     0x565316e58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43742)[0m     @     0x565316dcd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43742)[0m     @     0x565316e57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43742)[0m     @     0x565316e58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43742)[0m     @     0x565316dcd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43742)[0m     @     0x565316e57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43742)[0m     @     0x565316e58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43742)[0m     @     0x565316dcd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43759)[0m     @     0x7fb43de38ad3 at::TensorIterator::for_each()
[2m[36m(pid=43759)[0m     @     0x7fb43de38d91 at::TensorIterator::for_each()
[2m[36m(pid=43759)[0m     @     0x7fb43e71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43759)[0m     @     0x7fb43e73ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43760)[0m     @     0x7f92c19e54f5 at::Tensor::copy_()
[2m[36m(pid=43760)[0m     @     0x7f92c3eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43760)[0m     @     0x7f92c19e54f5 at::Tensor::copy_()
[2m[36m(pid=43760)[0m     @     0x7f92c7a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43760)[0m     @     0x5612c954ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43760)[0m     @     0x5612c94aab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43760)[0m     @     0x5612c9535baf _PyEval_EvalCodeWithName
[2m[36m(pid=43760)[0m     @     0x5612c9536a20 method_vectorcall
[2m[36m(pid=43760)[0m     @     0x5612c94aabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43760)[0m     @     0x5612c9535baf _PyEval_EvalCodeWithName
[2m[36m(pid=43760)[0m     @     0x5612c9536643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43760)[0m     @     0x5612c94ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43760)[0m     @     0x5612c9535baf _PyEval_EvalCodeWithName
[2m[36m(pid=43760)[0m     @     0x5612c9536643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43750)[0m     @     0x7f397765dad3 at::TensorIterator::for_each()
[2m[36m(pid=43750)[0m     @     0x7f397765dd91 at::TensorIterator::for_each()
[2m[36m(pid=43750)[0m     @     0x7f3977f40b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43750)[0m     @     0x7f3977f63c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43772)[0m     @     0x7f8be72b45a4 at::native::copy_()
[2m[36m(pid=43772)[0m     @     0x7f8be799f4f5 at::Tensor::copy_()
[2m[36m(pid=43772)[0m     @     0x7f8be9e728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43838)[0m     @     0x7f2f36b68ad3 at::TensorIterator::for_each()
[2m[36m(pid=43838)[0m     @     0x7f2f36b68d91 at::TensorIterator::for_each()
[2m[36m(pid=43838)[0m     @     0x7f2f3744bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43838)[0m     @     0x7f2f3746ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43852)[0m     @     0x7f8935a0cad3 at::TensorIterator::for_each()
[2m[36m(pid=43852)[0m     @     0x7f8935a0cd91 at::TensorIterator::for_each()
[2m[36m(pid=43852)[0m     @     0x7f89362efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43852)[0m     @     0x7f8936312c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43852)[0m     @     0x7f89357b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43769)[0m     @     0x7fcc81a52a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43769)[0m     @     0x7fcc81a50388 at::native::copy_impl()
[2m[36m(pid=43769)[0m     @     0x7fcc81a525a4 at::native::copy_()
[2m[36m(pid=43769)[0m     @     0x7fcc8213d4f5 at::Tensor::copy_()
[2m[36m(pid=43769)[0m     @     0x7fcc846108de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43751)[0m     @     0x7ed4a8afaad3 at::TensorIterator::for_each()
[2m[36m(pid=43751)[0m     @     0x7ed4a8afad91 at::TensorIterator::for_each()
[2m[36m(pid=43751)[0m     @     0x7ed4a93ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43751)[0m     @     0x7ed4a9400c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43751)[0m     @     0x7ed4a88a2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43751)[0m     @     0x7ed4a88a0388 at::native::copy_impl()
[2m[36m(pid=43763)[0m     @     0x7efc365f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43763)[0m     @     0x7efc341244f5 at::Tensor::copy_()
[2m[36m(pid=43763)[0m     @     0x7efc3a1cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43763)[0m     @     0x5567f9b3efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43763)[0m     @     0x5567f9a99b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43763)[0m     @     0x5567f9b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=43763)[0m     @     0x5567f9b25a20 method_vectorcall
[2m[36m(pid=43763)[0m     @     0x5567f9a99bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43763)[0m     @     0x5567f9b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=43763)[0m     @     0x5567f9b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43763)[0m     @     0x5567f9a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43763)[0m     @     0x5567f9b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=43763)[0m     @     0x5567f9b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43763)[0m     @     0x5567f9a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43763)[0m     @     0x5567f9b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=43763)[0m     @     0x5567f9b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43763)[0m     @     0x5567f9a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43763)[0m     @     0x5567f9b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=43763)[0m     @     0x5567f9b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43763)[0m     @     0x5567f9a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43818)[0m     @     0x7fc6ce8088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43818)[0m     @     0x7fc6cc3354f5 at::Tensor::copy_()
[2m[36m(pid=43818)[0m     @     0x7fc6d23e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43818)[0m     @     0x55d748c89fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43818)[0m     @     0x55d748be4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43818)[0m     @     0x55d748c6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43818)[0m     @     0x55d748c70a20 method_vectorcall
[2m[36m(pid=43818)[0m     @     0x55d748be4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43818)[0m     @     0x55d748c6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43818)[0m     @     0x55d748c70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43818)[0m     @     0x55d748be5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43818)[0m     @     0x55d748c6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43818)[0m     @     0x55d748c70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43818)[0m     @     0x55d748be5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43818)[0m     @     0x55d748c6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43818)[0m     @     0x55d748c70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43818)[0m     @     0x55d748be5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43818)[0m     @     0x55d748c6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43818)[0m     @     0x55d748c70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43818)[0m     @     0x55d748be5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43835)[0m     @     0x7f7e25c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43835)[0m     @     0x55c7cb7e8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43835)[0m     @     0x55c7cb743b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43835)[0m     @     0x55c7cb7cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43835)[0m     @     0x55c7cb7cfa20 method_vectorcall
[2m[36m(pid=43835)[0m     @     0x55c7cb743bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43835)[0m     @     0x55c7cb7cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43835)[0m     @     0x55c7cb7cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43835)[0m     @     0x55c7cb744689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43835)[0m     @     0x55c7cb7cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43835)[0m     @     0x55c7cb7cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43835)[0m     @     0x55c7cb744689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43835)[0m     @     0x55c7cb7cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43835)[0m     @     0x55c7cb7cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43835)[0m     @     0x55c7cb744689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43835)[0m     @     0x55c7cb7cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43835)[0m     @     0x55c7cb7cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43835)[0m     @     0x55c7cb744689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43834)[0m     @     0x7f81601cf4f5 at::Tensor::copy_()
[2m[36m(pid=43834)[0m     @     0x7f816627a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43834)[0m     @     0x561f4c955fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43834)[0m     @     0x561f4c8b0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43834)[0m     @     0x561f4c93bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43834)[0m     @     0x561f4c93ca20 method_vectorcall
[2m[36m(pid=43834)[0m     @     0x561f4c8b0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43834)[0m     @     0x561f4c93bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43834)[0m     @     0x561f4c93c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43834)[0m     @     0x561f4c8b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43834)[0m     @     0x561f4c93bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43834)[0m     @     0x561f4c93c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43834)[0m     @     0x561f4c8b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43834)[0m     @     0x561f4c93bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43834)[0m     @     0x561f4c93c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43834)[0m     @     0x561f4c8b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43834)[0m     @     0x561f4c93bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43834)[0m     @     0x561f4c93c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43834)[0m     @     0x561f4c8b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43842)[0m     @     0x7fb03d9e47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43842)[0m     @     0x7fb03d9e78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43842)[0m     @     0x7fb03d9e7ad3 at::TensorIterator::for_each()
[2m[36m(pid=43842)[0m     @     0x7fb03d9e7d91 at::TensorIterator::for_each()
[2m[36m(pid=43842)[0m     @     0x7fb03e2cab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43809)[0m     @     0x7f9b397f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43809)[0m     @     0x7f9b38f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43809)[0m     @     0x7f9b38f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43809)[0m     @     0x7f9b38f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=43809)[0m     @     0x7f9b38f27d91 at::TensorIterator::for_each()
[2m[36m(pid=43767)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43767)[0m *** SIGSEGV (@0x0) received by PID 43767 (TID 0x7fbe8cf5f700) from PID 0; stack trace: ***
[2m[36m(pid=43767)[0m     @     0x7fbe8cb38390 (unknown)
[2m[36m(pid=43767)[0m     @     0x7f8f8c825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43755)[0m     @     0x7f3364b3dad3 at::TensorIterator::for_each()
[2m[36m(pid=43755)[0m     @     0x7f3364b3dd91 at::TensorIterator::for_each()
[2m[36m(pid=43755)[0m     @     0x7f3365420b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43755)[0m     @     0x7f3365443c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43755)[0m     @     0x7f33648e5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43755)[0m     @     0x7f33648e3388 at::native::copy_impl()
[2m[36m(pid=43804)[0m     @     0x7fd90ad6c390 (unknown)
[2m[36m(pid=43804)[0m     @     0x7faa0acfcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43804)[0m     @     0x7faa0a4277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43804)[0m     @     0x7faa0a42a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43804)[0m     @     0x7faa0a42aad3 at::TensorIterator::for_each()
[2m[36m(pid=43833)[0m     @     0x7f6b8d33bad3 at::TensorIterator::for_each()
[2m[36m(pid=43833)[0m     @     0x7f6b8d33bd91 at::TensorIterator::for_each()
[2m[36m(pid=43833)[0m     @     0x7f6b8dc1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43833)[0m     @     0x7f6b8dc41c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43833)[0m     @     0x7f6b8d0e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43833)[0m     @     0x7f6b8d0e1388 at::native::copy_impl()
[2m[36m(pid=43801)[0m     @     0x7f081a9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43801)[0m     @     0x7f081a957ad3 at::TensorIterator::for_each()
[2m[36m(pid=43801)[0m     @     0x7f081a957d91 at::TensorIterator::for_each()
[2m[36m(pid=43801)[0m     @     0x7f081b23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43801)[0m     @     0x7f081b25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43801)[0m     @     0x7f081a6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43821)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43821)[0m *** SIGSEGV (@0x0) received by PID 43821 (TID 0x7f13a6354700) from PID 0; stack trace: ***
[2m[36m(pid=43821)[0m     @     0x7f13a5f2d390 (unknown)
[2m[36m(pid=43821)[0m     @     0x7ee4a5e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43821)[0m     @     0x7ee4a554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43821)[0m     @     0x7ee4a55528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43821)[0m     @     0x7ee4a5552ad3 at::TensorIterator::for_each()
[2m[36m(pid=43831)[0m PC: @                0x0 (unknown)
[2m[36m(pid=43831)[0m *** SIGSEGV (@0x0) received by PID 43831 (TID 0x7f1febf10700) from PID 0; stack trace: ***
[2m[36m(pid=43831)[0m     @     0x7f1febae9390 (unknown)
[2m[36m(pid=43831)[0m     @     0x7ef0eba88f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43831)[0m     @     0x7ef0eb1b37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43752)[0m     @     0x7f9b5d33bad3 at::TensorIterator::for_each()
[2m[36m(pid=43752)[0m     @     0x7f9b5d33bd91 at::TensorIterator::for_each()
[2m[36m(pid=43752)[0m     @     0x7f9b5dc1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43752)[0m     @     0x7f9b5dc41c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43752)[0m     @     0x7f9b5d0e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43752)[0m     @     0x7f9b5d0e1388 at::native::copy_impl()
[2m[36m(pid=43849)[0m     @     0x7f3fa06388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43849)[0m     @     0x7f3f9e1654f5 at::Tensor::copy_()
[2m[36m(pid=43849)[0m     @     0x7f3fa421079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43849)[0m     @     0x55ef5f8f1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43849)[0m     @     0x55ef5f84cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43849)[0m     @     0x55ef5f8d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43849)[0m     @     0x55ef5f8d8a20 method_vectorcall
[2m[36m(pid=43849)[0m     @     0x55ef5f84cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43849)[0m     @     0x55ef5f8d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43849)[0m     @     0x55ef5f8d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43849)[0m     @     0x55ef5f84d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43849)[0m     @     0x55ef5f8d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43849)[0m     @     0x55ef5f8d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43849)[0m     @     0x55ef5f84d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43849)[0m     @     0x55ef5f8d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43849)[0m     @     0x55ef5f8d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43849)[0m     @     0x55ef5f84d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43849)[0m     @     0x55ef5f8d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43849)[0m     @     0x55ef5f8d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43849)[0m     @     0x55ef5f84d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43828)[0m     @     0x7f410ca654f5 at::Tensor::copy_()
[2m[36m(pid=43828)[0m     @     0x7f4112b1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43828)[0m     @     0x564991c71fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43828)[0m     @     0x564991bccb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43828)[0m     @     0x564991c57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43828)[0m     @     0x564991c58a20 method_vectorcall
[2m[36m(pid=43828)[0m     @     0x564991bccbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43828)[0m     @     0x564991c57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43828)[0m     @     0x564991c58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43828)[0m     @     0x564991bcd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43828)[0m     @     0x564991c57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43828)[0m     @     0x564991c58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43828)[0m     @     0x564991bcd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43828)[0m     @     0x564991c57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43828)[0m     @     0x564991c58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43828)[0m     @     0x564991bcd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43828)[0m     @     0x564991c57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43828)[0m     @     0x564991c58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43828)[0m     @     0x564991bcd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43773)[0m     @     0x7fc149ed55a4 at::native::copy_()
[2m[36m(pid=43773)[0m     @     0x7fc14a5c04f5 at::Tensor::copy_()
[2m[36m(pid=43773)[0m     @     0x7fc14ca938de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43773)[0m     @     0x7fc14a5c04f5 at::Tensor::copy_()
[2m[36m(pid=43773)[0m     @     0x7fc15066b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43773)[0m     @     0x55d0077d6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43773)[0m     @     0x55d007731b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43773)[0m     @     0x55d0077bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43773)[0m     @     0x55d0077bda20 method_vectorcall
[2m[36m(pid=43773)[0m     @     0x55d007731bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43773)[0m     @     0x55d0077bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43773)[0m     @     0x55d0077bd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43773)[0m     @     0x55d007732689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43773)[0m     @     0x55d0077bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43773)[0m     @     0x55d0077bd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43773)[0m     @     0x55d007732689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43773)[0m     @     0x55d0077bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43773)[0m     @     0x55d0077bd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43773)[0m     @     0x55d007732689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43773)[0m     @     0x55d0077bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43773)[0m     @     0x55d0077bd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43773)[0m     @     0x55d007732689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43824)[0m     @     0x7f6b192bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43824)[0m     @     0x7f6b16dea4f5 at::Tensor::copy_()
[2m[36m(pid=43824)[0m     @     0x7f6b1ce9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43824)[0m     @     0x56413c831fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43824)[0m     @     0x56413c78cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43824)[0m     @     0x56413c817baf _PyEval_EvalCodeWithName
[2m[36m(pid=43824)[0m     @     0x56413c818a20 method_vectorcall
[2m[36m(pid=43824)[0m     @     0x56413c78cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43824)[0m     @     0x56413c817baf _PyEval_EvalCodeWithName
[2m[36m(pid=43824)[0m     @     0x56413c818643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43824)[0m     @     0x56413c78d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43824)[0m     @     0x56413c817baf _PyEval_EvalCodeWithName
[2m[36m(pid=43824)[0m     @     0x56413c818643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43824)[0m     @     0x56413c78d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43824)[0m     @     0x56413c817baf _PyEval_EvalCodeWithName
[2m[36m(pid=43824)[0m     @     0x56413c818643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43824)[0m     @     0x56413c78d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43824)[0m     @     0x56413c817baf _PyEval_EvalCodeWithName
[2m[36m(pid=43824)[0m     @     0x56413c818643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43824)[0m     @     0x56413c78d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43820)[0m     @     0x7f79b4d12ad3 at::TensorIterator::for_each()
[2m[36m(pid=43820)[0m     @     0x7f79b4d12d91 at::TensorIterator::for_each()
[2m[36m(pid=43820)[0m     @     0x7f79b55f5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43820)[0m     @     0x7f79b5618c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43820)[0m     @     0x7f79b4abaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43820)[0m     @     0x7f79b4ab8388 at::native::copy_impl()
[2m[36m(pid=43874)[0m     @     0x7fb9226d25a4 at::native::copy_()
[2m[36m(pid=43874)[0m     @     0x7fb922dbd4f5 at::Tensor::copy_()
[2m[36m(pid=43874)[0m     @     0x7fb9252908de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43874)[0m     @     0x7fb922dbd4f5 at::Tensor::copy_()
[2m[36m(pid=43874)[0m     @     0x7fb928e6879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43874)[0m     @     0x55ed059aefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43827)[0m     @     0x7f8d4d0a04f5 at::Tensor::copy_()
[2m[36m(pid=43827)[0m     @     0x7f8d4f5738de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43827)[0m     @     0x7f8d4d0a04f5 at::Tensor::copy_()
[2m[36m(pid=43827)[0m     @     0x7f8d5314b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43827)[0m     @     0x564dff6c3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43827)[0m     @     0x564dff61eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43827)[0m     @     0x564dff6a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43827)[0m     @     0x564dff6aaa20 method_vectorcall
[2m[36m(pid=43827)[0m     @     0x564dff61ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43827)[0m     @     0x564dff6a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43827)[0m     @     0x564dff6aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43827)[0m     @     0x564dff61f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43827)[0m     @     0x564dff6a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43827)[0m     @     0x564dff6aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43827)[0m     @     0x564dff61f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43827)[0m     @     0x564dff6a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43827)[0m     @     0x564dff6aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43827)[0m     @     0x564dff61f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43827)[0m     @     0x564dff6a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43827)[0m     @     0x564dff6aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43827)[0m     @     0x564dff61f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43770)[0m     @     0x7f768dc27d91 at::TensorIterator::for_each()
[2m[36m(pid=43770)[0m     @     0x7f768e50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43770)[0m     @     0x7f768e52dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43770)[0m     @     0x7f768d9cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43770)[0m     @     0x7f768d9cd388 at::native::copy_impl()
[2m[36m(pid=43836)[0m     @     0x7f16e75e4d91 at::TensorIterator::for_each()
[2m[36m(pid=43836)[0m     @     0x7f16e7ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43836)[0m     @     0x7f16e7eeac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43836)[0m     @     0x7f16e738ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43836)[0m     @     0x7f16e738a388 at::native::copy_impl()
[2m[36m(pid=43836)[0m     @     0x7f16e738c5a4 at::native::copy_()
[2m[36m(pid=43766)[0m     @     0x7fcb4ef7ad91 at::TensorIterator::for_each()
[2m[36m(pid=43766)[0m     @     0x7fcb4f85db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43766)[0m     @     0x7fcb4f880c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43766)[0m     @     0x7fcb4ed22a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43766)[0m     @     0x7fcb4ed20388 at::native::copy_impl()
[2m[36m(pid=43766)[0m     @     0x7fcb4ed225a4 at::native::copy_()
[2m[36m(pid=43819)[0m     @     0x7f09db8095a4 at::native::copy_()
[2m[36m(pid=43819)[0m     @     0x7f09dbef44f5 at::Tensor::copy_()
[2m[36m(pid=43819)[0m     @     0x7f09de3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43819)[0m     @     0x7f09dbef44f5 at::Tensor::copy_()
[2m[36m(pid=43819)[0m     @     0x7f09e1f9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43819)[0m     @     0x55aa24d5efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43819)[0m     @     0x55aa24cb9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43819)[0m     @     0x55aa24d44baf _PyEval_EvalCodeWithName
[2m[36m(pid=43819)[0m     @     0x55aa24d45a20 method_vectorcall
[2m[36m(pid=43819)[0m     @     0x55aa24cb9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43819)[0m     @     0x55aa24d44baf _PyEval_EvalCodeWithName
[2m[36m(pid=43819)[0m     @     0x55aa24d45643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43819)[0m     @     0x55aa24cba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43819)[0m     @     0x55aa24d44baf _PyEval_EvalCodeWithName
[2m[36m(pid=43819)[0m     @     0x55aa24d45643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43819)[0m     @     0x55aa24cba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43819)[0m     @     0x55aa24d44baf _PyEval_EvalCodeWithName
[2m[36m(pid=43819)[0m     @     0x55aa24d45643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43819)[0m     @     0x55aa24cba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43819)[0m     @     0x55aa24d44baf _PyEval_EvalCodeWithName
[2m[36m(pid=43819)[0m     @     0x55aa24d45643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43819)[0m     @     0x55aa24cba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43832)[0m     @     0x7f9b9bb11ad3 at::TensorIterator::for_each()
[2m[36m(pid=43832)[0m     @     0x7f9b9bb11d91 at::TensorIterator::for_each()
[2m[36m(pid=43832)[0m     @     0x7f9b9c3f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43832)[0m     @     0x7f9b9c417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43832)[0m     @     0x7f9b9b8b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43832)[0m     @     0x7f9b9b8b7388 at::native::copy_impl()
[2m[36m(pid=43796)[0m     @     0x7f6f3d552d91 at::TensorIterator::for_each()
[2m[36m(pid=43796)[0m     @     0x7f6f3de35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43796)[0m     @     0x7f6f3de58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43796)[0m     @     0x7f6f3d2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43796)[0m     @     0x7f6f3d2f8388 at::native::copy_impl()
[2m[36m(pid=43796)[0m     @     0x7f6f3d2fa5a4 at::native::copy_()
[2m[36m(pid=43748)[0m     @     0x7f86d7eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43748)[0m     @     0x7f86d59e54f5 at::Tensor::copy_()
[2m[36m(pid=43748)[0m     @     0x7f86dba9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43748)[0m     @     0x564254719fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43748)[0m     @     0x564254674b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43748)[0m     @     0x5642546ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43748)[0m     @     0x564254700a20 method_vectorcall
[2m[36m(pid=43748)[0m     @     0x564254674bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43748)[0m     @     0x5642546ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43748)[0m     @     0x564254700643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43748)[0m     @     0x564254675689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43748)[0m     @     0x5642546ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43748)[0m     @     0x564254700643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43748)[0m     @     0x564254675689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43748)[0m     @     0x5642546ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43748)[0m     @     0x564254700643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43748)[0m     @     0x564254675689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43748)[0m     @     0x5642546ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43748)[0m     @     0x564254700643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43748)[0m     @     0x564254675689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43841)[0m     @     0x7ed679e3a4f5 at::Tensor::copy_()
[2m[36m(pid=43841)[0m     @     0x7ed67c30d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43841)[0m     @     0x7ed679e3a4f5 at::Tensor::copy_()
[2m[36m(pid=43841)[0m     @     0x7ed67fee579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43841)[0m     @     0x564f00f42fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43841)[0m     @     0x564f00e9db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43841)[0m     @     0x564f00f28baf _PyEval_EvalCodeWithName
[2m[36m(pid=43841)[0m     @     0x564f00f29a20 method_vectorcall
[2m[36m(pid=43841)[0m     @     0x564f00e9dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43841)[0m     @     0x564f00f28baf _PyEval_EvalCodeWithName
[2m[36m(pid=43841)[0m     @     0x564f00f29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43841)[0m     @     0x564f00e9e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43841)[0m     @     0x564f00f28baf _PyEval_EvalCodeWithName
[2m[36m(pid=43841)[0m     @     0x564f00f29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43826)[0m     @     0x7f2ad1b568de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43826)[0m     @     0x7f2acf6834f5 at::Tensor::copy_()
[2m[36m(pid=43826)[0m     @     0x7f2ad572e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43826)[0m     @     0x55eb2b3d2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43826)[0m     @     0x55eb2b32db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43826)[0m     @     0x55eb2b3b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43826)[0m     @     0x55eb2b3b9a20 method_vectorcall
[2m[36m(pid=43826)[0m     @     0x55eb2b32dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43826)[0m     @     0x55eb2b3b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43826)[0m     @     0x55eb2b3b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43826)[0m     @     0x55eb2b32e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43826)[0m     @     0x55eb2b3b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43826)[0m     @     0x55eb2b3b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43826)[0m     @     0x55eb2b32e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43826)[0m     @     0x55eb2b3b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43826)[0m     @     0x55eb2b3b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43826)[0m     @     0x55eb2b32e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43826)[0m     @     0x55eb2b3b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43826)[0m     @     0x55eb2b3b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43826)[0m     @     0x55eb2b32e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43847)[0m     @     0x7edc4d73b4f5 at::Tensor::copy_()
[2m[36m(pid=43847)[0m     @     0x7edc537e679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43847)[0m     @     0x555faf0bafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43847)[0m     @     0x555faf015b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43847)[0m     @     0x555faf0a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43847)[0m     @     0x555faf0a1a20 method_vectorcall
[2m[36m(pid=43847)[0m     @     0x555faf015bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43847)[0m     @     0x555faf0a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43847)[0m     @     0x555faf0a1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43847)[0m     @     0x555faf016689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43847)[0m     @     0x555faf0a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43847)[0m     @     0x555faf0a1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43847)[0m     @     0x555faf016689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43847)[0m     @     0x555faf0a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43847)[0m     @     0x555faf0a1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43847)[0m     @     0x555faf016689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43847)[0m     @     0x555faf0a0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43847)[0m     @     0x555faf0a1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43847)[0m     @     0x555faf016689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43747)[0m     @     0x7ed21f48d4f5 at::Tensor::copy_()
[2m[36m(pid=43747)[0m     @     0x7ed2219608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43747)[0m     @     0x7ed21f48d4f5 at::Tensor::copy_()
[2m[36m(pid=43747)[0m     @     0x7ed23828379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43747)[0m     @     0x558d55df1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43747)[0m     @     0x558d55d4cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43747)[0m     @     0x558d55dd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43747)[0m     @     0x558d55dd8a20 method_vectorcall
[2m[36m(pid=43747)[0m     @     0x558d55d4cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43747)[0m     @     0x558d55dd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43747)[0m     @     0x558d55dd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43747)[0m     @     0x558d55d4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43747)[0m     @     0x558d55dd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43747)[0m     @     0x558d55dd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43747)[0m     @     0x558d55d4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43747)[0m     @     0x558d55dd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43747)[0m     @     0x558d55dd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43747)[0m     @     0x558d55d4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43747)[0m     @     0x558d55dd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43747)[0m     @     0x558d55dd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43747)[0m     @     0x558d55d4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43878)[0m     @     0x7f4dbce0b4f5 at::Tensor::copy_()
[2m[36m(pid=43878)[0m     @     0x7f4dbf2de8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43878)[0m     @     0x7f4dbce0b4f5 at::Tensor::copy_()
[2m[36m(pid=43878)[0m     @     0x7f4dc2eb679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43878)[0m     @     0x557fc2788fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43878)[0m     @     0x557fc26e3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43878)[0m     @     0x557fc276ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43878)[0m     @     0x557fc276fa20 method_vectorcall
[2m[36m(pid=43878)[0m     @     0x557fc26e3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43878)[0m     @     0x557fc276ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43878)[0m     @     0x557fc276f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43878)[0m     @     0x557fc26e4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43878)[0m     @     0x557fc276ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43878)[0m     @     0x557fc276f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43878)[0m     @     0x557fc26e4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43878)[0m     @     0x557fc276ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43878)[0m     @     0x557fc276f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43878)[0m     @     0x557fc26e4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43878)[0m     @     0x557fc276ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43878)[0m     @     0x557fc276f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43878)[0m     @     0x557fc26e4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43867)[0m     @     0x7f83039274f5 at::Tensor::copy_()
[2m[36m(pid=43867)[0m     @     0x7f83099d279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43867)[0m     @     0x55a7b0d99fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43867)[0m     @     0x55a7b0cf4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43867)[0m     @     0x55a7b0d7fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43867)[0m     @     0x55a7b0d80a20 method_vectorcall
[2m[36m(pid=43867)[0m     @     0x55a7b0cf4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43867)[0m     @     0x55a7b0d7fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43867)[0m     @     0x55a7b0d80643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43867)[0m     @     0x55a7b0cf5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43867)[0m     @     0x55a7b0d7fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43867)[0m     @     0x55a7b0d80643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43867)[0m     @     0x55a7b0cf5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43867)[0m     @     0x55a7b0d7fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43867)[0m     @     0x55a7b0d80643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43867)[0m     @     0x55a7b0cf5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43867)[0m     @     0x55a7b0d7fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43867)[0m     @     0x55a7b0d80643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43867)[0m     @     0x55a7b0cf5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43813)[0m     @     0x7eeaee0ba4f5 at::Tensor::copy_()
[2m[36m(pid=43813)[0m     @     0x7eeaf058d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43813)[0m     @     0x7eeaee0ba4f5 at::Tensor::copy_()
[2m[36m(pid=43813)[0m     @     0x7eeaf416579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43813)[0m     @     0x5601cf69efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43813)[0m     @     0x5601cf5f9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43813)[0m     @     0x5601cf684baf _PyEval_EvalCodeWithName
[2m[36m(pid=43813)[0m     @     0x5601cf685a20 method_vectorcall
[2m[36m(pid=43813)[0m     @     0x5601cf5f9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43813)[0m     @     0x5601cf684baf _PyEval_EvalCodeWithName
[2m[36m(pid=43813)[0m     @     0x5601cf685643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43813)[0m     @     0x5601cf5fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43813)[0m     @     0x5601cf684baf _PyEval_EvalCodeWithName
[2m[36m(pid=43813)[0m     @     0x5601cf685643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43813)[0m     @     0x5601cf5fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43813)[0m     @     0x5601cf684baf _PyEval_EvalCodeWithName
[2m[36m(pid=43813)[0m     @     0x5601cf685643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43813)[0m     @     0x5601cf5fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43813)[0m     @     0x5601cf684baf _PyEval_EvalCodeWithName
[2m[36m(pid=43813)[0m     @     0x5601cf685643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43813)[0m     @     0x5601cf5fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43871)[0m     @     0x7ef998b104f5 at::Tensor::copy_()
[2m[36m(pid=43871)[0m     @     0x7ef99afe38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43871)[0m     @     0x7ef998b104f5 at::Tensor::copy_()
[2m[36m(pid=43871)[0m     @     0x7ef99ebbb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43871)[0m     @     0x56527fbe3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43871)[0m     @     0x56527fb3eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43871)[0m     @     0x56527fbc9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43871)[0m     @     0x56527fbcaa20 method_vectorcall
[2m[36m(pid=43871)[0m     @     0x56527fb3ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43871)[0m     @     0x56527fbc9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43871)[0m     @     0x56527fbca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43871)[0m     @     0x56527fb3f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43871)[0m     @     0x56527fbc9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43871)[0m     @     0x56527fbca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43871)[0m     @     0x56527fb3f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43871)[0m     @     0x56527fbc9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43871)[0m     @     0x56527fbca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43871)[0m     @     0x56527fb3f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43871)[0m     @     0x56527fbc9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43871)[0m     @     0x56527fbca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43871)[0m     @     0x56527fb3f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43811)[0m     @     0x7fc46557e5a4 at::native::copy_()
[2m[36m(pid=43811)[0m     @     0x7fc465c694f5 at::Tensor::copy_()
[2m[36m(pid=43811)[0m     @     0x7fc46813c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43811)[0m     @     0x7fc465c694f5 at::Tensor::copy_()
[2m[36m(pid=43811)[0m     @     0x7fc46bd1479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43811)[0m     @     0x55de6d0b1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43811)[0m     @     0x55de6d00cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43811)[0m     @     0x55de6d097baf _PyEval_EvalCodeWithName
[2m[36m(pid=43811)[0m     @     0x55de6d098a20 method_vectorcall
[2m[36m(pid=43811)[0m     @     0x55de6d00cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43811)[0m     @     0x55de6d097baf _PyEval_EvalCodeWithName
[2m[36m(pid=43811)[0m     @     0x55de6d098643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43811)[0m     @     0x55de6d00d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43811)[0m     @     0x55de6d097baf _PyEval_EvalCodeWithName
[2m[36m(pid=43811)[0m     @     0x55de6d098643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43811)[0m     @     0x55de6d00d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43811)[0m     @     0x55de6d097baf _PyEval_EvalCodeWithName
[2m[36m(pid=43811)[0m     @     0x55de6d098643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43811)[0m     @     0x55de6d00d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43811)[0m     @     0x55de6d097baf _PyEval_EvalCodeWithName
[2m[36m(pid=43811)[0m     @     0x55de6d098643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43811)[0m     @     0x55de6d00d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43775)[0m     @     0x7fc2f70a8d91 at::TensorIterator::for_each()
[2m[36m(pid=43775)[0m     @     0x7fc2f798bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43775)[0m     @     0x7fc2f79aec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43775)[0m     @     0x7fc2f6e50a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43775)[0m     @     0x7fc2f6e4e388 at::native::copy_impl()
[2m[36m(pid=43775)[0m     @     0x7fc2f6e505a4 at::native::copy_()
[2m[36m(pid=43746)[0m     @     0x7f28651b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43746)[0m     @     0x7f2862ce54f5 at::Tensor::copy_()
[2m[36m(pid=43746)[0m     @     0x7f2868d9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43746)[0m     @     0x55871eb67fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43746)[0m     @     0x55871eac2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43746)[0m     @     0x55871eb4dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43746)[0m     @     0x55871eb4ea20 method_vectorcall
[2m[36m(pid=43746)[0m     @     0x55871eac2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43746)[0m     @     0x55871eb4dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43746)[0m     @     0x55871eb4e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43746)[0m     @     0x55871eac3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43746)[0m     @     0x55871eb4dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43746)[0m     @     0x55871eb4e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43746)[0m     @     0x55871eac3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43746)[0m     @     0x55871eb4dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43746)[0m     @     0x55871eb4e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43746)[0m     @     0x55871eac3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43746)[0m     @     0x55871eb4dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43746)[0m     @     0x55871eb4e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43746)[0m     @     0x55871eac3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43823)[0m     @     0x7f9eaa7a779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43823)[0m     @     0x55d7747fdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43823)[0m     @     0x55d774758b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43823)[0m     @     0x55d7747e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=43823)[0m     @     0x55d7747e4a20 method_vectorcall
[2m[36m(pid=43823)[0m     @     0x55d774758bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43823)[0m     @     0x55d7747e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=43823)[0m     @     0x55d7747e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43823)[0m     @     0x55d774759689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43823)[0m     @     0x55d7747e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=43823)[0m     @     0x55d7747e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43823)[0m     @     0x55d774759689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43823)[0m     @     0x55d7747e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=43823)[0m     @     0x55d7747e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43823)[0m     @     0x55d774759689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43823)[0m     @     0x55d7747e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=43823)[0m     @     0x55d7747e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43823)[0m     @     0x55d774759689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43825)[0m     @     0x7f09199e54f5 at::Tensor::copy_()
[2m[36m(pid=43825)[0m     @     0x7f091fa9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43825)[0m     @     0x562e5c59afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43825)[0m     @     0x562e5c4f5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43825)[0m     @     0x562e5c580baf _PyEval_EvalCodeWithName
[2m[36m(pid=43825)[0m     @     0x562e5c581a20 method_vectorcall
[2m[36m(pid=43825)[0m     @     0x562e5c4f5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43825)[0m     @     0x562e5c580baf _PyEval_EvalCodeWithName
[2m[36m(pid=43825)[0m     @     0x562e5c581643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43825)[0m     @     0x562e5c4f6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43825)[0m     @     0x562e5c580baf _PyEval_EvalCodeWithName
[2m[36m(pid=43825)[0m     @     0x562e5c581643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43825)[0m     @     0x562e5c4f6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43825)[0m     @     0x562e5c580baf _PyEval_EvalCodeWithName
[2m[36m(pid=43825)[0m     @     0x562e5c581643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43825)[0m     @     0x562e5c4f6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43825)[0m     @     0x562e5c580baf _PyEval_EvalCodeWithName
[2m[36m(pid=43825)[0m     @     0x562e5c581643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43825)[0m     @     0x562e5c4f6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43757)[0m     @     0x7f3a599e54f5 at::Tensor::copy_()
[2m[36m(pid=43757)[0m     @     0x7f3a5beb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43757)[0m     @     0x7f3a599e54f5 at::Tensor::copy_()
[2m[36m(pid=43757)[0m     @     0x7f3a5fa9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43757)[0m     @     0x55f5a91c7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43757)[0m     @     0x55f5a9122b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43757)[0m     @     0x55f5a91adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43757)[0m     @     0x55f5a91aea20 method_vectorcall
[2m[36m(pid=43757)[0m     @     0x55f5a9122bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43757)[0m     @     0x55f5a91adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43757)[0m     @     0x55f5a91ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43757)[0m     @     0x55f5a9123689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43757)[0m     @     0x55f5a91adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43757)[0m     @     0x55f5a91ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43757)[0m     @     0x55f5a9123689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43757)[0m     @     0x55f5a91adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43757)[0m     @     0x55f5a91ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43757)[0m     @     0x55f5a9123689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43757)[0m     @     0x55f5a91adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43757)[0m     @     0x55f5a91ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43757)[0m     @     0x55f5a9123689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43859)[0m     @     0x55c149ce5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43859)[0m     @     0x55c149d6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43859)[0m     @     0x55c149d70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43859)[0m     @     0x55c149ce5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43859)[0m     @     0x55c149d6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43859)[0m     @     0x55c149d70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43859)[0m     @     0x55c149ce5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43859)[0m     @     0x55c149d6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43859)[0m     @     0x55c149d70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43859)[0m     @     0x55c149ce5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43768)[0m     @     0x563155652643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43768)[0m     @     0x5631555c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43768)[0m     @     0x563155651baf _PyEval_EvalCodeWithName
[2m[36m(pid=43768)[0m     @     0x563155652643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43768)[0m     @     0x5631555c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43768)[0m     @     0x563155651baf _PyEval_EvalCodeWithName
[2m[36m(pid=43768)[0m     @     0x563155652643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43768)[0m     @     0x5631555c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43768)[0m     @     0x563155651baf _PyEval_EvalCodeWithName
[2m[36m(pid=43768)[0m     @     0x563155652643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43768)[0m     @     0x5631555c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43858)[0m     @     0x7f53433124f5 at::Tensor::copy_()
[2m[36m(pid=43858)[0m     @     0x7f53457e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43858)[0m     @     0x7f53433124f5 at::Tensor::copy_()
[2m[36m(pid=43858)[0m     @     0x7f53493bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43858)[0m     @     0x5595267dafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43858)[0m     @     0x559526735b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43858)[0m     @     0x5595267c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43858)[0m     @     0x5595267c1a20 method_vectorcall
[2m[36m(pid=43858)[0m     @     0x559526735bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43858)[0m     @     0x5595267c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43858)[0m     @     0x5595267c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43858)[0m     @     0x559526736689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43858)[0m     @     0x5595267c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43858)[0m     @     0x5595267c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43858)[0m     @     0x559526736689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43858)[0m     @     0x5595267c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43858)[0m     @     0x5595267c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43858)[0m     @     0x559526736689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43858)[0m     @     0x5595267c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=43858)[0m     @     0x5595267c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43858)[0m     @     0x559526736689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43817)[0m     @     0x7f4fc75864f5 at::Tensor::copy_()
[2m[36m(pid=43817)[0m     @     0x7f4fcd63179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43817)[0m     @     0x560cfffb1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43817)[0m     @     0x560cfff0cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43817)[0m     @     0x560cfff97baf _PyEval_EvalCodeWithName
[2m[36m(pid=43817)[0m     @     0x560cfff98a20 method_vectorcall
[2m[36m(pid=43817)[0m     @     0x560cfff0cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43817)[0m     @     0x560cfff97baf _PyEval_EvalCodeWithName
[2m[36m(pid=43817)[0m     @     0x560cfff98643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43817)[0m     @     0x560cfff0d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43817)[0m     @     0x560cfff97baf _PyEval_EvalCodeWithName
[2m[36m(pid=43817)[0m     @     0x560cfff98643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43817)[0m     @     0x560cfff0d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43817)[0m     @     0x560cfff97baf _PyEval_EvalCodeWithName
[2m[36m(pid=43817)[0m     @     0x560cfff98643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43817)[0m     @     0x560cfff0d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43817)[0m     @     0x560cfff97baf _PyEval_EvalCodeWithName
[2m[36m(pid=43817)[0m     @     0x560cfff98643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43817)[0m     @     0x560cfff0d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43741)[0m     @     0x7f18060eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43741)[0m     @     0x7f18060e9388 at::native::copy_impl()
[2m[36m(pid=43741)[0m     @     0x7f18060eb5a4 at::native::copy_()
[2m[36m(pid=43741)[0m     @     0x7f18067d64f5 at::Tensor::copy_()
[2m[36m(pid=43741)[0m     @     0x7f1808ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43745)[0m     @     0x7ee6972c6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43745)[0m     @     0x7ee6972c4388 at::native::copy_impl()
[2m[36m(pid=43745)[0m     @     0x7ee6972c65a4 at::native::copy_()
[2m[36m(pid=43745)[0m     @     0x7ee6979b14f5 at::Tensor::copy_()
[2m[36m(pid=43745)[0m     @     0x7ee699e848de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43758)[0m     @     0x7f4d20e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=43758)[0m     @     0x7f4d20e22d91 at::TensorIterator::for_each()
[2m[36m(pid=43758)[0m     @     0x7f4d21705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43758)[0m     @     0x7f4d21728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43808)[0m     @     0x7fbd6f1f6d91 at::TensorIterator::for_each()
[2m[36m(pid=43808)[0m     @     0x7fbd6fad9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43808)[0m     @     0x7fbd6fafcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43808)[0m     @     0x7fbd6ef9ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43808)[0m     @     0x7fbd6ef9c388 at::native::copy_impl()
[2m[36m(pid=43808)[0m     @     0x7fbd6ef9e5a4 at::native::copy_()
[2m[36m(pid=43743)[0m     @     0x7efadee12c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43743)[0m     @     0x7efade2b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43743)[0m     @     0x7efade2b2388 at::native::copy_impl()
[2m[36m(pid=43743)[0m     @     0x7efade2b45a4 at::native::copy_()
[2m[36m(pid=43740)[0m     @     0x7f14a9ac3d91 at::TensorIterator::for_each()
[2m[36m(pid=43740)[0m     @     0x7f14aa3a6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43740)[0m     @     0x7f14aa3c9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43740)[0m     @     0x7f14a986ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43740)[0m     @     0x7f14a9869388 at::native::copy_impl()
[2m[36m(pid=43740)[0m     @     0x7f14a986b5a4 at::native::copy_()
[2m[36m(pid=43765)[0m     @     0x7f524b74ad91 at::TensorIterator::for_each()
[2m[36m(pid=43765)[0m     @     0x7f524c02db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43765)[0m     @     0x7f524c050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43765)[0m     @     0x7f524b4f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43765)[0m     @     0x7f524b4f0388 at::native::copy_impl()
[2m[36m(pid=43765)[0m     @     0x7f524b4f25a4 at::native::copy_()
[2m[36m(pid=43761)[0m     @     0x7f14a8425a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43761)[0m     @     0x7f14a8423388 at::native::copy_impl()
[2m[36m(pid=43761)[0m     @     0x7f14a84255a4 at::native::copy_()
[2m[36m(pid=43761)[0m     @     0x7f14a8b104f5 at::Tensor::copy_()
[2m[36m(pid=43761)[0m     @     0x7f14aafe38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43744)[0m     @     0x7fbfc02698f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43744)[0m     @     0x7fbfc0269ad3 at::TensorIterator::for_each()
[2m[36m(pid=43744)[0m     @     0x7fbfc0269d91 at::TensorIterator::for_each()
[2m[36m(pid=43744)[0m     @     0x7fbfc0b4cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43744)[0m     @     0x7fbfc0b6fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43815)[0m     @     0x7ed869a93d91 at::TensorIterator::for_each()
[2m[36m(pid=43815)[0m     @     0x7ed86a376b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43815)[0m     @     0x7ed86a399c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43815)[0m     @     0x7ed86983ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43815)[0m     @     0x7ed869839388 at::native::copy_impl()
[2m[36m(pid=43815)[0m     @     0x7ed86983b5a4 at::native::copy_()
[2m[36m(pid=43839)[0m     @     0x7f67a3c91d91 at::TensorIterator::for_each()
[2m[36m(pid=43839)[0m     @     0x7f67a4574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43839)[0m     @     0x7f67a4597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43839)[0m     @     0x7f67a3a39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43839)[0m     @     0x7f67a3a37388 at::native::copy_impl()
[2m[36m(pid=43839)[0m     @     0x7f67a3a395a4 at::native::copy_()
[2m[36m(pid=43839)[0m     @     0x7f67a41244f5 at::Tensor::copy_()
[2m[36m(pid=43839)[0m     @     0x7f67a65f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43839)[0m     @     0x7f67a41244f5 at::Tensor::copy_()
[2m[36m(pid=43756)[0m     @     0x7f183723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43756)[0m     @     0x7f183725dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43756)[0m     @     0x7f18366ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43756)[0m     @     0x7f18366fd388 at::native::copy_impl()
[2m[36m(pid=43756)[0m     @     0x7f18366ff5a4 at::native::copy_()
[2m[36m(pid=43756)[0m     @     0x7f1836dea4f5 at::Tensor::copy_()
[2m[36m(pid=43756)[0m     @     0x7f18392bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43756)[0m     @     0x7f1836dea4f5 at::Tensor::copy_()
[2m[36m(pid=43848)[0m     @     0x7f35f4a68d91 at::TensorIterator::for_each()
[2m[36m(pid=43848)[0m     @     0x7f35f534bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43848)[0m     @     0x7f35f536ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43848)[0m     @     0x7f35f4810a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43848)[0m     @     0x7f35f480e388 at::native::copy_impl()
[2m[36m(pid=43848)[0m     @     0x7f35f48105a4 at::native::copy_()
[2m[36m(pid=43848)[0m     @     0x7f35f4efb4f5 at::Tensor::copy_()
[2m[36m(pid=43848)[0m     @     0x7f35f73ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43845)[0m     @     0x7efc82d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=43845)[0m     @     0x7efc83630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43845)[0m     @     0x7efc83653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43845)[0m     @     0x7efc82af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43845)[0m     @     0x7efc82af3388 at::native::copy_impl()
[2m[36m(pid=43845)[0m     @     0x7efc82af55a4 at::native::copy_()
[2m[36m(pid=43845)[0m     @     0x7efc831e04f5 at::Tensor::copy_()
[2m[36m(pid=43845)[0m     @     0x7efc856b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43853)[0m     @     0x7fb128d62d91 at::TensorIterator::for_each()
[2m[36m(pid=43853)[0m     @     0x7fb129645b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43853)[0m     @     0x7fb129668c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43853)[0m     @     0x7fb128b0aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43853)[0m     @     0x7fb128b08388 at::native::copy_impl()
[2m[36m(pid=43853)[0m     @     0x7fb128b0a5a4 at::native::copy_()
[2m[36m(pid=43853)[0m     @     0x7fb1291f54f5 at::Tensor::copy_()
[2m[36m(pid=43853)[0m     @     0x7fb12b6c88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43853)[0m     @     0x7fb1291f54f5 at::Tensor::copy_()
[2m[36m(pid=43754)[0m     @     0x7f6460f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43754)[0m     @     0x7f6460f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43754)[0m     @     0x7f6460f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=43754)[0m     @     0x7f6460f27d91 at::TensorIterator::for_each()
[2m[36m(pid=43805)[0m     @     0x7f322700cd91 at::TensorIterator::for_each()
[2m[36m(pid=43805)[0m     @     0x7f32278efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43805)[0m     @     0x7f3227912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43805)[0m     @     0x7f3226db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43805)[0m     @     0x7f3226db2388 at::native::copy_impl()
[2m[36m(pid=43805)[0m     @     0x7f3226db45a4 at::native::copy_()
[2m[36m(pid=43805)[0m     @     0x7f322749f4f5 at::Tensor::copy_()
[2m[36m(pid=43805)[0m     @     0x7f32299728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43862)[0m     @     0x7f085212dad3 at::TensorIterator::for_each()
[2m[36m(pid=43862)[0m     @     0x7f085212dd91 at::TensorIterator::for_each()
[2m[36m(pid=43862)[0m     @     0x7f0852a10b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43862)[0m     @     0x7f0852a33c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43862)[0m     @     0x7f0851ed5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43862)[0m     @     0x7f0851ed3388 at::native::copy_impl()
[2m[36m(pid=43862)[0m     @     0x7f0851ed55a4 at::native::copy_()
[2m[36m(pid=43862)[0m     @     0x7f08525c04f5 at::Tensor::copy_()
[2m[36m(pid=43822)[0m     @     0x7ee3c9a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43822)[0m     @     0x7ee3c9a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=43822)[0m     @     0x7ee3c9a79d91 at::TensorIterator::for_each()
[2m[36m(pid=43822)[0m     @     0x7ee3ca35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43822)[0m     @     0x7ee3ca37fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43822)[0m     @     0x7ee3c9821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43822)[0m     @     0x7ee3c981f388 at::native::copy_impl()
[2m[36m(pid=43798)[0m     @     0x7fae0982d390 (unknown)
[2m[36m(pid=43798)[0m     @     0x7f7f096f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43798)[0m     @     0x7f7f08e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43798)[0m     @     0x7f7f08e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43798)[0m     @     0x7f7f08e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=43816)[0m     @     0x7f06fa957d91 at::TensorIterator::for_each()
[2m[36m(pid=43816)[0m     @     0x7f06fb23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43816)[0m     @     0x7f06fb25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43816)[0m     @     0x7f06fa6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43816)[0m     @     0x7f06fa6fd388 at::native::copy_impl()
[2m[36m(pid=43816)[0m     @     0x7f06fa6ff5a4 at::native::copy_()
[2m[36m(pid=43816)[0m     @     0x7f06fadea4f5 at::Tensor::copy_()
[2m[36m(pid=43816)[0m     @     0x7f06fd2bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43814)[0m     @     0x7fe26cd78390 (unknown)
[2m[36m(pid=43814)[0m     @     0x7fb36cc1ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=43814)[0m     @     0x7fb36c34a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43814)[0m     @     0x7fb36c34d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43814)[0m     @     0x7fb36c34dad3 at::TensorIterator::for_each()
[2m[36m(pid=43814)[0m     @     0x7fb36c34dd91 at::TensorIterator::for_each()
[2m[36m(pid=43814)[0m     @     0x7fb36cc30b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43742)[0m     @     0x565316e57baf _PyEval_EvalCodeWithName
[2m[36m(pid=43742)[0m     @     0x565316e58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43742)[0m     @     0x565316dcd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43759)[0m     @     0x7fb43dbe0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43759)[0m     @     0x7fb43dbde388 at::native::copy_impl()
[2m[36m(pid=43759)[0m     @     0x7fb43dbe05a4 at::native::copy_()
[2m[36m(pid=43759)[0m     @     0x7fb43e2cb4f5 at::Tensor::copy_()
[2m[36m(pid=43759)[0m     @     0x7fb44079e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43759)[0m     @     0x7fb43e2cb4f5 at::Tensor::copy_()
[2m[36m(pid=43759)[0m     @     0x7fb44437679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43759)[0m     @     0x55cd482c6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43759)[0m     @     0x55cd48221b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43759)[0m     @     0x55cd482acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43759)[0m     @     0x55cd482ada20 method_vectorcall
[2m[36m(pid=43759)[0m     @     0x55cd48221bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43759)[0m     @     0x55cd482acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43759)[0m     @     0x55cd482ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43759)[0m     @     0x55cd48222689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43759)[0m     @     0x55cd482acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43759)[0m     @     0x55cd482ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43759)[0m     @     0x55cd48222689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43759)[0m     @     0x55cd482acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43759)[0m     @     0x55cd482ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43759)[0m     @     0x55cd48222689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43759)[0m     @     0x55cd482acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43759)[0m     @     0x55cd482ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43759)[0m     @     0x55cd48222689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43760)[0m     @     0x5612c94ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43760)[0m     @     0x5612c9535baf _PyEval_EvalCodeWithName
[2m[36m(pid=43760)[0m     @     0x5612c9536643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43760)[0m     @     0x5612c94ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43760)[0m     @     0x5612c9535baf _PyEval_EvalCodeWithName
[2m[36m(pid=43760)[0m     @     0x5612c9536643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43760)[0m     @     0x5612c94ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43750)[0m     @     0x7f3977405a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43750)[0m     @     0x7f3977403388 at::native::copy_impl()
[2m[36m(pid=43750)[0m     @     0x7f39774055a4 at::native::copy_()
[2m[36m(pid=43750)[0m     @     0x7f3977af04f5 at::Tensor::copy_()
[2m[36m(pid=43750)[0m     @     0x7f3979fc38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43750)[0m     @     0x7f3977af04f5 at::Tensor::copy_()
[2m[36m(pid=43750)[0m     @     0x7f397db9b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43750)[0m     @     0x560e867c3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43750)[0m     @     0x560e8671eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43750)[0m     @     0x560e867a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43750)[0m     @     0x560e867aaa20 method_vectorcall
[2m[36m(pid=43750)[0m     @     0x560e8671ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43750)[0m     @     0x560e867a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43750)[0m     @     0x560e867aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43750)[0m     @     0x560e8671f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43750)[0m     @     0x560e867a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43750)[0m     @     0x560e867aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43750)[0m     @     0x560e8671f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43750)[0m     @     0x560e867a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43750)[0m     @     0x560e867aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43750)[0m     @     0x560e8671f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43750)[0m     @     0x560e867a9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43750)[0m     @     0x560e867aa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43750)[0m     @     0x560e8671f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43772)[0m     @     0x7f8be799f4f5 at::Tensor::copy_()
[2m[36m(pid=43772)[0m     @     0x7f8beda4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43772)[0m     @     0x5575970b7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43772)[0m     @     0x557597012b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43772)[0m     @     0x55759709dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43772)[0m     @     0x55759709ea20 method_vectorcall
[2m[36m(pid=43772)[0m     @     0x557597012bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43772)[0m     @     0x55759709dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43772)[0m     @     0x55759709e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43772)[0m     @     0x557597013689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43772)[0m     @     0x55759709dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43772)[0m     @     0x55759709e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43772)[0m     @     0x557597013689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43772)[0m     @     0x55759709dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43772)[0m     @     0x55759709e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43772)[0m     @     0x557597013689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43772)[0m     @     0x55759709dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43772)[0m     @     0x55759709e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43772)[0m     @     0x557597013689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43838)[0m     @     0x7f2f36910a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43838)[0m     @     0x7f2f3690e388 at::native::copy_impl()
[2m[36m(pid=43838)[0m     @     0x7f2f369105a4 at::native::copy_()
[2m[36m(pid=43838)[0m     @     0x7f2f36ffb4f5 at::Tensor::copy_()
[2m[36m(pid=43838)[0m     @     0x7f2f394ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43838)[0m     @     0x7f2f36ffb4f5 at::Tensor::copy_()
[2m[36m(pid=43838)[0m     @     0x7f2f3d0a679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43838)[0m     @     0x55c24fa12fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43838)[0m     @     0x55c24f96db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43838)[0m     @     0x55c24f9f8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43838)[0m     @     0x55c24f9f9a20 method_vectorcall
[2m[36m(pid=43838)[0m     @     0x55c24f96dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43838)[0m     @     0x55c24f9f8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43838)[0m     @     0x55c24f9f9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43838)[0m     @     0x55c24f96e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43838)[0m     @     0x55c24f9f8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43838)[0m     @     0x55c24f9f9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43838)[0m     @     0x55c24f96e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43838)[0m     @     0x55c24f9f8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43838)[0m     @     0x55c24f9f9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43838)[0m     @     0x55c24f96e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43838)[0m     @     0x55c24f9f8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43838)[0m     @     0x55c24f9f9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43838)[0m     @     0x55c24f96e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43852)[0m     @     0x7f89357b2388 at::native::copy_impl()
[2m[36m(pid=43852)[0m     @     0x7f89357b45a4 at::native::copy_()
[2m[36m(pid=43852)[0m     @     0x7f8935e9f4f5 at::Tensor::copy_()
[2m[36m(pid=43852)[0m     @     0x7f89383728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43852)[0m     @     0x7f8935e9f4f5 at::Tensor::copy_()
[2m[36m(pid=43852)[0m     @     0x7f893bf4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43852)[0m     @     0x5567cedacfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43852)[0m     @     0x5567ced07b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43852)[0m     @     0x5567ced92baf _PyEval_EvalCodeWithName
[2m[36m(pid=43852)[0m     @     0x5567ced93a20 method_vectorcall
[2m[36m(pid=43852)[0m     @     0x5567ced07bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43852)[0m     @     0x5567ced92baf _PyEval_EvalCodeWithName
[2m[36m(pid=43852)[0m     @     0x5567ced93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43852)[0m     @     0x5567ced08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43852)[0m     @     0x5567ced92baf _PyEval_EvalCodeWithName
[2m[36m(pid=43852)[0m     @     0x5567ced93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43852)[0m     @     0x5567ced08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43852)[0m     @     0x5567ced92baf _PyEval_EvalCodeWithName
[2m[36m(pid=43852)[0m     @     0x5567ced93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43852)[0m     @     0x5567ced08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43852)[0m     @     0x5567ced92baf _PyEval_EvalCodeWithName
[2m[36m(pid=43852)[0m     @     0x5567ced93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43852)[0m     @     0x5567ced08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43769)[0m     @     0x7fcc8213d4f5 at::Tensor::copy_()
[2m[36m(pid=43769)[0m     @     0x7fcc881e879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43769)[0m     @     0x558666390fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43769)[0m     @     0x5586662ebb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43769)[0m     @     0x558666376baf _PyEval_EvalCodeWithName
[2m[36m(pid=43769)[0m     @     0x558666377a20 method_vectorcall
[2m[36m(pid=43769)[0m     @     0x5586662ebbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43769)[0m     @     0x558666376baf _PyEval_EvalCodeWithName
[2m[36m(pid=43769)[0m     @     0x558666377643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43769)[0m     @     0x5586662ec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43769)[0m     @     0x558666376baf _PyEval_EvalCodeWithName
[2m[36m(pid=43769)[0m     @     0x558666377643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43769)[0m     @     0x5586662ec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43769)[0m     @     0x558666376baf _PyEval_EvalCodeWithName
[2m[36m(pid=43769)[0m     @     0x558666377643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43769)[0m     @     0x5586662ec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43769)[0m     @     0x558666376baf _PyEval_EvalCodeWithName
[2m[36m(pid=43769)[0m     @     0x558666377643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43769)[0m     @     0x5586662ec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43751)[0m     @     0x7ed4a88a25a4 at::native::copy_()
[2m[36m(pid=43751)[0m     @     0x7ed4a8f8d4f5 at::Tensor::copy_()
[2m[36m(pid=43751)[0m     @     0x7ed4ab4608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43751)[0m     @     0x7ed4a8f8d4f5 at::Tensor::copy_()
[2m[36m(pid=43751)[0m     @     0x7ed4af03879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43751)[0m     @     0x560f9cfcbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43751)[0m     @     0x560f9cf26b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43751)[0m     @     0x560f9cfb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43751)[0m     @     0x560f9cfb2a20 method_vectorcall
[2m[36m(pid=43751)[0m     @     0x560f9cf26bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43751)[0m     @     0x560f9cfb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43751)[0m     @     0x560f9cfb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43751)[0m     @     0x560f9cf27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43751)[0m     @     0x560f9cfb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43751)[0m     @     0x560f9cfb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43751)[0m     @     0x560f9cf27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43751)[0m     @     0x560f9cfb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43751)[0m     @     0x560f9cfb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43751)[0m     @     0x560f9cf27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43842)[0m     @     0x7fb03e2edc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43842)[0m     @     0x7fb03d78fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43842)[0m     @     0x7fb03d78d388 at::native::copy_impl()
[2m[36m(pid=43842)[0m     @     0x7fb03d78f5a4 at::native::copy_()
[2m[36m(pid=43842)[0m     @     0x7fb03de7a4f5 at::Tensor::copy_()
[2m[36m(pid=43842)[0m     @     0x7fb04034d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43809)[0m     @     0x7f9b3980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43809)[0m     @     0x7f9b3982dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43809)[0m     @     0x7f9b38ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43809)[0m     @     0x7f9b38ccd388 at::native::copy_impl()
[2m[36m(pid=43809)[0m     @     0x7f9b38ccf5a4 at::native::copy_()
[2m[36m(pid=43809)[0m     @     0x7f9b393ba4f5 at::Tensor::copy_()
[2m[36m(pid=43809)[0m     @     0x7f9b3b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43767)[0m     @     0x7f8f8bf507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=43767)[0m     @     0x7f8f8bf538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43767)[0m     @     0x7f8f8bf53ad3 at::TensorIterator::for_each()
[2m[36m(pid=43767)[0m     @     0x7f8f8bf53d91 at::TensorIterator::for_each()
[2m[36m(pid=43755)[0m     @     0x7f33648e55a4 at::native::copy_()
[2m[36m(pid=43755)[0m     @     0x7f3364fd04f5 at::Tensor::copy_()
[2m[36m(pid=43755)[0m     @     0x7f33674a38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43755)[0m     @     0x7f3364fd04f5 at::Tensor::copy_()
[2m[36m(pid=43755)[0m     @     0x7f336b07b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43755)[0m     @     0x562dba9aefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43755)[0m     @     0x562dba909b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43755)[0m     @     0x562dba994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43755)[0m     @     0x562dba995a20 method_vectorcall
[2m[36m(pid=43755)[0m     @     0x562dba909bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43755)[0m     @     0x562dba994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43755)[0m     @     0x562dba995643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43755)[0m     @     0x562dba90a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43755)[0m     @     0x562dba994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43755)[0m     @     0x562dba995643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43755)[0m     @     0x562dba90a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43755)[0m     @     0x562dba994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43755)[0m     @     0x562dba995643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43755)[0m     @     0x562dba90a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43755)[0m     @     0x562dba994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43755)[0m     @     0x562dba995643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43755)[0m     @     0x562dba90a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43804)[0m     @     0x7faa0a42ad91 at::TensorIterator::for_each()
[2m[36m(pid=43804)[0m     @     0x7faa0ad0db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43804)[0m     @     0x7faa0ad30c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43804)[0m     @     0x7faa0a1d2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43804)[0m     @     0x7faa0a1d0388 at::native::copy_impl()
[2m[36m(pid=43804)[0m     @     0x7faa0a1d25a4 at::native::copy_()
[2m[36m(pid=43804)[0m     @     0x7faa0a8bd4f5 at::Tensor::copy_()
[2m[36m(pid=43833)[0m     @     0x7f6b8d0e35a4 at::native::copy_()
[2m[36m(pid=43833)[0m     @     0x7f6b8d7ce4f5 at::Tensor::copy_()
[2m[36m(pid=43833)[0m     @     0x7f6b8fca18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43833)[0m     @     0x7f6b8d7ce4f5 at::Tensor::copy_()
[2m[36m(pid=43833)[0m     @     0x7f6b9387979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43833)[0m     @     0x5643f8ba3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43833)[0m     @     0x5643f8afeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43833)[0m     @     0x5643f8b89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43833)[0m     @     0x5643f8b8aa20 method_vectorcall
[2m[36m(pid=43833)[0m     @     0x5643f8afebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43833)[0m     @     0x5643f8b89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43833)[0m     @     0x5643f8b8a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43833)[0m     @     0x5643f8aff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43833)[0m     @     0x5643f8b89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43833)[0m     @     0x5643f8b8a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43833)[0m     @     0x5643f8aff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43833)[0m     @     0x5643f8b89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43833)[0m     @     0x5643f8b8a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43833)[0m     @     0x5643f8aff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43833)[0m     @     0x5643f8b89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43833)[0m     @     0x5643f8b8a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43833)[0m     @     0x5643f8aff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43801)[0m     @     0x7f081a6fd388 at::native::copy_impl()
[2m[36m(pid=43801)[0m     @     0x7f081a6ff5a4 at::native::copy_()
[2m[36m(pid=43801)[0m     @     0x7f081adea4f5 at::Tensor::copy_()
[2m[36m(pid=43801)[0m     @     0x7f081d2bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43801)[0m     @     0x7f081adea4f5 at::Tensor::copy_()
[2m[36m(pid=43801)[0m     @     0x7f0820e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43801)[0m     @     0x55869b543fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43801)[0m     @     0x55869b49eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43801)[0m     @     0x55869b529baf _PyEval_EvalCodeWithName
[2m[36m(pid=43801)[0m     @     0x55869b52aa20 method_vectorcall
[2m[36m(pid=43801)[0m     @     0x55869b49ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43801)[0m     @     0x55869b529baf _PyEval_EvalCodeWithName
[2m[36m(pid=43801)[0m     @     0x55869b52a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43801)[0m     @     0x55869b49f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43801)[0m     @     0x55869b529baf _PyEval_EvalCodeWithName
[2m[36m(pid=43821)[0m     @     0x7ee4a5552d91 at::TensorIterator::for_each()
[2m[36m(pid=43821)[0m     @     0x7ee4a5e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43821)[0m     @     0x7ee4a5e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43821)[0m     @     0x7ee4a52faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43821)[0m     @     0x7ee4a52f8388 at::native::copy_impl()
[2m[36m(pid=43821)[0m     @     0x7ee4a52fa5a4 at::native::copy_()
[2m[36m(pid=43821)[0m     @     0x7ee4a59e54f5 at::Tensor::copy_()
[2m[36m(pid=43831)[0m     @     0x7ef0eb1b68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=43831)[0m     @     0x7ef0eb1b6ad3 at::TensorIterator::for_each()
[2m[36m(pid=43752)[0m     @     0x7f9b5d0e35a4 at::native::copy_()
[2m[36m(pid=43752)[0m     @     0x7f9b5d7ce4f5 at::Tensor::copy_()
[2m[36m(pid=43752)[0m     @     0x7f9b5fca18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43752)[0m     @     0x7f9b5d7ce4f5 at::Tensor::copy_()
[2m[36m(pid=43752)[0m     @     0x7f9b6387979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43752)[0m     @     0x561f00c2efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43752)[0m     @     0x561f00b89b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43752)[0m     @     0x561f00c14baf _PyEval_EvalCodeWithName
[2m[36m(pid=43752)[0m     @     0x561f00c15a20 method_vectorcall
[2m[36m(pid=43752)[0m     @     0x561f00b89bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43752)[0m     @     0x561f00c14baf _PyEval_EvalCodeWithName
[2m[36m(pid=43752)[0m     @     0x561f00c15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43752)[0m     @     0x561f00b8a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43752)[0m     @     0x561f00c14baf _PyEval_EvalCodeWithName
[2m[36m(pid=43752)[0m     @     0x561f00c15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43752)[0m     @     0x561f00b8a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43752)[0m     @     0x561f00c14baf _PyEval_EvalCodeWithName
[2m[36m(pid=43752)[0m     @     0x561f00c15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43752)[0m     @     0x561f00b8a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43752)[0m     @     0x561f00c14baf _PyEval_EvalCodeWithName
[2m[36m(pid=43752)[0m     @     0x561f00c15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43752)[0m     @     0x561f00b8a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43820)[0m     @     0x7f79b4aba5a4 at::native::copy_()
[2m[36m(pid=43820)[0m     @     0x7f79b51a54f5 at::Tensor::copy_()
[2m[36m(pid=43820)[0m     @     0x7f79b76788de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43820)[0m     @     0x7f79b51a54f5 at::Tensor::copy_()
[2m[36m(pid=43820)[0m     @     0x7f79bb25079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43820)[0m     @     0x55abc5b3cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43820)[0m     @     0x55abc5a97b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43820)[0m     @     0x55abc5b22baf _PyEval_EvalCodeWithName
[2m[36m(pid=43820)[0m     @     0x55abc5b23a20 method_vectorcall
[2m[36m(pid=43820)[0m     @     0x55abc5a97bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43820)[0m     @     0x55abc5b22baf _PyEval_EvalCodeWithName
[2m[36m(pid=43820)[0m     @     0x55abc5b23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43820)[0m     @     0x55abc5a98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43820)[0m     @     0x55abc5b22baf _PyEval_EvalCodeWithName
[2m[36m(pid=43820)[0m     @     0x55abc5b23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43820)[0m     @     0x55abc5a98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43820)[0m     @     0x55abc5b22baf _PyEval_EvalCodeWithName
[2m[36m(pid=43820)[0m     @     0x55abc5b23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43820)[0m     @     0x55abc5a98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43820)[0m     @     0x55abc5b22baf _PyEval_EvalCodeWithName
[2m[36m(pid=43820)[0m     @     0x55abc5b23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43820)[0m     @     0x55abc5a98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43874)[0m     @     0x55ed05909b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43874)[0m     @     0x55ed05994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43874)[0m     @     0x55ed05995a20 method_vectorcall
[2m[36m(pid=43874)[0m     @     0x55ed05909bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43874)[0m     @     0x55ed05994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43874)[0m     @     0x55ed05995643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43874)[0m     @     0x55ed0590a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43874)[0m     @     0x55ed05994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43874)[0m     @     0x55ed05995643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43874)[0m     @     0x55ed0590a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43874)[0m     @     0x55ed05994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43874)[0m     @     0x55ed05995643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43874)[0m     @     0x55ed0590a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43874)[0m     @     0x55ed05994baf _PyEval_EvalCodeWithName
[2m[36m(pid=43874)[0m     @     0x55ed05995643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43874)[0m     @     0x55ed0590a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43770)[0m     @     0x7f768d9cf5a4 at::native::copy_()
[2m[36m(pid=43770)[0m     @     0x7f768e0ba4f5 at::Tensor::copy_()
[2m[36m(pid=43770)[0m     @     0x7f769058d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43770)[0m     @     0x7f768e0ba4f5 at::Tensor::copy_()
[2m[36m(pid=43770)[0m     @     0x7f769416579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43770)[0m     @     0x56122f259fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43770)[0m     @     0x56122f1b4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43770)[0m     @     0x56122f23fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43770)[0m     @     0x56122f240a20 method_vectorcall
[2m[36m(pid=43770)[0m     @     0x56122f1b4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43770)[0m     @     0x56122f23fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43770)[0m     @     0x56122f240643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43770)[0m     @     0x56122f1b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43770)[0m     @     0x56122f23fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43770)[0m     @     0x56122f240643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43770)[0m     @     0x56122f1b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43770)[0m     @     0x56122f23fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43770)[0m     @     0x56122f240643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43770)[0m     @     0x56122f1b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43770)[0m     @     0x56122f23fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43770)[0m     @     0x56122f240643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43770)[0m     @     0x56122f1b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43836)[0m     @     0x7f16e7a774f5 at::Tensor::copy_()
[2m[36m(pid=43836)[0m     @     0x7f16e9f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43836)[0m     @     0x7f16e7a774f5 at::Tensor::copy_()
[2m[36m(pid=43836)[0m     @     0x7f16edb2279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43836)[0m     @     0x5631225f1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43836)[0m     @     0x56312254cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43836)[0m     @     0x5631225d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43836)[0m     @     0x5631225d8a20 method_vectorcall
[2m[36m(pid=43836)[0m     @     0x56312254cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43836)[0m     @     0x5631225d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43836)[0m     @     0x5631225d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43836)[0m     @     0x56312254d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43836)[0m     @     0x5631225d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43836)[0m     @     0x5631225d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43836)[0m     @     0x56312254d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43836)[0m     @     0x5631225d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43836)[0m     @     0x5631225d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43836)[0m     @     0x56312254d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43836)[0m     @     0x5631225d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=43836)[0m     @     0x5631225d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43836)[0m     @     0x56312254d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43766)[0m     @     0x7fcb4f40d4f5 at::Tensor::copy_()
[2m[36m(pid=43766)[0m     @     0x7fcb518e08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43766)[0m     @     0x7fcb4f40d4f5 at::Tensor::copy_()
[2m[36m(pid=43766)[0m     @     0x7fcb554b879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43766)[0m     @     0x55ba64821fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43766)[0m     @     0x55ba6477cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43766)[0m     @     0x55ba64807baf _PyEval_EvalCodeWithName
[2m[36m(pid=43766)[0m     @     0x55ba64808a20 method_vectorcall
[2m[36m(pid=43766)[0m     @     0x55ba6477cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43766)[0m     @     0x55ba64807baf _PyEval_EvalCodeWithName
[2m[36m(pid=43766)[0m     @     0x55ba64808643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43766)[0m     @     0x55ba6477d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43766)[0m     @     0x55ba64807baf _PyEval_EvalCodeWithName
[2m[36m(pid=43766)[0m     @     0x55ba64808643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43766)[0m     @     0x55ba6477d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43766)[0m     @     0x55ba64807baf _PyEval_EvalCodeWithName
[2m[36m(pid=43766)[0m     @     0x55ba64808643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43766)[0m     @     0x55ba6477d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43766)[0m     @     0x55ba64807baf _PyEval_EvalCodeWithName
[2m[36m(pid=43766)[0m     @     0x55ba64808643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43766)[0m     @     0x55ba6477d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43832)[0m     @     0x7f9b9b8b95a4 at::native::copy_()
[2m[36m(pid=43832)[0m     @     0x7f9b9bfa44f5 at::Tensor::copy_()
[2m[36m(pid=43832)[0m     @     0x7f9b9e4778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43832)[0m     @     0x7f9b9bfa44f5 at::Tensor::copy_()
[2m[36m(pid=43832)[0m     @     0x7f9ba204f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43832)[0m     @     0x56045cba3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43832)[0m     @     0x56045cafeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43832)[0m     @     0x56045cb89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43832)[0m     @     0x56045cb8aa20 method_vectorcall
[2m[36m(pid=43832)[0m     @     0x56045cafebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43832)[0m     @     0x56045cb89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43832)[0m     @     0x56045cb8a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43832)[0m     @     0x56045caff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43832)[0m     @     0x56045cb89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43832)[0m     @     0x56045cb8a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43832)[0m     @     0x56045caff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43832)[0m     @     0x56045cb89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43832)[0m     @     0x56045cb8a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43832)[0m     @     0x56045caff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43832)[0m     @     0x56045cb89baf _PyEval_EvalCodeWithName
[2m[36m(pid=43832)[0m     @     0x56045cb8a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43832)[0m     @     0x56045caff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43796)[0m     @     0x7f6f3d9e54f5 at::Tensor::copy_()
[2m[36m(pid=43796)[0m     @     0x7f6f3feb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43796)[0m     @     0x7f6f3d9e54f5 at::Tensor::copy_()
[2m[36m(pid=43796)[0m     @     0x7f6f43a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43796)[0m     @     0x557e6e254fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43796)[0m     @     0x557e6e1afb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43796)[0m     @     0x557e6e23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43796)[0m     @     0x557e6e23ba20 method_vectorcall
[2m[36m(pid=43796)[0m     @     0x557e6e1afbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43796)[0m     @     0x557e6e23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43796)[0m     @     0x557e6e23b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43796)[0m     @     0x557e6e1b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43796)[0m     @     0x557e6e23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43796)[0m     @     0x557e6e23b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43796)[0m     @     0x557e6e1b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43796)[0m     @     0x557e6e23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43796)[0m     @     0x557e6e23b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43796)[0m     @     0x557e6e1b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43796)[0m     @     0x557e6e23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43796)[0m     @     0x557e6e23b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43796)[0m     @     0x557e6e1b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43841)[0m     @     0x564f00e9e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43841)[0m     @     0x564f00f28baf _PyEval_EvalCodeWithName
[2m[36m(pid=43841)[0m     @     0x564f00f29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43841)[0m     @     0x564f00e9e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43841)[0m     @     0x564f00f28baf _PyEval_EvalCodeWithName
[2m[36m(pid=43841)[0m     @     0x564f00f29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43841)[0m     @     0x564f00e9e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43775)[0m     @     0x7fc2f753b4f5 at::Tensor::copy_()
[2m[36m(pid=43775)[0m     @     0x7fc2f9a0e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43775)[0m     @     0x7fc2f753b4f5 at::Tensor::copy_()
[2m[36m(pid=43775)[0m     @     0x7fc2fd5e679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43775)[0m     @     0x55e02eeb5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43775)[0m     @     0x55e02ee10b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43775)[0m     @     0x55e02ee9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43775)[0m     @     0x55e02ee9ca20 method_vectorcall
[2m[36m(pid=43775)[0m     @     0x55e02ee10bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43775)[0m     @     0x55e02ee9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43775)[0m     @     0x55e02ee9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43775)[0m     @     0x55e02ee11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43775)[0m     @     0x55e02ee9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43775)[0m     @     0x55e02ee9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43775)[0m     @     0x55e02ee11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43775)[0m     @     0x55e02ee9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43775)[0m     @     0x55e02ee9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43775)[0m     @     0x55e02ee11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43775)[0m     @     0x55e02ee9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43775)[0m     @     0x55e02ee9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43775)[0m     @     0x55e02ee11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43741)[0m     @     0x7f18067d64f5 at::Tensor::copy_()
[2m[36m(pid=43741)[0m     @     0x7f180c47779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43741)[0m     @     0x55d3b7fc3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43741)[0m     @     0x55d3b7f1eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43741)[0m     @     0x55d3b7fa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43741)[0m     @     0x55d3b7faaa20 method_vectorcall
[2m[36m(pid=43741)[0m     @     0x55d3b7f1ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43741)[0m     @     0x55d3b7fa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43741)[0m     @     0x55d3b7faa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43741)[0m     @     0x55d3b7f1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43741)[0m     @     0x55d3b7fa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43741)[0m     @     0x55d3b7faa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43741)[0m     @     0x55d3b7f1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43741)[0m     @     0x55d3b7fa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43741)[0m     @     0x55d3b7faa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43741)[0m     @     0x55d3b7f1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43741)[0m     @     0x55d3b7fa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=43741)[0m     @     0x55d3b7faa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43741)[0m     @     0x55d3b7f1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43745)[0m     @     0x7ee6979b14f5 at::Tensor::copy_()
[2m[36m(pid=43745)[0m     @     0x7ee69da5c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43745)[0m     @     0x56155fbb5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43745)[0m     @     0x56155fb10b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43745)[0m     @     0x56155fb9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43745)[0m     @     0x56155fb9ca20 method_vectorcall
[2m[36m(pid=43745)[0m     @     0x56155fb10bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43745)[0m     @     0x56155fb9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43745)[0m     @     0x56155fb9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43745)[0m     @     0x56155fb11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43745)[0m     @     0x56155fb9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43745)[0m     @     0x56155fb9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43745)[0m     @     0x56155fb11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43745)[0m     @     0x56155fb9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43745)[0m     @     0x56155fb9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43745)[0m     @     0x56155fb11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43745)[0m     @     0x56155fb9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43745)[0m     @     0x56155fb9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43745)[0m     @     0x56155fb11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43758)[0m     @     0x7f4d20bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43758)[0m     @     0x7f4d20bc8388 at::native::copy_impl()
[2m[36m(pid=43758)[0m     @     0x7f4d20bca5a4 at::native::copy_()
[2m[36m(pid=43758)[0m     @     0x7f4d212b54f5 at::Tensor::copy_()
[2m[36m(pid=43758)[0m     @     0x7f4d237888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43758)[0m     @     0x7f4d212b54f5 at::Tensor::copy_()
[2m[36m(pid=43758)[0m     @     0x7f4d2736079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43758)[0m     @     0x55b1be890fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43758)[0m     @     0x55b1be7ebb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43758)[0m     @     0x55b1be876baf _PyEval_EvalCodeWithName
[2m[36m(pid=43758)[0m     @     0x55b1be877a20 method_vectorcall
[2m[36m(pid=43758)[0m     @     0x55b1be7ebbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43758)[0m     @     0x55b1be876baf _PyEval_EvalCodeWithName
[2m[36m(pid=43758)[0m     @     0x55b1be877643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43758)[0m     @     0x55b1be7ec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43758)[0m     @     0x55b1be876baf _PyEval_EvalCodeWithName
[2m[36m(pid=43758)[0m     @     0x55b1be877643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43758)[0m     @     0x55b1be7ec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43758)[0m     @     0x55b1be876baf _PyEval_EvalCodeWithName
[2m[36m(pid=43758)[0m     @     0x55b1be877643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43758)[0m     @     0x55b1be7ec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43758)[0m     @     0x55b1be876baf _PyEval_EvalCodeWithName
[2m[36m(pid=43758)[0m     @     0x55b1be877643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43758)[0m     @     0x55b1be7ec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43808)[0m     @     0x7fbd6f6894f5 at::Tensor::copy_()
[2m[36m(pid=43808)[0m     @     0x7fbd71b5c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43808)[0m     @     0x7fbd6f6894f5 at::Tensor::copy_()
[2m[36m(pid=43808)[0m     @     0x7fbd7573479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43808)[0m     @     0x55e9af1e0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43808)[0m     @     0x55e9af13bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43808)[0m     @     0x55e9af1c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=43808)[0m     @     0x55e9af1c7a20 method_vectorcall
[2m[36m(pid=43808)[0m     @     0x55e9af13bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43808)[0m     @     0x55e9af1c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=43808)[0m     @     0x55e9af1c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43808)[0m     @     0x55e9af13c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43808)[0m     @     0x55e9af1c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=43808)[0m     @     0x55e9af1c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43808)[0m     @     0x55e9af13c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43808)[0m     @     0x55e9af1c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=43808)[0m     @     0x55e9af1c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43808)[0m     @     0x55e9af13c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43808)[0m     @     0x55e9af1c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=43808)[0m     @     0x55e9af1c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43808)[0m     @     0x55e9af13c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43743)[0m     @     0x7efade99f4f5 at::Tensor::copy_()
[2m[36m(pid=43743)[0m     @     0x7efae0e728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43743)[0m     @     0x7efade99f4f5 at::Tensor::copy_()
[2m[36m(pid=43743)[0m     @     0x7efae4a4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43743)[0m     @     0x5566747ccfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43743)[0m     @     0x556674727b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43743)[0m     @     0x5566747b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=43743)[0m     @     0x5566747b3a20 method_vectorcall
[2m[36m(pid=43743)[0m     @     0x556674727bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43743)[0m     @     0x5566747b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=43743)[0m     @     0x5566747b3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43743)[0m     @     0x556674728689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43743)[0m     @     0x5566747b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=43743)[0m     @     0x5566747b3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43743)[0m     @     0x556674728689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43743)[0m     @     0x5566747b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=43743)[0m     @     0x5566747b3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43743)[0m     @     0x556674728689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43743)[0m     @     0x5566747b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=43743)[0m     @     0x5566747b3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43743)[0m     @     0x556674728689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43740)[0m     @     0x7f14a9f564f5 at::Tensor::copy_()
[2m[36m(pid=43740)[0m     @     0x7f14ac4298de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43740)[0m     @     0x7f14a9f564f5 at::Tensor::copy_()
[2m[36m(pid=43740)[0m     @     0x7f14b000179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43740)[0m     @     0x55f904283fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43740)[0m     @     0x55f9041deb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43740)[0m     @     0x55f904269baf _PyEval_EvalCodeWithName
[2m[36m(pid=43740)[0m     @     0x55f90426aa20 method_vectorcall
[2m[36m(pid=43740)[0m     @     0x55f9041debfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43740)[0m     @     0x55f904269baf _PyEval_EvalCodeWithName
[2m[36m(pid=43740)[0m     @     0x55f90426a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43740)[0m     @     0x55f9041df689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43740)[0m     @     0x55f904269baf _PyEval_EvalCodeWithName
[2m[36m(pid=43740)[0m     @     0x55f90426a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43740)[0m     @     0x55f9041df689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43740)[0m     @     0x55f904269baf _PyEval_EvalCodeWithName
[2m[36m(pid=43740)[0m     @     0x55f90426a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43740)[0m     @     0x55f9041df689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43740)[0m     @     0x55f904269baf _PyEval_EvalCodeWithName
[2m[36m(pid=43740)[0m     @     0x55f90426a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43740)[0m     @     0x55f9041df689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43765)[0m     @     0x7f524bbdd4f5 at::Tensor::copy_()
[2m[36m(pid=43765)[0m     @     0x7f524e0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43765)[0m     @     0x7f524bbdd4f5 at::Tensor::copy_()
[2m[36m(pid=43765)[0m     @     0x7f5251c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43765)[0m     @     0x5600e2562fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43765)[0m     @     0x5600e24bdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43765)[0m     @     0x5600e2548baf _PyEval_EvalCodeWithName
[2m[36m(pid=43765)[0m     @     0x5600e2549a20 method_vectorcall
[2m[36m(pid=43765)[0m     @     0x5600e24bdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43765)[0m     @     0x5600e2548baf _PyEval_EvalCodeWithName
[2m[36m(pid=43765)[0m     @     0x5600e2549643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43765)[0m     @     0x5600e24be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43765)[0m     @     0x5600e2548baf _PyEval_EvalCodeWithName
[2m[36m(pid=43765)[0m     @     0x5600e2549643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43765)[0m     @     0x5600e24be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43765)[0m     @     0x5600e2548baf _PyEval_EvalCodeWithName
[2m[36m(pid=43765)[0m     @     0x5600e2549643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43765)[0m     @     0x5600e24be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43765)[0m     @     0x5600e2548baf _PyEval_EvalCodeWithName
[2m[36m(pid=43765)[0m     @     0x5600e2549643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43765)[0m     @     0x5600e24be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43761)[0m     @     0x7f14a8b104f5 at::Tensor::copy_()
[2m[36m(pid=43761)[0m     @     0x7f14aebbb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43761)[0m     @     0x55cb366fffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43761)[0m     @     0x55cb3665ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43761)[0m     @     0x55cb366e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=43761)[0m     @     0x55cb366e6a20 method_vectorcall
[2m[36m(pid=43761)[0m     @     0x55cb3665abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43761)[0m     @     0x55cb366e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=43761)[0m     @     0x55cb366e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43761)[0m     @     0x55cb3665b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43761)[0m     @     0x55cb366e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=43761)[0m     @     0x55cb366e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43761)[0m     @     0x55cb3665b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43761)[0m     @     0x55cb366e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=43761)[0m     @     0x55cb366e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43761)[0m     @     0x55cb3665b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43761)[0m     @     0x55cb366e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=43761)[0m     @     0x55cb366e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43761)[0m     @     0x55cb3665b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43744)[0m     @     0x7fbfc0011a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43744)[0m     @     0x7fbfc000f388 at::native::copy_impl()
[2m[36m(pid=43744)[0m     @     0x7fbfc00115a4 at::native::copy_()
[2m[36m(pid=43744)[0m     @     0x7fbfc06fc4f5 at::Tensor::copy_()
[2m[36m(pid=43744)[0m     @     0x7fbfc2bcf8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43744)[0m     @     0x7fbfc06fc4f5 at::Tensor::copy_()
[2m[36m(pid=43815)[0m     @     0x7ed869f264f5 at::Tensor::copy_()
[2m[36m(pid=43815)[0m     @     0x7ed86c3f98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43815)[0m     @     0x7ed869f264f5 at::Tensor::copy_()
[2m[36m(pid=43815)[0m     @     0x7ed86ffd179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43815)[0m     @     0x560016dd2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43815)[0m     @     0x560016d2db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43815)[0m     @     0x560016db8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43815)[0m     @     0x560016db9a20 method_vectorcall
[2m[36m(pid=43815)[0m     @     0x560016d2dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43815)[0m     @     0x560016db8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43815)[0m     @     0x560016db9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43815)[0m     @     0x560016d2e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43815)[0m     @     0x560016db8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43815)[0m     @     0x560016db9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43815)[0m     @     0x560016d2e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43815)[0m     @     0x560016db8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43815)[0m     @     0x560016db9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43815)[0m     @     0x560016d2e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43815)[0m     @     0x560016db8baf _PyEval_EvalCodeWithName
[2m[36m(pid=43815)[0m     @     0x560016db9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43815)[0m     @     0x560016d2e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43839)[0m     @     0x7f67aa1cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43839)[0m     @     0x56405825afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43839)[0m     @     0x5640581b5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43839)[0m     @     0x564058240baf _PyEval_EvalCodeWithName
[2m[36m(pid=43839)[0m     @     0x564058241a20 method_vectorcall
[2m[36m(pid=43839)[0m     @     0x5640581b5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43839)[0m     @     0x564058240baf _PyEval_EvalCodeWithName
[2m[36m(pid=43839)[0m     @     0x564058241643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43839)[0m     @     0x5640581b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43839)[0m     @     0x564058240baf _PyEval_EvalCodeWithName
[2m[36m(pid=43839)[0m     @     0x564058241643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43839)[0m     @     0x5640581b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43839)[0m     @     0x564058240baf _PyEval_EvalCodeWithName
[2m[36m(pid=43839)[0m     @     0x564058241643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43839)[0m     @     0x5640581b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43839)[0m     @     0x564058240baf _PyEval_EvalCodeWithName
[2m[36m(pid=43839)[0m     @     0x564058241643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43839)[0m     @     0x5640581b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43756)[0m     @     0x7f183ce9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43756)[0m     @     0x56327c294fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43756)[0m     @     0x56327c1efb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43756)[0m     @     0x56327c27abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43756)[0m     @     0x56327c27ba20 method_vectorcall
[2m[36m(pid=43756)[0m     @     0x56327c1efbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43756)[0m     @     0x56327c27abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43756)[0m     @     0x56327c27b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43756)[0m     @     0x56327c1f0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43756)[0m     @     0x56327c27abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43756)[0m     @     0x56327c27b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43756)[0m     @     0x56327c1f0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43756)[0m     @     0x56327c27abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43756)[0m     @     0x56327c27b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43756)[0m     @     0x56327c1f0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43756)[0m     @     0x56327c27abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43756)[0m     @     0x56327c27b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43756)[0m     @     0x56327c1f0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43848)[0m     @     0x7f35f4efb4f5 at::Tensor::copy_()
[2m[36m(pid=43848)[0m     @     0x7f35fafa679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43848)[0m     @     0x55f733fc8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43848)[0m     @     0x55f733f23b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43848)[0m     @     0x55f733faebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43848)[0m     @     0x55f733fafa20 method_vectorcall
[2m[36m(pid=43848)[0m     @     0x55f733f23bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43848)[0m     @     0x55f733faebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43848)[0m     @     0x55f733faf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43848)[0m     @     0x55f733f24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43848)[0m     @     0x55f733faebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43848)[0m     @     0x55f733faf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43848)[0m     @     0x55f733f24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43848)[0m     @     0x55f733faebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43848)[0m     @     0x55f733faf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43848)[0m     @     0x55f733f24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43848)[0m     @     0x55f733faebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43848)[0m     @     0x55f733faf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43848)[0m     @     0x55f733f24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43845)[0m     @     0x7efc831e04f5 at::Tensor::copy_()
[2m[36m(pid=43845)[0m     @     0x7efc8928b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43845)[0m     @     0x55ebbba4afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43845)[0m     @     0x55ebbb9a5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43845)[0m     @     0x55ebbba30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43845)[0m     @     0x55ebbba31a20 method_vectorcall
[2m[36m(pid=43845)[0m     @     0x55ebbb9a5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43845)[0m     @     0x55ebbba30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43845)[0m     @     0x55ebbba31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43845)[0m     @     0x55ebbb9a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43845)[0m     @     0x55ebbba30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43845)[0m     @     0x55ebbba31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43845)[0m     @     0x55ebbb9a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43845)[0m     @     0x55ebbba30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43845)[0m     @     0x55ebbba31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43845)[0m     @     0x55ebbb9a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43845)[0m     @     0x55ebbba30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43845)[0m     @     0x55ebbba31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43845)[0m     @     0x55ebbb9a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43853)[0m     @     0x7fb12f2a079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43853)[0m     @     0x557bbd9a1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43853)[0m     @     0x557bbd8fcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43853)[0m     @     0x557bbd987baf _PyEval_EvalCodeWithName
[2m[36m(pid=43853)[0m     @     0x557bbd988a20 method_vectorcall
[2m[36m(pid=43853)[0m     @     0x557bbd8fcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43853)[0m     @     0x557bbd987baf _PyEval_EvalCodeWithName
[2m[36m(pid=43853)[0m     @     0x557bbd988643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43853)[0m     @     0x557bbd8fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43853)[0m     @     0x557bbd987baf _PyEval_EvalCodeWithName
[2m[36m(pid=43853)[0m     @     0x557bbd988643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43853)[0m     @     0x557bbd8fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43853)[0m     @     0x557bbd987baf _PyEval_EvalCodeWithName
[2m[36m(pid=43853)[0m     @     0x557bbd988643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43853)[0m     @     0x557bbd8fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43853)[0m     @     0x557bbd987baf _PyEval_EvalCodeWithName
[2m[36m(pid=43853)[0m     @     0x557bbd988643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43853)[0m     @     0x557bbd8fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43754)[0m     @     0x7f646180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43754)[0m     @     0x7f646182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43754)[0m     @     0x7f6460ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43754)[0m     @     0x7f6460ccd388 at::native::copy_impl()
[2m[36m(pid=43805)[0m     @     0x7f322749f4f5 at::Tensor::copy_()
[2m[36m(pid=43805)[0m     @     0x7f322d54a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43805)[0m     @     0x55c55cc0bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43805)[0m     @     0x55c55cb66b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43805)[0m     @     0x55c55cbf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43805)[0m     @     0x55c55cbf2a20 method_vectorcall
[2m[36m(pid=43805)[0m     @     0x55c55cb66bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43805)[0m     @     0x55c55cbf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43805)[0m     @     0x55c55cbf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43805)[0m     @     0x55c55cb67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43805)[0m     @     0x55c55cbf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43805)[0m     @     0x55c55cbf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43805)[0m     @     0x55c55cb67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43805)[0m     @     0x55c55cbf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43805)[0m     @     0x55c55cbf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43805)[0m     @     0x55c55cb67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43805)[0m     @     0x55c55cbf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43805)[0m     @     0x55c55cbf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43805)[0m     @     0x55c55cb67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43862)[0m     @     0x7f0854a938de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43862)[0m     @     0x7f08525c04f5 at::Tensor::copy_()
[2m[36m(pid=43862)[0m     @     0x7f085866b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43862)[0m     @     0x55603f741fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43862)[0m     @     0x55603f69cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43862)[0m     @     0x55603f727baf _PyEval_EvalCodeWithName
[2m[36m(pid=43862)[0m     @     0x55603f728a20 method_vectorcall
[2m[36m(pid=43862)[0m     @     0x55603f69cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43862)[0m     @     0x55603f727baf _PyEval_EvalCodeWithName
[2m[36m(pid=43862)[0m     @     0x55603f728643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43862)[0m     @     0x55603f69d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43862)[0m     @     0x55603f727baf _PyEval_EvalCodeWithName
[2m[36m(pid=43862)[0m     @     0x55603f728643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43862)[0m     @     0x55603f69d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43862)[0m     @     0x55603f727baf _PyEval_EvalCodeWithName
[2m[36m(pid=43862)[0m     @     0x55603f728643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43862)[0m     @     0x55603f69d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43862)[0m     @     0x55603f727baf _PyEval_EvalCodeWithName
[2m[36m(pid=43862)[0m     @     0x55603f728643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43862)[0m     @     0x55603f69d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43822)[0m     @     0x7ee3c98215a4 at::native::copy_()
[2m[36m(pid=43822)[0m     @     0x7ee3c9f0c4f5 at::Tensor::copy_()
[2m[36m(pid=43822)[0m     @     0x7ee3cc3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43798)[0m     @     0x7f7f08e22d91 at::TensorIterator::for_each()
[2m[36m(pid=43798)[0m     @     0x7f7f09705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43798)[0m     @     0x7f7f09728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43798)[0m     @     0x7f7f08bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43798)[0m     @     0x7f7f08bc8388 at::native::copy_impl()
[2m[36m(pid=43816)[0m     @     0x7f06fadea4f5 at::Tensor::copy_()
[2m[36m(pid=43816)[0m     @     0x7f0700e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43816)[0m     @     0x55d8bc26afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43816)[0m     @     0x55d8bc1c5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43816)[0m     @     0x55d8bc250baf _PyEval_EvalCodeWithName
[2m[36m(pid=43816)[0m     @     0x55d8bc251a20 method_vectorcall
[2m[36m(pid=43816)[0m     @     0x55d8bc1c5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43816)[0m     @     0x55d8bc250baf _PyEval_EvalCodeWithName
[2m[36m(pid=43816)[0m     @     0x55d8bc251643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43816)[0m     @     0x55d8bc1c6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43816)[0m     @     0x55d8bc250baf _PyEval_EvalCodeWithName
[2m[36m(pid=43816)[0m     @     0x55d8bc251643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43816)[0m     @     0x55d8bc1c6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43816)[0m     @     0x55d8bc250baf _PyEval_EvalCodeWithName
[2m[36m(pid=43816)[0m     @     0x55d8bc251643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43816)[0m     @     0x55d8bc1c6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43816)[0m     @     0x55d8bc250baf _PyEval_EvalCodeWithName
[2m[36m(pid=43816)[0m     @     0x55d8bc251643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43816)[0m     @     0x55d8bc1c6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43814)[0m     @     0x7fb36cc53c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43814)[0m     @     0x7fb36c0f5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43814)[0m     @     0x7fb36c0f3388 at::native::copy_impl()
[2m[36m(pid=43814)[0m     @     0x7fb36c0f55a4 at::native::copy_()
[2m[36m(pid=43751)[0m     @     0x560f9cfb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=43751)[0m     @     0x560f9cfb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43751)[0m     @     0x560f9cf27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43842)[0m     @     0x7fb03de7a4f5 at::Tensor::copy_()
[2m[36m(pid=43842)[0m     @     0x7fb043f2579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43842)[0m     @     0x559c68c63fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43842)[0m     @     0x559c68bbeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43842)[0m     @     0x559c68c49baf _PyEval_EvalCodeWithName
[2m[36m(pid=43842)[0m     @     0x559c68c4aa20 method_vectorcall
[2m[36m(pid=43842)[0m     @     0x559c68bbebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43842)[0m     @     0x559c68c49baf _PyEval_EvalCodeWithName
[2m[36m(pid=43842)[0m     @     0x559c68c4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43842)[0m     @     0x559c68bbf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43842)[0m     @     0x559c68c49baf _PyEval_EvalCodeWithName
[2m[36m(pid=43842)[0m     @     0x559c68c4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43842)[0m     @     0x559c68bbf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43842)[0m     @     0x559c68c49baf _PyEval_EvalCodeWithName
[2m[36m(pid=43842)[0m     @     0x559c68c4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43842)[0m     @     0x559c68bbf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43842)[0m     @     0x559c68c49baf _PyEval_EvalCodeWithName
[2m[36m(pid=43842)[0m     @     0x559c68c4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43842)[0m     @     0x559c68bbf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43809)[0m     @     0x7f9b393ba4f5 at::Tensor::copy_()
[2m[36m(pid=43809)[0m     @     0x7f9b3f46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43809)[0m     @     0x55a73ef7efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43809)[0m     @     0x55a73eed9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43809)[0m     @     0x55a73ef64baf _PyEval_EvalCodeWithName
[2m[36m(pid=43809)[0m     @     0x55a73ef65a20 method_vectorcall
[2m[36m(pid=43809)[0m     @     0x55a73eed9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43809)[0m     @     0x55a73ef64baf _PyEval_EvalCodeWithName
[2m[36m(pid=43809)[0m     @     0x55a73ef65643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43809)[0m     @     0x55a73eeda689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43809)[0m     @     0x55a73ef64baf _PyEval_EvalCodeWithName
[2m[36m(pid=43809)[0m     @     0x55a73ef65643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43809)[0m     @     0x55a73eeda689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43809)[0m     @     0x55a73ef64baf _PyEval_EvalCodeWithName
[2m[36m(pid=43809)[0m     @     0x55a73ef65643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43809)[0m     @     0x55a73eeda689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43809)[0m     @     0x55a73ef64baf _PyEval_EvalCodeWithName
[2m[36m(pid=43809)[0m     @     0x55a73ef65643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43809)[0m     @     0x55a73eeda689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43767)[0m     @     0x7f8f8c836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43767)[0m     @     0x7f8f8c859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43767)[0m     @     0x7f8f8bcfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43767)[0m     @     0x7f8f8bcf9388 at::native::copy_impl()
[2m[36m(pid=43767)[0m     @     0x7f8f8bcfb5a4 at::native::copy_()
[2m[36m(pid=43767)[0m     @     0x7f8f8c3e64f5 at::Tensor::copy_()
[2m[36m(pid=43804)[0m     @     0x7faa0cd908de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43804)[0m     @     0x7faa0a8bd4f5 at::Tensor::copy_()
[2m[36m(pid=43804)[0m     @     0x7faa1096879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43804)[0m     @     0x557e35d4afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43804)[0m     @     0x557e35ca5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43804)[0m     @     0x557e35d30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43804)[0m     @     0x557e35d31a20 method_vectorcall
[2m[36m(pid=43804)[0m     @     0x557e35ca5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43804)[0m     @     0x557e35d30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43804)[0m     @     0x557e35d31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43804)[0m     @     0x557e35ca6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43804)[0m     @     0x557e35d30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43804)[0m     @     0x557e35d31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43804)[0m     @     0x557e35ca6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43804)[0m     @     0x557e35d30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43804)[0m     @     0x557e35d31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43804)[0m     @     0x557e35ca6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43804)[0m     @     0x557e35d30baf _PyEval_EvalCodeWithName
[2m[36m(pid=43804)[0m     @     0x557e35d31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43804)[0m     @     0x557e35ca6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43801)[0m     @     0x55869b52a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43801)[0m     @     0x55869b49f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43801)[0m     @     0x55869b529baf _PyEval_EvalCodeWithName
[2m[36m(pid=43801)[0m     @     0x55869b52a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43801)[0m     @     0x55869b49f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43801)[0m     @     0x55869b529baf _PyEval_EvalCodeWithName
[2m[36m(pid=43801)[0m     @     0x55869b52a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43801)[0m     @     0x55869b49f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43821)[0m     @     0x7ee4a7eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43821)[0m     @     0x7ee4a59e54f5 at::Tensor::copy_()
[2m[36m(pid=43821)[0m     @     0x7ee4aba9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43821)[0m     @     0x555950079fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43821)[0m     @     0x55594ffd4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43821)[0m     @     0x55595005fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43821)[0m     @     0x555950060a20 method_vectorcall
[2m[36m(pid=43821)[0m     @     0x55594ffd4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43821)[0m     @     0x55595005fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43821)[0m     @     0x555950060643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43821)[0m     @     0x55594ffd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43821)[0m     @     0x55595005fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43821)[0m     @     0x555950060643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43821)[0m     @     0x55594ffd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43821)[0m     @     0x55595005fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43821)[0m     @     0x555950060643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43821)[0m     @     0x55594ffd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43821)[0m     @     0x55595005fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=43821)[0m     @     0x555950060643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43821)[0m     @     0x55594ffd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43831)[0m     @     0x7ef0eb1b6d91 at::TensorIterator::for_each()
[2m[36m(pid=43831)[0m     @     0x7ef0eba99b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=43831)[0m     @     0x7ef0ebabcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=43831)[0m     @     0x7ef0eaf5ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=43831)[0m     @     0x7ef0eaf5c388 at::native::copy_impl()
[2m[36m(pid=43744)[0m     @     0x7fbfc67a779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43744)[0m     @     0x5592d1468fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43744)[0m     @     0x5592d13c3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43744)[0m     @     0x5592d144ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43744)[0m     @     0x5592d144fa20 method_vectorcall
[2m[36m(pid=43744)[0m     @     0x5592d13c3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43744)[0m     @     0x5592d144ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43744)[0m     @     0x5592d144f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43744)[0m     @     0x5592d13c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43744)[0m     @     0x5592d144ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43744)[0m     @     0x5592d144f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43744)[0m     @     0x5592d13c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43744)[0m     @     0x5592d144ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43744)[0m     @     0x5592d144f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43744)[0m     @     0x5592d13c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43744)[0m     @     0x5592d144ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=43744)[0m     @     0x5592d144f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43744)[0m     @     0x5592d13c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43754)[0m     @     0x7f6460ccf5a4 at::native::copy_()
[2m[36m(pid=43754)[0m     @     0x7f64613ba4f5 at::Tensor::copy_()
[2m[36m(pid=43754)[0m     @     0x7f646388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43822)[0m     @     0x7ee3c9f0c4f5 at::Tensor::copy_()
[2m[36m(pid=43822)[0m     @     0x7ee3cffb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43822)[0m     @     0x55fa1795efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43822)[0m     @     0x55fa178b9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43822)[0m     @     0x55fa17944baf _PyEval_EvalCodeWithName
[2m[36m(pid=43822)[0m     @     0x55fa17945a20 method_vectorcall
[2m[36m(pid=43822)[0m     @     0x55fa178b9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43822)[0m     @     0x55fa17944baf _PyEval_EvalCodeWithName
[2m[36m(pid=43822)[0m     @     0x55fa17945643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43822)[0m     @     0x55fa178ba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43822)[0m     @     0x55fa17944baf _PyEval_EvalCodeWithName
[2m[36m(pid=43822)[0m     @     0x55fa17945643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43822)[0m     @     0x55fa178ba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43822)[0m     @     0x55fa17944baf _PyEval_EvalCodeWithName
[2m[36m(pid=43822)[0m     @     0x55fa17945643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43822)[0m     @     0x55fa178ba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43822)[0m     @     0x55fa17944baf _PyEval_EvalCodeWithName
[2m[36m(pid=43822)[0m     @     0x55fa17945643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43822)[0m     @     0x55fa178ba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43798)[0m     @     0x7f7f08bca5a4 at::native::copy_()
[2m[36m(pid=43798)[0m     @     0x7f7f092b54f5 at::Tensor::copy_()
[2m[36m(pid=43798)[0m     @     0x7f7f0b7888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43798)[0m     @     0x7f7f092b54f5 at::Tensor::copy_()
[2m[36m(pid=43814)[0m     @     0x7fb36c7e04f5 at::Tensor::copy_()
[2m[36m(pid=43814)[0m     @     0x7fb36ecb38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43814)[0m     @     0x7fb36c7e04f5 at::Tensor::copy_()
[2m[36m(pid=43814)[0m     @     0x7fb37288b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43814)[0m     @     0x55fcbaa64fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43814)[0m     @     0x55fcba9bfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43814)[0m     @     0x55fcbaa4abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43814)[0m     @     0x55fcbaa4ba20 method_vectorcall
[2m[36m(pid=43814)[0m     @     0x55fcba9bfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43814)[0m     @     0x55fcbaa4abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43767)[0m     @     0x7f8f8e8b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43767)[0m     @     0x7f8f8c3e64f5 at::Tensor::copy_()
[2m[36m(pid=43767)[0m     @     0x7f8f9249179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43767)[0m     @     0x559b7d5eefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43767)[0m     @     0x559b7d549b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43767)[0m     @     0x559b7d5d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=43767)[0m     @     0x559b7d5d5a20 method_vectorcall
[2m[36m(pid=43767)[0m     @     0x559b7d549bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43767)[0m     @     0x559b7d5d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=43767)[0m     @     0x559b7d5d5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43767)[0m     @     0x559b7d54a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43767)[0m     @     0x559b7d5d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=43767)[0m     @     0x559b7d5d5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43767)[0m     @     0x559b7d54a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43767)[0m     @     0x559b7d5d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=43767)[0m     @     0x559b7d5d5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43767)[0m     @     0x559b7d54a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43767)[0m     @     0x559b7d5d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=43767)[0m     @     0x559b7d5d5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43767)[0m     @     0x559b7d54a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43831)[0m     @     0x7ef0eaf5e5a4 at::native::copy_()
[2m[36m(pid=43831)[0m     @     0x7ef0eb6494f5 at::Tensor::copy_()
[2m[36m(pid=43831)[0m     @     0x7ef0edb1c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=43754)[0m     @     0x7f64613ba4f5 at::Tensor::copy_()
[2m[36m(pid=43754)[0m     @     0x7f646746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43754)[0m     @     0x564ef3c8bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43754)[0m     @     0x564ef3be6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43754)[0m     @     0x564ef3c71baf _PyEval_EvalCodeWithName
[2m[36m(pid=43754)[0m     @     0x564ef3c72a20 method_vectorcall
[2m[36m(pid=43754)[0m     @     0x564ef3be6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43754)[0m     @     0x564ef3c71baf _PyEval_EvalCodeWithName
[2m[36m(pid=43754)[0m     @     0x564ef3c72643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43754)[0m     @     0x564ef3be7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43754)[0m     @     0x564ef3c71baf _PyEval_EvalCodeWithName
[2m[36m(pid=43754)[0m     @     0x564ef3c72643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43754)[0m     @     0x564ef3be7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43754)[0m     @     0x564ef3c71baf _PyEval_EvalCodeWithName
[2m[36m(pid=43754)[0m     @     0x564ef3c72643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43754)[0m     @     0x564ef3be7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43754)[0m     @     0x564ef3c71baf _PyEval_EvalCodeWithName
[2m[36m(pid=43754)[0m     @     0x564ef3c72643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43754)[0m     @     0x564ef3be7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43798)[0m     @     0x7f7f0f36079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43798)[0m     @     0x564dab2f4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43798)[0m     @     0x564dab24fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43798)[0m     @     0x564dab2dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=43798)[0m     @     0x564dab2dba20 method_vectorcall
[2m[36m(pid=43798)[0m     @     0x564dab24fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43798)[0m     @     0x564dab2dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=43798)[0m     @     0x564dab2db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43798)[0m     @     0x564dab250689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43798)[0m     @     0x564dab2dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=43798)[0m     @     0x564dab2db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43798)[0m     @     0x564dab250689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43798)[0m     @     0x564dab2dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=43798)[0m     @     0x564dab2db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43798)[0m     @     0x564dab250689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43798)[0m     @     0x564dab2dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=43798)[0m     @     0x564dab2db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43798)[0m     @     0x564dab250689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43814)[0m     @     0x55fcbaa4b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43814)[0m     @     0x55fcba9c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43814)[0m     @     0x55fcbaa4abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43814)[0m     @     0x55fcbaa4b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43814)[0m     @     0x55fcba9c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43814)[0m     @     0x55fcbaa4abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43814)[0m     @     0x55fcbaa4b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43814)[0m     @     0x55fcba9c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43814)[0m     @     0x55fcbaa4abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43814)[0m     @     0x55fcbaa4b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43814)[0m     @     0x55fcba9c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43831)[0m     @     0x7ef0eb6494f5 at::Tensor::copy_()
[2m[36m(pid=43831)[0m     @     0x7ef0f16f479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=43831)[0m     @     0x55e79a254fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=43831)[0m     @     0x55e79a1afb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43831)[0m     @     0x55e79a23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43831)[0m     @     0x55e79a23ba20 method_vectorcall
[2m[36m(pid=43831)[0m     @     0x55e79a1afbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43831)[0m     @     0x55e79a23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43831)[0m     @     0x55e79a23b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43831)[0m     @     0x55e79a1b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43831)[0m     @     0x55e79a23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43831)[0m     @     0x55e79a23b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43831)[0m     @     0x55e79a1b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43831)[0m     @     0x55e79a23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43831)[0m     @     0x55e79a23b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43831)[0m     @     0x55e79a1b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=43831)[0m     @     0x55e79a23abaf _PyEval_EvalCodeWithName
[2m[36m(pid=43831)[0m     @     0x55e79a23b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=43831)[0m     @     0x55e79a1b0689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:09:03,057	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.
2020-11-05 10:09:03,062	ERROR trial_runner.py:567 -- Trial PPO_jss_env_ea18c_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=43850, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
== Status ==
Memory usage on this node: 25.1/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_ea18c_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_ea18c_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_ea18c_00000_0_2020-11-05_10-08-56/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+
2020-11-05 10:09:03,068	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.

== Status ==
Memory usage on this node: 24.9/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_ea18c_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_ea18c_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_ea18c_00000_0_2020-11-05_10-08-56/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_ea18c_00000])
