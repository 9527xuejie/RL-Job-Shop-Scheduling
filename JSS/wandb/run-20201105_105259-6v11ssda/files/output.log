2020-11-05 10:53:02,940	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/556.74 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_148e5_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=73020)[0m 2020-11-05 10:53:05,672	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=73020)[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: 
[2m[36m(pid=73020)[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.
[2m[36m(pid=73020)[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.
[2m[36m(pid=73020)[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/
[2m[36m(pid=73020)[0m 
[2m[36m(pid=73020)[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
[2m[36m(pid=72992)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72992)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72992)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72992)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72992)[0m *** SIGSEGV (@0x0) received by PID 72992 (TID 0x7fbd25838700) from PID 0; stack trace: ***
[2m[36m(pid=72992)[0m     @     0x7fbd25411390 (unknown)
[2m[36m(pid=72992)[0m     @     0x7f8e2539ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72992)[0m     @     0x7f8e24aca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72992)[0m     @     0x7f8e24acd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73054)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73054)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73054)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73054)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73054)[0m *** SIGSEGV (@0x0) received by PID 73054 (TID 0x7f455afdc700) from PID 0; stack trace: ***
[2m[36m(pid=73054)[0m     @     0x7f455abb5390 (unknown)
[2m[36m(pid=73054)[0m     @     0x7f165a80bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73054)[0m     @     0x7f1659f367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73054)[0m     @     0x7f1659f398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73054)[0m     @     0x7f1659f39ad3 at::TensorIterator::for_each()
[2m[36m(pid=72952)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72952)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72952)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72952)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72952)[0m *** SIGSEGV (@0x0) received by PID 72952 (TID 0x7fc17c366700) from PID 0; stack trace: ***
[2m[36m(pid=72952)[0m     @     0x7fc17bf3f390 (unknown)
[2m[36m(pid=72952)[0m     @     0x7f927be0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72952)[0m     @     0x7f927b5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72952)[0m     @     0x7f927b5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73033)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73033)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73033)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73033)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73033)[0m *** SIGSEGV (@0x0) received by PID 73033 (TID 0x7f88a4369700) from PID 0; stack trace: ***
[2m[36m(pid=73033)[0m     @     0x7f88a3f42390 (unknown)
[2m[36m(pid=73033)[0m     @     0x7f59a3e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73033)[0m     @     0x7f59a35367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73033)[0m     @     0x7f59a35398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73033)[0m     @     0x7f59a3539ad3 at::TensorIterator::for_each()
[2m[36m(pid=72957)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72957)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72957)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72957)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72957)[0m *** SIGSEGV (@0x0) received by PID 72957 (TID 0x7fbfc5262700) from PID 0; stack trace: ***
[2m[36m(pid=72957)[0m     @     0x7fbfc4e3b390 (unknown)
[2m[36m(pid=72957)[0m     @     0x7f90c4dc9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72957)[0m     @     0x7f90c44f47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72957)[0m     @     0x7f90c44f78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73019)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73019)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73019)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73019)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73019)[0m *** SIGSEGV (@0x0) received by PID 73019 (TID 0x7fd389f76700) from PID 0; stack trace: ***
[2m[36m(pid=73019)[0m     @     0x7fd389b4f390 (unknown)
[2m[36m(pid=73019)[0m     @     0x7fa489a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73019)[0m     @     0x7fa4891357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73019)[0m     @     0x7fa4891388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73019)[0m     @     0x7fa489138ad3 at::TensorIterator::for_each()
[2m[36m(pid=72950)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72950)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72950)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72950)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72950)[0m *** SIGSEGV (@0x0) received by PID 72950 (TID 0x7f9961239700) from PID 0; stack trace: ***
[2m[36m(pid=72950)[0m     @     0x7f9960e12390 (unknown)
[2m[36m(pid=72950)[0m     @     0x7f6a60d89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72950)[0m     @     0x7f6a604b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72950)[0m     @     0x7f6a604b78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73057)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73057)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73057)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73057)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73057)[0m *** SIGSEGV (@0x0) received by PID 73057 (TID 0x7fab38af0700) from PID 0; stack trace: ***
[2m[36m(pid=73057)[0m     @     0x7fab386c9390 (unknown)
[2m[36m(pid=73057)[0m     @     0x7f7c38563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73057)[0m     @     0x7f7c37c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73057)[0m     @     0x7f7c37c918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73057)[0m     @     0x7f7c37c91ad3 at::TensorIterator::for_each()
[2m[36m(pid=73057)[0m     @     0x7f7c37c91d91 at::TensorIterator::for_each()
[2m[36m(pid=72945)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72945)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72945)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72945)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72945)[0m *** SIGSEGV (@0x0) received by PID 72945 (TID 0x7f826c72e700) from PID 0; stack trace: ***
[2m[36m(pid=72945)[0m     @     0x7f826c307390 (unknown)
[2m[36m(pid=72945)[0m     @     0x7f536c290f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72945)[0m     @     0x7f536b9bb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72945)[0m     @     0x7f536b9be8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72945)[0m     @     0x7f536b9bead3 at::TensorIterator::for_each()
[2m[36m(pid=73011)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73011)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73011)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73011)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73011)[0m *** SIGSEGV (@0x0) received by PID 73011 (TID 0x7f628ee6e700) from PID 0; stack trace: ***
[2m[36m(pid=73011)[0m     @     0x7f628ea47390 (unknown)
[2m[36m(pid=73011)[0m     @     0x7f338e7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73011)[0m     @     0x7f338dee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73011)[0m     @     0x7f338dee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73011)[0m     @     0x7f338dee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=73011)[0m     @     0x7f338dee9d91 at::TensorIterator::for_each()
[2m[36m(pid=73011)[0m     @     0x7f338e7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73011)[0m     @     0x7f338e7efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73011)[0m     @     0x7f338dc91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73009)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73009)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73009)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73009)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73009)[0m *** SIGSEGV (@0x0) received by PID 73009 (TID 0x7f2687c34700) from PID 0; stack trace: ***
[2m[36m(pid=73009)[0m     @     0x7f268780d390 (unknown)
[2m[36m(pid=73009)[0m     @     0x7ef787751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73009)[0m     @     0x7ef786e7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73009)[0m     @     0x7ef786e7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73009)[0m     @     0x7ef786e7fad3 at::TensorIterator::for_each()
[2m[36m(pid=73009)[0m     @     0x7ef786e7fd91 at::TensorIterator::for_each()
[2m[36m(pid=73009)[0m     @     0x7ef787762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73009)[0m     @     0x7ef787785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73009)[0m     @     0x7ef786c27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73053)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73053)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73053)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73053)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73053)[0m *** SIGSEGV (@0x0) received by PID 73053 (TID 0x7f8082264700) from PID 0; stack trace: ***
[2m[36m(pid=73053)[0m     @     0x7f8081e3d390 (unknown)
[2m[36m(pid=73053)[0m     @     0x7f5181d1df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73053)[0m     @     0x7f51814487db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73053)[0m     @     0x7f518144b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73053)[0m     @     0x7f518144bad3 at::TensorIterator::for_each()
[2m[36m(pid=73053)[0m     @     0x7f518144bd91 at::TensorIterator::for_each()
[2m[36m(pid=73053)[0m     @     0x7f5181d2eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73053)[0m     @     0x7f5181d51c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73053)[0m     @     0x7f51811f3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73053)[0m     @     0x7f51811f1388 at::native::copy_impl()
[2m[36m(pid=73000)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73000)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73000)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73000)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73000)[0m *** SIGSEGV (@0x0) received by PID 73000 (TID 0x7f9315934700) from PID 0; stack trace: ***
[2m[36m(pid=73000)[0m     @     0x7f931550d390 (unknown)
[2m[36m(pid=73000)[0m     @     0x7f64154a3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73000)[0m     @     0x7f6414bce7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73000)[0m     @     0x7f6414bd18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73000)[0m     @     0x7f6414bd1ad3 at::TensorIterator::for_each()
[2m[36m(pid=73000)[0m     @     0x7f6414bd1d91 at::TensorIterator::for_each()
[2m[36m(pid=73000)[0m     @     0x7f64154b4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73000)[0m     @     0x7f64154d7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73027)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73027)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73027)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73027)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73027)[0m *** SIGSEGV (@0x0) received by PID 73027 (TID 0x7fcf2c287700) from PID 0; stack trace: ***
[2m[36m(pid=73027)[0m     @     0x7fcf2be60390 (unknown)
[2m[36m(pid=73027)[0m     @     0x7fa02bddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73027)[0m     @     0x7fa02b5097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73027)[0m     @     0x7fa02b50c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73027)[0m     @     0x7fa02b50cad3 at::TensorIterator::for_each()
[2m[36m(pid=73027)[0m     @     0x7fa02b50cd91 at::TensorIterator::for_each()
[2m[36m(pid=73027)[0m     @     0x7fa02bdefb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73027)[0m     @     0x7fa02be12c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73027)[0m     @     0x7fa02b2b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73027)[0m     @     0x7fa02b2b2388 at::native::copy_impl()
[2m[36m(pid=73031)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73031)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73031)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73031)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73031)[0m *** SIGSEGV (@0x0) received by PID 73031 (TID 0x7efcfc1ac700) from PID 0; stack trace: ***
[2m[36m(pid=73031)[0m     @     0x7efcfbd85390 (unknown)
[2m[36m(pid=73031)[0m     @     0x7ecdfbd26f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73031)[0m     @     0x7ecdfb4517db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73031)[0m     @     0x7ecdfb4548f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73031)[0m     @     0x7ecdfb454ad3 at::TensorIterator::for_each()
[2m[36m(pid=73022)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73022)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73022)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73022)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73022)[0m *** SIGSEGV (@0x0) received by PID 73022 (TID 0x7f5c2fdf8700) from PID 0; stack trace: ***
[2m[36m(pid=73022)[0m     @     0x7f5c2f9d1390 (unknown)
[2m[36m(pid=73022)[0m     @     0x7f2d2f8def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73022)[0m     @     0x7f2d2f0097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73022)[0m     @     0x7f2d2f00c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73022)[0m     @     0x7f2d2f00cad3 at::TensorIterator::for_each()
[2m[36m(pid=73022)[0m     @     0x7f2d2f00cd91 at::TensorIterator::for_each()
[2m[36m(pid=73022)[0m     @     0x7f2d2f8efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73022)[0m     @     0x7f2d2f912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73022)[0m     @     0x7f2d2edb4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73022)[0m     @     0x7f2d2edb2388 at::native::copy_impl()
[2m[36m(pid=73007)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73007)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73007)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73007)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73007)[0m *** SIGSEGV (@0x0) received by PID 73007 (TID 0x7f1c1e672700) from PID 0; stack trace: ***
[2m[36m(pid=73007)[0m     @     0x7f1c1e24b390 (unknown)
[2m[36m(pid=73007)[0m     @     0x7eed1e13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73007)[0m     @     0x7eed1d8657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73007)[0m     @     0x7eed1d8688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73007)[0m     @     0x7eed1d868ad3 at::TensorIterator::for_each()
[2m[36m(pid=73007)[0m     @     0x7eed1d868d91 at::TensorIterator::for_each()
[2m[36m(pid=73007)[0m     @     0x7eed1e14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73007)[0m     @     0x7eed1e16ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73007)[0m     @     0x7eed1d610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73035)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73035)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73035)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73035)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73035)[0m *** SIGSEGV (@0x0) received by PID 73035 (TID 0x7f5de4544700) from PID 0; stack trace: ***
[2m[36m(pid=73035)[0m     @     0x7f5de411d390 (unknown)
[2m[36m(pid=73035)[0m     @     0x7f2ee40cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73035)[0m     @     0x7f2ee37f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73035)[0m     @     0x7f2ee37fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73035)[0m     @     0x7f2ee37fbad3 at::TensorIterator::for_each()
[2m[36m(pid=73035)[0m     @     0x7f2ee37fbd91 at::TensorIterator::for_each()
[2m[36m(pid=73035)[0m     @     0x7f2ee40deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73035)[0m     @     0x7f2ee4101c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73015)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73015)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73015)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73015)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73015)[0m *** SIGSEGV (@0x0) received by PID 73015 (TID 0x7efd3adf4700) from PID 0; stack trace: ***
[2m[36m(pid=73015)[0m     @     0x7efd3a9cd390 (unknown)
[2m[36m(pid=73015)[0m     @     0x7ece3a7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73015)[0m     @     0x7ece39ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73015)[0m     @     0x7ece39ee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73015)[0m     @     0x7ece39ee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=73015)[0m     @     0x7ece39ee9d91 at::TensorIterator::for_each()
[2m[36m(pid=73015)[0m     @     0x7ece3a7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73015)[0m     @     0x7ece3a7efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73036)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73036)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73036)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73036)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73036)[0m *** SIGSEGV (@0x0) received by PID 73036 (TID 0x7f23d806f700) from PID 0; stack trace: ***
[2m[36m(pid=73036)[0m     @     0x7f23d7c48390 (unknown)
[2m[36m(pid=73036)[0m     @     0x7ef4d79c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73036)[0m     @     0x7ef4d70f07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73036)[0m     @     0x7ef4d70f38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73036)[0m     @     0x7ef4d70f3ad3 at::TensorIterator::for_each()
[2m[36m(pid=73036)[0m     @     0x7ef4d70f3d91 at::TensorIterator::for_each()
[2m[36m(pid=73036)[0m     @     0x7ef4d79d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73036)[0m     @     0x7ef4d79f9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73036)[0m     @     0x7ef4d6e9ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73036)[0m     @     0x7ef4d6e99388 at::native::copy_impl()
[2m[36m(pid=73025)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73025)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73025)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73025)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73025)[0m *** SIGSEGV (@0x0) received by PID 73025 (TID 0x7f5731576700) from PID 0; stack trace: ***
[2m[36m(pid=73025)[0m     @     0x7f573114f390 (unknown)
[2m[36m(pid=73025)[0m     @     0x7f28310b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73025)[0m     @     0x7f28307e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73025)[0m     @     0x7f28307e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73025)[0m     @     0x7f28307e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=73024)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73024)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73024)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73024)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73024)[0m *** SIGSEGV (@0x0) received by PID 73024 (TID 0x7f1aa0efd700) from PID 0; stack trace: ***
[2m[36m(pid=73024)[0m     @     0x7f1aa0ad6390 (unknown)
[2m[36m(pid=73024)[0m     @     0x7eeba09e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73024)[0m     @     0x7eeba01137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73024)[0m     @     0x7eeba01168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73024)[0m     @     0x7eeba0116ad3 at::TensorIterator::for_each()
[2m[36m(pid=73024)[0m     @     0x7eeba0116d91 at::TensorIterator::for_each()
[2m[36m(pid=73024)[0m     @     0x7eeba09f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73024)[0m     @     0x7eeba0a1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73024)[0m     @     0x7eeb9febea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73046)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73046)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73046)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73046)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73046)[0m *** SIGSEGV (@0x0) received by PID 73046 (TID 0x7f00e4f56700) from PID 0; stack trace: ***
[2m[36m(pid=73046)[0m     @     0x7f00e4b2f390 (unknown)
[2m[36m(pid=73046)[0m     @     0x7ed1e49e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73046)[0m     @     0x7ed1e41137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73046)[0m     @     0x7ed1e41168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73046)[0m     @     0x7ed1e4116ad3 at::TensorIterator::for_each()
[2m[36m(pid=73046)[0m     @     0x7ed1e4116d91 at::TensorIterator::for_each()
[2m[36m(pid=73046)[0m     @     0x7ed1e49f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73046)[0m     @     0x7ed1e4a1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73046)[0m     @     0x7ed1e3ebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73046)[0m     @     0x7ed1e3ebc388 at::native::copy_impl()
[2m[36m(pid=72993)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72993)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72993)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72993)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72993)[0m *** SIGSEGV (@0x0) received by PID 72993 (TID 0x7f8462b37700) from PID 0; stack trace: ***
[2m[36m(pid=72993)[0m     @     0x7f8462710390 (unknown)
[2m[36m(pid=72993)[0m     @     0x7f55625a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72993)[0m     @     0x7f5561ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72993)[0m     @     0x7f5561cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72993)[0m     @     0x7f5561cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=72993)[0m     @     0x7f5561cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=73038)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73038)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73038)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73038)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73038)[0m *** SIGSEGV (@0x0) received by PID 73038 (TID 0x7f2a1e835700) from PID 0; stack trace: ***
[2m[36m(pid=73038)[0m     @     0x7f2a1e40e390 (unknown)
[2m[36m(pid=73038)[0m     @     0x7efb1e34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73038)[0m     @     0x7efb1da767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73038)[0m     @     0x7efb1da798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73038)[0m     @     0x7efb1da79ad3 at::TensorIterator::for_each()
[2m[36m(pid=73038)[0m     @     0x7efb1da79d91 at::TensorIterator::for_each()
[2m[36m(pid=73038)[0m     @     0x7efb1e35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73038)[0m     @     0x7efb1e37fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73038)[0m     @     0x7efb1d821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72987)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72987)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72987)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72987)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72987)[0m *** SIGSEGV (@0x0) received by PID 72987 (TID 0x7fd5bea33700) from PID 0; stack trace: ***
[2m[36m(pid=72987)[0m     @     0x7fd5be60c390 (unknown)
[2m[36m(pid=72987)[0m     @     0x7fa6be57cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72987)[0m     @     0x7fa6bdca77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72987)[0m     @     0x7fa6bdcaa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72987)[0m     @     0x7fa6bdcaaad3 at::TensorIterator::for_each()
[2m[36m(pid=73016)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73016)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73016)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73016)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73016)[0m *** SIGSEGV (@0x0) received by PID 73016 (TID 0x7fd279f63700) from PID 0; stack trace: ***
[2m[36m(pid=73016)[0m     @     0x7fd279b3c390 (unknown)
[2m[36m(pid=73016)[0m     @     0x7fa379907f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73016)[0m     @     0x7fa3790327db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73016)[0m     @     0x7fa3790358f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73016)[0m     @     0x7fa379035ad3 at::TensorIterator::for_each()
[2m[36m(pid=73016)[0m     @     0x7fa379035d91 at::TensorIterator::for_each()
[2m[36m(pid=73016)[0m     @     0x7fa379918b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73016)[0m     @     0x7fa37993bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73013)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73013)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73013)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73013)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73013)[0m *** SIGSEGV (@0x0) received by PID 73013 (TID 0x7fc80433d700) from PID 0; stack trace: ***
[2m[36m(pid=73013)[0m     @     0x7fc803f16390 (unknown)
[2m[36m(pid=73013)[0m     @     0x7f9903e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73013)[0m     @     0x7f99035367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73013)[0m     @     0x7f99035398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73013)[0m     @     0x7f9903539ad3 at::TensorIterator::for_each()
[2m[36m(pid=73049)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73049)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73049)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73049)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73049)[0m *** SIGSEGV (@0x0) received by PID 73049 (TID 0x7fcc8223e700) from PID 0; stack trace: ***
[2m[36m(pid=73049)[0m     @     0x7fcc81e17390 (unknown)
[2m[36m(pid=73049)[0m     @     0x7f9d81da4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73049)[0m     @     0x7f9d814cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73049)[0m     @     0x7f9d814d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73049)[0m     @     0x7f9d814d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=73049)[0m     @     0x7f9d814d2d91 at::TensorIterator::for_each()
[2m[36m(pid=73049)[0m     @     0x7f9d81db5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73049)[0m     @     0x7f9d81dd8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73049)[0m     @     0x7f9d8127aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73049)[0m     @     0x7f9d81278388 at::native::copy_impl()
[2m[36m(pid=72990)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72990)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72990)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72990)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72990)[0m *** SIGSEGV (@0x0) received by PID 72990 (TID 0x7f9e553fc700) from PID 0; stack trace: ***
[2m[36m(pid=72990)[0m     @     0x7f9e54fd5390 (unknown)
[2m[36m(pid=72990)[0m     @     0x7f6f54ea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72990)[0m     @     0x7f6f545cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72990)[0m     @     0x7f6f545d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72990)[0m     @     0x7f6f545d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=73029)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73029)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73029)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73029)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73029)[0m *** SIGSEGV (@0x0) received by PID 73029 (TID 0x7f894c875700) from PID 0; stack trace: ***
[2m[36m(pid=73029)[0m     @     0x7f894c44e390 (unknown)
[2m[36m(pid=73029)[0m     @     0x7f5a4c2def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73029)[0m     @     0x7f5a4ba097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73029)[0m     @     0x7f5a4ba0c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73029)[0m     @     0x7f5a4ba0cad3 at::TensorIterator::for_each()
[2m[36m(pid=72953)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72953)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73045)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73045)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73045)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73045)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73045)[0m *** SIGSEGV (@0x0) received by PID 73045 (TID 0x7f86ca689700) from PID 0; stack trace: ***
[2m[36m(pid=73045)[0m     @     0x7f86ca262390 (unknown)
[2m[36m(pid=73045)[0m     @     0x7f57ca13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73045)[0m     @     0x7f57c98657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73045)[0m     @     0x7f57c98688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73045)[0m     @     0x7f57c9868ad3 at::TensorIterator::for_each()
[2m[36m(pid=73045)[0m     @     0x7f57c9868d91 at::TensorIterator::for_each()
[2m[36m(pid=73045)[0m     @     0x7f57ca14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73045)[0m     @     0x7f57ca16ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73045)[0m     @     0x7f57c9610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73012)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73012)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73012)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72928)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72928)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72928)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72928)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72928)[0m *** SIGSEGV (@0x0) received by PID 72928 (TID 0x7f69b7a3b700) from PID 0; stack trace: ***
[2m[36m(pid=72928)[0m     @     0x7f69b7614390 (unknown)
[2m[36m(pid=72928)[0m     @     0x7f3ab6c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72928)[0m     @     0x7f3ab63407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72928)[0m     @     0x7f3ab63438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72928)[0m     @     0x7f3ab6343ad3 at::TensorIterator::for_each()
[2m[36m(pid=72928)[0m     @     0x7f3ab6343d91 at::TensorIterator::for_each()
[2m[36m(pid=72942)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72942)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72942)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72942)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72942)[0m *** SIGSEGV (@0x0) received by PID 72942 (TID 0x7f70b8ce6700) from PID 0; stack trace: ***
[2m[36m(pid=72942)[0m     @     0x7f70b88bf390 (unknown)
[2m[36m(pid=72942)[0m     @     0x7f41b8824f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72942)[0m     @     0x7f41b7f4f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72942)[0m     @     0x7f41b7f528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72942)[0m     @     0x7f41b7f52ad3 at::TensorIterator::for_each()
[2m[36m(pid=72942)[0m     @     0x7f41b7f52d91 at::TensorIterator::for_each()
[2m[36m(pid=72942)[0m     @     0x7f41b8835b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72942)[0m     @     0x7f41b8858c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72992)[0m     @     0x7f8e24acdad3 at::TensorIterator::for_each()
[2m[36m(pid=72992)[0m     @     0x7f8e24acdd91 at::TensorIterator::for_each()
[2m[36m(pid=72992)[0m     @     0x7f8e253b0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72992)[0m     @     0x7f8e253d3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72992)[0m     @     0x7f8e24875a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72992)[0m     @     0x7f8e24873388 at::native::copy_impl()
[2m[36m(pid=73054)[0m     @     0x7f1659f39d91 at::TensorIterator::for_each()
[2m[36m(pid=73054)[0m     @     0x7f165a81cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73054)[0m     @     0x7f165a83fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73054)[0m     @     0x7f1659ce1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73054)[0m     @     0x7f1659cdf388 at::native::copy_impl()
[2m[36m(pid=72952)[0m     @     0x7f927b539ad3 at::TensorIterator::for_each()
[2m[36m(pid=72952)[0m     @     0x7f927b539d91 at::TensorIterator::for_each()
[2m[36m(pid=72952)[0m     @     0x7f927be1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72952)[0m     @     0x7f927be3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72952)[0m     @     0x7f927b2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72952)[0m     @     0x7f927b2df388 at::native::copy_impl()
[2m[36m(pid=73033)[0m     @     0x7f59a3539d91 at::TensorIterator::for_each()
[2m[36m(pid=73033)[0m     @     0x7f59a3e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73033)[0m     @     0x7f59a3e3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73033)[0m     @     0x7f59a32e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73033)[0m     @     0x7f59a32df388 at::native::copy_impl()
[2m[36m(pid=72957)[0m     @     0x7f90c44f7ad3 at::TensorIterator::for_each()
[2m[36m(pid=72957)[0m     @     0x7f90c44f7d91 at::TensorIterator::for_each()
[2m[36m(pid=72957)[0m     @     0x7f90c4ddab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72957)[0m     @     0x7f90c4dfdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72957)[0m     @     0x7f90c429fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72955)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72955)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72955)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73019)[0m     @     0x7fa489138d91 at::TensorIterator::for_each()
[2m[36m(pid=73019)[0m     @     0x7fa489a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73019)[0m     @     0x7fa489a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73019)[0m     @     0x7fa488ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73019)[0m     @     0x7fa488ede388 at::native::copy_impl()
[2m[36m(pid=72950)[0m     @     0x7f6a604b7ad3 at::TensorIterator::for_each()
[2m[36m(pid=72950)[0m     @     0x7f6a604b7d91 at::TensorIterator::for_each()
[2m[36m(pid=72950)[0m     @     0x7f6a60d9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72950)[0m     @     0x7f6a60dbdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72927)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72927)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72937)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72937)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72937)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72937)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72937)[0m *** SIGSEGV (@0x0) received by PID 72937 (TID 0x7fb44d926700) from PID 0; stack trace: ***
[2m[36m(pid=72989)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72989)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72989)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73032)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73032)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73032)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72943)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72943)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72943)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72963)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72963)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72963)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72963)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72963)[0m *** SIGSEGV (@0x0) received by PID 72963 (TID 0x7f08ad5bc700) from PID 0; stack trace: ***
[2m[36m(pid=73021)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73021)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72997)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72997)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72997)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73058)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73058)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73058)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72935)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72935)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72935)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72935)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72959)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72959)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72959)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72959)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72959)[0m *** SIGSEGV (@0x0) received by PID 72959 (TID 0x7f7f0543a700) from PID 0; stack trace: ***
[2m[36m(pid=73051)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73051)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73051)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73051)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73051)[0m *** SIGSEGV (@0x0) received by PID 73051 (TID 0x7f78cb15a700) from PID 0; stack trace: ***
[2m[36m(pid=73001)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73001)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73001)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73001)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73001)[0m *** SIGSEGV (@0x0) received by PID 73001 (TID 0x7fbefe326700) from PID 0; stack trace: ***
[2m[36m(pid=73001)[0m     @     0x7fbefdeff390 (unknown)
[2m[36m(pid=73057)[0m     @     0x7f7c38574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73057)[0m     @     0x7f7c38597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73057)[0m     @     0x7f7c37a39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73057)[0m     @     0x7f7c37a37388 at::native::copy_impl()
[2m[36m(pid=73057)[0m     @     0x7f7c37a395a4 at::native::copy_()
[2m[36m(pid=72999)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72999)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72999)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72999)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72999)[0m *** SIGSEGV (@0x0) received by PID 72999 (TID 0x7f1fe9d86700) from PID 0; stack trace: ***
[2m[36m(pid=72999)[0m     @     0x7f1fe995f390 (unknown)
[2m[36m(pid=72930)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72930)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72930)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72930)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72930)[0m *** SIGSEGV (@0x0) received by PID 72930 (TID 0x7fd78b5d5700) from PID 0; stack trace: ***
[2m[36m(pid=72930)[0m     @     0x7fd78b1ae390 (unknown)
[2m[36m(pid=72938)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72938)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72938)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73006)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73006)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73006)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73006)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73006)[0m *** SIGSEGV (@0x0) received by PID 73006 (TID 0x7f4c45e1f700) from PID 0; stack trace: ***
[2m[36m(pid=73006)[0m     @     0x7f4c459f8390 (unknown)
[2m[36m(pid=72924)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72924)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72924)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72924)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72924)[0m *** SIGSEGV (@0x0) received by PID 72924 (TID 0x7f312830e700) from PID 0; stack trace: ***
[2m[36m(pid=72932)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72932)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72932)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72932)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72932)[0m *** SIGSEGV (@0x0) received by PID 72932 (TID 0x7ffab665b700) from PID 0; stack trace: ***
[2m[36m(pid=72932)[0m     @     0x7ffab6234390 (unknown)
[2m[36m(pid=72932)[0m     @     0x7fcbb613af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72932)[0m     @     0x7fcbb58657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72925)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72925)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72925)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72926)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72926)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72926)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72926)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72926)[0m *** SIGSEGV (@0x0) received by PID 72926 (TID 0x7f296f9f9700) from PID 0; stack trace: ***
[2m[36m(pid=72926)[0m     @     0x7f296f5d2390 (unknown)
[2m[36m(pid=72945)[0m     @     0x7f536b9bed91 at::TensorIterator::for_each()
[2m[36m(pid=72945)[0m     @     0x7f536c2a1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72945)[0m     @     0x7f536c2c4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72945)[0m     @     0x7f536b766a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73011)[0m     @     0x7f338dc8f388 at::native::copy_impl()
[2m[36m(pid=73011)[0m     @     0x7f338dc915a4 at::native::copy_()
[2m[36m(pid=73011)[0m     @     0x7f338e37c4f5 at::Tensor::copy_()
[2m[36m(pid=73009)[0m     @     0x7ef786c25388 at::native::copy_impl()
[2m[36m(pid=73009)[0m     @     0x7ef786c275a4 at::native::copy_()
[2m[36m(pid=73009)[0m     @     0x7ef7873124f5 at::Tensor::copy_()
[2m[36m(pid=73053)[0m     @     0x7f51811f35a4 at::native::copy_()
[2m[36m(pid=73053)[0m     @     0x7f51818de4f5 at::Tensor::copy_()
[2m[36m(pid=73053)[0m     @     0x7f5183db18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73000)[0m     @     0x7f6414979a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73000)[0m     @     0x7f6414977388 at::native::copy_impl()
[2m[36m(pid=73000)[0m     @     0x7f64149795a4 at::native::copy_()
[2m[36m(pid=73000)[0m     @     0x7f64150644f5 at::Tensor::copy_()
[2m[36m(pid=73027)[0m     @     0x7fa02b2b45a4 at::native::copy_()
[2m[36m(pid=73027)[0m     @     0x7fa02b99f4f5 at::Tensor::copy_()
[2m[36m(pid=73027)[0m     @     0x7fa02de728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73031)[0m     @     0x7ecdfb454d91 at::TensorIterator::for_each()
[2m[36m(pid=73031)[0m     @     0x7ecdfbd37b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73031)[0m     @     0x7ecdfbd5ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73031)[0m     @     0x7ecdfb1fca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73031)[0m     @     0x7ecdfb1fa388 at::native::copy_impl()
[2m[36m(pid=73022)[0m     @     0x7f2d2edb45a4 at::native::copy_()
[2m[36m(pid=73022)[0m     @     0x7f2d2f49f4f5 at::Tensor::copy_()
[2m[36m(pid=73022)[0m     @     0x7f2d319728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73007)[0m     @     0x7eed1d60e388 at::native::copy_impl()
[2m[36m(pid=73007)[0m     @     0x7eed1d6105a4 at::native::copy_()
[2m[36m(pid=73007)[0m     @     0x7eed1dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=72923)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72923)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72923)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72923)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72923)[0m *** SIGSEGV (@0x0) received by PID 72923 (TID 0x7f462814e700) from PID 0; stack trace: ***
[2m[36m(pid=72923)[0m     @     0x7f4627d27390 (unknown)
[2m[36m(pid=72923)[0m     @     0x7f1727cbbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73035)[0m     @     0x7f2ee35a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73035)[0m     @     0x7f2ee35a1388 at::native::copy_impl()
[2m[36m(pid=73035)[0m     @     0x7f2ee35a35a4 at::native::copy_()
[2m[36m(pid=73035)[0m     @     0x7f2ee3c8e4f5 at::Tensor::copy_()
[2m[36m(pid=72936)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72936)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72936)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73048)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73048)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73048)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73048)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73048)[0m *** SIGSEGV (@0x0) received by PID 73048 (TID 0x7fea56b2d700) from PID 0; stack trace: ***
[2m[36m(pid=73048)[0m     @     0x7fea56706390 (unknown)
[2m[36m(pid=73048)[0m     @     0x7fbb565a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72940)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72940)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72940)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72940)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72940)[0m *** SIGSEGV (@0x0) received by PID 72940 (TID 0x7f202e3da700) from PID 0; stack trace: ***
[2m[36m(pid=72940)[0m     @     0x7f202dfb3390 (unknown)
[2m[36m(pid=72940)[0m     @     0x7ef12de24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72940)[0m     @     0x7ef12d54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73015)[0m     @     0x7ece39c91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73015)[0m     @     0x7ece39c8f388 at::native::copy_impl()
[2m[36m(pid=73015)[0m     @     0x7ece39c915a4 at::native::copy_()
[2m[36m(pid=73015)[0m     @     0x7ece3a37c4f5 at::Tensor::copy_()
[2m[36m(pid=72998)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72998)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72998)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72998)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72998)[0m *** SIGSEGV (@0x0) received by PID 72998 (TID 0x7f0eb4929700) from PID 0; stack trace: ***
[2m[36m(pid=72947)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72947)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72947)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72947)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72947)[0m *** SIGSEGV (@0x0) received by PID 72947 (TID 0x7fdeb1eaa700) from PID 0; stack trace: ***
[2m[36m(pid=72947)[0m     @     0x7fdeb1a83390 (unknown)
[2m[36m(pid=72939)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72939)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72939)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72939)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72939)[0m *** SIGSEGV (@0x0) received by PID 72939 (TID 0x7f3b5c800700) from PID 0; stack trace: ***
[2m[36m(pid=72939)[0m     @     0x7f3b5c3d9390 (unknown)
[2m[36m(pid=73008)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73008)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73008)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73008)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73008)[0m *** SIGSEGV (@0x0) received by PID 73008 (TID 0x7f5594af0700) from PID 0; stack trace: ***
[2m[36m(pid=73008)[0m     @     0x7f55946c9390 (unknown)
[2m[36m(pid=73008)[0m     @     0x7f2694536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72991)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72991)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72991)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73040)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73040)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73040)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73040)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73040)[0m *** SIGSEGV (@0x0) received by PID 73040 (TID 0x7f23cf20a700) from PID 0; stack trace: ***
[2m[36m(pid=73040)[0m     @     0x7f23cede3390 (unknown)
[2m[36m(pid=73040)[0m     @     0x7ef4ced83f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73040)[0m     @     0x7ef4ce4ae7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73036)[0m     @     0x7ef4d6e9b5a4 at::native::copy_()
[2m[36m(pid=73036)[0m     @     0x7ef4d75864f5 at::Tensor::copy_()
[2m[36m(pid=73036)[0m     @     0x7ef4d9a598de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73036)[0m     @     0x7ef4d75864f5 at::Tensor::copy_()
[2m[36m(pid=73036)[0m     @     0x7ef4dd63179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73036)[0m     @     0x56410a76ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73036)[0m     @     0x56410a6cab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73036)[0m     @     0x56410a755baf _PyEval_EvalCodeWithName
[2m[36m(pid=73036)[0m     @     0x56410a756a20 method_vectorcall
[2m[36m(pid=73036)[0m     @     0x56410a6cabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73036)[0m     @     0x56410a755baf _PyEval_EvalCodeWithName
[2m[36m(pid=73036)[0m     @     0x56410a756643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73036)[0m     @     0x56410a6cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73036)[0m     @     0x56410a755baf _PyEval_EvalCodeWithName
[2m[36m(pid=73036)[0m     @     0x56410a756643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73036)[0m     @     0x56410a6cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73025)[0m     @     0x7f28307e3d91 at::TensorIterator::for_each()
[2m[36m(pid=73025)[0m     @     0x7f28310c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73025)[0m     @     0x7f28310e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73025)[0m     @     0x7f283058ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73025)[0m     @     0x7f2830589388 at::native::copy_impl()
[2m[36m(pid=73024)[0m     @     0x7eeb9febc388 at::native::copy_impl()
[2m[36m(pid=73024)[0m     @     0x7eeb9febe5a4 at::native::copy_()
[2m[36m(pid=73024)[0m     @     0x7eeba05a94f5 at::Tensor::copy_()
[2m[36m(pid=73024)[0m     @     0x7eeba2a7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73024)[0m     @     0x7eeba05a94f5 at::Tensor::copy_()
[2m[36m(pid=73024)[0m     @     0x7eeba665479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73024)[0m     @     0x55cf7d330fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73046)[0m     @     0x7ed1e3ebe5a4 at::native::copy_()
[2m[36m(pid=73046)[0m     @     0x7ed1e45a94f5 at::Tensor::copy_()
[2m[36m(pid=73046)[0m     @     0x7ed1e6a7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73046)[0m     @     0x7ed1e45a94f5 at::Tensor::copy_()
[2m[36m(pid=72993)[0m     @     0x7f55625b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72993)[0m     @     0x7f55625d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72993)[0m     @     0x7f5561a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72993)[0m     @     0x7f5561a78388 at::native::copy_impl()
[2m[36m(pid=72993)[0m     @     0x7f5561a7a5a4 at::native::copy_()
[2m[36m(pid=72993)[0m     @     0x7f55621654f5 at::Tensor::copy_()
[2m[36m(pid=73038)[0m     @     0x7efb1d81f388 at::native::copy_impl()
[2m[36m(pid=73038)[0m     @     0x7efb1d8215a4 at::native::copy_()
[2m[36m(pid=73038)[0m     @     0x7efb1df0c4f5 at::Tensor::copy_()
[2m[36m(pid=73038)[0m     @     0x7efb203df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73038)[0m     @     0x7efb1df0c4f5 at::Tensor::copy_()
[2m[36m(pid=72987)[0m     @     0x7fa6bdcaad91 at::TensorIterator::for_each()
[2m[36m(pid=72987)[0m     @     0x7fa6be58db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72987)[0m     @     0x7fa6be5b0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72987)[0m     @     0x7fa6bda52a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72987)[0m     @     0x7fa6bda50388 at::native::copy_impl()
[2m[36m(pid=72987)[0m     @     0x7fa6bda525a4 at::native::copy_()
[2m[36m(pid=73016)[0m     @     0x7fa378ddda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73016)[0m     @     0x7fa378ddb388 at::native::copy_impl()
[2m[36m(pid=73016)[0m     @     0x7fa378ddd5a4 at::native::copy_()
[2m[36m(pid=73016)[0m     @     0x7fa3794c84f5 at::Tensor::copy_()
[2m[36m(pid=73016)[0m     @     0x7fa37b99b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73013)[0m     @     0x7f9903539d91 at::TensorIterator::for_each()
[2m[36m(pid=73013)[0m     @     0x7f9903e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73013)[0m     @     0x7f9903e3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73013)[0m     @     0x7f99032e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73013)[0m     @     0x7f99032df388 at::native::copy_impl()
[2m[36m(pid=73013)[0m     @     0x7f99032e15a4 at::native::copy_()
[2m[36m(pid=73049)[0m     @     0x7f9d8127a5a4 at::native::copy_()
[2m[36m(pid=73049)[0m     @     0x7f9d819654f5 at::Tensor::copy_()
[2m[36m(pid=73049)[0m     @     0x7f9d83e388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73049)[0m     @     0x7f9d819654f5 at::Tensor::copy_()
[2m[36m(pid=73049)[0m     @     0x7f9d87a1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73049)[0m     @     0x560730186fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73049)[0m     @     0x5607300e1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73049)[0m     @     0x56073016cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73049)[0m     @     0x56073016da20 method_vectorcall
[2m[36m(pid=73049)[0m     @     0x5607300e1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73049)[0m     @     0x56073016cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73049)[0m     @     0x56073016d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73049)[0m     @     0x5607300e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73049)[0m     @     0x56073016cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73049)[0m     @     0x56073016d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73049)[0m     @     0x5607300e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73049)[0m     @     0x56073016cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73049)[0m     @     0x56073016d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73049)[0m     @     0x5607300e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73049)[0m     @     0x56073016cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73049)[0m     @     0x56073016d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73049)[0m     @     0x5607300e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72990)[0m     @     0x7f6f545d2d91 at::TensorIterator::for_each()
[2m[36m(pid=72990)[0m     @     0x7f6f54eb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72990)[0m     @     0x7f6f54ed8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72990)[0m     @     0x7f6f5437aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72990)[0m     @     0x7f6f54378388 at::native::copy_impl()
[2m[36m(pid=72990)[0m     @     0x7f6f5437a5a4 at::native::copy_()
[2m[36m(pid=73029)[0m     @     0x7f5a4ba0cd91 at::TensorIterator::for_each()
[2m[36m(pid=73029)[0m     @     0x7f5a4c2efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73029)[0m     @     0x7f5a4c312c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73029)[0m     @     0x7f5a4b7b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73029)[0m     @     0x7f5a4b7b2388 at::native::copy_impl()
[2m[36m(pid=73029)[0m     @     0x7f5a4b7b45a4 at::native::copy_()
[2m[36m(pid=72953)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72953)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72953)[0m *** SIGSEGV (@0x0) received by PID 72953 (TID 0x7fb7e2f26700) from PID 0; stack trace: ***
[2m[36m(pid=72953)[0m     @     0x7fb7e2aff390 (unknown)
[2m[36m(pid=72953)[0m     @     0x7f88e2aa4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72953)[0m     @     0x7f88e21cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72953)[0m     @     0x7f88e21d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72941)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72941)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72941)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72941)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72941)[0m *** SIGSEGV (@0x0) received by PID 72941 (TID 0x7fdd23aec700) from PID 0; stack trace: ***
[2m[36m(pid=72941)[0m     @     0x7fdd236c5390 (unknown)
[2m[36m(pid=72941)[0m     @     0x7fae2361ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72941)[0m     @     0x7fae22d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73045)[0m     @     0x7f57c960e388 at::native::copy_impl()
[2m[36m(pid=73045)[0m     @     0x7f57c96105a4 at::native::copy_()
[2m[36m(pid=73045)[0m     @     0x7f57c9cfb4f5 at::Tensor::copy_()
[2m[36m(pid=73045)[0m     @     0x7f57cc1ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73045)[0m     @     0x7f57c9cfb4f5 at::Tensor::copy_()
[2m[36m(pid=73045)[0m     @     0x7f57cfda679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73045)[0m     @     0x560163604fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73045)[0m     @     0x56016355fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73045)[0m     @     0x5601635eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73045)[0m     @     0x5601635eba20 method_vectorcall
[2m[36m(pid=73045)[0m     @     0x56016355fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73045)[0m     @     0x5601635eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73045)[0m     @     0x5601635eb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73045)[0m     @     0x560163560689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73045)[0m     @     0x5601635eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73045)[0m     @     0x5601635eb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73045)[0m     @     0x560163560689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73045)[0m     @     0x5601635eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73045)[0m     @     0x5601635eb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73045)[0m     @     0x560163560689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73045)[0m     @     0x5601635eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73045)[0m     @     0x5601635eb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73045)[0m     @     0x560163560689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72954)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72954)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72954)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72954)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72954)[0m *** SIGSEGV (@0x0) received by PID 72954 (TID 0x7f8b04803700) from PID 0; stack trace: ***
[2m[36m(pid=72954)[0m     @     0x7f8b043dc390 (unknown)
[2m[36m(pid=72954)[0m     @     0x7f5c042def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72954)[0m     @     0x7f5c03a097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72954)[0m     @     0x7f5c03a0c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73012)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73012)[0m *** SIGSEGV (@0x0) received by PID 73012 (TID 0x7f8c16964700) from PID 0; stack trace: ***
[2m[36m(pid=73012)[0m     @     0x7f8c1653d390 (unknown)
[2m[36m(pid=73012)[0m     @     0x7f5d164ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73012)[0m     @     0x7f5d15bf77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73012)[0m     @     0x7f5d15bfa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72928)[0m     @     0x7f3ab6c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72928)[0m     @     0x7f3ab6c49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72928)[0m     @     0x7f3ab60eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72928)[0m     @     0x7f3ab60e9388 at::native::copy_impl()
[2m[36m(pid=72928)[0m     @     0x7f3ab60eb5a4 at::native::copy_()
[2m[36m(pid=72942)[0m     @     0x7f41b7cfaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72942)[0m     @     0x7f41b7cf8388 at::native::copy_impl()
[2m[36m(pid=72942)[0m     @     0x7f41b7cfa5a4 at::native::copy_()
[2m[36m(pid=72942)[0m     @     0x7f41b83e54f5 at::Tensor::copy_()
[2m[36m(pid=72942)[0m     @     0x7f41ba8b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72931)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72931)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72931)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72931)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72931)[0m *** SIGSEGV (@0x0) received by PID 72931 (TID 0x7f89b2cfc700) from PID 0; stack trace: ***
[2m[36m(pid=72931)[0m     @     0x7f89b28d5390 (unknown)
[2m[36m(pid=72931)[0m     @     0x7f5ab27bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72931)[0m     @     0x7f5ab1ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72931)[0m     @     0x7f5ab1ee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72992)[0m     @     0x7f8e248755a4 at::native::copy_()
[2m[36m(pid=72992)[0m     @     0x7f8e24f604f5 at::Tensor::copy_()
[2m[36m(pid=72992)[0m     @     0x7f8e274338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72992)[0m     @     0x7f8e24f604f5 at::Tensor::copy_()
[2m[36m(pid=72992)[0m     @     0x7f8e2b00b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72992)[0m     @     0x5635a898bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72992)[0m     @     0x5635a88e6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72992)[0m     @     0x5635a8971baf _PyEval_EvalCodeWithName
[2m[36m(pid=72992)[0m     @     0x5635a8972a20 method_vectorcall
[2m[36m(pid=72992)[0m     @     0x5635a88e6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72992)[0m     @     0x5635a8971baf _PyEval_EvalCodeWithName
[2m[36m(pid=72992)[0m     @     0x5635a8972643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72992)[0m     @     0x5635a88e7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72992)[0m     @     0x5635a8971baf _PyEval_EvalCodeWithName
[2m[36m(pid=72992)[0m     @     0x5635a8972643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72992)[0m     @     0x5635a88e7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72992)[0m     @     0x5635a8971baf _PyEval_EvalCodeWithName
[2m[36m(pid=72992)[0m     @     0x5635a8972643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72992)[0m     @     0x5635a88e7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72992)[0m     @     0x5635a8971baf _PyEval_EvalCodeWithName
[2m[36m(pid=72992)[0m     @     0x5635a8972643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72992)[0m     @     0x5635a88e7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73054)[0m     @     0x7f1659ce15a4 at::native::copy_()
[2m[36m(pid=73054)[0m     @     0x7f165a3cc4f5 at::Tensor::copy_()
[2m[36m(pid=73054)[0m     @     0x7f165c89f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73054)[0m     @     0x7f165a3cc4f5 at::Tensor::copy_()
[2m[36m(pid=73054)[0m     @     0x7f166047779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73054)[0m     @     0x564ab5075fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73054)[0m     @     0x564ab4fd0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73054)[0m     @     0x564ab505bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73054)[0m     @     0x564ab505ca20 method_vectorcall
[2m[36m(pid=73054)[0m     @     0x564ab4fd0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73054)[0m     @     0x564ab505bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73054)[0m     @     0x564ab505c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73054)[0m     @     0x564ab4fd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73054)[0m     @     0x564ab505bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73054)[0m     @     0x564ab505c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73054)[0m     @     0x564ab4fd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73054)[0m     @     0x564ab505bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73054)[0m     @     0x564ab505c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73054)[0m     @     0x564ab4fd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73054)[0m     @     0x564ab505bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73054)[0m     @     0x564ab505c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73054)[0m     @     0x564ab4fd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72952)[0m     @     0x7f927b2e15a4 at::native::copy_()
[2m[36m(pid=72952)[0m     @     0x7f927b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=72952)[0m     @     0x7f927de9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72952)[0m     @     0x7f927b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=72952)[0m     @     0x7f9281a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72952)[0m     @     0x560a9d76bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72952)[0m     @     0x560a9d6c6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72952)[0m     @     0x560a9d751baf _PyEval_EvalCodeWithName
[2m[36m(pid=72952)[0m     @     0x560a9d752a20 method_vectorcall
[2m[36m(pid=72952)[0m     @     0x560a9d6c6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72952)[0m     @     0x560a9d751baf _PyEval_EvalCodeWithName
[2m[36m(pid=72952)[0m     @     0x560a9d752643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72952)[0m     @     0x560a9d6c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72952)[0m     @     0x560a9d751baf _PyEval_EvalCodeWithName
[2m[36m(pid=72952)[0m     @     0x560a9d752643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72952)[0m     @     0x560a9d6c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72952)[0m     @     0x560a9d751baf _PyEval_EvalCodeWithName
[2m[36m(pid=72952)[0m     @     0x560a9d752643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72952)[0m     @     0x560a9d6c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72952)[0m     @     0x560a9d751baf _PyEval_EvalCodeWithName
[2m[36m(pid=73033)[0m     @     0x7f59a32e15a4 at::native::copy_()
[2m[36m(pid=73033)[0m     @     0x7f59a39cc4f5 at::Tensor::copy_()
[2m[36m(pid=73033)[0m     @     0x7f59a5e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73033)[0m     @     0x7f59a39cc4f5 at::Tensor::copy_()
[2m[36m(pid=73033)[0m     @     0x7f59a9a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73033)[0m     @     0x557882bf4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73033)[0m     @     0x557882b4fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73033)[0m     @     0x557882bdabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73033)[0m     @     0x557882bdba20 method_vectorcall
[2m[36m(pid=73033)[0m     @     0x557882b4fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73033)[0m     @     0x557882bdabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73033)[0m     @     0x557882bdb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73033)[0m     @     0x557882b50689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73033)[0m     @     0x557882bdabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73033)[0m     @     0x557882bdb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73033)[0m     @     0x557882b50689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73033)[0m     @     0x557882bdabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73033)[0m     @     0x557882bdb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73033)[0m     @     0x557882b50689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73033)[0m     @     0x557882bdabaf _PyEval_EvalCodeWithName
[2m[36m(pid=73033)[0m     @     0x557882bdb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73033)[0m     @     0x557882b50689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72957)[0m     @     0x7f90c429d388 at::native::copy_impl()
[2m[36m(pid=72957)[0m     @     0x7f90c429f5a4 at::native::copy_()
[2m[36m(pid=72957)[0m     @     0x7f90c498a4f5 at::Tensor::copy_()
[2m[36m(pid=72957)[0m     @     0x7f90c6e5d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72957)[0m     @     0x7f90c498a4f5 at::Tensor::copy_()
[2m[36m(pid=72957)[0m     @     0x7f90caa3579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72957)[0m     @     0x55dde1904fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72957)[0m     @     0x55dde185fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72957)[0m     @     0x55dde18eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72957)[0m     @     0x55dde18eba20 method_vectorcall
[2m[36m(pid=72957)[0m     @     0x55dde185fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72957)[0m     @     0x55dde18eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72957)[0m     @     0x55dde18eb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72957)[0m     @     0x55dde1860689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72955)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72955)[0m *** SIGSEGV (@0x0) received by PID 72955 (TID 0x7f1bc5482700) from PID 0; stack trace: ***
[2m[36m(pid=72955)[0m     @     0x7f1bc505b390 (unknown)
[2m[36m(pid=72955)[0m     @     0x7eecc4fe3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72955)[0m     @     0x7eecc470e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72955)[0m     @     0x7eecc47118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72955)[0m     @     0x7eecc4711ad3 at::TensorIterator::for_each()
[2m[36m(pid=73019)[0m     @     0x7fa488ee05a4 at::native::copy_()
[2m[36m(pid=73019)[0m     @     0x7fa4895cb4f5 at::Tensor::copy_()
[2m[36m(pid=73019)[0m     @     0x7fa48ba9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73019)[0m     @     0x7fa4895cb4f5 at::Tensor::copy_()
[2m[36m(pid=73019)[0m     @     0x7fa48f67679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73019)[0m     @     0x558140a6ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73019)[0m     @     0x5581409cab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73019)[0m     @     0x558140a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=73019)[0m     @     0x558140a56a20 method_vectorcall
[2m[36m(pid=73019)[0m     @     0x5581409cabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73019)[0m     @     0x558140a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=73019)[0m     @     0x558140a56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73019)[0m     @     0x5581409cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73019)[0m     @     0x558140a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=73019)[0m     @     0x558140a56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73019)[0m     @     0x5581409cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73019)[0m     @     0x558140a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=73019)[0m     @     0x558140a56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73019)[0m     @     0x5581409cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73019)[0m     @     0x558140a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=73019)[0m     @     0x558140a56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73019)[0m     @     0x5581409cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72950)[0m     @     0x7f6a6025fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72950)[0m     @     0x7f6a6025d388 at::native::copy_impl()
[2m[36m(pid=72950)[0m     @     0x7f6a6025f5a4 at::native::copy_()
[2m[36m(pid=72950)[0m     @     0x7f6a6094a4f5 at::Tensor::copy_()
[2m[36m(pid=72950)[0m     @     0x7f6a62e1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72927)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72927)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72927)[0m *** SIGSEGV (@0x0) received by PID 72927 (TID 0x7f432d47e700) from PID 0; stack trace: ***
[2m[36m(pid=72927)[0m     @     0x7f432d057390 (unknown)
[2m[36m(pid=72927)[0m     @     0x7f142cfe3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72927)[0m     @     0x7f142c70e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72927)[0m     @     0x7f142c7118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72956)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72956)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72956)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72956)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72956)[0m *** SIGSEGV (@0x0) received by PID 72956 (TID 0x7fe3d117f700) from PID 0; stack trace: ***
[2m[36m(pid=72956)[0m     @     0x7fe3d0d58390 (unknown)
[2m[36m(pid=72956)[0m     @     0x7fb4d0c74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72933)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72933)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72933)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72933)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72933)[0m *** SIGSEGV (@0x0) received by PID 72933 (TID 0x7f8b55534700) from PID 0; stack trace: ***
[2m[36m(pid=72933)[0m     @     0x7f8b5510d390 (unknown)
[2m[36m(pid=72933)[0m     @     0x7f5c550b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72994)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72994)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72994)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72994)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72994)[0m *** SIGSEGV (@0x0) received by PID 72994 (TID 0x7ff3ed9b6700) from PID 0; stack trace: ***
[2m[36m(pid=72994)[0m     @     0x7ff3ed58f390 (unknown)
[2m[36m(pid=72994)[0m     @     0x7fc4ed4e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72994)[0m     @     0x7fc4ecc0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72937)[0m     @     0x7fb44d4ff390 (unknown)
[2m[36m(pid=72937)[0m     @     0x7f854d4a3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72937)[0m     @     0x7f854cbce7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72937)[0m     @     0x7f854cbd18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72937)[0m     @     0x7f854cbd1ad3 at::TensorIterator::for_each()
[2m[36m(pid=72989)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72989)[0m *** SIGSEGV (@0x0) received by PID 72989 (TID 0x7fd2b7723700) from PID 0; stack trace: ***
[2m[36m(pid=72989)[0m     @     0x7fd2b72fc390 (unknown)
[2m[36m(pid=72989)[0m     @     0x7fa3b7229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72989)[0m     @     0x7fa3b69547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72989)[0m     @     0x7fa3b69578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73032)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73032)[0m *** SIGSEGV (@0x0) received by PID 73032 (TID 0x7fa2def28700) from PID 0; stack trace: ***
[2m[36m(pid=73032)[0m     @     0x7fa2deb01390 (unknown)
[2m[36m(pid=73032)[0m     @     0x7f73dea21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73032)[0m     @     0x7f73de14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73032)[0m     @     0x7f73de14f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73010)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73010)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73010)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73010)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73010)[0m *** SIGSEGV (@0x0) received by PID 73010 (TID 0x7f00f8de7700) from PID 0; stack trace: ***
[2m[36m(pid=73010)[0m     @     0x7f00f89c0390 (unknown)
[2m[36m(pid=73010)[0m     @     0x7ed1f877cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73010)[0m     @     0x7ed1f7ea77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73010)[0m     @     0x7ed1f7eaa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72943)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72943)[0m *** SIGSEGV (@0x0) received by PID 72943 (TID 0x7f591eb69700) from PID 0; stack trace: ***
[2m[36m(pid=72943)[0m     @     0x7f591e742390 (unknown)
[2m[36m(pid=72943)[0m     @     0x7f2a1e4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72943)[0m     @     0x7f2a1dc247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72943)[0m     @     0x7f2a1dc278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72943)[0m     @     0x7f2a1dc27ad3 at::TensorIterator::for_each()
[2m[36m(pid=72988)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72988)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72988)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72988)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72988)[0m *** SIGSEGV (@0x0) received by PID 72988 (TID 0x7fd4a4b8e700) from PID 0; stack trace: ***
[2m[36m(pid=72988)[0m     @     0x7fd4a4767390 (unknown)
[2m[36m(pid=72988)[0m     @     0x7fa5a460ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72988)[0m     @     0x7fa5a3d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72986)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=72986)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=72986)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=72986)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72986)[0m *** SIGSEGV (@0x0) received by PID 72986 (TID 0x7fd239023700) from PID 0; stack trace: ***
[2m[36m(pid=72986)[0m     @     0x7fd238bfc390 (unknown)
[2m[36m(pid=72986)[0m     @     0x7fa338b3bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72986)[0m     @     0x7fa3382667db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72986)[0m     @     0x7fa3382698f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72963)[0m     @     0x7f08ad195390 (unknown)
[2m[36m(pid=72963)[0m     @     0x7ed9ad0b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72963)[0m     @     0x7ed9ac7e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72963)[0m     @     0x7ed9ac7e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72963)[0m     @     0x7ed9ac7e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=72963)[0m     @     0x7ed9ac7e3d91 at::TensorIterator::for_each()
[2m[36m(pid=72963)[0m     @     0x7ed9ad0c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73021)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73021)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73021)[0m *** SIGSEGV (@0x0) received by PID 73021 (TID 0x7fd32da90700) from PID 0; stack trace: ***
[2m[36m(pid=73021)[0m     @     0x7fd32d669390 (unknown)
[2m[36m(pid=73021)[0m     @     0x7fa42d5e2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73021)[0m     @     0x7fa42cd0d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73021)[0m     @     0x7fa42cd108f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73021)[0m     @     0x7fa42cd10ad3 at::TensorIterator::for_each()
[2m[36m(pid=73021)[0m     @     0x7fa42cd10d91 at::TensorIterator::for_each()
[2m[36m(pid=73021)[0m     @     0x7fa42d5f3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73014)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73014)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73014)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73014)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73014)[0m *** SIGSEGV (@0x0) received by PID 73014 (TID 0x7f4139f0a700) from PID 0; stack trace: ***
[2m[36m(pid=73014)[0m     @     0x7f4139ae3390 (unknown)
[2m[36m(pid=73014)[0m     @     0x7f1239a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72997)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72997)[0m *** SIGSEGV (@0x0) received by PID 72997 (TID 0x7fac36d41700) from PID 0; stack trace: ***
[2m[36m(pid=72997)[0m     @     0x7fac3691a390 (unknown)
[2m[36m(pid=72997)[0m     @     0x7f7d367bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72997)[0m     @     0x7f7d35ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72997)[0m     @     0x7f7d35ee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73058)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73058)[0m *** SIGSEGV (@0x0) received by PID 73058 (TID 0x7ff0a378b700) from PID 0; stack trace: ***
[2m[36m(pid=73058)[0m     @     0x7ff0a3364390 (unknown)
[2m[36m(pid=73058)[0m     @     0x7fc1a32e6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73058)[0m     @     0x7fc1a2a117db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73058)[0m     @     0x7fc1a2a148f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73058)[0m     @     0x7fc1a2a14ad3 at::TensorIterator::for_each()
[2m[36m(pid=72935)[0m *** SIGSEGV (@0x0) received by PID 72935 (TID 0x7f3f68d51700) from PID 0; stack trace: ***
[2m[36m(pid=72935)[0m     @     0x7f3f6892a390 (unknown)
[2m[36m(pid=72935)[0m     @     0x7f10688cbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72935)[0m     @     0x7f1067ff67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72935)[0m     @     0x7f1067ff98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72935)[0m     @     0x7f1067ff9ad3 at::TensorIterator::for_each()
[2m[36m(pid=72959)[0m     @     0x7f7f05013390 (unknown)
[2m[36m(pid=72959)[0m     @     0x7f5004b85f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72959)[0m     @     0x7f50042b07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72959)[0m     @     0x7f50042b38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72959)[0m     @     0x7f50042b3ad3 at::TensorIterator::for_each()
[2m[36m(pid=72959)[0m     @     0x7f50042b3d91 at::TensorIterator::for_each()
[2m[36m(pid=73051)[0m     @     0x7f78cad33390 (unknown)
[2m[36m(pid=73051)[0m     @     0x7f49caccff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73051)[0m     @     0x7f49ca3fa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73051)[0m     @     0x7f49ca3fd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73051)[0m     @     0x7f49ca3fdad3 at::TensorIterator::for_each()
[2m[36m(pid=73001)[0m     @     0x7f8ffde24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73001)[0m     @     0x7f8ffd54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73001)[0m     @     0x7f8ffd5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73001)[0m     @     0x7f8ffd552ad3 at::TensorIterator::for_each()
[2m[36m(pid=73001)[0m     @     0x7f8ffd552d91 at::TensorIterator::for_each()
[2m[36m(pid=73001)[0m     @     0x7f8ffde35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73001)[0m     @     0x7f8ffde58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73057)[0m     @     0x7f7c381244f5 at::Tensor::copy_()
[2m[36m(pid=73057)[0m     @     0x7f7c3a5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73057)[0m     @     0x7f7c381244f5 at::Tensor::copy_()
[2m[36m(pid=73057)[0m     @     0x7f7c3e1cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73057)[0m     @     0x555a4789ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73057)[0m     @     0x555a477fab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73057)[0m     @     0x555a47885baf _PyEval_EvalCodeWithName
[2m[36m(pid=73057)[0m     @     0x555a47886a20 method_vectorcall
[2m[36m(pid=73057)[0m     @     0x555a477fabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73057)[0m     @     0x555a47885baf _PyEval_EvalCodeWithName
[2m[36m(pid=73057)[0m     @     0x555a47886643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73057)[0m     @     0x555a477fb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73057)[0m     @     0x555a47885baf _PyEval_EvalCodeWithName
[2m[36m(pid=73057)[0m     @     0x555a47886643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73057)[0m     @     0x555a477fb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73057)[0m     @     0x555a47885baf _PyEval_EvalCodeWithName
[2m[36m(pid=73057)[0m     @     0x555a47886643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73057)[0m     @     0x555a477fb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73057)[0m     @     0x555a47885baf _PyEval_EvalCodeWithName
[2m[36m(pid=73057)[0m     @     0x555a47886643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73057)[0m     @     0x555a477fb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72999)[0m     @     0x7ef0e9701f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72999)[0m     @     0x7ef0e8e2c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72999)[0m     @     0x7ef0e8e2f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72999)[0m     @     0x7ef0e8e2fad3 at::TensorIterator::for_each()
[2m[36m(pid=72999)[0m     @     0x7ef0e8e2fd91 at::TensorIterator::for_each()
[2m[36m(pid=72999)[0m     @     0x7ef0e9712b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72999)[0m     @     0x7ef0e9735c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72930)[0m     @     0x7fa88b124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72930)[0m     @     0x7fa88a84f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72930)[0m     @     0x7fa88a8528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72930)[0m     @     0x7fa88a852ad3 at::TensorIterator::for_each()
[2m[36m(pid=72930)[0m     @     0x7fa88a852d91 at::TensorIterator::for_each()
[2m[36m(pid=72930)[0m     @     0x7fa88b135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72930)[0m     @     0x7fa88b158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72938)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72938)[0m *** SIGSEGV (@0x0) received by PID 72938 (TID 0x7ffad397b700) from PID 0; stack trace: ***
[2m[36m(pid=72938)[0m     @     0x7ffad3554390 (unknown)
[2m[36m(pid=72938)[0m     @     0x7fcbd2c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72938)[0m     @     0x7fcbd23407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72938)[0m     @     0x7fcbd23438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72938)[0m     @     0x7fcbd2343ad3 at::TensorIterator::for_each()
[2m[36m(pid=73006)[0m     @     0x7f1d457f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73006)[0m     @     0x7f1d44f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73006)[0m     @     0x7f1d44f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73006)[0m     @     0x7f1d44f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=72924)[0m     @     0x7f3127ee7390 (unknown)
[2m[36m(pid=72924)[0m     @     0x7f0225940f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72924)[0m     @     0x7f022506b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72924)[0m     @     0x7f022506e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72924)[0m     @     0x7f022506ead3 at::TensorIterator::for_each()
[2m[36m(pid=72932)[0m     @     0x7fcbb58688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72932)[0m     @     0x7fcbb5868ad3 at::TensorIterator::for_each()
[2m[36m(pid=72932)[0m     @     0x7fcbb5868d91 at::TensorIterator::for_each()
[2m[36m(pid=72932)[0m     @     0x7fcbb614bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72932)[0m     @     0x7fcbb616ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72932)[0m     @     0x7fcbb5610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72932)[0m     @     0x7fcbb560e388 at::native::copy_impl()
[2m[36m(pid=72925)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72925)[0m *** SIGSEGV (@0x0) received by PID 72925 (TID 0x7fad83d62700) from PID 0; stack trace: ***
[2m[36m(pid=72925)[0m     @     0x7fad8393b390 (unknown)
[2m[36m(pid=72925)[0m     @     0x7f7e83751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72925)[0m     @     0x7f7e82e7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72926)[0m     @     0x7efa6f575f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72926)[0m     @     0x7efa6eca07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72926)[0m     @     0x7efa6eca38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72926)[0m     @     0x7efa6eca3ad3 at::TensorIterator::for_each()
[2m[36m(pid=72926)[0m     @     0x7efa6eca3d91 at::TensorIterator::for_each()
[2m[36m(pid=72926)[0m     @     0x7efa6f586b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72926)[0m     @     0x7efa6f5a9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72945)[0m     @     0x7f536b764388 at::native::copy_impl()
[2m[36m(pid=72945)[0m     @     0x7f536b7665a4 at::native::copy_()
[2m[36m(pid=72945)[0m     @     0x7f536be514f5 at::Tensor::copy_()
[2m[36m(pid=72945)[0m     @     0x7f536e3248de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72945)[0m     @     0x7f536be514f5 at::Tensor::copy_()
[2m[36m(pid=72945)[0m     @     0x7f5371efc79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73011)[0m     @     0x7f339084f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73011)[0m     @     0x7f338e37c4f5 at::Tensor::copy_()
[2m[36m(pid=73011)[0m     @     0x7f339442779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73011)[0m     @     0x55c542878fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73011)[0m     @     0x55c5427d3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73011)[0m     @     0x55c54285ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73011)[0m     @     0x55c54285fa20 method_vectorcall
[2m[36m(pid=73011)[0m     @     0x55c5427d3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73011)[0m     @     0x55c54285ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73011)[0m     @     0x55c54285f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73011)[0m     @     0x55c5427d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73011)[0m     @     0x55c54285ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73011)[0m     @     0x55c54285f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73011)[0m     @     0x55c5427d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73011)[0m     @     0x55c54285ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73011)[0m     @     0x55c54285f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73011)[0m     @     0x55c5427d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73011)[0m     @     0x55c54285ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73011)[0m     @     0x55c54285f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73011)[0m     @     0x55c5427d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73009)[0m     @     0x7ef7897e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73009)[0m     @     0x7ef7873124f5 at::Tensor::copy_()
[2m[36m(pid=73009)[0m     @     0x7ef78d3bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73009)[0m     @     0x5640b3b84fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73009)[0m     @     0x5640b3adfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73009)[0m     @     0x5640b3b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=73009)[0m     @     0x5640b3b6ba20 method_vectorcall
[2m[36m(pid=73009)[0m     @     0x5640b3adfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73009)[0m     @     0x5640b3b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=73009)[0m     @     0x5640b3b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73009)[0m     @     0x5640b3ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73009)[0m     @     0x5640b3b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=73009)[0m     @     0x5640b3b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73009)[0m     @     0x5640b3ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73009)[0m     @     0x5640b3b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=73009)[0m     @     0x5640b3b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73009)[0m     @     0x5640b3ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73009)[0m     @     0x5640b3b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=73009)[0m     @     0x5640b3b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73009)[0m     @     0x5640b3ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73053)[0m     @     0x7f51818de4f5 at::Tensor::copy_()
[2m[36m(pid=73053)[0m     @     0x7f518798979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73053)[0m     @     0x55bc370edfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73053)[0m     @     0x55bc37048b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73053)[0m     @     0x55bc370d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73053)[0m     @     0x55bc370d4a20 method_vectorcall
[2m[36m(pid=73053)[0m     @     0x55bc37048bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73053)[0m     @     0x55bc370d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73053)[0m     @     0x55bc370d4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73053)[0m     @     0x55bc37049689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73053)[0m     @     0x55bc370d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73053)[0m     @     0x55bc370d4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73053)[0m     @     0x55bc37049689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73053)[0m     @     0x55bc370d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73053)[0m     @     0x55bc370d4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73053)[0m     @     0x55bc37049689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73053)[0m     @     0x55bc370d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73053)[0m     @     0x55bc370d4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73053)[0m     @     0x55bc37049689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73000)[0m     @     0x7f64175378de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73000)[0m     @     0x7f64150644f5 at::Tensor::copy_()
[2m[36m(pid=73000)[0m     @     0x7f641b10f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73000)[0m     @     0x5594d667cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73000)[0m     @     0x5594d65d7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73000)[0m     @     0x5594d6662baf _PyEval_EvalCodeWithName
[2m[36m(pid=73000)[0m     @     0x5594d6663a20 method_vectorcall
[2m[36m(pid=73000)[0m     @     0x5594d65d7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73000)[0m     @     0x5594d6662baf _PyEval_EvalCodeWithName
[2m[36m(pid=73000)[0m     @     0x5594d6663643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73000)[0m     @     0x5594d65d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73000)[0m     @     0x5594d6662baf _PyEval_EvalCodeWithName
[2m[36m(pid=73000)[0m     @     0x5594d6663643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73000)[0m     @     0x5594d65d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73000)[0m     @     0x5594d6662baf _PyEval_EvalCodeWithName
[2m[36m(pid=73000)[0m     @     0x5594d6663643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73000)[0m     @     0x5594d65d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73000)[0m     @     0x5594d6662baf _PyEval_EvalCodeWithName
[2m[36m(pid=73000)[0m     @     0x5594d6663643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73000)[0m     @     0x5594d65d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73027)[0m     @     0x7fa02b99f4f5 at::Tensor::copy_()
[2m[36m(pid=73027)[0m     @     0x7fa031a4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73027)[0m     @     0x556384456fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73027)[0m     @     0x5563843b1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73027)[0m     @     0x55638443cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73027)[0m     @     0x55638443da20 method_vectorcall
[2m[36m(pid=73027)[0m     @     0x5563843b1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73027)[0m     @     0x55638443cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73027)[0m     @     0x55638443d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73027)[0m     @     0x5563843b2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73027)[0m     @     0x55638443cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73027)[0m     @     0x55638443d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73027)[0m     @     0x5563843b2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73027)[0m     @     0x55638443cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73027)[0m     @     0x55638443d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73027)[0m     @     0x5563843b2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73027)[0m     @     0x55638443cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73027)[0m     @     0x55638443d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73027)[0m     @     0x5563843b2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73031)[0m     @     0x7ecdfb1fc5a4 at::native::copy_()
[2m[36m(pid=73031)[0m     @     0x7ecdfb8e74f5 at::Tensor::copy_()
[2m[36m(pid=73031)[0m     @     0x7ecdfddba8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73031)[0m     @     0x7ecdfb8e74f5 at::Tensor::copy_()
[2m[36m(pid=73031)[0m     @     0x7ece0199279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73031)[0m     @     0x558c44820fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73031)[0m     @     0x558c4477bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73031)[0m     @     0x558c44806baf _PyEval_EvalCodeWithName
[2m[36m(pid=73031)[0m     @     0x558c44807a20 method_vectorcall
[2m[36m(pid=73031)[0m     @     0x558c4477bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73031)[0m     @     0x558c44806baf _PyEval_EvalCodeWithName
[2m[36m(pid=73031)[0m     @     0x558c44807643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73031)[0m     @     0x558c4477c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73031)[0m     @     0x558c44806baf _PyEval_EvalCodeWithName
[2m[36m(pid=73031)[0m     @     0x558c44807643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73031)[0m     @     0x558c4477c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73031)[0m     @     0x558c44806baf _PyEval_EvalCodeWithName
[2m[36m(pid=73031)[0m     @     0x558c44807643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73031)[0m     @     0x558c4477c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73022)[0m     @     0x7f2d2f49f4f5 at::Tensor::copy_()
[2m[36m(pid=73022)[0m     @     0x7f2d3554a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73022)[0m     @     0x561e3dbb9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73022)[0m     @     0x561e3db14b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73022)[0m     @     0x561e3db9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73022)[0m     @     0x561e3dba0a20 method_vectorcall
[2m[36m(pid=73022)[0m     @     0x561e3db14bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73022)[0m     @     0x561e3db9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73022)[0m     @     0x561e3dba0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73022)[0m     @     0x561e3db15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73022)[0m     @     0x561e3db9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73022)[0m     @     0x561e3dba0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73022)[0m     @     0x561e3db15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73022)[0m     @     0x561e3db9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73022)[0m     @     0x561e3dba0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73022)[0m     @     0x561e3db15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73022)[0m     @     0x561e3db9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73022)[0m     @     0x561e3dba0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73022)[0m     @     0x561e3db15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73007)[0m     @     0x7eed201ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73007)[0m     @     0x7eed1dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=73007)[0m     @     0x7eed23da679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73007)[0m     @     0x557e4d506fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73007)[0m     @     0x557e4d461b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73007)[0m     @     0x557e4d4ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73007)[0m     @     0x557e4d4eda20 method_vectorcall
[2m[36m(pid=73007)[0m     @     0x557e4d461bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73007)[0m     @     0x557e4d4ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73007)[0m     @     0x557e4d4ed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73007)[0m     @     0x557e4d462689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73007)[0m     @     0x557e4d4ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73007)[0m     @     0x557e4d4ed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73007)[0m     @     0x557e4d462689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73007)[0m     @     0x557e4d4ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73007)[0m     @     0x557e4d4ed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73007)[0m     @     0x557e4d462689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73007)[0m     @     0x557e4d4ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73007)[0m     @     0x557e4d4ed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73007)[0m     @     0x557e4d462689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72923)[0m     @     0x7f17273e67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72923)[0m     @     0x7f17273e98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72923)[0m     @     0x7f17273e9ad3 at::TensorIterator::for_each()
[2m[36m(pid=72923)[0m     @     0x7f17273e9d91 at::TensorIterator::for_each()
[2m[36m(pid=73035)[0m     @     0x7f2ee61618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73035)[0m     @     0x7f2ee3c8e4f5 at::Tensor::copy_()
[2m[36m(pid=73035)[0m     @     0x7f2ee9d3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73035)[0m     @     0x55db59e31fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73035)[0m     @     0x55db59d8cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73035)[0m     @     0x55db59e17baf _PyEval_EvalCodeWithName
[2m[36m(pid=73035)[0m     @     0x55db59e18a20 method_vectorcall
[2m[36m(pid=73035)[0m     @     0x55db59d8cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73035)[0m     @     0x55db59e17baf _PyEval_EvalCodeWithName
[2m[36m(pid=73035)[0m     @     0x55db59e18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73035)[0m     @     0x55db59d8d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73035)[0m     @     0x55db59e17baf _PyEval_EvalCodeWithName
[2m[36m(pid=73035)[0m     @     0x55db59e18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73035)[0m     @     0x55db59d8d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73035)[0m     @     0x55db59e17baf _PyEval_EvalCodeWithName
[2m[36m(pid=73035)[0m     @     0x55db59e18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73035)[0m     @     0x55db59d8d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73035)[0m     @     0x55db59e17baf _PyEval_EvalCodeWithName
[2m[36m(pid=73035)[0m     @     0x55db59e18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73035)[0m     @     0x55db59d8d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72936)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72936)[0m *** SIGSEGV (@0x0) received by PID 72936 (TID 0x7f5230b06700) from PID 0; stack trace: ***
[2m[36m(pid=72936)[0m     @     0x7f52306df390 (unknown)
[2m[36m(pid=72936)[0m     @     0x7f233067af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72936)[0m     @     0x7f232fda57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73048)[0m     @     0x7fbb55ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73048)[0m     @     0x7fbb55cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73048)[0m     @     0x7fbb55cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=73048)[0m     @     0x7fbb55cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=73048)[0m     @     0x7fbb565b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72940)[0m     @     0x7ef12d5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72940)[0m     @     0x7ef12d552ad3 at::TensorIterator::for_each()
[2m[36m(pid=72940)[0m     @     0x7ef12d552d91 at::TensorIterator::for_each()
[2m[36m(pid=72940)[0m     @     0x7ef12de35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72940)[0m     @     0x7ef12de58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73015)[0m     @     0x7ece3c84f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73015)[0m     @     0x7ece3a37c4f5 at::Tensor::copy_()
[2m[36m(pid=73015)[0m     @     0x7ece4042779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73015)[0m     @     0x564f12b9ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73015)[0m     @     0x564f12afab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73015)[0m     @     0x564f12b85baf _PyEval_EvalCodeWithName
[2m[36m(pid=73015)[0m     @     0x564f12b86a20 method_vectorcall
[2m[36m(pid=73015)[0m     @     0x564f12afabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73015)[0m     @     0x564f12b85baf _PyEval_EvalCodeWithName
[2m[36m(pid=73015)[0m     @     0x564f12b86643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73015)[0m     @     0x564f12afb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73015)[0m     @     0x564f12b85baf _PyEval_EvalCodeWithName
[2m[36m(pid=73015)[0m     @     0x564f12b86643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73015)[0m     @     0x564f12afb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73015)[0m     @     0x564f12b85baf _PyEval_EvalCodeWithName
[2m[36m(pid=73015)[0m     @     0x564f12b86643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73015)[0m     @     0x564f12afb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73015)[0m     @     0x564f12b85baf _PyEval_EvalCodeWithName
[2m[36m(pid=73015)[0m     @     0x564f12b86643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73015)[0m     @     0x564f12afb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72998)[0m     @     0x7f0eb4502390 (unknown)
[2m[36m(pid=72998)[0m     @     0x7edfb4333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72947)[0m     @     0x7fafb17f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72947)[0m     @     0x7fafb0f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72947)[0m     @     0x7fafb0f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72947)[0m     @     0x7fafb0f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=72939)[0m     @     0x7f0c5c333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72939)[0m     @     0x7f0c5ba5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72939)[0m     @     0x7f0c5ba618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72939)[0m     @     0x7f0c5ba61ad3 at::TensorIterator::for_each()
[2m[36m(pid=72939)[0m     @     0x7f0c5ba61d91 at::TensorIterator::for_each()
[2m[36m(pid=72939)[0m     @     0x7f0c5c344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73008)[0m     @     0x7f2693c617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73008)[0m     @     0x7f2693c648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73008)[0m     @     0x7f2693c64ad3 at::TensorIterator::for_each()
[2m[36m(pid=73008)[0m     @     0x7f2693c64d91 at::TensorIterator::for_each()
[2m[36m(pid=73008)[0m     @     0x7f2694547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73008)[0m     @     0x7f269456ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73042)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=73042)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=73042)[0m *** Aborted at 1604573591 (unix time) try "date -d @1604573591" if you are using GNU date ***
[2m[36m(pid=73042)[0m PC: @                0x0 (unknown)
[2m[36m(pid=73042)[0m *** SIGSEGV (@0x0) received by PID 73042 (TID 0x7f900ee84700) from PID 0; stack trace: ***
[2m[36m(pid=73042)[0m     @     0x7f900ea5d390 (unknown)
[2m[36m(pid=73042)[0m     @     0x7f610e7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=73042)[0m     @     0x7f610dee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72991)[0m PC: @                0x0 (unknown)
[2m[36m(pid=72991)[0m *** SIGSEGV (@0x0) received by PID 72991 (TID 0x7f1c36372700) from PID 0; stack trace: ***
[2m[36m(pid=72991)[0m     @     0x7f1c35f4b390 (unknown)
[2m[36m(pid=72991)[0m     @     0x7eed35e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=72991)[0m     @     0x7eed3554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73040)[0m     @     0x7ef4ce4b18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73040)[0m     @     0x7ef4ce4b1ad3 at::TensorIterator::for_each()
[2m[36m(pid=73040)[0m     @     0x7ef4ce4b1d91 at::TensorIterator::for_each()
[2m[36m(pid=73040)[0m     @     0x7ef4ced94b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73040)[0m     @     0x7ef4cedb7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73036)[0m     @     0x56410a755baf _PyEval_EvalCodeWithName
[2m[36m(pid=73036)[0m     @     0x56410a756643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73036)[0m     @     0x56410a6cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73036)[0m     @     0x56410a755baf _PyEval_EvalCodeWithName
[2m[36m(pid=73036)[0m     @     0x56410a756643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73036)[0m     @     0x56410a6cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73025)[0m     @     0x7f283058b5a4 at::native::copy_()
[2m[36m(pid=73025)[0m     @     0x7f2830c764f5 at::Tensor::copy_()
[2m[36m(pid=73025)[0m     @     0x7f28331498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73025)[0m     @     0x7f2830c764f5 at::Tensor::copy_()
[2m[36m(pid=73024)[0m     @     0x55cf7d28bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73024)[0m     @     0x55cf7d316baf _PyEval_EvalCodeWithName
[2m[36m(pid=73024)[0m     @     0x55cf7d317a20 method_vectorcall
[2m[36m(pid=73024)[0m     @     0x55cf7d28bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73024)[0m     @     0x55cf7d316baf _PyEval_EvalCodeWithName
[2m[36m(pid=73024)[0m     @     0x55cf7d317643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73024)[0m     @     0x55cf7d28c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73024)[0m     @     0x55cf7d316baf _PyEval_EvalCodeWithName
[2m[36m(pid=73024)[0m     @     0x55cf7d317643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73024)[0m     @     0x55cf7d28c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73024)[0m     @     0x55cf7d316baf _PyEval_EvalCodeWithName
[2m[36m(pid=73024)[0m     @     0x55cf7d317643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73024)[0m     @     0x55cf7d28c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73024)[0m     @     0x55cf7d316baf _PyEval_EvalCodeWithName
[2m[36m(pid=73024)[0m     @     0x55cf7d317643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73024)[0m     @     0x55cf7d28c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73046)[0m     @     0x7ed1ea65479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73046)[0m     @     0x55a586a71fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73046)[0m     @     0x55a5869ccb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73046)[0m     @     0x55a586a57baf _PyEval_EvalCodeWithName
[2m[36m(pid=73046)[0m     @     0x55a586a58a20 method_vectorcall
[2m[36m(pid=73046)[0m     @     0x55a5869ccbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73046)[0m     @     0x55a586a57baf _PyEval_EvalCodeWithName
[2m[36m(pid=73046)[0m     @     0x55a586a58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73046)[0m     @     0x55a5869cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73046)[0m     @     0x55a586a57baf _PyEval_EvalCodeWithName
[2m[36m(pid=73046)[0m     @     0x55a586a58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73046)[0m     @     0x55a5869cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73046)[0m     @     0x55a586a57baf _PyEval_EvalCodeWithName
[2m[36m(pid=73046)[0m     @     0x55a586a58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73046)[0m     @     0x55a5869cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73046)[0m     @     0x55a586a57baf _PyEval_EvalCodeWithName
[2m[36m(pid=73046)[0m     @     0x55a586a58643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73046)[0m     @     0x55a5869cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72993)[0m     @     0x7f55646388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72993)[0m     @     0x7f55621654f5 at::Tensor::copy_()
[2m[36m(pid=72993)[0m     @     0x7f556821079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72993)[0m     @     0x55effaabafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72993)[0m     @     0x55effaa15b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72993)[0m     @     0x55effaaa0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72993)[0m     @     0x55effaaa1a20 method_vectorcall
[2m[36m(pid=72993)[0m     @     0x55effaa15bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72993)[0m     @     0x55effaaa0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72993)[0m     @     0x55effaaa1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72993)[0m     @     0x55effaa16689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72993)[0m     @     0x55effaaa0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72993)[0m     @     0x55effaaa1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72993)[0m     @     0x55effaa16689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72993)[0m     @     0x55effaaa0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72993)[0m     @     0x55effaaa1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72993)[0m     @     0x55effaa16689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72993)[0m     @     0x55effaaa0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72993)[0m     @     0x55effaaa1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72993)[0m     @     0x55effaa16689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73038)[0m     @     0x7efb23fb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73038)[0m     @     0x5580d4896fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73038)[0m     @     0x5580d47f1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73038)[0m     @     0x5580d487cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73038)[0m     @     0x5580d487da20 method_vectorcall
[2m[36m(pid=73038)[0m     @     0x5580d47f1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73038)[0m     @     0x5580d487cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73038)[0m     @     0x5580d487d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73038)[0m     @     0x5580d47f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73038)[0m     @     0x5580d487cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73038)[0m     @     0x5580d487d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73038)[0m     @     0x5580d47f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73038)[0m     @     0x5580d487cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73038)[0m     @     0x5580d487d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73038)[0m     @     0x5580d47f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73038)[0m     @     0x5580d487cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73038)[0m     @     0x5580d487d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73038)[0m     @     0x5580d47f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72987)[0m     @     0x7fa6be13d4f5 at::Tensor::copy_()
[2m[36m(pid=72987)[0m     @     0x7fa6c06108de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72987)[0m     @     0x7fa6be13d4f5 at::Tensor::copy_()
[2m[36m(pid=72987)[0m     @     0x7fa6c41e879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72987)[0m     @     0x56460e12ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72987)[0m     @     0x56460e08ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72987)[0m     @     0x56460e115baf _PyEval_EvalCodeWithName
[2m[36m(pid=72987)[0m     @     0x56460e116a20 method_vectorcall
[2m[36m(pid=72987)[0m     @     0x56460e08abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72987)[0m     @     0x56460e115baf _PyEval_EvalCodeWithName
[2m[36m(pid=72987)[0m     @     0x56460e116643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73016)[0m     @     0x7fa3794c84f5 at::Tensor::copy_()
[2m[36m(pid=73016)[0m     @     0x7fa37f57379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73016)[0m     @     0x560ede9dffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73016)[0m     @     0x560ede93ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73016)[0m     @     0x560ede9c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=73016)[0m     @     0x560ede9c6a20 method_vectorcall
[2m[36m(pid=73016)[0m     @     0x560ede93abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73016)[0m     @     0x560ede9c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=73016)[0m     @     0x560ede9c6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73016)[0m     @     0x560ede93b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73016)[0m     @     0x560ede9c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=73016)[0m     @     0x560ede9c6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73016)[0m     @     0x560ede93b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73016)[0m     @     0x560ede9c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=73016)[0m     @     0x560ede9c6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73016)[0m     @     0x560ede93b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73016)[0m     @     0x560ede9c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=73016)[0m     @     0x560ede9c6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73016)[0m     @     0x560ede93b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73013)[0m     @     0x7f99039cc4f5 at::Tensor::copy_()
[2m[36m(pid=73013)[0m     @     0x7f9905e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73013)[0m     @     0x7f99039cc4f5 at::Tensor::copy_()
[2m[36m(pid=73013)[0m     @     0x7f9909a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73013)[0m     @     0x55a6818a6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73013)[0m     @     0x55a681801b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73013)[0m     @     0x55a68188cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73013)[0m     @     0x55a68188da20 method_vectorcall
[2m[36m(pid=73013)[0m     @     0x55a681801bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72990)[0m     @     0x7f6f54a654f5 at::Tensor::copy_()
[2m[36m(pid=72990)[0m     @     0x7f6f56f388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72990)[0m     @     0x7f6f54a654f5 at::Tensor::copy_()
[2m[36m(pid=72990)[0m     @     0x7f6f5ab1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72990)[0m     @     0x55670b3cbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72990)[0m     @     0x55670b326b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72990)[0m     @     0x55670b3b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72990)[0m     @     0x55670b3b2a20 method_vectorcall
[2m[36m(pid=72990)[0m     @     0x55670b326bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72990)[0m     @     0x55670b3b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72990)[0m     @     0x55670b3b2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72990)[0m     @     0x55670b327689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72990)[0m     @     0x55670b3b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72990)[0m     @     0x55670b3b2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72990)[0m     @     0x55670b327689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72990)[0m     @     0x55670b3b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72990)[0m     @     0x55670b3b2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72990)[0m     @     0x55670b327689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72990)[0m     @     0x55670b3b1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72990)[0m     @     0x55670b3b2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72990)[0m     @     0x55670b327689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73029)[0m     @     0x7f5a4be9f4f5 at::Tensor::copy_()
[2m[36m(pid=73029)[0m     @     0x7f5a4e3728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73029)[0m     @     0x7f5a4be9f4f5 at::Tensor::copy_()
[2m[36m(pid=73029)[0m     @     0x7f5a51f4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73029)[0m     @     0x55c3deda6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73029)[0m     @     0x55c3ded01b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73029)[0m     @     0x55c3ded8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73029)[0m     @     0x55c3ded8da20 method_vectorcall
[2m[36m(pid=73029)[0m     @     0x55c3ded01bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73029)[0m     @     0x55c3ded8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73029)[0m     @     0x55c3ded8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73029)[0m     @     0x55c3ded02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73029)[0m     @     0x55c3ded8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73029)[0m     @     0x55c3ded8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73029)[0m     @     0x55c3ded02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73029)[0m     @     0x55c3ded8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73029)[0m     @     0x55c3ded8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73029)[0m     @     0x55c3ded02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73029)[0m     @     0x55c3ded8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73029)[0m     @     0x55c3ded8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73029)[0m     @     0x55c3ded02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72953)[0m     @     0x7f88e21d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=72953)[0m     @     0x7f88e21d2d91 at::TensorIterator::for_each()
[2m[36m(pid=72953)[0m     @     0x7f88e2ab5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72953)[0m     @     0x7f88e2ad8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72941)[0m     @     0x7fae22d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72941)[0m     @     0x7fae22d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=72941)[0m     @     0x7fae22d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=72941)[0m     @     0x7fae23630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72941)[0m     @     0x7fae23653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72954)[0m     @     0x7f5c03a0cad3 at::TensorIterator::for_each()
[2m[36m(pid=72954)[0m     @     0x7f5c03a0cd91 at::TensorIterator::for_each()
[2m[36m(pid=72954)[0m     @     0x7f5c042efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72954)[0m     @     0x7f5c04312c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72954)[0m     @     0x7f5c037b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73012)[0m     @     0x7f5d15bfaad3 at::TensorIterator::for_each()
[2m[36m(pid=73012)[0m     @     0x7f5d15bfad91 at::TensorIterator::for_each()
[2m[36m(pid=73012)[0m     @     0x7f5d164ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73012)[0m     @     0x7f5d16500c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72928)[0m     @     0x7f3ab67d64f5 at::Tensor::copy_()
[2m[36m(pid=72928)[0m     @     0x7f3ab8ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72928)[0m     @     0x7f3ab67d64f5 at::Tensor::copy_()
[2m[36m(pid=72928)[0m     @     0x7f3abc47779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72928)[0m     @     0x55d115db9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72928)[0m     @     0x55d115d14b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72928)[0m     @     0x55d115d9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72928)[0m     @     0x55d115da0a20 method_vectorcall
[2m[36m(pid=72928)[0m     @     0x55d115d14bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72928)[0m     @     0x55d115d9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72928)[0m     @     0x55d115da0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72928)[0m     @     0x55d115d15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72928)[0m     @     0x55d115d9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72928)[0m     @     0x55d115da0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72928)[0m     @     0x55d115d15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72928)[0m     @     0x55d115d9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72928)[0m     @     0x55d115da0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72928)[0m     @     0x55d115d15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72928)[0m     @     0x55d115d9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72928)[0m     @     0x55d115da0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72928)[0m     @     0x55d115d15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72942)[0m     @     0x7f41b83e54f5 at::Tensor::copy_()
[2m[36m(pid=72942)[0m     @     0x7f41be49079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72942)[0m     @     0x560791138fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72942)[0m     @     0x560791093b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72942)[0m     @     0x56079111ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=72942)[0m     @     0x56079111fa20 method_vectorcall
[2m[36m(pid=72942)[0m     @     0x560791093bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72942)[0m     @     0x56079111ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=72942)[0m     @     0x56079111f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72942)[0m     @     0x560791094689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72942)[0m     @     0x56079111ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=72942)[0m     @     0x56079111f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72942)[0m     @     0x560791094689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72942)[0m     @     0x56079111ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=72942)[0m     @     0x56079111f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72942)[0m     @     0x560791094689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72942)[0m     @     0x56079111ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=72942)[0m     @     0x56079111f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72942)[0m     @     0x560791094689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72931)[0m     @     0x7f5ab1ee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=72931)[0m     @     0x7f5ab1ee9d91 at::TensorIterator::for_each()
[2m[36m(pid=72931)[0m     @     0x7f5ab27ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72931)[0m     @     0x7f5ab27efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72931)[0m     @     0x7f5ab1c91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72931)[0m     @     0x7f5ab1c8f388 at::native::copy_impl()
[2m[36m(pid=72952)[0m     @     0x560a9d752643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72952)[0m     @     0x560a9d6c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72957)[0m     @     0x55dde18eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72957)[0m     @     0x55dde18eb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72957)[0m     @     0x55dde1860689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72957)[0m     @     0x55dde18eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72957)[0m     @     0x55dde18eb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72957)[0m     @     0x55dde1860689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72957)[0m     @     0x55dde18eabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72957)[0m     @     0x55dde18eb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72957)[0m     @     0x55dde1860689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72955)[0m     @     0x7eecc4711d91 at::TensorIterator::for_each()
[2m[36m(pid=72955)[0m     @     0x7eecc4ff4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72955)[0m     @     0x7eecc5017c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72955)[0m     @     0x7eecc44b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72955)[0m     @     0x7eecc44b7388 at::native::copy_impl()
[2m[36m(pid=72950)[0m     @     0x7f6a6094a4f5 at::Tensor::copy_()
[2m[36m(pid=72950)[0m     @     0x7f6a669f579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72950)[0m     @     0x5649bd2f3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72950)[0m     @     0x5649bd24eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72950)[0m     @     0x5649bd2d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72950)[0m     @     0x5649bd2daa20 method_vectorcall
[2m[36m(pid=72950)[0m     @     0x5649bd24ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72950)[0m     @     0x5649bd2d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72950)[0m     @     0x5649bd2da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72950)[0m     @     0x5649bd24f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72950)[0m     @     0x5649bd2d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72950)[0m     @     0x5649bd2da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72950)[0m     @     0x5649bd24f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72950)[0m     @     0x5649bd2d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72950)[0m     @     0x5649bd2da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72950)[0m     @     0x5649bd24f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72950)[0m     @     0x5649bd2d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72950)[0m     @     0x5649bd2da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72950)[0m     @     0x5649bd24f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72927)[0m     @     0x7f142c711ad3 at::TensorIterator::for_each()
[2m[36m(pid=72927)[0m     @     0x7f142c711d91 at::TensorIterator::for_each()
[2m[36m(pid=72927)[0m     @     0x7f142cff4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72927)[0m     @     0x7f142d017c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72956)[0m     @     0x7fb4d039f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72956)[0m     @     0x7fb4d03a28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72933)[0m     @     0x7f5c547e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72933)[0m     @     0x7f5c547e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72994)[0m     @     0x7fc4ecc118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72994)[0m     @     0x7fc4ecc11ad3 at::TensorIterator::for_each()
[2m[36m(pid=72994)[0m     @     0x7fc4ecc11d91 at::TensorIterator::for_each()
[2m[36m(pid=72994)[0m     @     0x7fc4ed4f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72994)[0m     @     0x7fc4ed517c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72937)[0m     @     0x7f854cbd1d91 at::TensorIterator::for_each()
[2m[36m(pid=72937)[0m     @     0x7f854d4b4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72937)[0m     @     0x7f854d4d7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72937)[0m     @     0x7f854c979a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72937)[0m     @     0x7f854c977388 at::native::copy_impl()
[2m[36m(pid=72989)[0m     @     0x7fa3b6957ad3 at::TensorIterator::for_each()
[2m[36m(pid=72989)[0m     @     0x7fa3b6957d91 at::TensorIterator::for_each()
[2m[36m(pid=72989)[0m     @     0x7fa3b723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72989)[0m     @     0x7fa3b725dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72989)[0m     @     0x7fa3b66ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72989)[0m     @     0x7fa3b66fd388 at::native::copy_impl()
[2m[36m(pid=73032)[0m     @     0x7f73de14fad3 at::TensorIterator::for_each()
[2m[36m(pid=73032)[0m     @     0x7f73de14fd91 at::TensorIterator::for_each()
[2m[36m(pid=73032)[0m     @     0x7f73dea32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73032)[0m     @     0x7f73dea55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73032)[0m     @     0x7f73ddef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73032)[0m     @     0x7f73ddef5388 at::native::copy_impl()
[2m[36m(pid=73010)[0m     @     0x7ed1f7eaaad3 at::TensorIterator::for_each()
[2m[36m(pid=73010)[0m     @     0x7ed1f7eaad91 at::TensorIterator::for_each()
[2m[36m(pid=73010)[0m     @     0x7ed1f878db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73010)[0m     @     0x7ed1f87b0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73010)[0m     @     0x7ed1f7c52a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73010)[0m     @     0x7ed1f7c50388 at::native::copy_impl()
[2m[36m(pid=72943)[0m     @     0x7f2a1dc27d91 at::TensorIterator::for_each()
[2m[36m(pid=72943)[0m     @     0x7f2a1e50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72943)[0m     @     0x7f2a1e52dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72943)[0m     @     0x7f2a1d9cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72943)[0m     @     0x7f2a1d9cd388 at::native::copy_impl()
[2m[36m(pid=72943)[0m     @     0x7f2a1d9cf5a4 at::native::copy_()
[2m[36m(pid=72988)[0m     @     0x7fa5a3d3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72988)[0m     @     0x7fa5a3d3cad3 at::TensorIterator::for_each()
[2m[36m(pid=72988)[0m     @     0x7fa5a3d3cd91 at::TensorIterator::for_each()
[2m[36m(pid=72988)[0m     @     0x7fa5a461fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72986)[0m     @     0x7fa338269ad3 at::TensorIterator::for_each()
[2m[36m(pid=72986)[0m     @     0x7fa338269d91 at::TensorIterator::for_each()
[2m[36m(pid=72986)[0m     @     0x7fa338b4cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72986)[0m     @     0x7fa338b6fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72963)[0m     @     0x7ed9ad0e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72963)[0m     @     0x7ed9ac58ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72963)[0m     @     0x7ed9ac589388 at::native::copy_impl()
[2m[36m(pid=72963)[0m     @     0x7ed9ac58b5a4 at::native::copy_()
[2m[36m(pid=73021)[0m     @     0x7fa42d616c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73021)[0m     @     0x7fa42cab8a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73021)[0m     @     0x7fa42cab6388 at::native::copy_impl()
[2m[36m(pid=73021)[0m     @     0x7fa42cab85a4 at::native::copy_()
[2m[36m(pid=73021)[0m     @     0x7fa42d1a34f5 at::Tensor::copy_()
[2m[36m(pid=73014)[0m     @     0x7f12391357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=73014)[0m     @     0x7f12391388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73014)[0m     @     0x7f1239138ad3 at::TensorIterator::for_each()
[2m[36m(pid=72997)[0m     @     0x7f7d35ee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=72997)[0m     @     0x7f7d35ee9d91 at::TensorIterator::for_each()
[2m[36m(pid=72997)[0m     @     0x7f7d367ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72997)[0m     @     0x7f7d367efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72997)[0m     @     0x7f7d35c91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73058)[0m     @     0x7fc1a2a14d91 at::TensorIterator::for_each()
[2m[36m(pid=73058)[0m     @     0x7fc1a32f7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73058)[0m     @     0x7fc1a331ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73058)[0m     @     0x7fc1a27bca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73058)[0m     @     0x7fc1a27ba388 at::native::copy_impl()
[2m[36m(pid=72935)[0m     @     0x7f1067ff9d91 at::TensorIterator::for_each()
[2m[36m(pid=72935)[0m     @     0x7f10688dcb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72935)[0m     @     0x7f10688ffc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72935)[0m     @     0x7f1067da1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72935)[0m     @     0x7f1067d9f388 at::native::copy_impl()
[2m[36m(pid=72959)[0m     @     0x7f5004b96b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72959)[0m     @     0x7f5004bb9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72959)[0m     @     0x7f500405ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72959)[0m     @     0x7f5004059388 at::native::copy_impl()
[2m[36m(pid=72959)[0m     @     0x7f500405b5a4 at::native::copy_()
[2m[36m(pid=73051)[0m     @     0x7f49ca3fdd91 at::TensorIterator::for_each()
[2m[36m(pid=73051)[0m     @     0x7f49cace0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73051)[0m     @     0x7f49cad03c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73051)[0m     @     0x7f49ca1a5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73051)[0m     @     0x7f49ca1a3388 at::native::copy_impl()
[2m[36m(pid=73001)[0m     @     0x7f8ffd2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73001)[0m     @     0x7f8ffd2f8388 at::native::copy_impl()
[2m[36m(pid=73001)[0m     @     0x7f8ffd2fa5a4 at::native::copy_()
[2m[36m(pid=73001)[0m     @     0x7f8ffd9e54f5 at::Tensor::copy_()
[2m[36m(pid=72999)[0m     @     0x7ef0e8bd7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72999)[0m     @     0x7ef0e8bd5388 at::native::copy_impl()
[2m[36m(pid=72930)[0m     @     0x7fa88a5faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72930)[0m     @     0x7fa88a5f8388 at::native::copy_impl()
[2m[36m(pid=72930)[0m     @     0x7fa88a5fa5a4 at::native::copy_()
[2m[36m(pid=72938)[0m     @     0x7fcbd2343d91 at::TensorIterator::for_each()
[2m[36m(pid=72938)[0m     @     0x7fcbd2c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72938)[0m     @     0x7fcbd2c49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72938)[0m     @     0x7fcbd20eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72938)[0m     @     0x7fcbd20e9388 at::native::copy_impl()
[2m[36m(pid=73006)[0m     @     0x7f1d44f27d91 at::TensorIterator::for_each()
[2m[36m(pid=73006)[0m     @     0x7f1d4580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73006)[0m     @     0x7f1d4582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73006)[0m     @     0x7f1d44ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73006)[0m     @     0x7f1d44ccd388 at::native::copy_impl()
[2m[36m(pid=72924)[0m     @     0x7f022506ed91 at::TensorIterator::for_each()
[2m[36m(pid=72924)[0m     @     0x7f0225951b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72924)[0m     @     0x7f0225974c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72924)[0m     @     0x7f0224e16a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72924)[0m     @     0x7f0224e14388 at::native::copy_impl()
[2m[36m(pid=72932)[0m     @     0x7fcbb56105a4 at::native::copy_()
[2m[36m(pid=72932)[0m     @     0x7fcbb5cfb4f5 at::Tensor::copy_()
[2m[36m(pid=72932)[0m     @     0x7fcbb81ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72932)[0m     @     0x7fcbb5cfb4f5 at::Tensor::copy_()
[2m[36m(pid=72925)[0m     @     0x7f7e82e7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72926)[0m     @     0x7efa6ea4ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72926)[0m     @     0x7efa6ea49388 at::native::copy_impl()
[2m[36m(pid=72926)[0m     @     0x7efa6ea4b5a4 at::native::copy_()
[2m[36m(pid=72945)[0m     @     0x55d73af4ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72945)[0m     @     0x55d73aeaab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72945)[0m     @     0x55d73af35baf _PyEval_EvalCodeWithName
[2m[36m(pid=72945)[0m     @     0x55d73af36a20 method_vectorcall
[2m[36m(pid=72945)[0m     @     0x55d73aeaabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72945)[0m     @     0x55d73af35baf _PyEval_EvalCodeWithName
[2m[36m(pid=72945)[0m     @     0x55d73af36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72945)[0m     @     0x55d73aeab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72945)[0m     @     0x55d73af35baf _PyEval_EvalCodeWithName
[2m[36m(pid=72945)[0m     @     0x55d73af36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72945)[0m     @     0x55d73aeab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72945)[0m     @     0x55d73af35baf _PyEval_EvalCodeWithName
[2m[36m(pid=72945)[0m     @     0x55d73af36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72945)[0m     @     0x55d73aeab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72945)[0m     @     0x55d73af35baf _PyEval_EvalCodeWithName
[2m[36m(pid=72945)[0m     @     0x55d73af36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72945)[0m     @     0x55d73aeab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73031)[0m     @     0x558c44806baf _PyEval_EvalCodeWithName
[2m[36m(pid=73031)[0m     @     0x558c44807643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73031)[0m     @     0x558c4477c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72923)[0m     @     0x7f1727cccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72923)[0m     @     0x7f1727cefc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72923)[0m     @     0x7f1727191a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72923)[0m     @     0x7f172718f388 at::native::copy_impl()
[2m[36m(pid=72923)[0m     @     0x7f17271915a4 at::native::copy_()
[2m[36m(pid=72923)[0m     @     0x7f172787c4f5 at::Tensor::copy_()
[2m[36m(pid=72936)[0m     @     0x7f232fda88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72936)[0m     @     0x7f232fda8ad3 at::TensorIterator::for_each()
[2m[36m(pid=73048)[0m     @     0x7fbb565d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73048)[0m     @     0x7fbb55a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73048)[0m     @     0x7fbb55a78388 at::native::copy_impl()
[2m[36m(pid=73048)[0m     @     0x7fbb55a7a5a4 at::native::copy_()
[2m[36m(pid=73048)[0m     @     0x7fbb561654f5 at::Tensor::copy_()
[2m[36m(pid=73048)[0m     @     0x7fbb586388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72940)[0m     @     0x7ef12d2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72998)[0m     @     0x7edfb3a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=72998)[0m     @     0x7edfb3a618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72998)[0m     @     0x7edfb3a61ad3 at::TensorIterator::for_each()
[2m[36m(pid=72947)[0m     @     0x7fafb0f27d91 at::TensorIterator::for_each()
[2m[36m(pid=72947)[0m     @     0x7fafb180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72947)[0m     @     0x7fafb182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72947)[0m     @     0x7fafb0ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72947)[0m     @     0x7fafb0ccd388 at::native::copy_impl()
[2m[36m(pid=72947)[0m     @     0x7fafb0ccf5a4 at::native::copy_()
[2m[36m(pid=72939)[0m     @     0x7f0c5c367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72939)[0m     @     0x7f0c5b809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72939)[0m     @     0x7f0c5b807388 at::native::copy_impl()
[2m[36m(pid=72939)[0m     @     0x7f0c5b8095a4 at::native::copy_()
[2m[36m(pid=72939)[0m     @     0x7f0c5bef44f5 at::Tensor::copy_()
[2m[36m(pid=72939)[0m     @     0x7f0c5e3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73008)[0m     @     0x7f2693a0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73008)[0m     @     0x7f2693a0a388 at::native::copy_impl()
[2m[36m(pid=73008)[0m     @     0x7f2693a0c5a4 at::native::copy_()
[2m[36m(pid=73008)[0m     @     0x7f26940f74f5 at::Tensor::copy_()
[2m[36m(pid=73008)[0m     @     0x7f26965ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73042)[0m     @     0x7f610dee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=73042)[0m     @     0x7f610dee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=73042)[0m     @     0x7f610dee9d91 at::TensorIterator::for_each()
[2m[36m(pid=73042)[0m     @     0x7f610e7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73042)[0m     @     0x7f610e7efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72991)[0m     @     0x7eed355528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=72991)[0m     @     0x7eed35552ad3 at::TensorIterator::for_each()
[2m[36m(pid=73040)[0m     @     0x7ef4ce259a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73040)[0m     @     0x7ef4ce257388 at::native::copy_impl()
[2m[36m(pid=73040)[0m     @     0x7ef4ce2595a4 at::native::copy_()
[2m[36m(pid=73040)[0m     @     0x7ef4ce9444f5 at::Tensor::copy_()
[2m[36m(pid=73040)[0m     @     0x7ef4d0e178de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73025)[0m     @     0x7f2836d2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73025)[0m     @     0x55f5a3970fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73025)[0m     @     0x55f5a38cbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73025)[0m     @     0x55f5a3956baf _PyEval_EvalCodeWithName
[2m[36m(pid=73025)[0m     @     0x55f5a3957a20 method_vectorcall
[2m[36m(pid=73025)[0m     @     0x55f5a38cbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73025)[0m     @     0x55f5a3956baf _PyEval_EvalCodeWithName
[2m[36m(pid=73025)[0m     @     0x55f5a3957643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73025)[0m     @     0x55f5a38cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73025)[0m     @     0x55f5a3956baf _PyEval_EvalCodeWithName
[2m[36m(pid=73025)[0m     @     0x55f5a3957643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73025)[0m     @     0x55f5a38cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73025)[0m     @     0x55f5a3956baf _PyEval_EvalCodeWithName
[2m[36m(pid=73025)[0m     @     0x55f5a3957643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73025)[0m     @     0x55f5a38cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73025)[0m     @     0x55f5a3956baf _PyEval_EvalCodeWithName
[2m[36m(pid=73025)[0m     @     0x55f5a3957643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73025)[0m     @     0x55f5a38cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72987)[0m     @     0x56460e08b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72987)[0m     @     0x56460e115baf _PyEval_EvalCodeWithName
[2m[36m(pid=72987)[0m     @     0x56460e116643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72987)[0m     @     0x56460e08b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72987)[0m     @     0x56460e115baf _PyEval_EvalCodeWithName
[2m[36m(pid=72987)[0m     @     0x56460e116643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72987)[0m     @     0x56460e08b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72987)[0m     @     0x56460e115baf _PyEval_EvalCodeWithName
[2m[36m(pid=72987)[0m     @     0x56460e116643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72987)[0m     @     0x56460e08b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73013)[0m     @     0x55a68188cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73013)[0m     @     0x55a68188d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73013)[0m     @     0x55a681802689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73013)[0m     @     0x55a68188cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73013)[0m     @     0x55a68188d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73013)[0m     @     0x55a681802689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73013)[0m     @     0x55a68188cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73013)[0m     @     0x55a68188d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73013)[0m     @     0x55a681802689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73013)[0m     @     0x55a68188cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73013)[0m     @     0x55a68188d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73013)[0m     @     0x55a681802689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72953)[0m     @     0x7f88e1f7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72953)[0m     @     0x7f88e1f78388 at::native::copy_impl()
[2m[36m(pid=72953)[0m     @     0x7f88e1f7a5a4 at::native::copy_()
[2m[36m(pid=72953)[0m     @     0x7f88e26654f5 at::Tensor::copy_()
[2m[36m(pid=72941)[0m     @     0x7fae22af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72941)[0m     @     0x7fae22af3388 at::native::copy_impl()
[2m[36m(pid=72941)[0m     @     0x7fae22af55a4 at::native::copy_()
[2m[36m(pid=72941)[0m     @     0x7fae231e04f5 at::Tensor::copy_()
[2m[36m(pid=72954)[0m     @     0x7f5c037b2388 at::native::copy_impl()
[2m[36m(pid=72954)[0m     @     0x7f5c037b45a4 at::native::copy_()
[2m[36m(pid=72954)[0m     @     0x7f5c03e9f4f5 at::Tensor::copy_()
[2m[36m(pid=72954)[0m     @     0x7f5c063728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73012)[0m     @     0x7f5d159a2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73012)[0m     @     0x7f5d159a0388 at::native::copy_impl()
[2m[36m(pid=73012)[0m     @     0x7f5d159a25a4 at::native::copy_()
[2m[36m(pid=73012)[0m     @     0x7f5d1608d4f5 at::Tensor::copy_()
[2m[36m(pid=72931)[0m     @     0x7f5ab1c915a4 at::native::copy_()
[2m[36m(pid=72931)[0m     @     0x7f5ab237c4f5 at::Tensor::copy_()
[2m[36m(pid=72931)[0m     @     0x7f5ab484f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72955)[0m     @     0x7eecc44b95a4 at::native::copy_()
[2m[36m(pid=72955)[0m     @     0x7eecc4ba44f5 at::Tensor::copy_()
[2m[36m(pid=72955)[0m     @     0x7eecc70778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72955)[0m     @     0x7eecc4ba44f5 at::Tensor::copy_()
[2m[36m(pid=72927)[0m     @     0x7f142c4b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72927)[0m     @     0x7f142c4b7388 at::native::copy_impl()
[2m[36m(pid=72927)[0m     @     0x7f142c4b95a4 at::native::copy_()
[2m[36m(pid=72927)[0m     @     0x7f142cba44f5 at::Tensor::copy_()
[2m[36m(pid=72956)[0m     @     0x7fb4d03a2ad3 at::TensorIterator::for_each()
[2m[36m(pid=72956)[0m     @     0x7fb4d03a2d91 at::TensorIterator::for_each()
[2m[36m(pid=72956)[0m     @     0x7fb4d0c85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72933)[0m     @     0x7f5c547e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=72994)[0m     @     0x7fc4ec9b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72994)[0m     @     0x7fc4ec9b7388 at::native::copy_impl()
[2m[36m(pid=72994)[0m     @     0x7fc4ec9b95a4 at::native::copy_()
[2m[36m(pid=72937)[0m     @     0x7f854c9795a4 at::native::copy_()
[2m[36m(pid=72937)[0m     @     0x7f854d0644f5 at::Tensor::copy_()
[2m[36m(pid=72937)[0m     @     0x7f854f5378de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72937)[0m     @     0x7f854d0644f5 at::Tensor::copy_()
[2m[36m(pid=72937)[0m     @     0x7f855310f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72937)[0m     @     0x564843405fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72937)[0m     @     0x564843360b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72937)[0m     @     0x5648433ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72937)[0m     @     0x5648433eca20 method_vectorcall
[2m[36m(pid=72937)[0m     @     0x564843360bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72937)[0m     @     0x5648433ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72937)[0m     @     0x5648433ec643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72937)[0m     @     0x564843361689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72937)[0m     @     0x5648433ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72937)[0m     @     0x5648433ec643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72937)[0m     @     0x564843361689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72937)[0m     @     0x5648433ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72937)[0m     @     0x5648433ec643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72937)[0m     @     0x564843361689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72989)[0m     @     0x7fa3b66ff5a4 at::native::copy_()
[2m[36m(pid=72989)[0m     @     0x7fa3b6dea4f5 at::Tensor::copy_()
[2m[36m(pid=72989)[0m     @     0x7fa3b92bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72989)[0m     @     0x7fa3b6dea4f5 at::Tensor::copy_()
[2m[36m(pid=72989)[0m     @     0x7fa3bce9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72989)[0m     @     0x55852483afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72989)[0m     @     0x558524795b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72989)[0m     @     0x558524820baf _PyEval_EvalCodeWithName
[2m[36m(pid=72989)[0m     @     0x558524821a20 method_vectorcall
[2m[36m(pid=72989)[0m     @     0x558524795bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72989)[0m     @     0x558524820baf _PyEval_EvalCodeWithName
[2m[36m(pid=72989)[0m     @     0x558524821643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72989)[0m     @     0x558524796689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72989)[0m     @     0x558524820baf _PyEval_EvalCodeWithName
[2m[36m(pid=72989)[0m     @     0x558524821643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73032)[0m     @     0x7f73ddef75a4 at::native::copy_()
[2m[36m(pid=73032)[0m     @     0x7f73de5e24f5 at::Tensor::copy_()
[2m[36m(pid=73032)[0m     @     0x7f73e0ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73032)[0m     @     0x7f73de5e24f5 at::Tensor::copy_()
[2m[36m(pid=73032)[0m     @     0x7f73e468d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73032)[0m     @     0x55fd70a55fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73032)[0m     @     0x55fd709b0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73032)[0m     @     0x55fd70a3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73032)[0m     @     0x55fd70a3ca20 method_vectorcall
[2m[36m(pid=73032)[0m     @     0x55fd709b0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73032)[0m     @     0x55fd70a3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73032)[0m     @     0x55fd70a3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73010)[0m     @     0x7ed1f7c525a4 at::native::copy_()
[2m[36m(pid=73010)[0m     @     0x7ed1f833d4f5 at::Tensor::copy_()
[2m[36m(pid=73010)[0m     @     0x7ed1fa8108de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73010)[0m     @     0x7ed1f833d4f5 at::Tensor::copy_()
[2m[36m(pid=72943)[0m     @     0x7f2a1e0ba4f5 at::Tensor::copy_()
[2m[36m(pid=72943)[0m     @     0x7f2a2058d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72943)[0m     @     0x7f2a1e0ba4f5 at::Tensor::copy_()
[2m[36m(pid=72943)[0m     @     0x7f2a2416579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72943)[0m     @     0x564b795b2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72943)[0m     @     0x564b7950db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72943)[0m     @     0x564b79598baf _PyEval_EvalCodeWithName
[2m[36m(pid=72943)[0m     @     0x564b79599a20 method_vectorcall
[2m[36m(pid=72943)[0m     @     0x564b7950dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72943)[0m     @     0x564b79598baf _PyEval_EvalCodeWithName
[2m[36m(pid=72943)[0m     @     0x564b79599643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72943)[0m     @     0x564b7950e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72943)[0m     @     0x564b79598baf _PyEval_EvalCodeWithName
[2m[36m(pid=72943)[0m     @     0x564b79599643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72943)[0m     @     0x564b7950e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72943)[0m     @     0x564b79598baf _PyEval_EvalCodeWithName
[2m[36m(pid=72943)[0m     @     0x564b79599643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72943)[0m     @     0x564b7950e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72943)[0m     @     0x564b79598baf _PyEval_EvalCodeWithName
[2m[36m(pid=72943)[0m     @     0x564b79599643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72943)[0m     @     0x564b7950e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72988)[0m     @     0x7fa5a4642c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72988)[0m     @     0x7fa5a3ae4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72988)[0m     @     0x7fa5a3ae2388 at::native::copy_impl()
[2m[36m(pid=72988)[0m     @     0x7fa5a3ae45a4 at::native::copy_()
[2m[36m(pid=72988)[0m     @     0x7fa5a41cf4f5 at::Tensor::copy_()
[2m[36m(pid=72986)[0m     @     0x7fa338011a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72986)[0m     @     0x7fa33800f388 at::native::copy_impl()
[2m[36m(pid=72986)[0m     @     0x7fa3380115a4 at::native::copy_()
[2m[36m(pid=72986)[0m     @     0x7fa3386fc4f5 at::Tensor::copy_()
[2m[36m(pid=72986)[0m     @     0x7fa33abcf8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72963)[0m     @     0x7ed9acc764f5 at::Tensor::copy_()
[2m[36m(pid=72963)[0m     @     0x7ed9af1498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72963)[0m     @     0x7ed9acc764f5 at::Tensor::copy_()
[2m[36m(pid=72963)[0m     @     0x7ed9b2d2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72963)[0m     @     0x55a502426fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72963)[0m     @     0x55a502381b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72963)[0m     @     0x55a50240cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72963)[0m     @     0x55a50240da20 method_vectorcall
[2m[36m(pid=72963)[0m     @     0x55a502381bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72963)[0m     @     0x55a50240cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72963)[0m     @     0x55a50240d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72963)[0m     @     0x55a502382689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72963)[0m     @     0x55a50240cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72963)[0m     @     0x55a50240d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72963)[0m     @     0x55a502382689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72963)[0m     @     0x55a50240cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73021)[0m     @     0x7fa42f6768de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73021)[0m     @     0x7fa42d1a34f5 at::Tensor::copy_()
[2m[36m(pid=73021)[0m     @     0x7fa43324e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73021)[0m     @     0x5635db136fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73021)[0m     @     0x5635db091b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73021)[0m     @     0x5635db11cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73021)[0m     @     0x5635db11da20 method_vectorcall
[2m[36m(pid=73021)[0m     @     0x5635db091bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73021)[0m     @     0x5635db11cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73021)[0m     @     0x5635db11d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73021)[0m     @     0x5635db092689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73021)[0m     @     0x5635db11cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73021)[0m     @     0x5635db11d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73021)[0m     @     0x5635db092689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73021)[0m     @     0x5635db11cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73021)[0m     @     0x5635db11d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73021)[0m     @     0x5635db092689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73021)[0m     @     0x5635db11cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73021)[0m     @     0x5635db11d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73021)[0m     @     0x5635db092689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73014)[0m     @     0x7f1239138d91 at::TensorIterator::for_each()
[2m[36m(pid=73014)[0m     @     0x7f1239a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=73014)[0m     @     0x7f1239a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73014)[0m     @     0x7f1238ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73014)[0m     @     0x7f1238ede388 at::native::copy_impl()
[2m[36m(pid=72997)[0m     @     0x7f7d35c8f388 at::native::copy_impl()
[2m[36m(pid=72997)[0m     @     0x7f7d35c915a4 at::native::copy_()
[2m[36m(pid=72997)[0m     @     0x7f7d3637c4f5 at::Tensor::copy_()
[2m[36m(pid=72997)[0m     @     0x7f7d3884f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73058)[0m     @     0x7fc1a27bc5a4 at::native::copy_()
[2m[36m(pid=73058)[0m     @     0x7fc1a2ea74f5 at::Tensor::copy_()
[2m[36m(pid=73058)[0m     @     0x7fc1a537a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73058)[0m     @     0x7fc1a2ea74f5 at::Tensor::copy_()
[2m[36m(pid=73058)[0m     @     0x7fc1a8f5279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73058)[0m     @     0x557a56750fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73058)[0m     @     0x557a566abb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73058)[0m     @     0x557a56736baf _PyEval_EvalCodeWithName
[2m[36m(pid=72935)[0m     @     0x7f1067da15a4 at::native::copy_()
[2m[36m(pid=72935)[0m     @     0x7f106848c4f5 at::Tensor::copy_()
[2m[36m(pid=72935)[0m     @     0x7f106a95f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72935)[0m     @     0x7f106848c4f5 at::Tensor::copy_()
[2m[36m(pid=72935)[0m     @     0x7f106e53779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72935)[0m     @     0x56542415cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72935)[0m     @     0x5654240b7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72935)[0m     @     0x565424142baf _PyEval_EvalCodeWithName
[2m[36m(pid=72935)[0m     @     0x565424143a20 method_vectorcall
[2m[36m(pid=72935)[0m     @     0x5654240b7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72935)[0m     @     0x565424142baf _PyEval_EvalCodeWithName
[2m[36m(pid=72935)[0m     @     0x565424143643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72935)[0m     @     0x5654240b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72935)[0m     @     0x565424142baf _PyEval_EvalCodeWithName
[2m[36m(pid=72935)[0m     @     0x565424143643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72935)[0m     @     0x5654240b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72935)[0m     @     0x565424142baf _PyEval_EvalCodeWithName
[2m[36m(pid=72935)[0m     @     0x565424143643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72935)[0m     @     0x5654240b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72935)[0m     @     0x565424142baf _PyEval_EvalCodeWithName
[2m[36m(pid=72935)[0m     @     0x565424143643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72935)[0m     @     0x5654240b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72959)[0m     @     0x7f50047464f5 at::Tensor::copy_()
[2m[36m(pid=72959)[0m     @     0x7f5006c198de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72959)[0m     @     0x7f50047464f5 at::Tensor::copy_()
[2m[36m(pid=72959)[0m     @     0x7f500a7f179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72959)[0m     @     0x55ddb1eb3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72959)[0m     @     0x55ddb1e0eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72959)[0m     @     0x55ddb1e99baf _PyEval_EvalCodeWithName
[2m[36m(pid=72959)[0m     @     0x55ddb1e9aa20 method_vectorcall
[2m[36m(pid=72959)[0m     @     0x55ddb1e0ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72959)[0m     @     0x55ddb1e99baf _PyEval_EvalCodeWithName
[2m[36m(pid=72959)[0m     @     0x55ddb1e9a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72959)[0m     @     0x55ddb1e0f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72959)[0m     @     0x55ddb1e99baf _PyEval_EvalCodeWithName
[2m[36m(pid=72959)[0m     @     0x55ddb1e9a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72959)[0m     @     0x55ddb1e0f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72959)[0m     @     0x55ddb1e99baf _PyEval_EvalCodeWithName
[2m[36m(pid=72959)[0m     @     0x55ddb1e9a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72959)[0m     @     0x55ddb1e0f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72959)[0m     @     0x55ddb1e99baf _PyEval_EvalCodeWithName
[2m[36m(pid=72959)[0m     @     0x55ddb1e9a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72959)[0m     @     0x55ddb1e0f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73051)[0m     @     0x7f49ca1a55a4 at::native::copy_()
[2m[36m(pid=73051)[0m     @     0x7f49ca8904f5 at::Tensor::copy_()
[2m[36m(pid=73051)[0m     @     0x7f49ccd638de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73051)[0m     @     0x7f49ca8904f5 at::Tensor::copy_()
[2m[36m(pid=73001)[0m     @     0x7f8fffeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73001)[0m     @     0x7f8ffd9e54f5 at::Tensor::copy_()
[2m[36m(pid=73001)[0m     @     0x7f9003a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73001)[0m     @     0x56149816efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73001)[0m     @     0x5614980c9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73001)[0m     @     0x561498154baf _PyEval_EvalCodeWithName
[2m[36m(pid=73001)[0m     @     0x561498155a20 method_vectorcall
[2m[36m(pid=73001)[0m     @     0x5614980c9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73001)[0m     @     0x561498154baf _PyEval_EvalCodeWithName
[2m[36m(pid=73001)[0m     @     0x561498155643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73001)[0m     @     0x5614980ca689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73001)[0m     @     0x561498154baf _PyEval_EvalCodeWithName
[2m[36m(pid=73001)[0m     @     0x561498155643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73001)[0m     @     0x5614980ca689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73001)[0m     @     0x561498154baf _PyEval_EvalCodeWithName
[2m[36m(pid=73001)[0m     @     0x561498155643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73001)[0m     @     0x5614980ca689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73001)[0m     @     0x561498154baf _PyEval_EvalCodeWithName
[2m[36m(pid=73001)[0m     @     0x561498155643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73001)[0m     @     0x5614980ca689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72999)[0m     @     0x7ef0e8bd75a4 at::native::copy_()
[2m[36m(pid=72999)[0m     @     0x7ef0e92c24f5 at::Tensor::copy_()
[2m[36m(pid=72999)[0m     @     0x7ef0eb7958de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72930)[0m     @     0x7fa88ace54f5 at::Tensor::copy_()
[2m[36m(pid=72930)[0m     @     0x7fa88d1b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72930)[0m     @     0x7fa88ace54f5 at::Tensor::copy_()
[2m[36m(pid=72930)[0m     @     0x7fa890d9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72930)[0m     @     0x55e97a513fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72930)[0m     @     0x55e97a46eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72930)[0m     @     0x55e97a4f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72930)[0m     @     0x55e97a4faa20 method_vectorcall
[2m[36m(pid=72930)[0m     @     0x55e97a46ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72930)[0m     @     0x55e97a4f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72930)[0m     @     0x55e97a4fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72930)[0m     @     0x55e97a46f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72930)[0m     @     0x55e97a4f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72930)[0m     @     0x55e97a4fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72930)[0m     @     0x55e97a46f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72930)[0m     @     0x55e97a4f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72930)[0m     @     0x55e97a4fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72930)[0m     @     0x55e97a46f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72930)[0m     @     0x55e97a4f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72930)[0m     @     0x55e97a4fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72930)[0m     @     0x55e97a46f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72938)[0m     @     0x7fcbd20eb5a4 at::native::copy_()
[2m[36m(pid=72938)[0m     @     0x7fcbd27d64f5 at::Tensor::copy_()
[2m[36m(pid=72938)[0m     @     0x7fcbd4ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72938)[0m     @     0x7fcbd27d64f5 at::Tensor::copy_()
[2m[36m(pid=72938)[0m     @     0x7fcbd847779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72938)[0m     @     0x55b525a13fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72938)[0m     @     0x55b52596eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72938)[0m     @     0x55b5259f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72938)[0m     @     0x55b5259faa20 method_vectorcall
[2m[36m(pid=72938)[0m     @     0x55b52596ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73006)[0m     @     0x7f1d44ccf5a4 at::native::copy_()
[2m[36m(pid=73006)[0m     @     0x7f1d453ba4f5 at::Tensor::copy_()
[2m[36m(pid=73006)[0m     @     0x7f1d4788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73006)[0m     @     0x7f1d453ba4f5 at::Tensor::copy_()
[2m[36m(pid=73006)[0m     @     0x7f1d4b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73006)[0m     @     0x564149e78fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73006)[0m     @     0x564149dd3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73006)[0m     @     0x564149e5ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73006)[0m     @     0x564149e5fa20 method_vectorcall
[2m[36m(pid=73006)[0m     @     0x564149dd3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73006)[0m     @     0x564149e5ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73006)[0m     @     0x564149e5f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73006)[0m     @     0x564149dd4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73006)[0m     @     0x564149e5ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73006)[0m     @     0x564149e5f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73006)[0m     @     0x564149dd4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73006)[0m     @     0x564149e5ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73006)[0m     @     0x564149e5f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73006)[0m     @     0x564149dd4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73006)[0m     @     0x564149e5ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=73006)[0m     @     0x564149e5f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73006)[0m     @     0x564149dd4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72924)[0m     @     0x7f0224e165a4 at::native::copy_()
[2m[36m(pid=72924)[0m     @     0x7f02255014f5 at::Tensor::copy_()
[2m[36m(pid=72924)[0m     @     0x7f02279d48de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72932)[0m     @     0x7fcbbbda679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72932)[0m     @     0x5638dd8cefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72932)[0m     @     0x5638dd829b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72932)[0m     @     0x5638dd8b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=72932)[0m     @     0x5638dd8b5a20 method_vectorcall
[2m[36m(pid=72932)[0m     @     0x5638dd829bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72932)[0m     @     0x5638dd8b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=72932)[0m     @     0x5638dd8b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72932)[0m     @     0x5638dd82a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72932)[0m     @     0x5638dd8b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=72932)[0m     @     0x5638dd8b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72932)[0m     @     0x5638dd82a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72932)[0m     @     0x5638dd8b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=72932)[0m     @     0x5638dd8b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72932)[0m     @     0x5638dd82a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72932)[0m     @     0x5638dd8b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=72932)[0m     @     0x5638dd8b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72932)[0m     @     0x5638dd82a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72925)[0m     @     0x7f7e82e7fad3 at::TensorIterator::for_each()
[2m[36m(pid=72925)[0m     @     0x7f7e82e7fd91 at::TensorIterator::for_each()
[2m[36m(pid=72925)[0m     @     0x7f7e83762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72925)[0m     @     0x7f7e83785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72925)[0m     @     0x7f7e82c27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72925)[0m     @     0x7f7e82c25388 at::native::copy_impl()
[2m[36m(pid=72926)[0m     @     0x7efa6f1364f5 at::Tensor::copy_()
[2m[36m(pid=72926)[0m     @     0x7efa716098de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72926)[0m     @     0x7efa6f1364f5 at::Tensor::copy_()
[2m[36m(pid=72926)[0m     @     0x7efa751e179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72926)[0m     @     0x56337e5bbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72926)[0m     @     0x56337e516b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72926)[0m     @     0x56337e5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72926)[0m     @     0x56337e5a2a20 method_vectorcall
[2m[36m(pid=72926)[0m     @     0x56337e516bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72926)[0m     @     0x56337e5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72926)[0m     @     0x56337e5a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72926)[0m     @     0x56337e517689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72926)[0m     @     0x56337e5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72926)[0m     @     0x56337e5a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72926)[0m     @     0x56337e517689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72926)[0m     @     0x56337e5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72926)[0m     @     0x56337e5a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72926)[0m     @     0x56337e517689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72926)[0m     @     0x56337e5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72926)[0m     @     0x56337e5a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72926)[0m     @     0x56337e517689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72923)[0m     @     0x7f1729d4f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72936)[0m     @     0x7f232fda8d91 at::TensorIterator::for_each()
[2m[36m(pid=72936)[0m     @     0x7f233068bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72936)[0m     @     0x7f23306aec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72936)[0m     @     0x7f232fb50a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72936)[0m     @     0x7f232fb4e388 at::native::copy_impl()
[2m[36m(pid=73048)[0m     @     0x7fbb561654f5 at::Tensor::copy_()
[2m[36m(pid=73048)[0m     @     0x7fbb5c21079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73048)[0m     @     0x55d93fdc2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73048)[0m     @     0x55d93fd1db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73048)[0m     @     0x55d93fda8baf _PyEval_EvalCodeWithName
[2m[36m(pid=73048)[0m     @     0x55d93fda9a20 method_vectorcall
[2m[36m(pid=73048)[0m     @     0x55d93fd1dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73048)[0m     @     0x55d93fda8baf _PyEval_EvalCodeWithName
[2m[36m(pid=73048)[0m     @     0x55d93fda9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73048)[0m     @     0x55d93fd1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73048)[0m     @     0x55d93fda8baf _PyEval_EvalCodeWithName
[2m[36m(pid=73048)[0m     @     0x55d93fda9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73048)[0m     @     0x55d93fd1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73048)[0m     @     0x55d93fda8baf _PyEval_EvalCodeWithName
[2m[36m(pid=73048)[0m     @     0x55d93fda9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73048)[0m     @     0x55d93fd1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73048)[0m     @     0x55d93fda8baf _PyEval_EvalCodeWithName
[2m[36m(pid=73048)[0m     @     0x55d93fda9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73048)[0m     @     0x55d93fd1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72940)[0m     @     0x7ef12d2f8388 at::native::copy_impl()
[2m[36m(pid=72940)[0m     @     0x7ef12d2fa5a4 at::native::copy_()
[2m[36m(pid=72940)[0m     @     0x7ef12d9e54f5 at::Tensor::copy_()
[2m[36m(pid=72998)[0m     @     0x7edfb3a61d91 at::TensorIterator::for_each()
[2m[36m(pid=72998)[0m     @     0x7edfb4344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72998)[0m     @     0x7edfb4367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72998)[0m     @     0x7edfb3809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72998)[0m     @     0x7edfb3807388 at::native::copy_impl()
[2m[36m(pid=72947)[0m     @     0x7fafb13ba4f5 at::Tensor::copy_()
[2m[36m(pid=72947)[0m     @     0x7fafb388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72947)[0m     @     0x7fafb13ba4f5 at::Tensor::copy_()
[2m[36m(pid=72947)[0m     @     0x7fafb746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72947)[0m     @     0x55897285bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72947)[0m     @     0x5589727b6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72947)[0m     @     0x558972841baf _PyEval_EvalCodeWithName
[2m[36m(pid=72947)[0m     @     0x558972842a20 method_vectorcall
[2m[36m(pid=72947)[0m     @     0x5589727b6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72947)[0m     @     0x558972841baf _PyEval_EvalCodeWithName
[2m[36m(pid=72947)[0m     @     0x558972842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72939)[0m     @     0x7f0c5bef44f5 at::Tensor::copy_()
[2m[36m(pid=72939)[0m     @     0x7f0c61f9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72939)[0m     @     0x560eaa985fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72939)[0m     @     0x560eaa8e0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72939)[0m     @     0x560eaa96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72939)[0m     @     0x560eaa96ca20 method_vectorcall
[2m[36m(pid=72939)[0m     @     0x560eaa8e0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72939)[0m     @     0x560eaa96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72939)[0m     @     0x560eaa96c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72939)[0m     @     0x560eaa8e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72939)[0m     @     0x560eaa96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72939)[0m     @     0x560eaa96c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72939)[0m     @     0x560eaa8e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72939)[0m     @     0x560eaa96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72939)[0m     @     0x560eaa96c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72939)[0m     @     0x560eaa8e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72939)[0m     @     0x560eaa96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72939)[0m     @     0x560eaa96c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72939)[0m     @     0x560eaa8e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73008)[0m     @     0x7f26940f74f5 at::Tensor::copy_()
[2m[36m(pid=73008)[0m     @     0x7f269a1a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73008)[0m     @     0x559a76751fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73008)[0m     @     0x559a766acb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73008)[0m     @     0x559a76737baf _PyEval_EvalCodeWithName
[2m[36m(pid=73008)[0m     @     0x559a76738a20 method_vectorcall
[2m[36m(pid=73008)[0m     @     0x559a766acbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73008)[0m     @     0x559a76737baf _PyEval_EvalCodeWithName
[2m[36m(pid=73008)[0m     @     0x559a76738643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73008)[0m     @     0x559a766ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73008)[0m     @     0x559a76737baf _PyEval_EvalCodeWithName
[2m[36m(pid=73008)[0m     @     0x559a76738643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73008)[0m     @     0x559a766ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73008)[0m     @     0x559a76737baf _PyEval_EvalCodeWithName
[2m[36m(pid=73008)[0m     @     0x559a76738643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73008)[0m     @     0x559a766ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73008)[0m     @     0x559a76737baf _PyEval_EvalCodeWithName
[2m[36m(pid=73008)[0m     @     0x559a76738643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73008)[0m     @     0x559a766ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73042)[0m     @     0x7f610dc91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=73042)[0m     @     0x7f610dc8f388 at::native::copy_impl()
[2m[36m(pid=73042)[0m     @     0x7f610dc915a4 at::native::copy_()
[2m[36m(pid=72991)[0m     @     0x7eed35552d91 at::TensorIterator::for_each()
[2m[36m(pid=72991)[0m     @     0x7eed35e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72991)[0m     @     0x7eed35e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=73040)[0m     @     0x7ef4ce9444f5 at::Tensor::copy_()
[2m[36m(pid=73040)[0m     @     0x7ef4d49ef79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73040)[0m     @     0x5561dabfcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73040)[0m     @     0x5561dab57b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73040)[0m     @     0x5561dabe2baf _PyEval_EvalCodeWithName
[2m[36m(pid=73040)[0m     @     0x5561dabe3a20 method_vectorcall
[2m[36m(pid=73040)[0m     @     0x5561dab57bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73040)[0m     @     0x5561dabe2baf _PyEval_EvalCodeWithName
[2m[36m(pid=73040)[0m     @     0x5561dabe3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73040)[0m     @     0x5561dab58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73040)[0m     @     0x5561dabe2baf _PyEval_EvalCodeWithName
[2m[36m(pid=73040)[0m     @     0x5561dabe3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73040)[0m     @     0x5561dab58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73040)[0m     @     0x5561dabe2baf _PyEval_EvalCodeWithName
[2m[36m(pid=73040)[0m     @     0x5561dabe3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73040)[0m     @     0x5561dab58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73040)[0m     @     0x5561dabe2baf _PyEval_EvalCodeWithName
[2m[36m(pid=73040)[0m     @     0x5561dabe3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73040)[0m     @     0x5561dab58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72953)[0m     @     0x7f88e4b388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72953)[0m     @     0x7f88e26654f5 at::Tensor::copy_()
[2m[36m(pid=72953)[0m     @     0x7f88e871079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72953)[0m     @     0x560a06814fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72953)[0m     @     0x560a0676fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72953)[0m     @     0x560a067fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72953)[0m     @     0x560a067fba20 method_vectorcall
[2m[36m(pid=72953)[0m     @     0x560a0676fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72953)[0m     @     0x560a067fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72953)[0m     @     0x560a067fb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72953)[0m     @     0x560a06770689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72953)[0m     @     0x560a067fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72953)[0m     @     0x560a067fb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72953)[0m     @     0x560a06770689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72953)[0m     @     0x560a067fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72953)[0m     @     0x560a067fb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72953)[0m     @     0x560a06770689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72953)[0m     @     0x560a067fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72953)[0m     @     0x560a067fb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72953)[0m     @     0x560a06770689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72941)[0m     @     0x7fae256b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72954)[0m     @     0x7f5c03e9f4f5 at::Tensor::copy_()
[2m[36m(pid=72954)[0m     @     0x7f5c09f4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72954)[0m     @     0x55d2578c2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72954)[0m     @     0x55d25781db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72954)[0m     @     0x55d2578a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72954)[0m     @     0x55d2578a9a20 method_vectorcall
[2m[36m(pid=72954)[0m     @     0x55d25781dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72954)[0m     @     0x55d2578a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72954)[0m     @     0x55d2578a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72954)[0m     @     0x55d25781e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72954)[0m     @     0x55d2578a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72954)[0m     @     0x55d2578a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72954)[0m     @     0x55d25781e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72954)[0m     @     0x55d2578a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72954)[0m     @     0x55d2578a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72954)[0m     @     0x55d25781e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72954)[0m     @     0x55d2578a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72954)[0m     @     0x55d2578a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72954)[0m     @     0x55d25781e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73012)[0m     @     0x7f5d185608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73012)[0m     @     0x7f5d1608d4f5 at::Tensor::copy_()
[2m[36m(pid=73012)[0m     @     0x7f5d1c13879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73012)[0m     @     0x55a4ba98afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73012)[0m     @     0x55a4ba8e5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73012)[0m     @     0x55a4ba970baf _PyEval_EvalCodeWithName
[2m[36m(pid=73012)[0m     @     0x55a4ba971a20 method_vectorcall
[2m[36m(pid=73012)[0m     @     0x55a4ba8e5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73012)[0m     @     0x55a4ba970baf _PyEval_EvalCodeWithName
[2m[36m(pid=73012)[0m     @     0x55a4ba971643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73012)[0m     @     0x55a4ba8e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73012)[0m     @     0x55a4ba970baf _PyEval_EvalCodeWithName
[2m[36m(pid=73012)[0m     @     0x55a4ba971643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73012)[0m     @     0x55a4ba8e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73012)[0m     @     0x55a4ba970baf _PyEval_EvalCodeWithName
[2m[36m(pid=73012)[0m     @     0x55a4ba971643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73012)[0m     @     0x55a4ba8e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73012)[0m     @     0x55a4ba970baf _PyEval_EvalCodeWithName
[2m[36m(pid=73012)[0m     @     0x55a4ba971643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73012)[0m     @     0x55a4ba8e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72931)[0m     @     0x7f5ab237c4f5 at::Tensor::copy_()
[2m[36m(pid=72931)[0m     @     0x7f5ab842779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72931)[0m     @     0x555d3bc2afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72931)[0m     @     0x555d3bb85b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72931)[0m     @     0x555d3bc10baf _PyEval_EvalCodeWithName
[2m[36m(pid=72931)[0m     @     0x555d3bc11a20 method_vectorcall
[2m[36m(pid=72931)[0m     @     0x555d3bb85bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72931)[0m     @     0x555d3bc10baf _PyEval_EvalCodeWithName
[2m[36m(pid=72931)[0m     @     0x555d3bc11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72931)[0m     @     0x555d3bb86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72931)[0m     @     0x555d3bc10baf _PyEval_EvalCodeWithName
[2m[36m(pid=72931)[0m     @     0x555d3bc11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72931)[0m     @     0x555d3bb86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72931)[0m     @     0x555d3bc10baf _PyEval_EvalCodeWithName
[2m[36m(pid=72931)[0m     @     0x555d3bc11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72931)[0m     @     0x555d3bb86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72931)[0m     @     0x555d3bc10baf _PyEval_EvalCodeWithName
[2m[36m(pid=72931)[0m     @     0x555d3bc11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72931)[0m     @     0x555d3bb86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72955)[0m     @     0x7eeccac4f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72955)[0m     @     0x55efe5567fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72955)[0m     @     0x55efe54c2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72955)[0m     @     0x55efe554dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72955)[0m     @     0x55efe554ea20 method_vectorcall
[2m[36m(pid=72955)[0m     @     0x55efe54c2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72955)[0m     @     0x55efe554dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72955)[0m     @     0x55efe554e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72955)[0m     @     0x55efe54c3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72955)[0m     @     0x55efe554dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72955)[0m     @     0x55efe554e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72955)[0m     @     0x55efe54c3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72955)[0m     @     0x55efe554dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72955)[0m     @     0x55efe554e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72955)[0m     @     0x55efe54c3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72955)[0m     @     0x55efe554dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72955)[0m     @     0x55efe554e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72955)[0m     @     0x55efe54c3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72927)[0m     @     0x7f142f0778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72927)[0m     @     0x7f142cba44f5 at::Tensor::copy_()
[2m[36m(pid=72927)[0m     @     0x7f1432c4f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72927)[0m     @     0x56007aa7afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72927)[0m     @     0x56007a9d5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72927)[0m     @     0x56007aa60baf _PyEval_EvalCodeWithName
[2m[36m(pid=72927)[0m     @     0x56007aa61a20 method_vectorcall
[2m[36m(pid=72927)[0m     @     0x56007a9d5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72927)[0m     @     0x56007aa60baf _PyEval_EvalCodeWithName
[2m[36m(pid=72927)[0m     @     0x56007aa61643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72927)[0m     @     0x56007a9d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72927)[0m     @     0x56007aa60baf _PyEval_EvalCodeWithName
[2m[36m(pid=72927)[0m     @     0x56007aa61643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72927)[0m     @     0x56007a9d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72927)[0m     @     0x56007aa60baf _PyEval_EvalCodeWithName
[2m[36m(pid=72927)[0m     @     0x56007aa61643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72927)[0m     @     0x56007a9d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72927)[0m     @     0x56007aa60baf _PyEval_EvalCodeWithName
[2m[36m(pid=72927)[0m     @     0x56007aa61643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72927)[0m     @     0x56007a9d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72956)[0m     @     0x7fb4d0ca8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72956)[0m     @     0x7fb4d014aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72956)[0m     @     0x7fb4d0148388 at::native::copy_impl()
[2m[36m(pid=72956)[0m     @     0x7fb4d014a5a4 at::native::copy_()
[2m[36m(pid=72956)[0m     @     0x7fb4d08354f5 at::Tensor::copy_()
[2m[36m(pid=72933)[0m     @     0x7f5c547e3d91 at::TensorIterator::for_each()
[2m[36m(pid=72933)[0m     @     0x7f5c550c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=72994)[0m     @     0x7fc4ed0a44f5 at::Tensor::copy_()
[2m[36m(pid=72994)[0m     @     0x7fc4ef5778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72994)[0m     @     0x7fc4ed0a44f5 at::Tensor::copy_()
[2m[36m(pid=72994)[0m     @     0x7fc4f314f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72994)[0m     @     0x55fc698b1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72994)[0m     @     0x55fc6980cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72994)[0m     @     0x55fc69897baf _PyEval_EvalCodeWithName
[2m[36m(pid=72994)[0m     @     0x55fc69898a20 method_vectorcall
[2m[36m(pid=72994)[0m     @     0x55fc6980cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72994)[0m     @     0x55fc69897baf _PyEval_EvalCodeWithName
[2m[36m(pid=72994)[0m     @     0x55fc69898643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72994)[0m     @     0x55fc6980d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72994)[0m     @     0x55fc69897baf _PyEval_EvalCodeWithName
[2m[36m(pid=72994)[0m     @     0x55fc69898643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72994)[0m     @     0x55fc6980d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72994)[0m     @     0x55fc69897baf _PyEval_EvalCodeWithName
[2m[36m(pid=72994)[0m     @     0x55fc69898643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72994)[0m     @     0x55fc6980d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72994)[0m     @     0x55fc69897baf _PyEval_EvalCodeWithName
[2m[36m(pid=72994)[0m     @     0x55fc69898643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72994)[0m     @     0x55fc6980d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72937)[0m     @     0x5648433ebbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72937)[0m     @     0x5648433ec643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72937)[0m     @     0x564843361689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72989)[0m     @     0x558524796689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72989)[0m     @     0x558524820baf _PyEval_EvalCodeWithName
[2m[36m(pid=72989)[0m     @     0x558524821643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72989)[0m     @     0x558524796689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72989)[0m     @     0x558524820baf _PyEval_EvalCodeWithName
[2m[36m(pid=72989)[0m     @     0x558524821643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72989)[0m     @     0x558524796689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73032)[0m     @     0x55fd709b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73032)[0m     @     0x55fd70a3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73032)[0m     @     0x55fd70a3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73032)[0m     @     0x55fd709b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73032)[0m     @     0x55fd70a3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73032)[0m     @     0x55fd70a3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73032)[0m     @     0x55fd709b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73032)[0m     @     0x55fd70a3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73032)[0m     @     0x55fd70a3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73032)[0m     @     0x55fd709b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73010)[0m     @     0x7ed1fe3e879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73010)[0m     @     0x55ea02e79fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73010)[0m     @     0x55ea02dd4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73010)[0m     @     0x55ea02e5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73010)[0m     @     0x55ea02e60a20 method_vectorcall
[2m[36m(pid=73010)[0m     @     0x55ea02dd4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73010)[0m     @     0x55ea02e5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73010)[0m     @     0x55ea02e60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73010)[0m     @     0x55ea02dd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73010)[0m     @     0x55ea02e5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73010)[0m     @     0x55ea02e60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73010)[0m     @     0x55ea02dd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73010)[0m     @     0x55ea02e5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73010)[0m     @     0x55ea02e60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73010)[0m     @     0x55ea02dd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73010)[0m     @     0x55ea02e5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73010)[0m     @     0x55ea02e60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73010)[0m     @     0x55ea02dd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72988)[0m     @     0x7fa5a66a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72988)[0m     @     0x7fa5a41cf4f5 at::Tensor::copy_()
[2m[36m(pid=72988)[0m     @     0x7fa5aa27a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72988)[0m     @     0x55d0d10fafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72988)[0m     @     0x55d0d1055b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72988)[0m     @     0x55d0d10e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72988)[0m     @     0x55d0d10e1a20 method_vectorcall
[2m[36m(pid=72988)[0m     @     0x55d0d1055bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72988)[0m     @     0x55d0d10e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72988)[0m     @     0x55d0d10e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72988)[0m     @     0x55d0d1056689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72988)[0m     @     0x55d0d10e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72988)[0m     @     0x55d0d10e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72988)[0m     @     0x55d0d1056689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72988)[0m     @     0x55d0d10e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72988)[0m     @     0x55d0d10e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72988)[0m     @     0x55d0d1056689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72988)[0m     @     0x55d0d10e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=72988)[0m     @     0x55d0d10e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72988)[0m     @     0x55d0d1056689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72986)[0m     @     0x7fa3386fc4f5 at::Tensor::copy_()
[2m[36m(pid=72986)[0m     @     0x7fa33e7a779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72986)[0m     @     0x5597a8afbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72986)[0m     @     0x5597a8a56b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72986)[0m     @     0x5597a8ae1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72986)[0m     @     0x5597a8ae2a20 method_vectorcall
[2m[36m(pid=72986)[0m     @     0x5597a8a56bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72986)[0m     @     0x5597a8ae1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72986)[0m     @     0x5597a8ae2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72986)[0m     @     0x5597a8a57689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72986)[0m     @     0x5597a8ae1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72986)[0m     @     0x5597a8ae2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72986)[0m     @     0x5597a8a57689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72986)[0m     @     0x5597a8ae1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72986)[0m     @     0x5597a8ae2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72986)[0m     @     0x5597a8a57689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72986)[0m     @     0x5597a8ae1baf _PyEval_EvalCodeWithName
[2m[36m(pid=72986)[0m     @     0x5597a8ae2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72986)[0m     @     0x5597a8a57689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72963)[0m     @     0x55a50240d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72963)[0m     @     0x55a502382689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72963)[0m     @     0x55a50240cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72963)[0m     @     0x55a50240d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72963)[0m     @     0x55a502382689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73014)[0m     @     0x7f1238ee05a4 at::native::copy_()
[2m[36m(pid=73014)[0m     @     0x7f12395cb4f5 at::Tensor::copy_()
[2m[36m(pid=73014)[0m     @     0x7f123ba9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72997)[0m     @     0x7f7d3637c4f5 at::Tensor::copy_()
[2m[36m(pid=72997)[0m     @     0x7f7d3c42779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72997)[0m     @     0x55c399976fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72997)[0m     @     0x55c3998d1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72997)[0m     @     0x55c39995cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72997)[0m     @     0x55c39995da20 method_vectorcall
[2m[36m(pid=72997)[0m     @     0x55c3998d1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72997)[0m     @     0x55c39995cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72997)[0m     @     0x55c39995d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72997)[0m     @     0x55c3998d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72997)[0m     @     0x55c39995cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72997)[0m     @     0x55c39995d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72997)[0m     @     0x55c3998d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72997)[0m     @     0x55c39995cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72997)[0m     @     0x55c39995d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72997)[0m     @     0x55c3998d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72997)[0m     @     0x55c39995cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72997)[0m     @     0x55c39995d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72997)[0m     @     0x55c3998d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73058)[0m     @     0x557a56737a20 method_vectorcall
[2m[36m(pid=73058)[0m     @     0x557a566abbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73058)[0m     @     0x557a56736baf _PyEval_EvalCodeWithName
[2m[36m(pid=73058)[0m     @     0x557a56737643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73058)[0m     @     0x557a566ac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73058)[0m     @     0x557a56736baf _PyEval_EvalCodeWithName
[2m[36m(pid=73058)[0m     @     0x557a56737643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73058)[0m     @     0x557a566ac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73058)[0m     @     0x557a56736baf _PyEval_EvalCodeWithName
[2m[36m(pid=73058)[0m     @     0x557a56737643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73058)[0m     @     0x557a566ac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73058)[0m     @     0x557a56736baf _PyEval_EvalCodeWithName
[2m[36m(pid=73058)[0m     @     0x557a56737643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73058)[0m     @     0x557a566ac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73051)[0m     @     0x7f49d093b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73051)[0m     @     0x558f79aa9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73051)[0m     @     0x558f79a04b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73051)[0m     @     0x558f79a8fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73051)[0m     @     0x558f79a90a20 method_vectorcall
[2m[36m(pid=73051)[0m     @     0x558f79a04bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73051)[0m     @     0x558f79a8fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73051)[0m     @     0x558f79a90643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73051)[0m     @     0x558f79a05689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73051)[0m     @     0x558f79a8fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73051)[0m     @     0x558f79a90643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73051)[0m     @     0x558f79a05689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73051)[0m     @     0x558f79a8fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73051)[0m     @     0x558f79a90643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73051)[0m     @     0x558f79a05689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73051)[0m     @     0x558f79a8fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73051)[0m     @     0x558f79a90643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73051)[0m     @     0x558f79a05689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72999)[0m     @     0x7ef0e92c24f5 at::Tensor::copy_()
[2m[36m(pid=72999)[0m     @     0x7ef0ef36d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72999)[0m     @     0x5581ebcc6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72999)[0m     @     0x5581ebc21b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72999)[0m     @     0x5581ebcacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72999)[0m     @     0x5581ebcada20 method_vectorcall
[2m[36m(pid=72999)[0m     @     0x5581ebc21bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72999)[0m     @     0x5581ebcacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72999)[0m     @     0x5581ebcad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72999)[0m     @     0x5581ebc22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72999)[0m     @     0x5581ebcacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72999)[0m     @     0x5581ebcad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72999)[0m     @     0x5581ebc22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72999)[0m     @     0x5581ebcacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72999)[0m     @     0x5581ebcad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72999)[0m     @     0x5581ebc22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72999)[0m     @     0x5581ebcacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72999)[0m     @     0x5581ebcad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72999)[0m     @     0x5581ebc22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72938)[0m     @     0x55b5259f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72938)[0m     @     0x55b5259fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72938)[0m     @     0x55b52596f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72938)[0m     @     0x55b5259f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72938)[0m     @     0x55b5259fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72938)[0m     @     0x55b52596f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72938)[0m     @     0x55b5259f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72938)[0m     @     0x55b5259fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72938)[0m     @     0x55b52596f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72938)[0m     @     0x55b5259f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72938)[0m     @     0x55b5259fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72938)[0m     @     0x55b52596f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72924)[0m     @     0x7f02255014f5 at::Tensor::copy_()
[2m[36m(pid=72924)[0m     @     0x7f02586af79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72924)[0m     @     0x556d71df4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72924)[0m     @     0x556d71d4fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72924)[0m     @     0x556d71ddabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72924)[0m     @     0x556d71ddba20 method_vectorcall
[2m[36m(pid=72924)[0m     @     0x556d71d4fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72924)[0m     @     0x556d71ddabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72924)[0m     @     0x556d71ddb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72924)[0m     @     0x556d71d50689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72924)[0m     @     0x556d71ddabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72924)[0m     @     0x556d71ddb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72924)[0m     @     0x556d71d50689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72924)[0m     @     0x556d71ddabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72924)[0m     @     0x556d71ddb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72924)[0m     @     0x556d71d50689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72924)[0m     @     0x556d71ddabaf _PyEval_EvalCodeWithName
[2m[36m(pid=72924)[0m     @     0x556d71ddb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72924)[0m     @     0x556d71d50689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72925)[0m     @     0x7f7e82c275a4 at::native::copy_()
[2m[36m(pid=72925)[0m     @     0x7f7e833124f5 at::Tensor::copy_()
[2m[36m(pid=72925)[0m     @     0x7f7e857e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72923)[0m     @     0x7f172787c4f5 at::Tensor::copy_()
[2m[36m(pid=72923)[0m     @     0x7f172d92779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72923)[0m     @     0x563c61a13fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72923)[0m     @     0x563c6196eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72923)[0m     @     0x563c619f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72923)[0m     @     0x563c619faa20 method_vectorcall
[2m[36m(pid=72923)[0m     @     0x563c6196ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72923)[0m     @     0x563c619f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72923)[0m     @     0x563c619fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72923)[0m     @     0x563c6196f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72923)[0m     @     0x563c619f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72923)[0m     @     0x563c619fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72923)[0m     @     0x563c6196f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72923)[0m     @     0x563c619f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72923)[0m     @     0x563c619fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72923)[0m     @     0x563c6196f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72923)[0m     @     0x563c619f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=72923)[0m     @     0x563c619fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72923)[0m     @     0x563c6196f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72936)[0m     @     0x7f232fb505a4 at::native::copy_()
[2m[36m(pid=72936)[0m     @     0x7f233023b4f5 at::Tensor::copy_()
[2m[36m(pid=72936)[0m     @     0x7f233270e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72940)[0m     @     0x7ef12feb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72940)[0m     @     0x7ef12d9e54f5 at::Tensor::copy_()
[2m[36m(pid=72940)[0m     @     0x7ef133a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72940)[0m     @     0x560f938c1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72940)[0m     @     0x560f9381cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72940)[0m     @     0x560f938a7baf _PyEval_EvalCodeWithName
[2m[36m(pid=72940)[0m     @     0x560f938a8a20 method_vectorcall
[2m[36m(pid=72940)[0m     @     0x560f9381cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72940)[0m     @     0x560f938a7baf _PyEval_EvalCodeWithName
[2m[36m(pid=72940)[0m     @     0x560f938a8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72940)[0m     @     0x560f9381d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72940)[0m     @     0x560f938a7baf _PyEval_EvalCodeWithName
[2m[36m(pid=72940)[0m     @     0x560f938a8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72940)[0m     @     0x560f9381d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72940)[0m     @     0x560f938a7baf _PyEval_EvalCodeWithName
[2m[36m(pid=72940)[0m     @     0x560f938a8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72940)[0m     @     0x560f9381d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72940)[0m     @     0x560f938a7baf _PyEval_EvalCodeWithName
[2m[36m(pid=72940)[0m     @     0x560f938a8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72940)[0m     @     0x560f9381d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72998)[0m     @     0x7edfb38095a4 at::native::copy_()
[2m[36m(pid=72998)[0m     @     0x7edfb3ef44f5 at::Tensor::copy_()
[2m[36m(pid=72998)[0m     @     0x7edfb63c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72947)[0m     @     0x5589727b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72947)[0m     @     0x558972841baf _PyEval_EvalCodeWithName
[2m[36m(pid=72947)[0m     @     0x558972842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72947)[0m     @     0x5589727b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72947)[0m     @     0x558972841baf _PyEval_EvalCodeWithName
[2m[36m(pid=72947)[0m     @     0x558972842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72947)[0m     @     0x5589727b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72947)[0m     @     0x558972841baf _PyEval_EvalCodeWithName
[2m[36m(pid=72947)[0m     @     0x558972842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72947)[0m     @     0x5589727b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73042)[0m     @     0x7f610e37c4f5 at::Tensor::copy_()
[2m[36m(pid=73042)[0m     @     0x7f611084f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=73042)[0m     @     0x7f610e37c4f5 at::Tensor::copy_()
[2m[36m(pid=73042)[0m     @     0x7f611442779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73042)[0m     @     0x559d5d5bdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73042)[0m     @     0x559d5d518b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73042)[0m     @     0x559d5d5a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73042)[0m     @     0x559d5d5a4a20 method_vectorcall
[2m[36m(pid=73042)[0m     @     0x559d5d518bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73042)[0m     @     0x559d5d5a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73042)[0m     @     0x559d5d5a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73042)[0m     @     0x559d5d519689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73042)[0m     @     0x559d5d5a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73042)[0m     @     0x559d5d5a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73042)[0m     @     0x559d5d519689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73042)[0m     @     0x559d5d5a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73042)[0m     @     0x559d5d5a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73042)[0m     @     0x559d5d519689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73042)[0m     @     0x559d5d5a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=73042)[0m     @     0x559d5d5a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73042)[0m     @     0x559d5d519689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72991)[0m     @     0x7eed352faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72991)[0m     @     0x7eed352f8388 at::native::copy_impl()
[2m[36m(pid=72941)[0m     @     0x7fae231e04f5 at::Tensor::copy_()
[2m[36m(pid=72941)[0m     @     0x7fae2928b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72941)[0m     @     0x560720ac7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72941)[0m     @     0x560720a22b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72941)[0m     @     0x560720aadbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72941)[0m     @     0x560720aaea20 method_vectorcall
[2m[36m(pid=72941)[0m     @     0x560720a22bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72941)[0m     @     0x560720aadbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72941)[0m     @     0x560720aae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72941)[0m     @     0x560720a23689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72941)[0m     @     0x560720aadbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72941)[0m     @     0x560720aae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72941)[0m     @     0x560720a23689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72941)[0m     @     0x560720aadbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72941)[0m     @     0x560720aae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72941)[0m     @     0x560720a23689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72941)[0m     @     0x560720aadbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72941)[0m     @     0x560720aae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72941)[0m     @     0x560720a23689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72956)[0m     @     0x7fb4d2d088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72956)[0m     @     0x7fb4d08354f5 at::Tensor::copy_()
[2m[36m(pid=72956)[0m     @     0x7fb4d68e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72956)[0m     @     0x560a7bf63fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72956)[0m     @     0x560a7bebeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72956)[0m     @     0x560a7bf49baf _PyEval_EvalCodeWithName
[2m[36m(pid=72956)[0m     @     0x560a7bf4aa20 method_vectorcall
[2m[36m(pid=72956)[0m     @     0x560a7bebebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72956)[0m     @     0x560a7bf49baf _PyEval_EvalCodeWithName
[2m[36m(pid=72956)[0m     @     0x560a7bf4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72933)[0m     @     0x7f5c550e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=72933)[0m     @     0x7f5c5458ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=72933)[0m     @     0x7f5c54589388 at::native::copy_impl()
[2m[36m(pid=73014)[0m     @     0x7f12395cb4f5 at::Tensor::copy_()
[2m[36m(pid=73014)[0m     @     0x7f123f67679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=73014)[0m     @     0x5637ed279fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=73014)[0m     @     0x5637ed1d4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73014)[0m     @     0x5637ed25fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73014)[0m     @     0x5637ed260a20 method_vectorcall
[2m[36m(pid=73014)[0m     @     0x5637ed1d4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73014)[0m     @     0x5637ed25fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73014)[0m     @     0x5637ed260643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73014)[0m     @     0x5637ed1d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73014)[0m     @     0x5637ed25fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73014)[0m     @     0x5637ed260643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73014)[0m     @     0x5637ed1d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73014)[0m     @     0x5637ed25fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73014)[0m     @     0x5637ed260643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73014)[0m     @     0x5637ed1d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=73014)[0m     @     0x5637ed25fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=73014)[0m     @     0x5637ed260643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=73014)[0m     @     0x5637ed1d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72925)[0m     @     0x7f7e833124f5 at::Tensor::copy_()
[2m[36m(pid=72925)[0m     @     0x7f7e893bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72925)[0m     @     0x5624aab17fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72925)[0m     @     0x5624aaa72b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72925)[0m     @     0x5624aaafdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72925)[0m     @     0x5624aaafea20 method_vectorcall
[2m[36m(pid=72925)[0m     @     0x5624aaa72bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72925)[0m     @     0x5624aaafdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72925)[0m     @     0x5624aaafe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72925)[0m     @     0x5624aaa73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72925)[0m     @     0x5624aaafdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72925)[0m     @     0x5624aaafe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72925)[0m     @     0x5624aaa73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72925)[0m     @     0x5624aaafdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72925)[0m     @     0x5624aaafe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72925)[0m     @     0x5624aaa73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72925)[0m     @     0x5624aaafdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72925)[0m     @     0x5624aaafe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72925)[0m     @     0x5624aaa73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72936)[0m     @     0x7f233023b4f5 at::Tensor::copy_()
[2m[36m(pid=72936)[0m     @     0x7f23362e679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72936)[0m     @     0x561054012fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72936)[0m     @     0x561053f6db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72936)[0m     @     0x561053ff8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72936)[0m     @     0x561053ff9a20 method_vectorcall
[2m[36m(pid=72936)[0m     @     0x561053f6dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72936)[0m     @     0x561053ff8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72936)[0m     @     0x561053ff9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72936)[0m     @     0x561053f6e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72936)[0m     @     0x561053ff8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72936)[0m     @     0x561053ff9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72936)[0m     @     0x561053f6e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72936)[0m     @     0x561053ff8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72936)[0m     @     0x561053ff9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72936)[0m     @     0x561053f6e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72936)[0m     @     0x561053ff8baf _PyEval_EvalCodeWithName
[2m[36m(pid=72936)[0m     @     0x561053ff9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72936)[0m     @     0x561053f6e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72998)[0m     @     0x7edfb3ef44f5 at::Tensor::copy_()
[2m[36m(pid=72998)[0m     @     0x7edfb9f9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72998)[0m     @     0x55b7cbefffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72998)[0m     @     0x55b7cbe5ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72998)[0m     @     0x55b7cbee5baf _PyEval_EvalCodeWithName
[2m[36m(pid=72998)[0m     @     0x55b7cbee6a20 method_vectorcall
[2m[36m(pid=72998)[0m     @     0x55b7cbe5abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72998)[0m     @     0x55b7cbee5baf _PyEval_EvalCodeWithName
[2m[36m(pid=72998)[0m     @     0x55b7cbee6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72998)[0m     @     0x55b7cbe5b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72998)[0m     @     0x55b7cbee5baf _PyEval_EvalCodeWithName
[2m[36m(pid=72998)[0m     @     0x55b7cbee6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72998)[0m     @     0x55b7cbe5b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72998)[0m     @     0x55b7cbee5baf _PyEval_EvalCodeWithName
[2m[36m(pid=72998)[0m     @     0x55b7cbee6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72998)[0m     @     0x55b7cbe5b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72998)[0m     @     0x55b7cbee5baf _PyEval_EvalCodeWithName
[2m[36m(pid=72998)[0m     @     0x55b7cbee6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72998)[0m     @     0x55b7cbe5b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72991)[0m     @     0x7eed352fa5a4 at::native::copy_()
[2m[36m(pid=72956)[0m     @     0x560a7bebf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72956)[0m     @     0x560a7bf49baf _PyEval_EvalCodeWithName
[2m[36m(pid=72956)[0m     @     0x560a7bf4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72956)[0m     @     0x560a7bebf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72956)[0m     @     0x560a7bf49baf _PyEval_EvalCodeWithName
[2m[36m(pid=72956)[0m     @     0x560a7bf4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72956)[0m     @     0x560a7bebf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72956)[0m     @     0x560a7bf49baf _PyEval_EvalCodeWithName
[2m[36m(pid=72956)[0m     @     0x560a7bf4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72956)[0m     @     0x560a7bebf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72933)[0m     @     0x7f5c5458b5a4 at::native::copy_()
[2m[36m(pid=72933)[0m     @     0x7f5c54c764f5 at::Tensor::copy_()
[2m[36m(pid=72991)[0m     @     0x7eed359e54f5 at::Tensor::copy_()
[2m[36m(pid=72991)[0m     @     0x7eed37eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72933)[0m     @     0x7f5c571498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=72933)[0m     @     0x7f5c54c764f5 at::Tensor::copy_()
[2m[36m(pid=72933)[0m     @     0x7f5c5ad2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72933)[0m     @     0x5635712e6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72933)[0m     @     0x563571241b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72933)[0m     @     0x5635712ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72933)[0m     @     0x5635712cda20 method_vectorcall
[2m[36m(pid=72933)[0m     @     0x563571241bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72933)[0m     @     0x5635712ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72933)[0m     @     0x5635712cd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72933)[0m     @     0x563571242689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72933)[0m     @     0x5635712ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72933)[0m     @     0x5635712cd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72933)[0m     @     0x563571242689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72933)[0m     @     0x5635712ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72933)[0m     @     0x5635712cd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72933)[0m     @     0x563571242689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72933)[0m     @     0x5635712ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72933)[0m     @     0x5635712cd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72933)[0m     @     0x563571242689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72991)[0m     @     0x7eed359e54f5 at::Tensor::copy_()
[2m[36m(pid=72991)[0m     @     0x7eed3ba9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=72991)[0m     @     0x56364caf7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=72991)[0m     @     0x56364ca52b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72991)[0m     @     0x56364caddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72991)[0m     @     0x56364cadea20 method_vectorcall
[2m[36m(pid=72991)[0m     @     0x56364ca52bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72991)[0m     @     0x56364caddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72991)[0m     @     0x56364cade643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72991)[0m     @     0x56364ca53689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72991)[0m     @     0x56364caddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72991)[0m     @     0x56364cade643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72991)[0m     @     0x56364ca53689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72991)[0m     @     0x56364caddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72991)[0m     @     0x56364cade643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72991)[0m     @     0x56364ca53689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=72991)[0m     @     0x56364caddbaf _PyEval_EvalCodeWithName
[2m[36m(pid=72991)[0m     @     0x56364cade643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=72991)[0m     @     0x56364ca53689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:53:11,604	ERROR trial_runner.py:567 -- Trial PPO_jss_env_148e5_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=73020, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
2020-11-05 10:53:11,607	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.
2020-11-05 10:53:11,607	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.
== Status ==
Memory usage on this node: 23.9/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/556.74 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_148e5_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_148e5_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_148e5_00000_0_2020-11-05_10-53-04/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

== Status ==
Memory usage on this node: 23.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/556.74 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_148e5_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_148e5_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_148e5_00000_0_2020-11-05_10-53-04/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_148e5_00000])
