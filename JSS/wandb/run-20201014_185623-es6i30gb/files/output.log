2020-10-14 18:56:24,785	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8266[39m[22m
== Status ==
Memory usage on this node: 32.3/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/536.67 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_f5e8e_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=35080)[0m 2020-10-14 18:56:28,448	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35060)[0m 2020-10-14 18:56:30,500	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35030)[0m 2020-10-14 18:56:30,530	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35010)[0m 2020-10-14 18:56:30,569	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35042)[0m 2020-10-14 18:56:30,573	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35082)[0m 2020-10-14 18:56:30,610	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35051)[0m 2020-10-14 18:56:30,632	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35065)[0m 2020-10-14 18:56:30,630	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35094)[0m 2020-10-14 18:56:30,652	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35041)[0m 2020-10-14 18:56:30,662	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35044)[0m 2020-10-14 18:56:30,654	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35062)[0m 2020-10-14 18:56:30,683	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35033)[0m 2020-10-14 18:56:30,698	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35032)[0m 2020-10-14 18:56:30,706	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35048)[0m 2020-10-14 18:56:30,747	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35029)[0m 2020-10-14 18:56:30,750	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34983)[0m 2020-10-14 18:56:30,738	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34987)[0m 2020-10-14 18:56:30,829	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34975)[0m 2020-10-14 18:56:30,793	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34958)[0m 2020-10-14 18:56:30,815	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35071)[0m 2020-10-14 18:56:30,801	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35014)[0m 2020-10-14 18:56:30,843	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35068)[0m 2020-10-14 18:56:30,849	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35027)[0m 2020-10-14 18:56:30,860	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35056)[0m 2020-10-14 18:56:30,864	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34977)[0m 2020-10-14 18:56:30,880	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35026)[0m 2020-10-14 18:56:30,878	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34982)[0m 2020-10-14 18:56:30,869	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35064)[0m 2020-10-14 18:56:30,938	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34961)[0m 2020-10-14 18:56:30,910	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34967)[0m 2020-10-14 18:56:30,912	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34968)[0m 2020-10-14 18:56:30,955	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35074)[0m 2020-10-14 18:56:30,971	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34969)[0m 2020-10-14 18:56:30,975	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34959)[0m 2020-10-14 18:56:30,977	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35049)[0m 2020-10-14 18:56:31,046	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34985)[0m 2020-10-14 18:56:31,021	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35028)[0m 2020-10-14 18:56:31,048	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34970)[0m 2020-10-14 18:56:31,003	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34962)[0m 2020-10-14 18:56:31,034	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34973)[0m 2020-10-14 18:56:31,045	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35047)[0m 2020-10-14 18:56:31,027	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35055)[0m 2020-10-14 18:56:31,038	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35035)[0m 2020-10-14 18:56:31,048	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34989)[0m 2020-10-14 18:56:31,079	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34971)[0m 2020-10-14 18:56:31,070	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34972)[0m 2020-10-14 18:56:31,070	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35038)[0m 2020-10-14 18:56:31,093	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35039)[0m 2020-10-14 18:56:31,085	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34955)[0m 2020-10-14 18:56:31,098	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35013)[0m 2020-10-14 18:56:31,089	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35077)[0m 2020-10-14 18:56:31,098	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35037)[0m 2020-10-14 18:56:31,134	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35045)[0m 2020-10-14 18:56:31,144	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34956)[0m 2020-10-14 18:56:31,129	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35043)[0m 2020-10-14 18:56:31,171	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34964)[0m 2020-10-14 18:56:31,185	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35020)[0m 2020-10-14 18:56:31,141	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34965)[0m 2020-10-14 18:56:31,192	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34988)[0m 2020-10-14 18:56:31,194	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35089)[0m 2020-10-14 18:56:31,191	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34963)[0m 2020-10-14 18:56:31,207	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34954)[0m 2020-10-14 18:56:31,214	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34974)[0m 2020-10-14 18:56:31,199	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35054)[0m 2020-10-14 18:56:31,217	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34986)[0m 2020-10-14 18:56:31,246	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34957)[0m 2020-10-14 18:56:31,251	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35040)[0m 2020-10-14 18:56:31,260	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35069)[0m 2020-10-14 18:56:31,260	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35034)[0m 2020-10-14 18:56:31,332	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35023)[0m 2020-10-14 18:56:31,305	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35031)[0m 2020-10-14 18:56:31,298	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34984)[0m 2020-10-14 18:56:31,286	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35036)[0m 2020-10-14 18:56:31,322	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35057)[0m 2020-10-14 18:56:31,333	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35024)[0m 2020-10-14 18:56:31,336	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=34979)[0m 2020-10-14 18:56:31,364	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35076)[0m 2020-10-14 18:56:31,360	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35012)[0m 2020-10-14 18:56:31,387	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35018)[0m 2020-10-14 18:56:31,589	INFO catalog.py:306 -- Wrapping <class 'JSS.models.FCMaskedActionsModel'> as None
[2m[36m(pid=35080)[0m 2020-10-14 18:56:34,521	INFO rollout_worker.py:1012 -- Built policy map: {'default_policy': <ray.rllib.policy.torch_policy_template.PPOTorchPolicy object at 0x7f53463db880>}
[2m[36m(pid=35080)[0m 2020-10-14 18:56:34,521	INFO rollout_worker.py:1013 -- Built preprocessor map: {'default_policy': <ray.rllib.models.preprocessors.DictFlatteningPreprocessor object at 0x7f53463db610>}
[2m[36m(pid=35080)[0m 2020-10-14 18:56:34,522	INFO rollout_worker.py:457 -- Built filter map: {'default_policy': <ray.rllib.utils.filter.NoFilter object at 0x7f53463db5e0>}
[2m[36m(pid=35035)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35035)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35030)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35030)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35042)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35042)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35082)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35082)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35051)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35051)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35065)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35065)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35094)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35094)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35041)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35041)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35044)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35044)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35033)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35033)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35032)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35032)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35048)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35048)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35029)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35029)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35014)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35014)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35068)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35068)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34982)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34982)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35027)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35027)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35056)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35056)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34958)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34958)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35071)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35071)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35036)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35036)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34988)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34988)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35049)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35049)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35028)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35028)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34962)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34962)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35047)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35047)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35055)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35055)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35037)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35037)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35045)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35045)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34956)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34956)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34964)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34964)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34969)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34969)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34959)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34959)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35054)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35054)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35074)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35074)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35060)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35060)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35040)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35040)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35010)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35010)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35064)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35064)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35057)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35057)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34961)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34961)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34967)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34967)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34968)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34968)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35062)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35062)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34983)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34983)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34977)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34977)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35026)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35026)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34987)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34987)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34975)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34975)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34989)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34989)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34971)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34971)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34972)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34972)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35038)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35038)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35039)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35039)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34955)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34955)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34963)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34963)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34954)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34954)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34974)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34974)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35013)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35013)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35077)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35077)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34979)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34979)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35076)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35076)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34984)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34984)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35089)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35089)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34985)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34985)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34970)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34970)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34973)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34973)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34986)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34986)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35043)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35043)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35020)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35020)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35018)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35018)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35069)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35069)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35024)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35024)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35012)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35012)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34957)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34957)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35034)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35034)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35023)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35023)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35031)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=35031)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=34965)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=34965)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=35068)[0m 2020-10-14 18:56:34,865	INFO rollout_worker.py:576 -- Generating sample batch of size 2048
[2m[36m(pid=35068)[0m 2020-10-14 18:56:34,867	INFO sampler.py:552 -- Raw obs from env: { 0: { 'agent0': { 'action_mask': np.ndarray((51,), dtype=bool, min=0.0, max=1.0, mean=0.98),
[2m[36m(pid=35068)[0m                    'real_obs': np.ndarray((350,), dtype=float64, min=0.0, max=1.0, mean=0.143)}},
[2m[36m(pid=35068)[0m   1: { 'agent0': { 'action_mask': np.ndarray((51,), dtype=bool, min=0.0, max=1.0, mean=0.98),
[2m[36m(pid=35068)[0m                    'real_obs': np.ndarray((350,), dtype=float64, min=0.0, max=1.0, mean=0.143)}}}
[2m[36m(pid=35068)[0m 2020-10-14 18:56:34,867	INFO sampler.py:554 -- Info return from env: {0: {'agent0': None}, 1: {'agent0': None}}
[2m[36m(pid=35068)[0m 2020-10-14 18:56:34,868	INFO sampler.py:800 -- Preprocessed obs: np.ndarray((401,), dtype=float64, min=0.0, max=1.0, mean=0.249)
[2m[36m(pid=35068)[0m 2020-10-14 18:56:34,869	INFO sampler.py:805 -- Filtered obs: np.ndarray((401,), dtype=float64, min=0.0, max=1.0, mean=0.249)
[2m[36m(pid=35068)[0m 2020-10-14 18:56:34,877	INFO sampler.py:1222 -- Inputs to compute_actions():
[2m[36m(pid=35068)[0m 
[2m[36m(pid=35068)[0m { 'default_policy': [ { 'data': { 'agent_id': 'agent0',
[2m[36m(pid=35068)[0m                                   'env_id': 0,
[2m[36m(pid=35068)[0m                                   'info': None,
[2m[36m(pid=35068)[0m                                   'obs': np.ndarray((401,), dtype=float64, min=0.0, max=1.0, mean=0.249),
[2m[36m(pid=35068)[0m                                   'prev_action': np.ndarray((), dtype=int64, min=0.0, max=0.0, mean=0.0),
[2m[36m(pid=35068)[0m                                   'prev_reward': 0.0,
[2m[36m(pid=35068)[0m                                   'rnn_state': []},
[2m[36m(pid=35068)[0m                         'type': 'PolicyEvalData'},
[2m[36m(pid=35068)[0m                       { 'data': { 'agent_id': 'agent0',
[2m[36m(pid=35068)[0m                                   'env_id': 1,
[2m[36m(pid=35068)[0m                                   'info': None,
[2m[36m(pid=35068)[0m                                   'obs': np.ndarray((401,), dtype=float64, min=0.0, max=1.0, mean=0.249),
[2m[36m(pid=35068)[0m                                   'prev_action': np.ndarray((), dtype=int64, min=0.0, max=0.0, mean=0.0),
[2m[36m(pid=35068)[0m                                   'prev_reward': 0.0,
[2m[36m(pid=35068)[0m                                   'rnn_state': []},
[2m[36m(pid=35068)[0m                         'type': 'PolicyEvalData'}]}
[2m[36m(pid=35068)[0m 
[2m[36m(pid=35068)[0m 2020-10-14 18:56:34,917	INFO sampler.py:1268 -- Outputs of compute_actions():
[2m[36m(pid=35068)[0m 
[2m[36m(pid=35068)[0m { 'default_policy': ( np.ndarray((2,), dtype=int64, min=7.0, max=20.0, mean=13.5),
[2m[36m(pid=35068)[0m                       [],
[2m[36m(pid=35068)[0m                       { 'action_dist_inputs': np.ndarray((2, 51), dtype=float32, min=-10000000000.0, max=0.005, mean=-196078432.0),
[2m[36m(pid=35068)[0m                         'action_logp': np.ndarray((2,), dtype=float32, min=-3.914, max=-3.913, mean=-3.913),
[2m[36m(pid=35068)[0m                         'action_prob': np.ndarray((2,), dtype=float32, min=0.02, max=0.02, mean=0.02),
[2m[36m(pid=35068)[0m                         'vf_preds': np.ndarray((2,), dtype=float32, min=0.12, max=0.12, mean=0.12)})}
[2m[36m(pid=35068)[0m 
[2m[36m(pid=35068)[0m 2020-10-14 18:56:45,753	INFO sample_batch_builder.py:209 -- Trajectory fragment after postprocess_trajectory():
[2m[36m(pid=35068)[0m 
[2m[36m(pid=35068)[0m { 'agent0': { 'data': { 'action_dist_inputs': np.ndarray((881, 51), dtype=float32, min=-10000000000.0, max=0.005, mean=-9234158592.0),
[2m[36m(pid=35068)[0m                         'action_logp': np.ndarray((881,), dtype=float32, min=-3.914, max=0.0, mean=-1.15),
[2m[36m(pid=35068)[0m                         'action_prob': np.ndarray((881,), dtype=float32, min=0.02, max=1.0, mean=0.361),
[2m[36m(pid=35068)[0m                         'actions': np.ndarray((881,), dtype=int64, min=0.0, max=50.0, mean=28.292),
[2m[36m(pid=35068)[0m                         'advantages': np.ndarray((881,), dtype=float32, min=-49.015, max=41.599, mean=22.405),
[2m[36m(pid=35068)[0m                         'agent_index': np.ndarray((881,), dtype=int64, min=0.0, max=0.0, mean=0.0),
[2m[36m(pid=35068)[0m                         'dones': np.ndarray((881,), dtype=bool, min=0.0, max=1.0, mean=0.001),
[2m[36m(pid=35068)[0m                         'eps_id': np.ndarray((881,), dtype=int64, min=288545018.0, max=288545018.0, mean=288545018.0),
[2m[36m(pid=35068)[0m                         'infos': np.ndarray((881,), dtype=object, head={}),
[2m[36m(pid=35068)[0m                         'new_obs': np.ndarray((881, 401), dtype=float32, min=0.0, max=1.0, mean=0.192),
[2m[36m(pid=35068)[0m                         'obs': np.ndarray((881, 401), dtype=float32, min=0.0, max=1.0, mean=0.192),
[2m[36m(pid=35068)[0m                         'prev_actions': np.ndarray((881,), dtype=int64, min=0.0, max=50.0, mean=28.292),
[2m[36m(pid=35068)[0m                         'prev_rewards': np.ndarray((881,), dtype=float32, min=-12.586, max=1.0, mean=0.273),
[2m[36m(pid=35068)[0m                         'rewards': np.ndarray((881,), dtype=float32, min=-12.586, max=1.0, mean=0.268),
[2m[36m(pid=35068)[0m                         't': np.ndarray((881,), dtype=int64, min=0.0, max=880.0, mean=440.0),
[2m[36m(pid=35068)[0m                         'unroll_id': np.ndarray((881,), dtype=int64, min=0.0, max=0.0, mean=0.0),
[2m[36m(pid=35068)[0m                         'value_targets': np.ndarray((881,), dtype=float32, min=-49.165, max=41.519, mean=22.303),
[2m[36m(pid=35068)[0m                         'vf_preds': np.ndarray((881,), dtype=float32, min=-0.346, max=0.12, mean=-0.102)},
[2m[36m(pid=35068)[0m               'type': 'SampleBatch'}}
[2m[36m(pid=35068)[0m 
[2m[36m(pid=35068)[0m 2020-10-14 18:56:46,771	INFO rollout_worker.py:610 -- Completed sample batch:
[2m[36m(pid=35068)[0m 
[2m[36m(pid=35068)[0m { 'data': { 'action_dist_inputs': np.ndarray((2048, 51), dtype=float32, min=-10000000000.0, max=0.006, mean=-9179590656.0),
[2m[36m(pid=35068)[0m             'action_logp': np.ndarray((2048,), dtype=float32, min=-3.914, max=0.0, mean=-1.18),
[2m[36m(pid=35068)[0m             'action_prob': np.ndarray((2048,), dtype=float32, min=0.02, max=1.0, mean=0.355),
[2m[36m(pid=35068)[0m             'actions': np.ndarray((2048,), dtype=int64, min=0.0, max=50.0, mean=28.493),
[2m[36m(pid=35068)[0m             'advantages': np.ndarray((2048,), dtype=float32, min=-49.015, max=41.599, mean=20.559),
[2m[36m(pid=35068)[0m             'agent_index': np.ndarray((2048,), dtype=int64, min=0.0, max=0.0, mean=0.0),
[2m[36m(pid=35068)[0m             'dones': np.ndarray((2048,), dtype=bool, min=0.0, max=1.0, mean=0.001),
[2m[36m(pid=35068)[0m             'eps_id': np.ndarray((2048,), dtype=int64, min=288545018.0, max=1819850095.0, mean=890476664.564),
[2m[36m(pid=35068)[0m             'infos': np.ndarray((2048,), dtype=object, head={}),
[2m[36m(pid=35068)[0m             'new_obs': np.ndarray((2048, 401), dtype=float32, min=0.0, max=1.0, mean=0.178),
[2m[36m(pid=35068)[0m             'obs': np.ndarray((2048, 401), dtype=float32, min=0.0, max=1.0, mean=0.178),
[2m[36m(pid=35068)[0m             'prev_actions': np.ndarray((2048,), dtype=int64, min=0.0, max=50.0, mean=28.44),
[2m[36m(pid=35068)[0m             'prev_rewards': np.ndarray((2048,), dtype=float32, min=-12.586, max=1.0, mean=0.275),
[2m[36m(pid=35068)[0m             'rewards': np.ndarray((2048,), dtype=float32, min=-12.586, max=1.0, mean=0.271),
[2m[36m(pid=35068)[0m             't': np.ndarray((2048,), dtype=int64, min=0.0, max=908.0, mean=398.942),
[2m[36m(pid=35068)[0m             'unroll_id': np.ndarray((2048,), dtype=int64, min=0.0, max=3.0, mean=0.752),
[2m[36m(pid=35068)[0m             'value_targets': np.ndarray((2048,), dtype=float32, min=-49.165, max=41.519, mean=20.431),
[2m[36m(pid=35068)[0m             'vf_preds': np.ndarray((2048,), dtype=float32, min=-0.495, max=0.139, mean=-0.128)},
[2m[36m(pid=35068)[0m   'type': 'SampleBatch'}
[2m[36m(pid=35068)[0m 
[2m[36m(pid=35080)[0m 2020-10-14 18:56:49,045	INFO rollout_worker.py:750 -- Training on concatenated sample batches:
[2m[36m(pid=35080)[0m 
[2m[36m(pid=35080)[0m { 'count': 14384,
[2m[36m(pid=35080)[0m   'policy_batches': { 'default_policy': { 'data': { 'action_dist_inputs': np.ndarray((14384, 51), dtype=float32, min=-10000000000.0, max=0.007, mean=-9156334592.0),
[2m[36m(pid=35080)[0m                                                     'action_logp': np.ndarray((14384,), dtype=float32, min=-3.914, max=0.0, mean=-1.195),
[2m[36m(pid=35080)[0m                                                     'action_prob': np.ndarray((14384,), dtype=float32, min=0.02, max=1.0, mean=0.352),
[2m[36m(pid=35080)[0m                                                     'actions': np.ndarray((14384,), dtype=int64, min=0.0, max=50.0, mean=28.648),
[2m[36m(pid=35080)[0m                                                     'advantages': np.ndarray((14384,), dtype=float32, min=-4.46, max=1.04, mean=0.001),
[2m[36m(pid=35080)[0m                                                     'agent_index': np.ndarray((14384,), dtype=int64, min=0.0, max=0.0, mean=0.0),
[2m[36m(pid=35080)[0m                                                     'dones': np.ndarray((14384,), dtype=bool, min=0.0, max=1.0, mean=0.001),
[2m[36m(pid=35080)[0m                                                     'eps_id': np.ndarray((14384,), dtype=int64, min=24688286.0, max=1998219200.0, mean=935559334.927),
[2m[36m(pid=35080)[0m                                                     'infos': np.ndarray((14384,), dtype=object, head={}),
[2m[36m(pid=35080)[0m                                                     'new_obs': np.ndarray((14384, 401), dtype=float32, min=0.0, max=1.0, mean=0.177),
[2m[36m(pid=35080)[0m                                                     'obs': np.ndarray((14384, 401), dtype=float32, min=0.0, max=1.0, mean=0.177),
[2m[36m(pid=35080)[0m                                                     'prev_actions': np.ndarray((14384,), dtype=int64, min=0.0, max=50.0, mean=28.419),
[2m[36m(pid=35080)[0m                                                     'prev_rewards': np.ndarray((14384,), dtype=float32, min=-13.091, max=1.0, mean=0.281),
[2m[36m(pid=35080)[0m                                                     'rewards': np.ndarray((14384,), dtype=float32, min=-12.869, max=1.0, mean=0.255),
[2m[36m(pid=35080)[0m                                                     't': np.ndarray((14384,), dtype=int64, min=0.0, max=924.0, mean=393.276),
[2m[36m(pid=35080)[0m                                                     'unroll_id': np.ndarray((14384,), dtype=int64, min=0.0, max=3.0, mean=0.772),
[2m[36m(pid=35080)[0m                                                     'value_targets': np.ndarray((14384,), dtype=float32, min=-87.388, max=44.474, mean=19.471),
[2m[36m(pid=35080)[0m                                                     'vf_preds': np.ndarray((14384,), dtype=float32, min=-0.526, max=0.148, mean=-0.136)},
[2m[36m(pid=35080)[0m                                           'type': 'SampleBatch'}},
[2m[36m(pid=35080)[0m   'type': 'MultiAgentBatch'}
[2m[36m(pid=35080)[0m 
Result for PPO_jss_env_f5e8e_00000:
  custom_metrics:
    time_step_max: 4054
    time_step_mean: 3615.0923076923077
    time_step_min: 3379
  date: 2020-10-14_18-57-14
  done: false
  episode_len_mean: 891.1139240506329
  episode_reward_max: 258.59595959595964
  episode_reward_mean: 216.07678046285614
  episode_reward_min: 145.7171717171716
  episodes_this_iter: 158
  episodes_total: 158
  experiment_id: 0c963bb5aef24badb1f195ecf7b552f2
  experiment_tag: '0'
  hostname: f85e62b52919
  info:
    learner:
      default_policy:
        allreduce_latency: 0.0
        cur_kl_coeff: 0.20000000000000004
        cur_lr: 5.0e-05
        entropy: 1.1851047078768413
        entropy_coeff: 0.0005000000000000001
        kl: 0.004071502441850801
        model: {}
        policy_loss: -0.00785889983914482
        total_loss: 507.07567087809247
        vf_explained_var: 0.540532648563385
        vf_loss: 507.0832926432292
    num_steps_sampled: 161792
    num_steps_trained: 161792
  iterations_since_restore: 1
  node_ip: 172.17.0.4
  num_healthy_workers: 79
  off_policy_estimator: {}
  perf:
    cpu_util_percent: 40.19069767441861
    gpu_util_percent0: 0.5469767441860465
    gpu_util_percent1: 0.0
    gpu_util_percent2: 0.0
    ram_util_percent: 6.244186046511627
    vram_util_percent0: 0.1898182400634596
    vram_util_percent1: 0.0
    vram_util_percent2: 0.0
  pid: 35080
  policy_reward_max: {}
  policy_reward_mean: {}
  policy_reward_min: {}
  sampler_perf:
    mean_action_processing_ms: 0.28530212713266895
    mean_env_wait_ms: 2.008368806288396
    mean_inference_ms: 9.295426236512151
    mean_raw_obs_processing_ms: 0.7423904951283431
  time_since_restore: 39.38179159164429
  time_this_iter_s: 39.38179159164429
  time_total_s: 39.38179159164429
  timers:
    learn_throughput: 6453.546
    learn_time_ms: 25070.247
    sample_throughput: 11576.467
    sample_time_ms: 13975.94
    update_time_ms: 228.925
  timestamp: 1602701834
  timesteps_since_restore: 0
  timesteps_total: 161792
  training_iteration: 1
  trial_id: f5e8e_00000
  
== Status ==
Memory usage on this node: 46.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/536.67 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+
| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |
|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|
| PPO_jss_env_f5e8e_00000 | RUNNING  | 172.17.0.4:35080 |      1 |          39.3818 | 161792 |  216.077 |              258.596 |              145.717 |            891.114 |
+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+


Result for PPO_jss_env_f5e8e_00000:
  custom_metrics:
    time_step_max: 4054
    time_step_mean: 3614.4305555555557
    time_step_min: 3250
  date: 2020-10-14_18-57-52
  done: false
  episode_len_mean: 890.8607594936709
  episode_reward_max: 273.5959595959592
  episode_reward_mean: 217.6365234624726
  episode_reward_min: 145.7171717171716
  episodes_this_iter: 158
  episodes_total: 316
  experiment_id: 0c963bb5aef24badb1f195ecf7b552f2
  experiment_tag: '0'
  hostname: f85e62b52919
  info:
    learner:
      default_policy:
        allreduce_latency: 0.0
        cur_kl_coeff: 0.10000000000000002
        cur_lr: 5.0e-05
        entropy: 1.1561074058214824
        entropy_coeff: 0.0005000000000000001
        kl: 0.007923512797181806
        model: {}
        policy_loss: -0.010965243893830726
        total_loss: 127.46906661987305
        vf_explained_var: 0.8076093792915344
        vf_loss: 127.47981770833333
    num_steps_sampled: 323584
    num_steps_trained: 323584
  iterations_since_restore: 2
  node_ip: 172.17.0.4
  num_healthy_workers: 79
  off_policy_estimator: {}
  perf:
    cpu_util_percent: 35.66190476190476
    gpu_util_percent0: 0.5676190476190476
    gpu_util_percent1: 0.0
    gpu_util_percent2: 0.0
    ram_util_percent: 6.461904761904761
    vram_util_percent0: 0.20793702853394558
    vram_util_percent1: 0.0
    vram_util_percent2: 0.0
  pid: 35080
  policy_reward_max: {}
  policy_reward_mean: {}
  policy_reward_min: {}
  sampler_perf:
    mean_action_processing_ms: 0.2668936163112902
    mean_env_wait_ms: 1.9113069908292006
    mean_inference_ms: 8.672536940864692
    mean_raw_obs_processing_ms: 0.6969399774931713
  time_since_restore: 77.20669746398926
  time_this_iter_s: 37.82490587234497
  time_total_s: 77.20669746398926
  timers:
    learn_throughput: 6269.209
    learn_time_ms: 25807.403
    sample_throughput: 12993.902
    sample_time_ms: 12451.379
    update_time_ms: 184.559
  timestamp: 1602701872
  timesteps_since_restore: 0
  timesteps_total: 323584
  training_iteration: 2
  trial_id: f5e8e_00000
  
== Status ==
Memory usage on this node: 47.3/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/536.67 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+
| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |
|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|
| PPO_jss_env_f5e8e_00000 | RUNNING  | 172.17.0.4:35080 |      2 |          77.2067 | 323584 |  217.637 |              273.596 |              145.717 |            890.861 |
+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+


