2020-11-05 10:06:43,676	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_9bf91_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=36107)[0m 2020-11-05 10:06:46,485	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=36143)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36143)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36143)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36143)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36143)[0m *** SIGSEGV (@0x0) received by PID 36143 (TID 0x7f63a8291700) from PID 0; stack trace: ***
[2m[36m(pid=36101)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36101)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36101)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36101)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36101)[0m *** SIGSEGV (@0x0) received by PID 36101 (TID 0x7fc316570700) from PID 0; stack trace: ***
[2m[36m(pid=36088)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36088)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36088)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36088)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36088)[0m *** SIGSEGV (@0x0) received by PID 36088 (TID 0x7ffb1fc3e700) from PID 0; stack trace: ***
[2m[36m(pid=36014)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36014)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36014)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36014)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36014)[0m *** SIGSEGV (@0x0) received by PID 36014 (TID 0x7f5cc62c8700) from PID 0; stack trace: ***
[2m[36m(pid=36132)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36132)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36132)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36132)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36132)[0m *** SIGSEGV (@0x0) received by PID 36132 (TID 0x7fd9967ee700) from PID 0; stack trace: ***
[2m[36m(pid=36110)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36110)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36110)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36094)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36094)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36094)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36094)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36094)[0m *** SIGSEGV (@0x0) received by PID 36094 (TID 0x7f040bfbb700) from PID 0; stack trace: ***
[2m[36m(pid=36094)[0m     @     0x7f040bb94390 (unknown)
[2m[36m(pid=36063)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36063)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36063)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36063)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36063)[0m *** SIGSEGV (@0x0) received by PID 36063 (TID 0x7fbc1cd3c700) from PID 0; stack trace: ***
[2m[36m(pid=36063)[0m     @     0x7fbc1c915390 (unknown)
[2m[36m(pid=36063)[0m     @     0x7f8d1c56af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36095)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36095)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36095)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36079)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36079)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36079)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36079)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36079)[0m *** SIGSEGV (@0x0) received by PID 36079 (TID 0x7f80312d1700) from PID 0; stack trace: ***
[2m[36m(pid=36026)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36026)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36026)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36026)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36026)[0m *** SIGSEGV (@0x0) received by PID 36026 (TID 0x7fd976518700) from PID 0; stack trace: ***
[2m[36m(pid=36097)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36097)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36097)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36097)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36097)[0m *** SIGSEGV (@0x0) received by PID 36097 (TID 0x7f4463599700) from PID 0; stack trace: ***
[2m[36m(pid=36118)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36118)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36118)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36118)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36118)[0m *** SIGSEGV (@0x0) received by PID 36118 (TID 0x7fa5e16f1700) from PID 0; stack trace: ***
[2m[36m(pid=36074)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36074)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36074)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36074)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36074)[0m *** SIGSEGV (@0x0) received by PID 36074 (TID 0x7fb30e9b7700) from PID 0; stack trace: ***
[2m[36m(pid=36074)[0m     @     0x7fb30e590390 (unknown)
[2m[36m(pid=36074)[0m     @     0x7f840e4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36074)[0m     @     0x7f840dc247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36093)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36093)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36093)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36093)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36093)[0m *** SIGSEGV (@0x0) received by PID 36093 (TID 0x7fd4c1e90700) from PID 0; stack trace: ***
[2m[36m(pid=36093)[0m     @     0x7fd4c1a69390 (unknown)
[2m[36m(pid=36093)[0m     @     0x7fa5c17f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36093)[0m     @     0x7fa5c0f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36127)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36127)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36127)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36127)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36127)[0m *** SIGSEGV (@0x0) received by PID 36127 (TID 0x7fdc21faa700) from PID 0; stack trace: ***
[2m[36m(pid=36127)[0m     @     0x7fdc21b83390 (unknown)
[2m[36m(pid=36127)[0m     @     0x7fad21a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36127)[0m     @     0x7fad211357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36137)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36137)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36137)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36137)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36137)[0m *** SIGSEGV (@0x0) received by PID 36137 (TID 0x7f04fd069700) from PID 0; stack trace: ***
[2m[36m(pid=36137)[0m     @     0x7f04fcc42390 (unknown)
[2m[36m(pid=36137)[0m     @     0x7ed5fcb3bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36137)[0m     @     0x7ed5fc2667db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36137)[0m     @     0x7ed5fc2698f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36109)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36109)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36109)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36109)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36109)[0m *** SIGSEGV (@0x0) received by PID 36109 (TID 0x7f799d25c700) from PID 0; stack trace: ***
[2m[36m(pid=36109)[0m     @     0x7f799ce35390 (unknown)
[2m[36m(pid=36109)[0m     @     0x7f4a9cdc9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36109)[0m     @     0x7f4a9c4f47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36140)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36140)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36140)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36140)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36140)[0m *** SIGSEGV (@0x0) received by PID 36140 (TID 0x7f81380f4700) from PID 0; stack trace: ***
[2m[36m(pid=36140)[0m     @     0x7f8137ccd390 (unknown)
[2m[36m(pid=36140)[0m     @     0x7f5237af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36140)[0m     @     0x7f52372207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36092)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36092)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36092)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36092)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36092)[0m *** SIGSEGV (@0x0) received by PID 36092 (TID 0x7f53cf166700) from PID 0; stack trace: ***
[2m[36m(pid=36092)[0m     @     0x7f53ced3f390 (unknown)
[2m[36m(pid=36092)[0m     @     0x7f24cecfcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36092)[0m     @     0x7f24ce4277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36135)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36135)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36135)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36135)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36135)[0m *** SIGSEGV (@0x0) received by PID 36135 (TID 0x7fd239aed700) from PID 0; stack trace: ***
[2m[36m(pid=36135)[0m     @     0x7fd2396c6390 (unknown)
[2m[36m(pid=36135)[0m     @     0x7fa339674f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36135)[0m     @     0x7fa338d9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36135)[0m     @     0x7fa338da28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36114)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36114)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36114)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36114)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36114)[0m *** SIGSEGV (@0x0) received by PID 36114 (TID 0x7faa2b0a9700) from PID 0; stack trace: ***
[2m[36m(pid=36114)[0m     @     0x7faa2ac82390 (unknown)
[2m[36m(pid=36114)[0m     @     0x7f7b2abcef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36114)[0m     @     0x7f7b2a2f97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36143)[0m     @     0x7f63a7e6a390 (unknown)
[2m[36m(pid=36143)[0m     @     0x7f34a7dc3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36143)[0m     @     0x7f34a74ee7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36143)[0m     @     0x7f34a74f18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36101)[0m     @     0x7fc316149390 (unknown)
[2m[36m(pid=36101)[0m     @     0x7f94160faf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36101)[0m     @     0x7f94158257db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36088)[0m     @     0x7ffb1f817390 (unknown)
[2m[36m(pid=36088)[0m     @     0x7fcc1f7c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36088)[0m     @     0x7fcc1eef07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36014)[0m     @     0x7f5cc5ea1390 (unknown)
[2m[36m(pid=36014)[0m     @     0x7f2dc5e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36014)[0m     @     0x7f2dc554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36132)[0m     @     0x7fd9963c7390 (unknown)
[2m[36m(pid=36132)[0m     @     0x7faa9634bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36132)[0m     @     0x7faa95a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36110)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36110)[0m *** SIGSEGV (@0x0) received by PID 36110 (TID 0x7f8a1e29d700) from PID 0; stack trace: ***
[2m[36m(pid=36110)[0m     @     0x7f8a1de76390 (unknown)
[2m[36m(pid=36094)[0m     @     0x7ed50baf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36094)[0m     @     0x7ed50b2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36063)[0m     @     0x7f8d1bc957db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36063)[0m     @     0x7f8d1bc988f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36095)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36095)[0m *** SIGSEGV (@0x0) received by PID 36095 (TID 0x7f4ec4687700) from PID 0; stack trace: ***
[2m[36m(pid=36095)[0m     @     0x7f4ec4260390 (unknown)
[2m[36m(pid=36079)[0m     @     0x7f8030eaa390 (unknown)
[2m[36m(pid=36079)[0m     @     0x7f5130e37f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36079)[0m     @     0x7f51305627db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36026)[0m     @     0x7fd9760f1390 (unknown)
[2m[36m(pid=36026)[0m     @     0x7faa760a8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36026)[0m     @     0x7faa757d37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36097)[0m     @     0x7f4463172390 (unknown)
[2m[36m(pid=36097)[0m     @     0x7f15630f7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36097)[0m     @     0x7f15628227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36118)[0m     @     0x7fa5e12ca390 (unknown)
[2m[36m(pid=36118)[0m     @     0x7f76e124af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36118)[0m     @     0x7f76e09757db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36011)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36011)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36011)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36011)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36011)[0m *** SIGSEGV (@0x0) received by PID 36011 (TID 0x7f641fc1b700) from PID 0; stack trace: ***
[2m[36m(pid=36011)[0m     @     0x7f641f7f4390 (unknown)
[2m[36m(pid=36011)[0m     @     0x7f351f751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36011)[0m     @     0x7f351ee7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36011)[0m     @     0x7f351ee7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36002)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36002)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36002)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36002)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36002)[0m *** SIGSEGV (@0x0) received by PID 36002 (TID 0x7f1db9758700) from PID 0; stack trace: ***
[2m[36m(pid=36002)[0m     @     0x7f1db9331390 (unknown)
[2m[36m(pid=36002)[0m     @     0x7eeeb92cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36002)[0m     @     0x7eeeb89f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36002)[0m     @     0x7eeeb89fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36082)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36082)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36082)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36082)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36082)[0m *** SIGSEGV (@0x0) received by PID 36082 (TID 0x7ff892058700) from PID 0; stack trace: ***
[2m[36m(pid=36082)[0m     @     0x7ff891c31390 (unknown)
[2m[36m(pid=36082)[0m     @     0x7fc991becf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36082)[0m     @     0x7fc9913177db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36082)[0m     @     0x7fc99131a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36074)[0m     @     0x7f840dc278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36074)[0m     @     0x7f840dc27ad3 at::TensorIterator::for_each()
[2m[36m(pid=36074)[0m     @     0x7f840dc27d91 at::TensorIterator::for_each()
[2m[36m(pid=36074)[0m     @     0x7f840e50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36074)[0m     @     0x7f840e52dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36074)[0m     @     0x7f840d9cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36074)[0m     @     0x7f840d9cd388 at::native::copy_impl()
[2m[36m(pid=36074)[0m     @     0x7f840d9cf5a4 at::native::copy_()
[2m[36m(pid=36093)[0m     @     0x7fa5c0f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36093)[0m     @     0x7fa5c0f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=36093)[0m     @     0x7fa5c0f27d91 at::TensorIterator::for_each()
[2m[36m(pid=36093)[0m     @     0x7fa5c180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36093)[0m     @     0x7fa5c182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36093)[0m     @     0x7fa5c0ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36093)[0m     @     0x7fa5c0ccd388 at::native::copy_impl()
[2m[36m(pid=36093)[0m     @     0x7fa5c0ccf5a4 at::native::copy_()
[2m[36m(pid=36093)[0m     @     0x7fa5c13ba4f5 at::Tensor::copy_()
[2m[36m(pid=36093)[0m     @     0x7fa5c388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36127)[0m     @     0x7fad211388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36127)[0m     @     0x7fad21138ad3 at::TensorIterator::for_each()
[2m[36m(pid=36127)[0m     @     0x7fad21138d91 at::TensorIterator::for_each()
[2m[36m(pid=36127)[0m     @     0x7fad21a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36127)[0m     @     0x7fad21a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36127)[0m     @     0x7fad20ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36127)[0m     @     0x7fad20ede388 at::native::copy_impl()
[2m[36m(pid=36127)[0m     @     0x7fad20ee05a4 at::native::copy_()
[2m[36m(pid=36127)[0m     @     0x7fad215cb4f5 at::Tensor::copy_()
[2m[36m(pid=36127)[0m     @     0x7fad23a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36137)[0m     @     0x7ed5fc269ad3 at::TensorIterator::for_each()
[2m[36m(pid=36137)[0m     @     0x7ed5fc269d91 at::TensorIterator::for_each()
[2m[36m(pid=36137)[0m     @     0x7ed5fcb4cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36137)[0m     @     0x7ed5fcb6fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36137)[0m     @     0x7ed5fc011a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36137)[0m     @     0x7ed5fc00f388 at::native::copy_impl()
[2m[36m(pid=36137)[0m     @     0x7ed5fc0115a4 at::native::copy_()
[2m[36m(pid=36137)[0m     @     0x7ed5fc6fc4f5 at::Tensor::copy_()
[2m[36m(pid=36137)[0m     @     0x7ed5febcf8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36109)[0m     @     0x7f4a9c4f78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36109)[0m     @     0x7f4a9c4f7ad3 at::TensorIterator::for_each()
[2m[36m(pid=36109)[0m     @     0x7f4a9c4f7d91 at::TensorIterator::for_each()
[2m[36m(pid=36109)[0m     @     0x7f4a9cddab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36109)[0m     @     0x7f4a9cdfdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36109)[0m     @     0x7f4a9c29fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36109)[0m     @     0x7f4a9c29d388 at::native::copy_impl()
[2m[36m(pid=36109)[0m     @     0x7f4a9c29f5a4 at::native::copy_()
[2m[36m(pid=36109)[0m     @     0x7f4a9c98a4f5 at::Tensor::copy_()
[2m[36m(pid=36109)[0m     @     0x7f4a9ee5d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36140)[0m     @     0x7f52372238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36140)[0m     @     0x7f5237223ad3 at::TensorIterator::for_each()
[2m[36m(pid=36140)[0m     @     0x7f5237223d91 at::TensorIterator::for_each()
[2m[36m(pid=36140)[0m     @     0x7f5237b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36140)[0m     @     0x7f5237b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36140)[0m     @     0x7f5236fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36140)[0m     @     0x7f5236fc9388 at::native::copy_impl()
[2m[36m(pid=36140)[0m     @     0x7f5236fcb5a4 at::native::copy_()
[2m[36m(pid=36092)[0m     @     0x7f24ce42a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36092)[0m     @     0x7f24ce42aad3 at::TensorIterator::for_each()
[2m[36m(pid=36092)[0m     @     0x7f24ce42ad91 at::TensorIterator::for_each()
[2m[36m(pid=36092)[0m     @     0x7f24ced0db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36092)[0m     @     0x7f24ced30c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36092)[0m     @     0x7f24ce1d2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36092)[0m     @     0x7f24ce1d0388 at::native::copy_impl()
[2m[36m(pid=36092)[0m     @     0x7f24ce1d25a4 at::native::copy_()
[2m[36m(pid=36092)[0m     @     0x7f24ce8bd4f5 at::Tensor::copy_()
[2m[36m(pid=36092)[0m     @     0x7f24d0d908de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36135)[0m     @     0x7fa338da2ad3 at::TensorIterator::for_each()
[2m[36m(pid=36135)[0m     @     0x7fa338da2d91 at::TensorIterator::for_each()
[2m[36m(pid=36135)[0m     @     0x7fa339685b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36135)[0m     @     0x7fa3396a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36135)[0m     @     0x7fa338b4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36135)[0m     @     0x7fa338b48388 at::native::copy_impl()
[2m[36m(pid=36135)[0m     @     0x7fa338b4a5a4 at::native::copy_()
[2m[36m(pid=36135)[0m     @     0x7fa3392354f5 at::Tensor::copy_()
[2m[36m(pid=36135)[0m     @     0x7fa33b7088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36114)[0m     @     0x7f7b2a2fc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36114)[0m     @     0x7f7b2a2fcad3 at::TensorIterator::for_each()
[2m[36m(pid=36114)[0m     @     0x7f7b2a2fcd91 at::TensorIterator::for_each()
[2m[36m(pid=36114)[0m     @     0x7f7b2abdfb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36114)[0m     @     0x7f7b2ac02c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36114)[0m     @     0x7f7b2a0a4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36114)[0m     @     0x7f7b2a0a2388 at::native::copy_impl()
[2m[36m(pid=36114)[0m     @     0x7f7b2a0a45a4 at::native::copy_()
[2m[36m(pid=36114)[0m     @     0x7f7b2a78f4f5 at::Tensor::copy_()
[2m[36m(pid=36114)[0m     @     0x7f7b2cc628de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36004)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36004)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36004)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36004)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36004)[0m *** SIGSEGV (@0x0) received by PID 36004 (TID 0x7f5ac06b8700) from PID 0; stack trace: ***
[2m[36m(pid=36004)[0m     @     0x7f5ac0291390 (unknown)
[2m[36m(pid=36004)[0m     @     0x7f2bc00c0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36004)[0m     @     0x7f2bbf7eb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36004)[0m     @     0x7f2bbf7ee8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36030)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36030)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36030)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36030)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36030)[0m *** SIGSEGV (@0x0) received by PID 36030 (TID 0x7f0a747e7700) from PID 0; stack trace: ***
[2m[36m(pid=36030)[0m     @     0x7f0a743c0390 (unknown)
[2m[36m(pid=36030)[0m     @     0x7edb74363f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36030)[0m     @     0x7edb73a8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36030)[0m     @     0x7edb73a918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36089)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36089)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36089)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36089)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36089)[0m *** SIGSEGV (@0x0) received by PID 36089 (TID 0x7f7dd522c700) from PID 0; stack trace: ***
[2m[36m(pid=36089)[0m     @     0x7f7dd4e05390 (unknown)
[2m[36m(pid=36089)[0m     @     0x7f4ed4d89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36089)[0m     @     0x7f4ed44b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36089)[0m     @     0x7f4ed44b78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36133)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36133)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36133)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36133)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36133)[0m *** SIGSEGV (@0x0) received by PID 36133 (TID 0x7fa485123700) from PID 0; stack trace: ***
[2m[36m(pid=36133)[0m     @     0x7fa484cfc390 (unknown)
[2m[36m(pid=36133)[0m     @     0x7f7584bd1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36133)[0m     @     0x7f75842fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36075)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36075)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36075)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36075)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36075)[0m *** SIGSEGV (@0x0) received by PID 36075 (TID 0x7f4dc8372700) from PID 0; stack trace: ***
[2m[36m(pid=36075)[0m     @     0x7f4dc7f4b390 (unknown)
[2m[36m(pid=36075)[0m     @     0x7f1ec7e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36075)[0m     @     0x7f1ec75367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36075)[0m     @     0x7f1ec75398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36024)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36024)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36024)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36024)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36024)[0m *** SIGSEGV (@0x0) received by PID 36024 (TID 0x7fe626714700) from PID 0; stack trace: ***
[2m[36m(pid=36024)[0m     @     0x7fe6262ed390 (unknown)
[2m[36m(pid=36024)[0m     @     0x7fb726279f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36024)[0m     @     0x7fb7259a47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36024)[0m     @     0x7fb7259a78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36017)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36017)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36017)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36017)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36017)[0m *** SIGSEGV (@0x0) received by PID 36017 (TID 0x7f97bda55700) from PID 0; stack trace: ***
[2m[36m(pid=36017)[0m     @     0x7f97bd62e390 (unknown)
[2m[36m(pid=36017)[0m     @     0x7f68bd5e4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36017)[0m     @     0x7f68bcd0f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36017)[0m     @     0x7f68bcd128f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36017)[0m     @     0x7f68bcd12ad3 at::TensorIterator::for_each()
[2m[36m(pid=36037)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36037)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36037)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36037)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36037)[0m *** SIGSEGV (@0x0) received by PID 36037 (TID 0x7fb5c4aa8700) from PID 0; stack trace: ***
[2m[36m(pid=36037)[0m     @     0x7fb5c4681390 (unknown)
[2m[36m(pid=36037)[0m     @     0x7f86c4563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36037)[0m     @     0x7f86c3c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36037)[0m     @     0x7f86c3c918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36143)[0m     @     0x7f34a74f1ad3 at::TensorIterator::for_each()
[2m[36m(pid=36143)[0m     @     0x7f34a74f1d91 at::TensorIterator::for_each()
[2m[36m(pid=36143)[0m     @     0x7f34a7dd4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36143)[0m     @     0x7f34a7df7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36143)[0m     @     0x7f34a7299a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36143)[0m     @     0x7f34a7297388 at::native::copy_impl()
[2m[36m(pid=36143)[0m     @     0x7f34a72995a4 at::native::copy_()
[2m[36m(pid=36143)[0m     @     0x7f34a79844f5 at::Tensor::copy_()
[2m[36m(pid=36143)[0m     @     0x7f34a9e578de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36143)[0m     @     0x7f34a79844f5 at::Tensor::copy_()
[2m[36m(pid=36101)[0m     @     0x7f94158288f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36101)[0m     @     0x7f9415828ad3 at::TensorIterator::for_each()
[2m[36m(pid=36101)[0m     @     0x7f9415828d91 at::TensorIterator::for_each()
[2m[36m(pid=36101)[0m     @     0x7f941610bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36101)[0m     @     0x7f941612ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36101)[0m     @     0x7f94155d0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36101)[0m     @     0x7f94155ce388 at::native::copy_impl()
[2m[36m(pid=36101)[0m     @     0x7f94155d05a4 at::native::copy_()
[2m[36m(pid=36101)[0m     @     0x7f9415cbb4f5 at::Tensor::copy_()
[2m[36m(pid=36101)[0m     @     0x7f941818e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36088)[0m     @     0x7fcc1eef38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36088)[0m     @     0x7fcc1eef3ad3 at::TensorIterator::for_each()
[2m[36m(pid=36088)[0m     @     0x7fcc1eef3d91 at::TensorIterator::for_each()
[2m[36m(pid=36088)[0m     @     0x7fcc1f7d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36088)[0m     @     0x7fcc1f7f9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36088)[0m     @     0x7fcc1ec9ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36088)[0m     @     0x7fcc1ec99388 at::native::copy_impl()
[2m[36m(pid=36088)[0m     @     0x7fcc1ec9b5a4 at::native::copy_()
[2m[36m(pid=36020)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36020)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36020)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36020)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36020)[0m *** SIGSEGV (@0x0) received by PID 36020 (TID 0x7fc01968c700) from PID 0; stack trace: ***
[2m[36m(pid=36020)[0m     @     0x7fc019265390 (unknown)
[2m[36m(pid=36020)[0m     @     0x7f9119166f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36020)[0m     @     0x7f91188917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36020)[0m     @     0x7f91188948f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36020)[0m     @     0x7f9118894ad3 at::TensorIterator::for_each()
[2m[36m(pid=36014)[0m     @     0x7f2dc55528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36014)[0m     @     0x7f2dc5552ad3 at::TensorIterator::for_each()
[2m[36m(pid=36014)[0m     @     0x7f2dc5552d91 at::TensorIterator::for_each()
[2m[36m(pid=36014)[0m     @     0x7f2dc5e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36014)[0m     @     0x7f2dc5e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36014)[0m     @     0x7f2dc52faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36014)[0m     @     0x7f2dc52f8388 at::native::copy_impl()
[2m[36m(pid=36014)[0m     @     0x7f2dc52fa5a4 at::native::copy_()
[2m[36m(pid=36014)[0m     @     0x7f2dc59e54f5 at::Tensor::copy_()
[2m[36m(pid=36014)[0m     @     0x7f2dc7eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36132)[0m     @     0x7faa95a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36132)[0m     @     0x7faa95a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=36132)[0m     @     0x7faa95a79d91 at::TensorIterator::for_each()
[2m[36m(pid=36132)[0m     @     0x7faa9635cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36132)[0m     @     0x7faa9637fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36132)[0m     @     0x7faa95821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36132)[0m     @     0x7faa9581f388 at::native::copy_impl()
[2m[36m(pid=36132)[0m     @     0x7faa958215a4 at::native::copy_()
[2m[36m(pid=36132)[0m     @     0x7faa95f0c4f5 at::Tensor::copy_()
[2m[36m(pid=36132)[0m     @     0x7faa983df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36110)[0m     @     0x7f5b1ddf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36110)[0m     @     0x7f5b1d5227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36110)[0m     @     0x7f5b1d5258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36110)[0m     @     0x7f5b1d525ad3 at::TensorIterator::for_each()
[2m[36m(pid=36110)[0m     @     0x7f5b1d525d91 at::TensorIterator::for_each()
[2m[36m(pid=36110)[0m     @     0x7f5b1de08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36110)[0m     @     0x7f5b1de2bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36110)[0m     @     0x7f5b1d2cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36110)[0m     @     0x7f5b1d2cb388 at::native::copy_impl()
[2m[36m(pid=36110)[0m     @     0x7f5b1d2cd5a4 at::native::copy_()
[2m[36m(pid=36094)[0m     @     0x7ed50b2238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36094)[0m     @     0x7ed50b223ad3 at::TensorIterator::for_each()
[2m[36m(pid=36094)[0m     @     0x7ed50b223d91 at::TensorIterator::for_each()
[2m[36m(pid=36094)[0m     @     0x7ed50bb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36094)[0m     @     0x7ed50bb29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36094)[0m     @     0x7ed50afcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36094)[0m     @     0x7ed50afc9388 at::native::copy_impl()
[2m[36m(pid=36094)[0m     @     0x7ed50afcb5a4 at::native::copy_()
[2m[36m(pid=36094)[0m     @     0x7ed50b6b64f5 at::Tensor::copy_()
[2m[36m(pid=36094)[0m     @     0x7ed50db898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36063)[0m     @     0x7f8d1bc98ad3 at::TensorIterator::for_each()
[2m[36m(pid=36063)[0m     @     0x7f8d1bc98d91 at::TensorIterator::for_each()
[2m[36m(pid=36063)[0m     @     0x7f8d1c57bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36063)[0m     @     0x7f8d1c59ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36063)[0m     @     0x7f8d1ba40a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36063)[0m     @     0x7f8d1ba3e388 at::native::copy_impl()
[2m[36m(pid=36063)[0m     @     0x7f8d1ba405a4 at::native::copy_()
[2m[36m(pid=36063)[0m     @     0x7f8d1c12b4f5 at::Tensor::copy_()
[2m[36m(pid=36063)[0m     @     0x7f8d1e5fe8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36063)[0m     @     0x7f8d1c12b4f5 at::Tensor::copy_()
[2m[36m(pid=36063)[0m     @     0x7f8d221d679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36063)[0m     @     0x55f256155fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36058)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36058)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36058)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36058)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36058)[0m *** SIGSEGV (@0x0) received by PID 36058 (TID 0x7fc105624700) from PID 0; stack trace: ***
[2m[36m(pid=36058)[0m     @     0x7fc1051fd390 (unknown)
[2m[36m(pid=36058)[0m     @     0x7f92050b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36058)[0m     @     0x7f92047e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36058)[0m     @     0x7f92047e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36058)[0m     @     0x7f92047e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=36058)[0m     @     0x7f92047e3d91 at::TensorIterator::for_each()
[2m[36m(pid=36058)[0m     @     0x7f92050c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36058)[0m     @     0x7f92050e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36095)[0m     @     0x7f1fc401cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36095)[0m     @     0x7f1fc37477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36095)[0m     @     0x7f1fc374a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36095)[0m     @     0x7f1fc374aad3 at::TensorIterator::for_each()
[2m[36m(pid=36095)[0m     @     0x7f1fc374ad91 at::TensorIterator::for_each()
[2m[36m(pid=36095)[0m     @     0x7f1fc402db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36095)[0m     @     0x7f1fc4050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36095)[0m     @     0x7f1fc34f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36095)[0m     @     0x7f1fc34f0388 at::native::copy_impl()
[2m[36m(pid=36095)[0m     @     0x7f1fc34f25a4 at::native::copy_()
[2m[36m(pid=36103)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36103)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36103)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36103)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36103)[0m *** SIGSEGV (@0x0) received by PID 36103 (TID 0x7fd9a6dbc700) from PID 0; stack trace: ***
[2m[36m(pid=36103)[0m     @     0x7fd9a6995390 (unknown)
[2m[36m(pid=36103)[0m     @     0x7faaa67bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36103)[0m     @     0x7faaa5ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36103)[0m     @     0x7faaa5ee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36103)[0m     @     0x7faaa5ee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=36016)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36016)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36016)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36016)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36016)[0m *** SIGSEGV (@0x0) received by PID 36016 (TID 0x7f6d89393700) from PID 0; stack trace: ***
[2m[36m(pid=36016)[0m     @     0x7f6d88f6c390 (unknown)
[2m[36m(pid=36016)[0m     @     0x7f3e88ea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36016)[0m     @     0x7f3e885cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36016)[0m     @     0x7f3e885d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36068)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36068)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36068)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36068)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36068)[0m *** SIGSEGV (@0x0) received by PID 36068 (TID 0x7fcd2858e700) from PID 0; stack trace: ***
[2m[36m(pid=36068)[0m     @     0x7fcd28167390 (unknown)
[2m[36m(pid=36068)[0m     @     0x7f9e27eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36068)[0m     @     0x7f9e275e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36068)[0m     @     0x7f9e275e48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36066)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36066)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36066)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36066)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36066)[0m *** SIGSEGV (@0x0) received by PID 36066 (TID 0x7f6a0a1ea700) from PID 0; stack trace: ***
[2m[36m(pid=36066)[0m     @     0x7f6a09dc3390 (unknown)
[2m[36m(pid=36066)[0m     @     0x7f3b09d1df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36066)[0m     @     0x7f3b094487db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36066)[0m     @     0x7f3b0944b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36099)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36099)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36099)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36099)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36099)[0m *** SIGSEGV (@0x0) received by PID 36099 (TID 0x7f1b1437a700) from PID 0; stack trace: ***
[2m[36m(pid=36099)[0m     @     0x7f1b13f53390 (unknown)
[2m[36m(pid=36099)[0m     @     0x7eec13e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36099)[0m     @     0x7eec135367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36077)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36077)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36077)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36077)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36077)[0m *** SIGSEGV (@0x0) received by PID 36077 (TID 0x7fd0c197f700) from PID 0; stack trace: ***
[2m[36m(pid=36077)[0m     @     0x7fd0c1558390 (unknown)
[2m[36m(pid=36077)[0m     @     0x7fa1c14e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36023)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36023)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36023)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36023)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36023)[0m *** SIGSEGV (@0x0) received by PID 36023 (TID 0x7f392f26f700) from PID 0; stack trace: ***
[2m[36m(pid=36023)[0m     @     0x7f392ee48390 (unknown)
[2m[36m(pid=36023)[0m     @     0x7f0a2edf0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36023)[0m     @     0x7f0a2e51b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36023)[0m     @     0x7f0a2e51e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36023)[0m     @     0x7f0a2e51ead3 at::TensorIterator::for_each()
[2m[36m(pid=36126)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36126)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36126)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36126)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36126)[0m *** SIGSEGV (@0x0) received by PID 36126 (TID 0x7fcd56343700) from PID 0; stack trace: ***
[2m[36m(pid=36126)[0m     @     0x7fcd55f1c390 (unknown)
[2m[36m(pid=36126)[0m     @     0x7f9e55e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36126)[0m     @     0x7f9e5554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36126)[0m     @     0x7f9e555528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36126)[0m     @     0x7f9e55552ad3 at::TensorIterator::for_each()
[2m[36m(pid=36126)[0m     @     0x7f9e55552d91 at::TensorIterator::for_each()
[2m[36m(pid=36126)[0m     @     0x7f9e55e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36079)[0m     @     0x7f51305658f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36079)[0m     @     0x7f5130565ad3 at::TensorIterator::for_each()
[2m[36m(pid=36079)[0m     @     0x7f5130565d91 at::TensorIterator::for_each()
[2m[36m(pid=36079)[0m     @     0x7f5130e48b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36079)[0m     @     0x7f5130e6bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36079)[0m     @     0x7f513030da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36079)[0m     @     0x7f513030b388 at::native::copy_impl()
[2m[36m(pid=36079)[0m     @     0x7f513030d5a4 at::native::copy_()
[2m[36m(pid=36079)[0m     @     0x7f51309f84f5 at::Tensor::copy_()
[2m[36m(pid=36028)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36028)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36028)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36028)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36028)[0m *** SIGSEGV (@0x0) received by PID 36028 (TID 0x7f7c2d8da700) from PID 0; stack trace: ***
[2m[36m(pid=36028)[0m     @     0x7f7c2d4b3390 (unknown)
[2m[36m(pid=36028)[0m     @     0x7f4d2d3ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36028)[0m     @     0x7f4d2caf77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36028)[0m     @     0x7f4d2cafa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36028)[0m     @     0x7f4d2cafaad3 at::TensorIterator::for_each()
[2m[36m(pid=36028)[0m     @     0x7f4d2cafad91 at::TensorIterator::for_each()
[2m[36m(pid=36028)[0m     @     0x7f4d2d3ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36028)[0m     @     0x7f4d2d400c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36026)[0m     @     0x7faa757d68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36026)[0m     @     0x7faa757d6ad3 at::TensorIterator::for_each()
[2m[36m(pid=36026)[0m     @     0x7faa757d6d91 at::TensorIterator::for_each()
[2m[36m(pid=36026)[0m     @     0x7faa760b9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36026)[0m     @     0x7faa760dcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36026)[0m     @     0x7faa7557ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36026)[0m     @     0x7faa7557c388 at::native::copy_impl()
[2m[36m(pid=36026)[0m     @     0x7faa7557e5a4 at::native::copy_()
[2m[36m(pid=36097)[0m     @     0x7f15628258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36097)[0m     @     0x7f1562825ad3 at::TensorIterator::for_each()
[2m[36m(pid=36097)[0m     @     0x7f1562825d91 at::TensorIterator::for_each()
[2m[36m(pid=36097)[0m     @     0x7f1563108b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36097)[0m     @     0x7f156312bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36097)[0m     @     0x7f15625cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36097)[0m     @     0x7f15625cb388 at::native::copy_impl()
[2m[36m(pid=36097)[0m     @     0x7f15625cd5a4 at::native::copy_()
[2m[36m(pid=36097)[0m     @     0x7f1562cb84f5 at::Tensor::copy_()
[2m[36m(pid=36097)[0m     @     0x7f156518b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36013)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36013)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36013)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36013)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36013)[0m *** SIGSEGV (@0x0) received by PID 36013 (TID 0x7f130c073700) from PID 0; stack trace: ***
[2m[36m(pid=36013)[0m     @     0x7f130bc4c390 (unknown)
[2m[36m(pid=36013)[0m     @     0x7ee40baf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36013)[0m     @     0x7ee40b2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36013)[0m     @     0x7ee40b2238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36013)[0m     @     0x7ee40b223ad3 at::TensorIterator::for_each()
[2m[36m(pid=36013)[0m     @     0x7ee40b223d91 at::TensorIterator::for_each()
[2m[36m(pid=36013)[0m     @     0x7ee40bb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36080)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36080)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36080)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36080)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36080)[0m *** SIGSEGV (@0x0) received by PID 36080 (TID 0x7f9def83e700) from PID 0; stack trace: ***
[2m[36m(pid=36080)[0m     @     0x7f9def417390 (unknown)
[2m[36m(pid=36080)[0m     @     0x7f6eef3cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36080)[0m     @     0x7f6eeeaf87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36080)[0m     @     0x7f6eeeafb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36080)[0m     @     0x7f6eeeafbad3 at::TensorIterator::for_each()
[2m[36m(pid=36012)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36012)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36012)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36012)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36012)[0m *** SIGSEGV (@0x0) received by PID 36012 (TID 0x7f980a8fc700) from PID 0; stack trace: ***
[2m[36m(pid=36012)[0m     @     0x7f980a4d5390 (unknown)
[2m[36m(pid=36012)[0m     @     0x7f690a467f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36012)[0m     @     0x7f6909b927db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36012)[0m     @     0x7f6909b958f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36012)[0m     @     0x7f6909b95ad3 at::TensorIterator::for_each()
[2m[36m(pid=36081)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36081)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36081)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36081)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36081)[0m *** SIGSEGV (@0x0) received by PID 36081 (TID 0x7f430737b700) from PID 0; stack trace: ***
[2m[36m(pid=36081)[0m     @     0x7f4306f54390 (unknown)
[2m[36m(pid=36081)[0m     @     0x7f1406ed3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36081)[0m     @     0x7f14065fe7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36081)[0m     @     0x7f14066018f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36081)[0m     @     0x7f1406601ad3 at::TensorIterator::for_each()
[2m[36m(pid=36118)[0m     @     0x7f76e09788f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36118)[0m     @     0x7f76e0978ad3 at::TensorIterator::for_each()
[2m[36m(pid=36118)[0m     @     0x7f76e0978d91 at::TensorIterator::for_each()
[2m[36m(pid=36118)[0m     @     0x7f76e125bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36118)[0m     @     0x7f76e127ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36118)[0m     @     0x7f76e0720a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36118)[0m     @     0x7f76e071e388 at::native::copy_impl()
[2m[36m(pid=36118)[0m     @     0x7f76e07205a4 at::native::copy_()
[2m[36m(pid=36118)[0m     @     0x7f76e0e0b4f5 at::Tensor::copy_()
[2m[36m(pid=36118)[0m     @     0x7f76e32de8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36118)[0m     @     0x7f76e0e0b4f5 at::Tensor::copy_()
[2m[36m(pid=36118)[0m     @     0x7f76e6eb679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36118)[0m     @     0x55b86e8b9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36118)[0m     @     0x55b86e814b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36118)[0m     @     0x55b86e89fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36118)[0m     @     0x55b86e8a0a20 method_vectorcall
[2m[36m(pid=36118)[0m     @     0x55b86e814bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36118)[0m     @     0x55b86e89fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36118)[0m     @     0x55b86e8a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36118)[0m     @     0x55b86e815689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36118)[0m     @     0x55b86e89fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36118)[0m     @     0x55b86e8a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36118)[0m     @     0x55b86e815689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36007)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36007)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36007)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36007)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36007)[0m *** SIGSEGV (@0x0) received by PID 36007 (TID 0x7f1538958700) from PID 0; stack trace: ***
[2m[36m(pid=36007)[0m     @     0x7f1538531390 (unknown)
[2m[36m(pid=36007)[0m     @     0x7ee6383e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36007)[0m     @     0x7ee637b0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36007)[0m     @     0x7ee637b118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36007)[0m     @     0x7ee637b11ad3 at::TensorIterator::for_each()
[2m[36m(pid=36027)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36027)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36027)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36027)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36027)[0m *** SIGSEGV (@0x0) received by PID 36027 (TID 0x7fc7575ac700) from PID 0; stack trace: ***
[2m[36m(pid=36027)[0m     @     0x7fc757185390 (unknown)
[2m[36m(pid=36027)[0m     @     0x7f9857124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36027)[0m     @     0x7f985684f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36027)[0m     @     0x7f98568528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36027)[0m     @     0x7f9856852ad3 at::TensorIterator::for_each()
[2m[36m(pid=36085)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36085)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36085)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36085)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36085)[0m *** SIGSEGV (@0x0) received by PID 36085 (TID 0x7fe1b4e15700) from PID 0; stack trace: ***
[2m[36m(pid=36085)[0m     @     0x7fe1b49ee390 (unknown)
[2m[36m(pid=36085)[0m     @     0x7fb2b4825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36085)[0m     @     0x7fb2b3f507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36085)[0m     @     0x7fb2b3f538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36083)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36083)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36083)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36083)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36083)[0m *** SIGSEGV (@0x0) received by PID 36083 (TID 0x7f4de2474700) from PID 0; stack trace: ***
[2m[36m(pid=36083)[0m     @     0x7f4de204d390 (unknown)
[2m[36m(pid=36083)[0m     @     0x7f1ee1e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36083)[0m     @     0x7f1ee154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36083)[0m     @     0x7f1ee15528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36009)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36009)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36009)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36009)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36009)[0m *** SIGSEGV (@0x0) received by PID 36009 (TID 0x7f2a3d4da700) from PID 0; stack trace: ***
[2m[36m(pid=36009)[0m     @     0x7f2a3d0b3390 (unknown)
[2m[36m(pid=36009)[0m     @     0x7efb3cf4ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36009)[0m     @     0x7efb3c67a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36009)[0m     @     0x7efb3c67d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36003)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36003)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36003)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36003)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36003)[0m *** SIGSEGV (@0x0) received by PID 36003 (TID 0x7fd28124f700) from PID 0; stack trace: ***
[2m[36m(pid=36003)[0m     @     0x7fd280e28390 (unknown)
[2m[36m(pid=36003)[0m     @     0x7fa380dd0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36003)[0m     @     0x7fa3804fb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36003)[0m     @     0x7fa3804fe8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36003)[0m     @     0x7fa3804fead3 at::TensorIterator::for_each()
[2m[36m(pid=36070)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36070)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36070)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36070)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36070)[0m *** SIGSEGV (@0x0) received by PID 36070 (TID 0x7f1257d84700) from PID 0; stack trace: ***
[2m[36m(pid=36070)[0m     @     0x7f125795d390 (unknown)
[2m[36m(pid=36070)[0m     @     0x7ee3578def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36070)[0m     @     0x7ee3570097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36070)[0m     @     0x7ee35700c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36102)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36102)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36102)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36102)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36102)[0m *** SIGSEGV (@0x0) received by PID 36102 (TID 0x7f1b6b4bc700) from PID 0; stack trace: ***
[2m[36m(pid=36102)[0m     @     0x7f1b6b095390 (unknown)
[2m[36m(pid=36102)[0m     @     0x7eec6b041f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36102)[0m     @     0x7eec6a76c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36102)[0m     @     0x7eec6a76f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36078)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36078)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36078)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36078)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36078)[0m *** SIGSEGV (@0x0) received by PID 36078 (TID 0x7f90645fe700) from PID 0; stack trace: ***
[2m[36m(pid=36078)[0m     @     0x7f90641d7390 (unknown)
[2m[36m(pid=36078)[0m     @     0x7f6164101f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36078)[0m     @     0x7f616382c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36005)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36005)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36005)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36005)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36005)[0m *** SIGSEGV (@0x0) received by PID 36005 (TID 0x7f3f39fd8700) from PID 0; stack trace: ***
[2m[36m(pid=36005)[0m     @     0x7f3f39bb1390 (unknown)
[2m[36m(pid=36005)[0m     @     0x7f1039b5ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36005)[0m     @     0x7f103928a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36005)[0m     @     0x7f103928d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36005)[0m     @     0x7f103928dad3 at::TensorIterator::for_each()
[2m[36m(pid=36021)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36021)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36021)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36021)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36021)[0m *** SIGSEGV (@0x0) received by PID 36021 (TID 0x7fb4ab303700) from PID 0; stack trace: ***
[2m[36m(pid=36021)[0m     @     0x7fb4aaedc390 (unknown)
[2m[36m(pid=36021)[0m     @     0x7f85aae66f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36021)[0m     @     0x7f85aa5917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36021)[0m     @     0x7f85aa5948f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36021)[0m     @     0x7f85aa594ad3 at::TensorIterator::for_each()
[2m[36m(pid=36021)[0m     @     0x7f85aa594d91 at::TensorIterator::for_each()
[2m[36m(pid=36021)[0m     @     0x7f85aae77b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36104)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36104)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36104)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36104)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36104)[0m *** SIGSEGV (@0x0) received by PID 36104 (TID 0x7fef6cfc2700) from PID 0; stack trace: ***
[2m[36m(pid=36104)[0m     @     0x7fef6cb9b390 (unknown)
[2m[36m(pid=36104)[0m     @     0x7fc06cb3bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36104)[0m     @     0x7fc06c2667db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36104)[0m     @     0x7fc06c2698f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36104)[0m     @     0x7fc06c269ad3 at::TensorIterator::for_each()
[2m[36m(pid=36104)[0m     @     0x7fc06c269d91 at::TensorIterator::for_each()
[2m[36m(pid=36104)[0m     @     0x7fc06cb4cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36104)[0m     @     0x7fc06cb6fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36090)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36090)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36090)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36090)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36090)[0m *** SIGSEGV (@0x0) received by PID 36090 (TID 0x7fe63d277700) from PID 0; stack trace: ***
[2m[36m(pid=36090)[0m     @     0x7fe63ce50390 (unknown)
[2m[36m(pid=36090)[0m     @     0x7fb73cdd2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36090)[0m     @     0x7fb73c4fd7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36090)[0m     @     0x7fb73c5008f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36090)[0m     @     0x7fb73c500ad3 at::TensorIterator::for_each()
[2m[36m(pid=36090)[0m     @     0x7fb73c500d91 at::TensorIterator::for_each()
[2m[36m(pid=36064)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36064)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36064)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36064)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36064)[0m *** SIGSEGV (@0x0) received by PID 36064 (TID 0x7fa364e2b700) from PID 0; stack trace: ***
[2m[36m(pid=36064)[0m     @     0x7fa364a04390 (unknown)
[2m[36m(pid=36064)[0m     @     0x7f7464774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36064)[0m     @     0x7f7463e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36064)[0m     @     0x7f7463ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36064)[0m     @     0x7f7463ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=36064)[0m     @     0x7f7463ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=36064)[0m     @     0x7f7464785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36064)[0m     @     0x7f74647a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36064)[0m     @     0x7f7463c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36025)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36025)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36025)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36025)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36025)[0m *** SIGSEGV (@0x0) received by PID 36025 (TID 0x7fde0439f700) from PID 0; stack trace: ***
[2m[36m(pid=36025)[0m     @     0x7fde03f78390 (unknown)
[2m[36m(pid=36025)[0m     @     0x7faf03eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36025)[0m     @     0x7faf035e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36025)[0m     @     0x7faf035e48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36025)[0m     @     0x7faf035e4ad3 at::TensorIterator::for_each()
[2m[36m(pid=36025)[0m     @     0x7faf035e4d91 at::TensorIterator::for_each()
[2m[36m(pid=36010)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36010)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36010)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36010)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36010)[0m *** SIGSEGV (@0x0) received by PID 36010 (TID 0x7fa442387700) from PID 0; stack trace: ***
[2m[36m(pid=36010)[0m     @     0x7fa441f60390 (unknown)
[2m[36m(pid=36010)[0m     @     0x7f7541e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36010)[0m     @     0x7f754154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36010)[0m     @     0x7f75415528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36010)[0m     @     0x7f7541552ad3 at::TensorIterator::for_each()
[2m[36m(pid=36010)[0m     @     0x7f7541552d91 at::TensorIterator::for_each()
[2m[36m(pid=36010)[0m     @     0x7f7541e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36086)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36086)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36086)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36086)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36086)[0m *** SIGSEGV (@0x0) received by PID 36086 (TID 0x7f249f463700) from PID 0; stack trace: ***
[2m[36m(pid=36086)[0m     @     0x7f249f03c390 (unknown)
[2m[36m(pid=36086)[0m     @     0x7ef59efd4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36086)[0m     @     0x7ef59e6ff7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36086)[0m     @     0x7ef59e7028f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36086)[0m     @     0x7ef59e702ad3 at::TensorIterator::for_each()
[2m[36m(pid=36086)[0m     @     0x7ef59e702d91 at::TensorIterator::for_each()
[2m[36m(pid=36056)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36056)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36056)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36056)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36056)[0m *** SIGSEGV (@0x0) received by PID 36056 (TID 0x7fcc57b8e700) from PID 0; stack trace: ***
[2m[36m(pid=36056)[0m     @     0x7fcc57767390 (unknown)
[2m[36m(pid=36056)[0m     @     0x7f9d5761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36056)[0m     @     0x7f9d56d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36056)[0m     @     0x7f9d56d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36056)[0m     @     0x7f9d56d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=36056)[0m     @     0x7f9d56d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=36008)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36008)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36008)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36008)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36008)[0m *** SIGSEGV (@0x0) received by PID 36008 (TID 0x7f2277452700) from PID 0; stack trace: ***
[2m[36m(pid=36008)[0m     @     0x7f227702b390 (unknown)
[2m[36m(pid=36008)[0m     @     0x7ef376f92f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36008)[0m     @     0x7ef3766bd7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36008)[0m     @     0x7ef3766c08f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36008)[0m     @     0x7ef3766c0ad3 at::TensorIterator::for_each()
[2m[36m(pid=36008)[0m     @     0x7ef3766c0d91 at::TensorIterator::for_each()
[2m[36m(pid=36008)[0m     @     0x7ef376fa3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36015)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36015)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36015)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36015)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36015)[0m *** SIGSEGV (@0x0) received by PID 36015 (TID 0x7fd44a272700) from PID 0; stack trace: ***
[2m[36m(pid=36015)[0m     @     0x7fd449e4b390 (unknown)
[2m[36m(pid=36015)[0m     @     0x7fa549df7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36059)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36059)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36059)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36059)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36059)[0m *** SIGSEGV (@0x0) received by PID 36059 (TID 0x7fee5dc94700) from PID 0; stack trace: ***
[2m[36m(pid=36059)[0m     @     0x7fee5d86d390 (unknown)
[2m[36m(pid=36059)[0m     @     0x7fbf5d7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36059)[0m     @     0x7fbf5cf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36059)[0m     @     0x7fbf5cf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36059)[0m     @     0x7fbf5cf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=36076)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36076)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36076)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36076)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36076)[0m *** SIGSEGV (@0x0) received by PID 36076 (TID 0x7f689c9db700) from PID 0; stack trace: ***
[2m[36m(pid=36076)[0m     @     0x7f689c5b4390 (unknown)
[2m[36m(pid=36076)[0m     @     0x7f399c53cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36076)[0m     @     0x7f399bc677db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36076)[0m     @     0x7f399bc6a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36076)[0m     @     0x7f399bc6aad3 at::TensorIterator::for_each()
[2m[36m(pid=36076)[0m     @     0x7f399bc6ad91 at::TensorIterator::for_each()
[2m[36m(pid=36076)[0m     @     0x7f399c54db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36006)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36006)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36006)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36006)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36006)[0m *** SIGSEGV (@0x0) received by PID 36006 (TID 0x7f7ea3452700) from PID 0; stack trace: ***
[2m[36m(pid=36006)[0m     @     0x7f7ea302b390 (unknown)
[2m[36m(pid=36006)[0m     @     0x7f4fa2faff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36006)[0m     @     0x7f4fa26da7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36006)[0m     @     0x7f4fa26dd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36006)[0m     @     0x7f4fa26ddad3 at::TensorIterator::for_each()
[2m[36m(pid=36006)[0m     @     0x7f4fa26ddd91 at::TensorIterator::for_each()
[2m[36m(pid=36022)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36022)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36022)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36022)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36022)[0m *** SIGSEGV (@0x0) received by PID 36022 (TID 0x7f886ad5d700) from PID 0; stack trace: ***
[2m[36m(pid=36022)[0m     @     0x7f886a936390 (unknown)
[2m[36m(pid=36022)[0m     @     0x7f596a8d1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36022)[0m     @     0x7f5969ffc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36022)[0m     @     0x7f5969fff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36022)[0m     @     0x7f5969fffad3 at::TensorIterator::for_each()
[2m[36m(pid=36022)[0m     @     0x7f5969fffd91 at::TensorIterator::for_each()
[2m[36m(pid=36033)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36033)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36033)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36033)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36033)[0m *** SIGSEGV (@0x0) received by PID 36033 (TID 0x7fdcb120c700) from PID 0; stack trace: ***
[2m[36m(pid=36033)[0m     @     0x7fdcb0de5390 (unknown)
[2m[36m(pid=36033)[0m     @     0x7fadb0b42f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36033)[0m     @     0x7fadb026d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36033)[0m     @     0x7fadb02708f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36033)[0m     @     0x7fadb0270ad3 at::TensorIterator::for_each()
[2m[36m(pid=36033)[0m     @     0x7fadb0270d91 at::TensorIterator::for_each()
[2m[36m(pid=36033)[0m     @     0x7fadb0b53b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36117)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36117)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36117)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36117)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36117)[0m *** SIGSEGV (@0x0) received by PID 36117 (TID 0x7f3cbf34f700) from PID 0; stack trace: ***
[2m[36m(pid=36117)[0m     @     0x7f3cbef28390 (unknown)
[2m[36m(pid=36117)[0m     @     0x7f0dbeed3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36117)[0m     @     0x7f0dbe5fe7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36117)[0m     @     0x7f0dbe6018f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36117)[0m     @     0x7f0dbe601ad3 at::TensorIterator::for_each()
[2m[36m(pid=36117)[0m     @     0x7f0dbe601d91 at::TensorIterator::for_each()
[2m[36m(pid=36120)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36120)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36120)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36120)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36120)[0m *** SIGSEGV (@0x0) received by PID 36120 (TID 0x7f19339ee700) from PID 0; stack trace: ***
[2m[36m(pid=36120)[0m     @     0x7f19335c7390 (unknown)
[2m[36m(pid=36120)[0m     @     0x7eea33572f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36120)[0m     @     0x7eea32c9d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36120)[0m     @     0x7eea32ca08f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36120)[0m     @     0x7eea32ca0ad3 at::TensorIterator::for_each()
[2m[36m(pid=36120)[0m     @     0x7eea32ca0d91 at::TensorIterator::for_each()
[2m[36m(pid=36029)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36029)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36029)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36029)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36029)[0m *** SIGSEGV (@0x0) received by PID 36029 (TID 0x7f09a5fca700) from PID 0; stack trace: ***
[2m[36m(pid=36029)[0m     @     0x7f09a5ba3390 (unknown)
[2m[36m(pid=36029)[0m     @     0x7edaa5b2df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36029)[0m     @     0x7edaa52587db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36029)[0m     @     0x7edaa525b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36029)[0m     @     0x7edaa525bad3 at::TensorIterator::for_each()
[2m[36m(pid=36029)[0m     @     0x7edaa525bd91 at::TensorIterator::for_each()
[2m[36m(pid=36029)[0m     @     0x7edaa5b3eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36087)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36087)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36087)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36087)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36087)[0m *** SIGSEGV (@0x0) received by PID 36087 (TID 0x7fc1484b3700) from PID 0; stack trace: ***
[2m[36m(pid=36087)[0m     @     0x7fc14808c390 (unknown)
[2m[36m(pid=36087)[0m     @     0x7f9247f2ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36087)[0m     @     0x7f924765a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36087)[0m     @     0x7f924765d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36087)[0m     @     0x7f924765dad3 at::TensorIterator::for_each()
[2m[36m(pid=36084)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36084)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36084)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36084)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36084)[0m *** SIGSEGV (@0x0) received by PID 36084 (TID 0x7f49d1b1a700) from PID 0; stack trace: ***
[2m[36m(pid=36084)[0m     @     0x7f49d16f3390 (unknown)
[2m[36m(pid=36084)[0m     @     0x7f1ad1687f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36084)[0m     @     0x7f1ad0db27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36084)[0m     @     0x7f1ad0db58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36084)[0m     @     0x7f1ad0db5ad3 at::TensorIterator::for_each()
[2m[36m(pid=36084)[0m     @     0x7f1ad0db5d91 at::TensorIterator::for_each()
[2m[36m(pid=36084)[0m     @     0x7f1ad1698b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36084)[0m     @     0x7f1ad16bbc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36019)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36019)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36019)[0m *** Aborted at 1604570811 (unix time) try "date -d @1604570811" if you are using GNU date ***
[2m[36m(pid=36019)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36019)[0m *** SIGSEGV (@0x0) received by PID 36019 (TID 0x7fb61742f700) from PID 0; stack trace: ***
[2m[36m(pid=36019)[0m     @     0x7fb617008390 (unknown)
[2m[36m(pid=36019)[0m     @     0x7f8716f94f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36019)[0m     @     0x7f87166bf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36019)[0m     @     0x7f87166c28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36019)[0m     @     0x7f87166c2ad3 at::TensorIterator::for_each()
[2m[36m(pid=36019)[0m     @     0x7f87166c2d91 at::TensorIterator::for_each()
[2m[36m(pid=36019)[0m     @     0x7f8716fa5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36019)[0m     @     0x7f8716fc8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36011)[0m     @     0x7f351ee7fad3 at::TensorIterator::for_each()
[2m[36m(pid=36011)[0m     @     0x7f351ee7fd91 at::TensorIterator::for_each()
[2m[36m(pid=36011)[0m     @     0x7f351f762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36011)[0m     @     0x7f351f785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36002)[0m     @     0x7eeeb89fbad3 at::TensorIterator::for_each()
[2m[36m(pid=36002)[0m     @     0x7eeeb89fbd91 at::TensorIterator::for_each()
[2m[36m(pid=36002)[0m     @     0x7eeeb92deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36082)[0m     @     0x7fc99131aad3 at::TensorIterator::for_each()
[2m[36m(pid=36082)[0m     @     0x7fc99131ad91 at::TensorIterator::for_each()
[2m[36m(pid=36082)[0m     @     0x7fc991bfdb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36082)[0m     @     0x7fc991c20c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36074)[0m     @     0x7f840e0ba4f5 at::Tensor::copy_()
[2m[36m(pid=36074)[0m     @     0x7f841058d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36074)[0m     @     0x7f840e0ba4f5 at::Tensor::copy_()
[2m[36m(pid=36074)[0m     @     0x7f841416579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36093)[0m     @     0x7fa5c13ba4f5 at::Tensor::copy_()
[2m[36m(pid=36093)[0m     @     0x7fa5c746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36093)[0m     @     0x5568c3752fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36093)[0m     @     0x5568c36adb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36093)[0m     @     0x5568c3738baf _PyEval_EvalCodeWithName
[2m[36m(pid=36093)[0m     @     0x5568c3739a20 method_vectorcall
[2m[36m(pid=36093)[0m     @     0x5568c36adbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36093)[0m     @     0x5568c3738baf _PyEval_EvalCodeWithName
[2m[36m(pid=36093)[0m     @     0x5568c3739643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36093)[0m     @     0x5568c36ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36093)[0m     @     0x5568c3738baf _PyEval_EvalCodeWithName
[2m[36m(pid=36093)[0m     @     0x5568c3739643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36093)[0m     @     0x5568c36ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36093)[0m     @     0x5568c3738baf _PyEval_EvalCodeWithName
[2m[36m(pid=36093)[0m     @     0x5568c3739643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36093)[0m     @     0x5568c36ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36093)[0m     @     0x5568c3738baf _PyEval_EvalCodeWithName
[2m[36m(pid=36093)[0m     @     0x5568c3739643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36093)[0m     @     0x5568c36ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36127)[0m     @     0x7fad215cb4f5 at::Tensor::copy_()
[2m[36m(pid=36127)[0m     @     0x7fad2767679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36127)[0m     @     0x55bff1851fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36127)[0m     @     0x55bff17acb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36127)[0m     @     0x55bff1837baf _PyEval_EvalCodeWithName
[2m[36m(pid=36127)[0m     @     0x55bff1838a20 method_vectorcall
[2m[36m(pid=36127)[0m     @     0x55bff17acbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36127)[0m     @     0x55bff1837baf _PyEval_EvalCodeWithName
[2m[36m(pid=36127)[0m     @     0x55bff1838643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36127)[0m     @     0x55bff17ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36127)[0m     @     0x55bff1837baf _PyEval_EvalCodeWithName
[2m[36m(pid=36127)[0m     @     0x55bff1838643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36127)[0m     @     0x55bff17ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36127)[0m     @     0x55bff1837baf _PyEval_EvalCodeWithName
[2m[36m(pid=36127)[0m     @     0x55bff1838643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36127)[0m     @     0x55bff17ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36127)[0m     @     0x55bff1837baf _PyEval_EvalCodeWithName
[2m[36m(pid=36127)[0m     @     0x55bff1838643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36127)[0m     @     0x55bff17ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36137)[0m     @     0x7ed5fc6fc4f5 at::Tensor::copy_()
[2m[36m(pid=36137)[0m     @     0x7ed6027a779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36137)[0m     @     0x55d5c7bc3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36137)[0m     @     0x55d5c7b1eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36137)[0m     @     0x55d5c7ba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36137)[0m     @     0x55d5c7baaa20 method_vectorcall
[2m[36m(pid=36137)[0m     @     0x55d5c7b1ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36137)[0m     @     0x55d5c7ba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36137)[0m     @     0x55d5c7baa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36137)[0m     @     0x55d5c7b1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36137)[0m     @     0x55d5c7ba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36137)[0m     @     0x55d5c7baa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36137)[0m     @     0x55d5c7b1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36137)[0m     @     0x55d5c7ba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36137)[0m     @     0x55d5c7baa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36137)[0m     @     0x55d5c7b1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36137)[0m     @     0x55d5c7ba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36137)[0m     @     0x55d5c7baa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36137)[0m     @     0x55d5c7b1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36109)[0m     @     0x7f4a9c98a4f5 at::Tensor::copy_()
[2m[36m(pid=36109)[0m     @     0x7f4aa2a3579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36109)[0m     @     0x55635998afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36109)[0m     @     0x5563598e5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36109)[0m     @     0x556359970baf _PyEval_EvalCodeWithName
[2m[36m(pid=36109)[0m     @     0x556359971a20 method_vectorcall
[2m[36m(pid=36109)[0m     @     0x5563598e5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36109)[0m     @     0x556359970baf _PyEval_EvalCodeWithName
[2m[36m(pid=36109)[0m     @     0x556359971643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36109)[0m     @     0x5563598e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36109)[0m     @     0x556359970baf _PyEval_EvalCodeWithName
[2m[36m(pid=36109)[0m     @     0x556359971643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36109)[0m     @     0x5563598e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36109)[0m     @     0x556359970baf _PyEval_EvalCodeWithName
[2m[36m(pid=36109)[0m     @     0x556359971643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36109)[0m     @     0x5563598e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36109)[0m     @     0x556359970baf _PyEval_EvalCodeWithName
[2m[36m(pid=36109)[0m     @     0x556359971643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36109)[0m     @     0x5563598e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36140)[0m     @     0x7f52376b64f5 at::Tensor::copy_()
[2m[36m(pid=36140)[0m     @     0x7f5239b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36140)[0m     @     0x7f52376b64f5 at::Tensor::copy_()
[2m[36m(pid=36140)[0m     @     0x7f523d76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36140)[0m     @     0x55f87516dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36140)[0m     @     0x55f8750c8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36140)[0m     @     0x55f875153baf _PyEval_EvalCodeWithName
[2m[36m(pid=36140)[0m     @     0x55f875154a20 method_vectorcall
[2m[36m(pid=36140)[0m     @     0x55f8750c8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36140)[0m     @     0x55f875153baf _PyEval_EvalCodeWithName
[2m[36m(pid=36140)[0m     @     0x55f875154643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36140)[0m     @     0x55f8750c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36140)[0m     @     0x55f875153baf _PyEval_EvalCodeWithName
[2m[36m(pid=36140)[0m     @     0x55f875154643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36140)[0m     @     0x55f8750c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36140)[0m     @     0x55f875153baf _PyEval_EvalCodeWithName
[2m[36m(pid=36140)[0m     @     0x55f875154643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36140)[0m     @     0x55f8750c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36092)[0m     @     0x7f24ce8bd4f5 at::Tensor::copy_()
[2m[36m(pid=36092)[0m     @     0x7f24d496879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36092)[0m     @     0x556050b2bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36092)[0m     @     0x556050a86b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36092)[0m     @     0x556050b11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36092)[0m     @     0x556050b12a20 method_vectorcall
[2m[36m(pid=36092)[0m     @     0x556050a86bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36092)[0m     @     0x556050b11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36092)[0m     @     0x556050b12643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36092)[0m     @     0x556050a87689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36092)[0m     @     0x556050b11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36092)[0m     @     0x556050b12643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36092)[0m     @     0x556050a87689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36092)[0m     @     0x556050b11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36092)[0m     @     0x556050b12643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36092)[0m     @     0x556050a87689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36092)[0m     @     0x556050b11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36092)[0m     @     0x556050b12643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36092)[0m     @     0x556050a87689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36135)[0m     @     0x7fa3392354f5 at::Tensor::copy_()
[2m[36m(pid=36135)[0m     @     0x7fa33f2e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36135)[0m     @     0x5633da808fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36135)[0m     @     0x5633da763b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36135)[0m     @     0x5633da7eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36135)[0m     @     0x5633da7efa20 method_vectorcall
[2m[36m(pid=36135)[0m     @     0x5633da763bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36135)[0m     @     0x5633da7eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36135)[0m     @     0x5633da7ef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36135)[0m     @     0x5633da764689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36135)[0m     @     0x5633da7eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36135)[0m     @     0x5633da7ef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36135)[0m     @     0x5633da764689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36135)[0m     @     0x5633da7eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36135)[0m     @     0x5633da7ef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36135)[0m     @     0x5633da764689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36135)[0m     @     0x5633da7eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36135)[0m     @     0x5633da7ef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36135)[0m     @     0x5633da764689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36114)[0m     @     0x7f7b2a78f4f5 at::Tensor::copy_()
[2m[36m(pid=36114)[0m     @     0x7f7b3083a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36114)[0m     @     0x55675a0aafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36114)[0m     @     0x55675a005b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36114)[0m     @     0x55675a090baf _PyEval_EvalCodeWithName
[2m[36m(pid=36114)[0m     @     0x55675a091a20 method_vectorcall
[2m[36m(pid=36114)[0m     @     0x55675a005bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36114)[0m     @     0x55675a090baf _PyEval_EvalCodeWithName
[2m[36m(pid=36114)[0m     @     0x55675a091643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36114)[0m     @     0x55675a006689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36114)[0m     @     0x55675a090baf _PyEval_EvalCodeWithName
[2m[36m(pid=36114)[0m     @     0x55675a091643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36114)[0m     @     0x55675a006689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36114)[0m     @     0x55675a090baf _PyEval_EvalCodeWithName
[2m[36m(pid=36114)[0m     @     0x55675a091643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36114)[0m     @     0x55675a006689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36114)[0m     @     0x55675a090baf _PyEval_EvalCodeWithName
[2m[36m(pid=36114)[0m     @     0x55675a091643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36114)[0m     @     0x55675a006689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36004)[0m     @     0x7f2bbf7eead3 at::TensorIterator::for_each()
[2m[36m(pid=36004)[0m     @     0x7f2bbf7eed91 at::TensorIterator::for_each()
[2m[36m(pid=36004)[0m     @     0x7f2bc00d1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36030)[0m     @     0x7edb73a91ad3 at::TensorIterator::for_each()
[2m[36m(pid=36030)[0m     @     0x7edb73a91d91 at::TensorIterator::for_each()
[2m[36m(pid=36030)[0m     @     0x7edb74374b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36030)[0m     @     0x7edb74397c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36030)[0m     @     0x7edb73839a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36089)[0m     @     0x7f4ed44b7ad3 at::TensorIterator::for_each()
[2m[36m(pid=36089)[0m     @     0x7f4ed44b7d91 at::TensorIterator::for_each()
[2m[36m(pid=36089)[0m     @     0x7f4ed4d9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36089)[0m     @     0x7f4ed4dbdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36133)[0m     @     0x7f75842ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36133)[0m     @     0x7f75842ffad3 at::TensorIterator::for_each()
[2m[36m(pid=36133)[0m     @     0x7f75842ffd91 at::TensorIterator::for_each()
[2m[36m(pid=36075)[0m     @     0x7f1ec7539ad3 at::TensorIterator::for_each()
[2m[36m(pid=36075)[0m     @     0x7f1ec7539d91 at::TensorIterator::for_each()
[2m[36m(pid=36075)[0m     @     0x7f1ec7e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36075)[0m     @     0x7f1ec7e3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36024)[0m     @     0x7fb7259a7ad3 at::TensorIterator::for_each()
[2m[36m(pid=36024)[0m     @     0x7fb7259a7d91 at::TensorIterator::for_each()
[2m[36m(pid=36024)[0m     @     0x7fb72628ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36024)[0m     @     0x7fb7262adc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36017)[0m     @     0x7f68bcd12d91 at::TensorIterator::for_each()
[2m[36m(pid=36017)[0m     @     0x7f68bd5f5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36017)[0m     @     0x7f68bd618c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36017)[0m     @     0x7f68bcabaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36017)[0m     @     0x7f68bcab8388 at::native::copy_impl()
[2m[36m(pid=36037)[0m     @     0x7f86c3c91ad3 at::TensorIterator::for_each()
[2m[36m(pid=36037)[0m     @     0x7f86c3c91d91 at::TensorIterator::for_each()
[2m[36m(pid=36037)[0m     @     0x7f86c4574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36037)[0m     @     0x7f86c4597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36143)[0m     @     0x7f34ada2f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36143)[0m     @     0x559867b3efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36143)[0m     @     0x559867a99b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36143)[0m     @     0x559867b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=36143)[0m     @     0x559867b25a20 method_vectorcall
[2m[36m(pid=36143)[0m     @     0x559867a99bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36143)[0m     @     0x559867b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=36143)[0m     @     0x559867b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36143)[0m     @     0x559867a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36143)[0m     @     0x559867b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=36143)[0m     @     0x559867b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36143)[0m     @     0x559867a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36143)[0m     @     0x559867b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=36143)[0m     @     0x559867b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36143)[0m     @     0x559867a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36143)[0m     @     0x559867b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=36143)[0m     @     0x559867b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36143)[0m     @     0x559867a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36101)[0m     @     0x7f9415cbb4f5 at::Tensor::copy_()
[2m[36m(pid=36101)[0m     @     0x7f941bd6679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36101)[0m     @     0x55cb860cffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36101)[0m     @     0x55cb8602ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36101)[0m     @     0x55cb860b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36101)[0m     @     0x55cb860b6a20 method_vectorcall
[2m[36m(pid=36101)[0m     @     0x55cb8602abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36101)[0m     @     0x55cb860b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36101)[0m     @     0x55cb860b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36101)[0m     @     0x55cb8602b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36101)[0m     @     0x55cb860b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36101)[0m     @     0x55cb860b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36101)[0m     @     0x55cb8602b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36101)[0m     @     0x55cb860b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36101)[0m     @     0x55cb860b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36101)[0m     @     0x55cb8602b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36101)[0m     @     0x55cb860b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36101)[0m     @     0x55cb860b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36101)[0m     @     0x55cb8602b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36088)[0m     @     0x7fcc1f3864f5 at::Tensor::copy_()
[2m[36m(pid=36088)[0m     @     0x7fcc218598de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36088)[0m     @     0x7fcc1f3864f5 at::Tensor::copy_()
[2m[36m(pid=36088)[0m     @     0x7fcc2543179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36088)[0m     @     0x55b56cccdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36088)[0m     @     0x55b56cc28b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36088)[0m     @     0x55b56ccb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36088)[0m     @     0x55b56ccb4a20 method_vectorcall
[2m[36m(pid=36088)[0m     @     0x55b56cc28bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36088)[0m     @     0x55b56ccb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36088)[0m     @     0x55b56ccb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36088)[0m     @     0x55b56cc29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36088)[0m     @     0x55b56ccb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36088)[0m     @     0x55b56ccb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36020)[0m     @     0x7f9118894d91 at::TensorIterator::for_each()
[2m[36m(pid=36020)[0m     @     0x7f9119177b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36020)[0m     @     0x7f911919ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36020)[0m     @     0x7f911863ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36014)[0m     @     0x7f2dc59e54f5 at::Tensor::copy_()
[2m[36m(pid=36014)[0m     @     0x7f2dcba9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36014)[0m     @     0x561ca7c4ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36014)[0m     @     0x561ca7baab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36014)[0m     @     0x561ca7c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=36014)[0m     @     0x561ca7c36a20 method_vectorcall
[2m[36m(pid=36014)[0m     @     0x561ca7baabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36014)[0m     @     0x561ca7c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=36014)[0m     @     0x561ca7c36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36014)[0m     @     0x561ca7bab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36014)[0m     @     0x561ca7c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=36014)[0m     @     0x561ca7c36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36014)[0m     @     0x561ca7bab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36014)[0m     @     0x561ca7c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=36014)[0m     @     0x561ca7c36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36014)[0m     @     0x561ca7bab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36014)[0m     @     0x561ca7c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=36014)[0m     @     0x561ca7c36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36014)[0m     @     0x561ca7bab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36132)[0m     @     0x7faa95f0c4f5 at::Tensor::copy_()
[2m[36m(pid=36132)[0m     @     0x7faa9bfb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36132)[0m     @     0x55bacc968fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36132)[0m     @     0x55bacc8c3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36132)[0m     @     0x55bacc94ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36132)[0m     @     0x55bacc94fa20 method_vectorcall
[2m[36m(pid=36132)[0m     @     0x55bacc8c3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36132)[0m     @     0x55bacc94ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36132)[0m     @     0x55bacc94f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36132)[0m     @     0x55bacc8c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36132)[0m     @     0x55bacc94ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36132)[0m     @     0x55bacc94f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36132)[0m     @     0x55bacc8c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36132)[0m     @     0x55bacc94ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36132)[0m     @     0x55bacc94f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36132)[0m     @     0x55bacc8c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36132)[0m     @     0x55bacc94ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36132)[0m     @     0x55bacc94f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36132)[0m     @     0x55bacc8c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36110)[0m     @     0x7f5b1d9b84f5 at::Tensor::copy_()
[2m[36m(pid=36110)[0m     @     0x7f5b1fe8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36110)[0m     @     0x7f5b1d9b84f5 at::Tensor::copy_()
[2m[36m(pid=36094)[0m     @     0x7ed50b6b64f5 at::Tensor::copy_()
[2m[36m(pid=36094)[0m     @     0x7ed51176179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36094)[0m     @     0x558f957edfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36094)[0m     @     0x558f95748b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36094)[0m     @     0x558f957d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36094)[0m     @     0x558f957d4a20 method_vectorcall
[2m[36m(pid=36094)[0m     @     0x558f95748bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36094)[0m     @     0x558f957d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36094)[0m     @     0x558f957d4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36094)[0m     @     0x558f95749689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36094)[0m     @     0x558f957d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36094)[0m     @     0x558f957d4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36094)[0m     @     0x558f95749689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36094)[0m     @     0x558f957d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36094)[0m     @     0x558f957d4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36094)[0m     @     0x558f95749689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36094)[0m     @     0x558f957d3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36094)[0m     @     0x558f957d4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36094)[0m     @     0x558f95749689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36063)[0m     @     0x55f2560b0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36063)[0m     @     0x55f25613bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36063)[0m     @     0x55f25613ca20 method_vectorcall
[2m[36m(pid=36063)[0m     @     0x55f2560b0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36063)[0m     @     0x55f25613bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36063)[0m     @     0x55f25613c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36063)[0m     @     0x55f2560b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36063)[0m     @     0x55f25613bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36063)[0m     @     0x55f25613c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36063)[0m     @     0x55f2560b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36063)[0m     @     0x55f25613bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36063)[0m     @     0x55f25613c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36063)[0m     @     0x55f2560b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36063)[0m     @     0x55f25613bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36063)[0m     @     0x55f25613c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36063)[0m     @     0x55f2560b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36058)[0m     @     0x7f920458ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36058)[0m     @     0x7f9204589388 at::native::copy_impl()
[2m[36m(pid=36058)[0m     @     0x7f920458b5a4 at::native::copy_()
[2m[36m(pid=36095)[0m     @     0x7f1fc3bdd4f5 at::Tensor::copy_()
[2m[36m(pid=36095)[0m     @     0x7f1fc60b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36095)[0m     @     0x7f1fc3bdd4f5 at::Tensor::copy_()
[2m[36m(pid=36103)[0m     @     0x7faaa5ee9d91 at::TensorIterator::for_each()
[2m[36m(pid=36103)[0m     @     0x7faaa67ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36103)[0m     @     0x7faaa67efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36103)[0m     @     0x7faaa5c91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36103)[0m     @     0x7faaa5c8f388 at::native::copy_impl()
[2m[36m(pid=36016)[0m     @     0x7f3e885d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=36016)[0m     @     0x7f3e885d2d91 at::TensorIterator::for_each()
[2m[36m(pid=36016)[0m     @     0x7f3e88eb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36016)[0m     @     0x7f3e88ed8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36068)[0m     @     0x7f9e275e4ad3 at::TensorIterator::for_each()
[2m[36m(pid=36068)[0m     @     0x7f9e275e4d91 at::TensorIterator::for_each()
[2m[36m(pid=36068)[0m     @     0x7f9e27ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36068)[0m     @     0x7f9e27eeac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36066)[0m     @     0x7f3b0944bad3 at::TensorIterator::for_each()
[2m[36m(pid=36066)[0m     @     0x7f3b0944bd91 at::TensorIterator::for_each()
[2m[36m(pid=36066)[0m     @     0x7f3b09d2eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36066)[0m     @     0x7f3b09d51c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36099)[0m     @     0x7eec135398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36099)[0m     @     0x7eec13539ad3 at::TensorIterator::for_each()
[2m[36m(pid=36077)[0m     @     0x7fa1c0c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36077)[0m     @     0x7fa1c0c118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36077)[0m     @     0x7fa1c0c11ad3 at::TensorIterator::for_each()
[2m[36m(pid=36023)[0m     @     0x7f0a2e51ed91 at::TensorIterator::for_each()
[2m[36m(pid=36023)[0m     @     0x7f0a2ee01b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36023)[0m     @     0x7f0a2ee24c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36023)[0m     @     0x7f0a2e2c6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36023)[0m     @     0x7f0a2e2c4388 at::native::copy_impl()
[2m[36m(pid=36126)[0m     @     0x7f9e55e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36126)[0m     @     0x7f9e552faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36126)[0m     @     0x7f9e552f8388 at::native::copy_impl()
[2m[36m(pid=36126)[0m     @     0x7f9e552fa5a4 at::native::copy_()
[2m[36m(pid=36126)[0m     @     0x7f9e559e54f5 at::Tensor::copy_()
[2m[36m(pid=36079)[0m     @     0x7f5132ecb8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36079)[0m     @     0x7f51309f84f5 at::Tensor::copy_()
[2m[36m(pid=36079)[0m     @     0x7f5136aa379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36079)[0m     @     0x562838eb4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36079)[0m     @     0x562838e0fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36079)[0m     @     0x562838e9abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36079)[0m     @     0x562838e9ba20 method_vectorcall
[2m[36m(pid=36079)[0m     @     0x562838e0fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36079)[0m     @     0x562838e9abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36079)[0m     @     0x562838e9b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36079)[0m     @     0x562838e10689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36079)[0m     @     0x562838e9abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36079)[0m     @     0x562838e9b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36079)[0m     @     0x562838e10689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36079)[0m     @     0x562838e9abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36079)[0m     @     0x562838e9b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36079)[0m     @     0x562838e10689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36079)[0m     @     0x562838e9abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36079)[0m     @     0x562838e9b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36079)[0m     @     0x562838e10689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36028)[0m     @     0x7f4d2c8a2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36028)[0m     @     0x7f4d2c8a0388 at::native::copy_impl()
[2m[36m(pid=36028)[0m     @     0x7f4d2c8a25a4 at::native::copy_()
[2m[36m(pid=36028)[0m     @     0x7f4d2cf8d4f5 at::Tensor::copy_()
[2m[36m(pid=36026)[0m     @     0x7faa75c694f5 at::Tensor::copy_()
[2m[36m(pid=36026)[0m     @     0x7faa7813c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36026)[0m     @     0x7faa75c694f5 at::Tensor::copy_()
[2m[36m(pid=36026)[0m     @     0x7faa7bd1479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36026)[0m     @     0x559303885fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36026)[0m     @     0x5593037e0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36026)[0m     @     0x55930386bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36026)[0m     @     0x55930386ca20 method_vectorcall
[2m[36m(pid=36026)[0m     @     0x5593037e0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36026)[0m     @     0x55930386bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36026)[0m     @     0x55930386c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36026)[0m     @     0x5593037e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36026)[0m     @     0x55930386bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36026)[0m     @     0x55930386c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36026)[0m     @     0x5593037e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36026)[0m     @     0x55930386bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36026)[0m     @     0x55930386c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36026)[0m     @     0x5593037e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36026)[0m     @     0x55930386bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36026)[0m     @     0x55930386c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36026)[0m     @     0x5593037e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36097)[0m     @     0x7f1562cb84f5 at::Tensor::copy_()
[2m[36m(pid=36097)[0m     @     0x7f1568d6379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36097)[0m     @     0x559ede2aafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36097)[0m     @     0x559ede205b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36097)[0m     @     0x559ede290baf _PyEval_EvalCodeWithName
[2m[36m(pid=36097)[0m     @     0x559ede291a20 method_vectorcall
[2m[36m(pid=36097)[0m     @     0x559ede205bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36097)[0m     @     0x559ede290baf _PyEval_EvalCodeWithName
[2m[36m(pid=36097)[0m     @     0x559ede291643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36097)[0m     @     0x559ede206689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36097)[0m     @     0x559ede290baf _PyEval_EvalCodeWithName
[2m[36m(pid=36097)[0m     @     0x559ede291643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36097)[0m     @     0x559ede206689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36097)[0m     @     0x559ede290baf _PyEval_EvalCodeWithName
[2m[36m(pid=36097)[0m     @     0x559ede291643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36097)[0m     @     0x559ede206689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36097)[0m     @     0x559ede290baf _PyEval_EvalCodeWithName
[2m[36m(pid=36097)[0m     @     0x559ede291643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36097)[0m     @     0x559ede206689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36013)[0m     @     0x7ee40bb29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36013)[0m     @     0x7ee40afcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36013)[0m     @     0x7ee40afc9388 at::native::copy_impl()
[2m[36m(pid=36013)[0m     @     0x7ee40afcb5a4 at::native::copy_()
[2m[36m(pid=36013)[0m     @     0x7ee40b6b64f5 at::Tensor::copy_()
[2m[36m(pid=36013)[0m     @     0x7ee40db898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36080)[0m     @     0x7f6eeeafbd91 at::TensorIterator::for_each()
[2m[36m(pid=36080)[0m     @     0x7f6eef3deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36080)[0m     @     0x7f6eef401c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36080)[0m     @     0x7f6eee8a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36080)[0m     @     0x7f6eee8a1388 at::native::copy_impl()
[2m[36m(pid=36080)[0m     @     0x7f6eee8a35a4 at::native::copy_()
[2m[36m(pid=36012)[0m     @     0x7f6909b95d91 at::TensorIterator::for_each()
[2m[36m(pid=36012)[0m     @     0x7f690a478b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36012)[0m     @     0x7f690a49bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36012)[0m     @     0x7f690993da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36012)[0m     @     0x7f690993b388 at::native::copy_impl()
[2m[36m(pid=36012)[0m     @     0x7f690993d5a4 at::native::copy_()
[2m[36m(pid=36081)[0m     @     0x7f1406601d91 at::TensorIterator::for_each()
[2m[36m(pid=36081)[0m     @     0x7f1406ee4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36081)[0m     @     0x7f1406f07c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36081)[0m     @     0x7f14063a9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36081)[0m     @     0x7f14063a7388 at::native::copy_impl()
[2m[36m(pid=36081)[0m     @     0x7f14063a95a4 at::native::copy_()
[2m[36m(pid=36118)[0m     @     0x55b86e89fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36118)[0m     @     0x55b86e8a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36118)[0m     @     0x55b86e815689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36118)[0m     @     0x55b86e89fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36118)[0m     @     0x55b86e8a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36118)[0m     @     0x55b86e815689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36007)[0m     @     0x7ee637b11d91 at::TensorIterator::for_each()
[2m[36m(pid=36007)[0m     @     0x7ee6383f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36007)[0m     @     0x7ee638417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36007)[0m     @     0x7ee6378b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36007)[0m     @     0x7ee6378b7388 at::native::copy_impl()
[2m[36m(pid=36027)[0m     @     0x7f9856852d91 at::TensorIterator::for_each()
[2m[36m(pid=36027)[0m     @     0x7f9857135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36027)[0m     @     0x7f9857158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36027)[0m     @     0x7f98565faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36027)[0m     @     0x7f98565f8388 at::native::copy_impl()
[2m[36m(pid=36085)[0m     @     0x7fb2b3f53ad3 at::TensorIterator::for_each()
[2m[36m(pid=36085)[0m     @     0x7fb2b3f53d91 at::TensorIterator::for_each()
[2m[36m(pid=36085)[0m     @     0x7fb2b4836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36085)[0m     @     0x7fb2b4859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36085)[0m     @     0x7fb2b3cfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36085)[0m     @     0x7fb2b3cf9388 at::native::copy_impl()
[2m[36m(pid=36083)[0m     @     0x7f1ee1552ad3 at::TensorIterator::for_each()
[2m[36m(pid=36083)[0m     @     0x7f1ee1552d91 at::TensorIterator::for_each()
[2m[36m(pid=36083)[0m     @     0x7f1ee1e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36009)[0m     @     0x7efb3c67dad3 at::TensorIterator::for_each()
[2m[36m(pid=36009)[0m     @     0x7efb3c67dd91 at::TensorIterator::for_each()
[2m[36m(pid=36009)[0m     @     0x7efb3cf60b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36009)[0m     @     0x7efb3cf83c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36009)[0m     @     0x7efb3c425a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36003)[0m     @     0x7fa3804fed91 at::TensorIterator::for_each()
[2m[36m(pid=36003)[0m     @     0x7fa380de1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36003)[0m     @     0x7fa380e04c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36003)[0m     @     0x7fa3802a6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36003)[0m     @     0x7fa3802a4388 at::native::copy_impl()
[2m[36m(pid=36070)[0m     @     0x7ee35700cad3 at::TensorIterator::for_each()
[2m[36m(pid=36070)[0m     @     0x7ee35700cd91 at::TensorIterator::for_each()
[2m[36m(pid=36070)[0m     @     0x7ee3578efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36070)[0m     @     0x7ee357912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36070)[0m     @     0x7ee356db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36070)[0m     @     0x7ee356db2388 at::native::copy_impl()
[2m[36m(pid=36102)[0m     @     0x7eec6a76fad3 at::TensorIterator::for_each()
[2m[36m(pid=36102)[0m     @     0x7eec6a76fd91 at::TensorIterator::for_each()
[2m[36m(pid=36102)[0m     @     0x7eec6b052b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36102)[0m     @     0x7eec6b075c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36102)[0m     @     0x7eec6a517a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36078)[0m     @     0x7f616382f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36078)[0m     @     0x7f616382fad3 at::TensorIterator::for_each()
[2m[36m(pid=36078)[0m     @     0x7f616382fd91 at::TensorIterator::for_each()
[2m[36m(pid=36078)[0m     @     0x7f6164112b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36078)[0m     @     0x7f6164135c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36005)[0m     @     0x7f103928dd91 at::TensorIterator::for_each()
[2m[36m(pid=36005)[0m     @     0x7f1039b70b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36005)[0m     @     0x7f1039b93c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36005)[0m     @     0x7f1039035a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36005)[0m     @     0x7f1039033388 at::native::copy_impl()
[2m[36m(pid=36005)[0m     @     0x7f10390355a4 at::native::copy_()
[2m[36m(pid=36021)[0m     @     0x7f85aae9ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36021)[0m     @     0x7f85aa33ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36021)[0m     @     0x7f85aa33a388 at::native::copy_impl()
[2m[36m(pid=36021)[0m     @     0x7f85aa33c5a4 at::native::copy_()
[2m[36m(pid=36104)[0m     @     0x7fc06c011a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36104)[0m     @     0x7fc06c00f388 at::native::copy_impl()
[2m[36m(pid=36104)[0m     @     0x7fc06c0115a4 at::native::copy_()
[2m[36m(pid=36090)[0m     @     0x7fb73cde3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36090)[0m     @     0x7fb73ce06c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36090)[0m     @     0x7fb73c2a8a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36090)[0m     @     0x7fb73c2a6388 at::native::copy_impl()
[2m[36m(pid=36090)[0m     @     0x7fb73c2a85a4 at::native::copy_()
[2m[36m(pid=36064)[0m     @     0x7f7463c48388 at::native::copy_impl()
[2m[36m(pid=36064)[0m     @     0x7f7463c4a5a4 at::native::copy_()
[2m[36m(pid=36064)[0m     @     0x7f74643354f5 at::Tensor::copy_()
[2m[36m(pid=36064)[0m     @     0x7f74668088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36025)[0m     @     0x7faf03ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36025)[0m     @     0x7faf03eeac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36025)[0m     @     0x7faf0338ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36025)[0m     @     0x7faf0338a388 at::native::copy_impl()
[2m[36m(pid=36025)[0m     @     0x7faf0338c5a4 at::native::copy_()
[2m[36m(pid=36010)[0m     @     0x7f7541e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36010)[0m     @     0x7f75412faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36010)[0m     @     0x7f75412f8388 at::native::copy_impl()
[2m[36m(pid=36010)[0m     @     0x7f75412fa5a4 at::native::copy_()
[2m[36m(pid=36086)[0m     @     0x7ef59efe5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36086)[0m     @     0x7ef59f008c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36086)[0m     @     0x7ef59e4aaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36086)[0m     @     0x7ef59e4a8388 at::native::copy_impl()
[2m[36m(pid=36086)[0m     @     0x7ef59e4aa5a4 at::native::copy_()
[2m[36m(pid=36056)[0m     @     0x7f9d57630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36056)[0m     @     0x7f9d57653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36056)[0m     @     0x7f9d56af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36056)[0m     @     0x7f9d56af3388 at::native::copy_impl()
[2m[36m(pid=36008)[0m     @     0x7ef376fc6c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36008)[0m     @     0x7ef376468a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36008)[0m     @     0x7ef376466388 at::native::copy_impl()
[2m[36m(pid=36008)[0m     @     0x7ef3764685a4 at::native::copy_()
[2m[36m(pid=36015)[0m     @     0x7fa5495227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36059)[0m     @     0x7fbf5cf27d91 at::TensorIterator::for_each()
[2m[36m(pid=36059)[0m     @     0x7fbf5d80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36059)[0m     @     0x7fbf5d82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36059)[0m     @     0x7fbf5cccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36059)[0m     @     0x7fbf5cccd388 at::native::copy_impl()
[2m[36m(pid=36076)[0m     @     0x7f399c570c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36076)[0m     @     0x7f399ba12a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36076)[0m     @     0x7f399ba10388 at::native::copy_impl()
[2m[36m(pid=36076)[0m     @     0x7f399ba125a4 at::native::copy_()
[2m[36m(pid=36006)[0m     @     0x7f4fa2fc0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36006)[0m     @     0x7f4fa2fe3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36006)[0m     @     0x7f4fa2485a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36006)[0m     @     0x7f4fa2483388 at::native::copy_impl()
[2m[36m(pid=36006)[0m     @     0x7f4fa24855a4 at::native::copy_()
[2m[36m(pid=36022)[0m     @     0x7f596a8e2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36022)[0m     @     0x7f596a905c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36022)[0m     @     0x7f5969da7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36022)[0m     @     0x7f5969da5388 at::native::copy_impl()
[2m[36m(pid=36033)[0m     @     0x7fadb0b76c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36033)[0m     @     0x7fadb0018a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36033)[0m     @     0x7fadb0016388 at::native::copy_impl()
[2m[36m(pid=36033)[0m     @     0x7fadb00185a4 at::native::copy_()
[2m[36m(pid=36033)[0m     @     0x7fadb07034f5 at::Tensor::copy_()
[2m[36m(pid=36117)[0m     @     0x7f0dbeee4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36117)[0m     @     0x7f0dbef07c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36117)[0m     @     0x7f0dbe3a9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36117)[0m     @     0x7f0dbe3a7388 at::native::copy_impl()
[2m[36m(pid=36117)[0m     @     0x7f0dbe3a95a4 at::native::copy_()
[2m[36m(pid=36120)[0m     @     0x7eea33583b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36120)[0m     @     0x7eea335a6c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36120)[0m     @     0x7eea32a48a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36120)[0m     @     0x7eea32a46388 at::native::copy_impl()
[2m[36m(pid=36120)[0m     @     0x7eea32a485a4 at::native::copy_()
[2m[36m(pid=36029)[0m     @     0x7edaa5b61c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36029)[0m     @     0x7edaa5003a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36029)[0m     @     0x7edaa5001388 at::native::copy_impl()
[2m[36m(pid=36029)[0m     @     0x7edaa50035a4 at::native::copy_()
[2m[36m(pid=36029)[0m     @     0x7edaa56ee4f5 at::Tensor::copy_()
[2m[36m(pid=36084)[0m     @     0x7f1ad0b5da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36084)[0m     @     0x7f1ad0b5b388 at::native::copy_impl()
[2m[36m(pid=36084)[0m     @     0x7f1ad0b5d5a4 at::native::copy_()
[2m[36m(pid=36084)[0m     @     0x7f1ad12484f5 at::Tensor::copy_()
[2m[36m(pid=36019)[0m     @     0x7f871646aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36019)[0m     @     0x7f8716468388 at::native::copy_impl()
[2m[36m(pid=36019)[0m     @     0x7f871646a5a4 at::native::copy_()
[2m[36m(pid=36019)[0m     @     0x7f8716b554f5 at::Tensor::copy_()
[2m[36m(pid=36011)[0m     @     0x7f351ec27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36011)[0m     @     0x7f351ec25388 at::native::copy_impl()
[2m[36m(pid=36011)[0m     @     0x7f351ec275a4 at::native::copy_()
[2m[36m(pid=36011)[0m     @     0x7f351f3124f5 at::Tensor::copy_()
[2m[36m(pid=36011)[0m     @     0x7f35217e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36002)[0m     @     0x7eeeb9301c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36002)[0m     @     0x7eeeb87a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36002)[0m     @     0x7eeeb87a1388 at::native::copy_impl()
[2m[36m(pid=36002)[0m     @     0x7eeeb87a35a4 at::native::copy_()
[2m[36m(pid=36002)[0m     @     0x7eeeb8e8e4f5 at::Tensor::copy_()
[2m[36m(pid=36082)[0m     @     0x7fc9910c2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36082)[0m     @     0x7fc9910c0388 at::native::copy_impl()
[2m[36m(pid=36082)[0m     @     0x7fc9910c25a4 at::native::copy_()
[2m[36m(pid=36082)[0m     @     0x7fc9917ad4f5 at::Tensor::copy_()
[2m[36m(pid=36074)[0m     @     0x558ecf768fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36074)[0m     @     0x558ecf6c3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36074)[0m     @     0x558ecf74ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36074)[0m     @     0x558ecf74fa20 method_vectorcall
[2m[36m(pid=36074)[0m     @     0x558ecf6c3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36074)[0m     @     0x558ecf74ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36074)[0m     @     0x558ecf74f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36074)[0m     @     0x558ecf6c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36074)[0m     @     0x558ecf74ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36074)[0m     @     0x558ecf74f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36074)[0m     @     0x558ecf6c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36074)[0m     @     0x558ecf74ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36074)[0m     @     0x558ecf74f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36074)[0m     @     0x558ecf6c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36074)[0m     @     0x558ecf74ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36074)[0m     @     0x558ecf74f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36074)[0m     @     0x558ecf6c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36140)[0m     @     0x55f875153baf _PyEval_EvalCodeWithName
[2m[36m(pid=36140)[0m     @     0x55f875154643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36140)[0m     @     0x55f8750c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36004)[0m     @     0x7f2bc00f4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36004)[0m     @     0x7f2bbf596a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36004)[0m     @     0x7f2bbf594388 at::native::copy_impl()
[2m[36m(pid=36004)[0m     @     0x7f2bbf5965a4 at::native::copy_()
[2m[36m(pid=36004)[0m     @     0x7f2bbfc814f5 at::Tensor::copy_()
[2m[36m(pid=36030)[0m     @     0x7edb73837388 at::native::copy_impl()
[2m[36m(pid=36030)[0m     @     0x7edb738395a4 at::native::copy_()
[2m[36m(pid=36030)[0m     @     0x7edb73f244f5 at::Tensor::copy_()
[2m[36m(pid=36030)[0m     @     0x7edb763f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36030)[0m     @     0x7edb73f244f5 at::Tensor::copy_()
[2m[36m(pid=36030)[0m     @     0x7edb79fcf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36030)[0m     @     0x564fe2978fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36030)[0m     @     0x564fe28d3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36030)[0m     @     0x564fe295ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36089)[0m     @     0x7f4ed425fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36089)[0m     @     0x7f4ed425d388 at::native::copy_impl()
[2m[36m(pid=36089)[0m     @     0x7f4ed425f5a4 at::native::copy_()
[2m[36m(pid=36089)[0m     @     0x7f4ed494a4f5 at::Tensor::copy_()
[2m[36m(pid=36089)[0m     @     0x7f4ed6e1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36133)[0m     @     0x7f7584be2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36133)[0m     @     0x7f7584c05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36133)[0m     @     0x7f75840a7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36133)[0m     @     0x7f75840a5388 at::native::copy_impl()
[2m[36m(pid=36133)[0m     @     0x7f75840a75a4 at::native::copy_()
[2m[36m(pid=36075)[0m     @     0x7f1ec72e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36075)[0m     @     0x7f1ec72df388 at::native::copy_impl()
[2m[36m(pid=36075)[0m     @     0x7f1ec72e15a4 at::native::copy_()
[2m[36m(pid=36075)[0m     @     0x7f1ec79cc4f5 at::Tensor::copy_()
[2m[36m(pid=36024)[0m     @     0x7fb72574fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36024)[0m     @     0x7fb72574d388 at::native::copy_impl()
[2m[36m(pid=36024)[0m     @     0x7fb72574f5a4 at::native::copy_()
[2m[36m(pid=36024)[0m     @     0x7fb725e3a4f5 at::Tensor::copy_()
[2m[36m(pid=36024)[0m     @     0x7fb72830d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36017)[0m     @     0x7f68bcaba5a4 at::native::copy_()
[2m[36m(pid=36017)[0m     @     0x7f68bd1a54f5 at::Tensor::copy_()
[2m[36m(pid=36017)[0m     @     0x7f68bf6788de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36017)[0m     @     0x7f68bd1a54f5 at::Tensor::copy_()
[2m[36m(pid=36017)[0m     @     0x7f68c325079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36017)[0m     @     0x56441e98efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36017)[0m     @     0x56441e8e9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36017)[0m     @     0x56441e974baf _PyEval_EvalCodeWithName
[2m[36m(pid=36017)[0m     @     0x56441e975a20 method_vectorcall
[2m[36m(pid=36017)[0m     @     0x56441e8e9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36017)[0m     @     0x56441e974baf _PyEval_EvalCodeWithName
[2m[36m(pid=36017)[0m     @     0x56441e975643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36017)[0m     @     0x56441e8ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36017)[0m     @     0x56441e974baf _PyEval_EvalCodeWithName
[2m[36m(pid=36017)[0m     @     0x56441e975643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36017)[0m     @     0x56441e8ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36017)[0m     @     0x56441e974baf _PyEval_EvalCodeWithName
[2m[36m(pid=36017)[0m     @     0x56441e975643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36017)[0m     @     0x56441e8ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36037)[0m     @     0x7f86c3a39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36037)[0m     @     0x7f86c3a37388 at::native::copy_impl()
[2m[36m(pid=36037)[0m     @     0x7f86c3a395a4 at::native::copy_()
[2m[36m(pid=36037)[0m     @     0x7f86c41244f5 at::Tensor::copy_()
[2m[36m(pid=36088)[0m     @     0x55b56cc29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36088)[0m     @     0x55b56ccb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36088)[0m     @     0x55b56ccb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36088)[0m     @     0x55b56cc29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36088)[0m     @     0x55b56ccb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36088)[0m     @     0x55b56ccb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36088)[0m     @     0x55b56cc29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36020)[0m     @     0x7f911863a388 at::native::copy_impl()
[2m[36m(pid=36020)[0m     @     0x7f911863c5a4 at::native::copy_()
[2m[36m(pid=36020)[0m     @     0x7f9118d274f5 at::Tensor::copy_()
[2m[36m(pid=36020)[0m     @     0x7f911b1fa8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36110)[0m     @     0x7f5b23a6379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36110)[0m     @     0x563da765afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36110)[0m     @     0x563da75b5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36110)[0m     @     0x563da7640baf _PyEval_EvalCodeWithName
[2m[36m(pid=36110)[0m     @     0x563da7641a20 method_vectorcall
[2m[36m(pid=36110)[0m     @     0x563da75b5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36110)[0m     @     0x563da7640baf _PyEval_EvalCodeWithName
[2m[36m(pid=36110)[0m     @     0x563da7641643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36110)[0m     @     0x563da75b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36110)[0m     @     0x563da7640baf _PyEval_EvalCodeWithName
[2m[36m(pid=36110)[0m     @     0x563da7641643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36110)[0m     @     0x563da75b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36110)[0m     @     0x563da7640baf _PyEval_EvalCodeWithName
[2m[36m(pid=36110)[0m     @     0x563da7641643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36110)[0m     @     0x563da75b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36110)[0m     @     0x563da7640baf _PyEval_EvalCodeWithName
[2m[36m(pid=36110)[0m     @     0x563da7641643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36110)[0m     @     0x563da75b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36058)[0m     @     0x7f9204c764f5 at::Tensor::copy_()
[2m[36m(pid=36058)[0m     @     0x7f92071498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36058)[0m     @     0x7f9204c764f5 at::Tensor::copy_()
[2m[36m(pid=36058)[0m     @     0x7f920ad2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36058)[0m     @     0x55f631971fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36058)[0m     @     0x55f6318ccb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36058)[0m     @     0x55f631957baf _PyEval_EvalCodeWithName
[2m[36m(pid=36058)[0m     @     0x55f631958a20 method_vectorcall
[2m[36m(pid=36058)[0m     @     0x55f6318ccbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36058)[0m     @     0x55f631957baf _PyEval_EvalCodeWithName
[2m[36m(pid=36058)[0m     @     0x55f631958643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36058)[0m     @     0x55f6318cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36058)[0m     @     0x55f631957baf _PyEval_EvalCodeWithName
[2m[36m(pid=36058)[0m     @     0x55f631958643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36058)[0m     @     0x55f6318cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36058)[0m     @     0x55f631957baf _PyEval_EvalCodeWithName
[2m[36m(pid=36058)[0m     @     0x55f631958643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36058)[0m     @     0x55f6318cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36058)[0m     @     0x55f631957baf _PyEval_EvalCodeWithName
[2m[36m(pid=36058)[0m     @     0x55f631958643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36058)[0m     @     0x55f6318cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36095)[0m     @     0x7f1fc9c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36095)[0m     @     0x556e7dafdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36095)[0m     @     0x556e7da58b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36095)[0m     @     0x556e7dae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36095)[0m     @     0x556e7dae4a20 method_vectorcall
[2m[36m(pid=36095)[0m     @     0x556e7da58bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36095)[0m     @     0x556e7dae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36095)[0m     @     0x556e7dae4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36095)[0m     @     0x556e7da59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36095)[0m     @     0x556e7dae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36095)[0m     @     0x556e7dae4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36095)[0m     @     0x556e7da59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36095)[0m     @     0x556e7dae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36095)[0m     @     0x556e7dae4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36095)[0m     @     0x556e7da59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36095)[0m     @     0x556e7dae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36095)[0m     @     0x556e7dae4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36095)[0m     @     0x556e7da59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36103)[0m     @     0x7faaa5c915a4 at::native::copy_()
[2m[36m(pid=36103)[0m     @     0x7faaa637c4f5 at::Tensor::copy_()
[2m[36m(pid=36103)[0m     @     0x7faaa884f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36103)[0m     @     0x7faaa637c4f5 at::Tensor::copy_()
[2m[36m(pid=36016)[0m     @     0x7f3e8837aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36016)[0m     @     0x7f3e88378388 at::native::copy_impl()
[2m[36m(pid=36016)[0m     @     0x7f3e8837a5a4 at::native::copy_()
[2m[36m(pid=36016)[0m     @     0x7f3e88a654f5 at::Tensor::copy_()
[2m[36m(pid=36016)[0m     @     0x7f3e8af388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36068)[0m     @     0x7f9e2738ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36068)[0m     @     0x7f9e2738a388 at::native::copy_impl()
[2m[36m(pid=36068)[0m     @     0x7f9e2738c5a4 at::native::copy_()
[2m[36m(pid=36068)[0m     @     0x7f9e27a774f5 at::Tensor::copy_()
[2m[36m(pid=36068)[0m     @     0x7f9e29f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36066)[0m     @     0x7f3b091f3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36066)[0m     @     0x7f3b091f1388 at::native::copy_impl()
[2m[36m(pid=36066)[0m     @     0x7f3b091f35a4 at::native::copy_()
[2m[36m(pid=36066)[0m     @     0x7f3b098de4f5 at::Tensor::copy_()
[2m[36m(pid=36099)[0m     @     0x7eec13539d91 at::TensorIterator::for_each()
[2m[36m(pid=36099)[0m     @     0x7eec13e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36099)[0m     @     0x7eec13e3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36099)[0m     @     0x7eec132e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36099)[0m     @     0x7eec132df388 at::native::copy_impl()
[2m[36m(pid=36099)[0m     @     0x7eec132e15a4 at::native::copy_()
[2m[36m(pid=36077)[0m     @     0x7fa1c0c11d91 at::TensorIterator::for_each()
[2m[36m(pid=36077)[0m     @     0x7fa1c14f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36077)[0m     @     0x7fa1c1517c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36077)[0m     @     0x7fa1c09b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36077)[0m     @     0x7fa1c09b7388 at::native::copy_impl()
[2m[36m(pid=36023)[0m     @     0x7f0a2e2c65a4 at::native::copy_()
[2m[36m(pid=36023)[0m     @     0x7f0a2e9b14f5 at::Tensor::copy_()
[2m[36m(pid=36023)[0m     @     0x7f0a30e848de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36126)[0m     @     0x7f9e57eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36126)[0m     @     0x7f9e559e54f5 at::Tensor::copy_()
[2m[36m(pid=36126)[0m     @     0x7f9e5ba9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36126)[0m     @     0x55cd50287fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36126)[0m     @     0x55cd501e2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36126)[0m     @     0x55cd5026dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36126)[0m     @     0x55cd5026ea20 method_vectorcall
[2m[36m(pid=36126)[0m     @     0x55cd501e2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36126)[0m     @     0x55cd5026dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36126)[0m     @     0x55cd5026e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36126)[0m     @     0x55cd501e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36126)[0m     @     0x55cd5026dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36126)[0m     @     0x55cd5026e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36126)[0m     @     0x55cd501e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36126)[0m     @     0x55cd5026dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36126)[0m     @     0x55cd5026e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36126)[0m     @     0x55cd501e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36126)[0m     @     0x55cd5026dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36126)[0m     @     0x55cd5026e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36126)[0m     @     0x55cd501e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36028)[0m     @     0x7f4d2f4608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36028)[0m     @     0x7f4d2cf8d4f5 at::Tensor::copy_()
[2m[36m(pid=36028)[0m     @     0x7f4d3303879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36028)[0m     @     0x55abc4095fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36028)[0m     @     0x55abc3ff0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36028)[0m     @     0x55abc407bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36028)[0m     @     0x55abc407ca20 method_vectorcall
[2m[36m(pid=36028)[0m     @     0x55abc3ff0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36028)[0m     @     0x55abc407bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36028)[0m     @     0x55abc407c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36028)[0m     @     0x55abc3ff1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36028)[0m     @     0x55abc407bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36028)[0m     @     0x55abc407c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36028)[0m     @     0x55abc3ff1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36028)[0m     @     0x55abc407bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36028)[0m     @     0x55abc407c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36028)[0m     @     0x55abc3ff1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36028)[0m     @     0x55abc407bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36028)[0m     @     0x55abc407c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36028)[0m     @     0x55abc3ff1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36013)[0m     @     0x7ee40b6b64f5 at::Tensor::copy_()
[2m[36m(pid=36013)[0m     @     0x7ee41176179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36013)[0m     @     0x55e2113d4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36013)[0m     @     0x55e21132fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36013)[0m     @     0x55e2113babaf _PyEval_EvalCodeWithName
[2m[36m(pid=36013)[0m     @     0x55e2113bba20 method_vectorcall
[2m[36m(pid=36013)[0m     @     0x55e21132fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36013)[0m     @     0x55e2113babaf _PyEval_EvalCodeWithName
[2m[36m(pid=36013)[0m     @     0x55e2113bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36013)[0m     @     0x55e211330689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36013)[0m     @     0x55e2113babaf _PyEval_EvalCodeWithName
[2m[36m(pid=36013)[0m     @     0x55e2113bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36013)[0m     @     0x55e211330689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36013)[0m     @     0x55e2113babaf _PyEval_EvalCodeWithName
[2m[36m(pid=36013)[0m     @     0x55e2113bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36013)[0m     @     0x55e211330689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36013)[0m     @     0x55e2113babaf _PyEval_EvalCodeWithName
[2m[36m(pid=36013)[0m     @     0x55e2113bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36013)[0m     @     0x55e211330689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36080)[0m     @     0x7f6eeef8e4f5 at::Tensor::copy_()
[2m[36m(pid=36080)[0m     @     0x7f6ef14618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36080)[0m     @     0x7f6eeef8e4f5 at::Tensor::copy_()
[2m[36m(pid=36012)[0m     @     0x7f690a0284f5 at::Tensor::copy_()
[2m[36m(pid=36012)[0m     @     0x7f690c4fb8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36012)[0m     @     0x7f690a0284f5 at::Tensor::copy_()
[2m[36m(pid=36081)[0m     @     0x7f1406a944f5 at::Tensor::copy_()
[2m[36m(pid=36081)[0m     @     0x7f1408f678de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36081)[0m     @     0x7f1406a944f5 at::Tensor::copy_()
[2m[36m(pid=36007)[0m     @     0x7ee6378b95a4 at::native::copy_()
[2m[36m(pid=36007)[0m     @     0x7ee637fa44f5 at::Tensor::copy_()
[2m[36m(pid=36007)[0m     @     0x7ee63a4778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36027)[0m     @     0x7f98565fa5a4 at::native::copy_()
[2m[36m(pid=36027)[0m     @     0x7f9856ce54f5 at::Tensor::copy_()
[2m[36m(pid=36027)[0m     @     0x7f98591b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36085)[0m     @     0x7fb2b3cfb5a4 at::native::copy_()
[2m[36m(pid=36085)[0m     @     0x7fb2b43e64f5 at::Tensor::copy_()
[2m[36m(pid=36085)[0m     @     0x7fb2b68b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36085)[0m     @     0x7fb2b43e64f5 at::Tensor::copy_()
[2m[36m(pid=36083)[0m     @     0x7f1ee1e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36083)[0m     @     0x7f1ee12faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36083)[0m     @     0x7f1ee12f8388 at::native::copy_impl()
[2m[36m(pid=36083)[0m     @     0x7f1ee12fa5a4 at::native::copy_()
[2m[36m(pid=36083)[0m     @     0x7f1ee19e54f5 at::Tensor::copy_()
[2m[36m(pid=36009)[0m     @     0x7efb3c423388 at::native::copy_impl()
[2m[36m(pid=36009)[0m     @     0x7efb3c4255a4 at::native::copy_()
[2m[36m(pid=36009)[0m     @     0x7efb3cb104f5 at::Tensor::copy_()
[2m[36m(pid=36009)[0m     @     0x7efb3efe38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36003)[0m     @     0x7fa3802a65a4 at::native::copy_()
[2m[36m(pid=36003)[0m     @     0x7fa3809914f5 at::Tensor::copy_()
[2m[36m(pid=36003)[0m     @     0x7fa382e648de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36003)[0m     @     0x7fa3809914f5 at::Tensor::copy_()
[2m[36m(pid=36070)[0m     @     0x7ee356db45a4 at::native::copy_()
[2m[36m(pid=36070)[0m     @     0x7ee35749f4f5 at::Tensor::copy_()
[2m[36m(pid=36070)[0m     @     0x7ee3599728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36070)[0m     @     0x7ee35749f4f5 at::Tensor::copy_()
[2m[36m(pid=36070)[0m     @     0x7ee35d54a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36070)[0m     @     0x559d96098fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36070)[0m     @     0x559d95ff3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36070)[0m     @     0x559d9607ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36070)[0m     @     0x559d9607fa20 method_vectorcall
[2m[36m(pid=36070)[0m     @     0x559d95ff3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36070)[0m     @     0x559d9607ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36102)[0m     @     0x7eec6a515388 at::native::copy_impl()
[2m[36m(pid=36102)[0m     @     0x7eec6a5175a4 at::native::copy_()
[2m[36m(pid=36102)[0m     @     0x7eec6ac024f5 at::Tensor::copy_()
[2m[36m(pid=36078)[0m     @     0x7f61635d7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36078)[0m     @     0x7f61635d5388 at::native::copy_impl()
[2m[36m(pid=36078)[0m     @     0x7f61635d75a4 at::native::copy_()
[2m[36m(pid=36078)[0m     @     0x7f6163cc24f5 at::Tensor::copy_()
[2m[36m(pid=36078)[0m     @     0x7f61661958de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36005)[0m     @     0x7f10397204f5 at::Tensor::copy_()
[2m[36m(pid=36005)[0m     @     0x7f103bbf38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36005)[0m     @     0x7f10397204f5 at::Tensor::copy_()
[2m[36m(pid=36005)[0m     @     0x7f103f7cb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36005)[0m     @     0x55f5d8d38fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36005)[0m     @     0x55f5d8c93b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36005)[0m     @     0x55f5d8d1ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36005)[0m     @     0x55f5d8d1fa20 method_vectorcall
[2m[36m(pid=36005)[0m     @     0x55f5d8c93bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36005)[0m     @     0x55f5d8d1ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36005)[0m     @     0x55f5d8d1f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36005)[0m     @     0x55f5d8c94689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36005)[0m     @     0x55f5d8d1ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36005)[0m     @     0x55f5d8d1f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36005)[0m     @     0x55f5d8c94689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36005)[0m     @     0x55f5d8d1ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36005)[0m     @     0x55f5d8d1f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36005)[0m     @     0x55f5d8c94689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36005)[0m     @     0x55f5d8d1ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36005)[0m     @     0x55f5d8d1f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36005)[0m     @     0x55f5d8c94689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36021)[0m     @     0x7f85aaa274f5 at::Tensor::copy_()
[2m[36m(pid=36021)[0m     @     0x7f85acefa8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36021)[0m     @     0x7f85aaa274f5 at::Tensor::copy_()
[2m[36m(pid=36021)[0m     @     0x7f85b0ad279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36021)[0m     @     0x561ef5f44fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36021)[0m     @     0x561ef5e9fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36021)[0m     @     0x561ef5f2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36021)[0m     @     0x561ef5f2ba20 method_vectorcall
[2m[36m(pid=36021)[0m     @     0x561ef5e9fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36021)[0m     @     0x561ef5f2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36021)[0m     @     0x561ef5f2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36021)[0m     @     0x561ef5ea0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36021)[0m     @     0x561ef5f2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36021)[0m     @     0x561ef5f2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36021)[0m     @     0x561ef5ea0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36021)[0m     @     0x561ef5f2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36021)[0m     @     0x561ef5f2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36021)[0m     @     0x561ef5ea0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36021)[0m     @     0x561ef5f2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36021)[0m     @     0x561ef5f2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36021)[0m     @     0x561ef5ea0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36104)[0m     @     0x7fc06c6fc4f5 at::Tensor::copy_()
[2m[36m(pid=36104)[0m     @     0x7fc06ebcf8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36104)[0m     @     0x7fc06c6fc4f5 at::Tensor::copy_()
[2m[36m(pid=36104)[0m     @     0x7fc0727a779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36104)[0m     @     0x55e7f67f0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36104)[0m     @     0x55e7f674bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36104)[0m     @     0x55e7f67d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36104)[0m     @     0x55e7f67d7a20 method_vectorcall
[2m[36m(pid=36104)[0m     @     0x55e7f674bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36104)[0m     @     0x55e7f67d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36104)[0m     @     0x55e7f67d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36104)[0m     @     0x55e7f674c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36104)[0m     @     0x55e7f67d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36104)[0m     @     0x55e7f67d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36104)[0m     @     0x55e7f674c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36104)[0m     @     0x55e7f67d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36104)[0m     @     0x55e7f67d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36104)[0m     @     0x55e7f674c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36104)[0m     @     0x55e7f67d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36104)[0m     @     0x55e7f67d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36104)[0m     @     0x55e7f674c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36090)[0m     @     0x7fb73c9934f5 at::Tensor::copy_()
[2m[36m(pid=36090)[0m     @     0x7fb73ee668de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36090)[0m     @     0x7fb73c9934f5 at::Tensor::copy_()
[2m[36m(pid=36090)[0m     @     0x7fb742a3e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36090)[0m     @     0x563743ae7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36090)[0m     @     0x563743a42b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36090)[0m     @     0x563743acdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36090)[0m     @     0x563743acea20 method_vectorcall
[2m[36m(pid=36090)[0m     @     0x563743a42bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36090)[0m     @     0x563743acdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36090)[0m     @     0x563743ace643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36090)[0m     @     0x563743a43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36090)[0m     @     0x563743acdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36090)[0m     @     0x563743ace643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36064)[0m     @     0x7f74643354f5 at::Tensor::copy_()
[2m[36m(pid=36064)[0m     @     0x7f746a3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36064)[0m     @     0x5652ef276fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36064)[0m     @     0x5652ef1d1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36064)[0m     @     0x5652ef25cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36064)[0m     @     0x5652ef25da20 method_vectorcall
[2m[36m(pid=36064)[0m     @     0x5652ef1d1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36064)[0m     @     0x5652ef25cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36064)[0m     @     0x5652ef25d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36064)[0m     @     0x5652ef1d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36064)[0m     @     0x5652ef25cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36064)[0m     @     0x5652ef25d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36064)[0m     @     0x5652ef1d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36064)[0m     @     0x5652ef25cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36064)[0m     @     0x5652ef25d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36064)[0m     @     0x5652ef1d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36064)[0m     @     0x5652ef25cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36064)[0m     @     0x5652ef25d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36064)[0m     @     0x5652ef1d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36025)[0m     @     0x7faf03a774f5 at::Tensor::copy_()
[2m[36m(pid=36025)[0m     @     0x7faf05f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36025)[0m     @     0x7faf03a774f5 at::Tensor::copy_()
[2m[36m(pid=36025)[0m     @     0x7faf09b2279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36025)[0m     @     0x564f7295bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36025)[0m     @     0x564f728b6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36025)[0m     @     0x564f72941baf _PyEval_EvalCodeWithName
[2m[36m(pid=36025)[0m     @     0x564f72942a20 method_vectorcall
[2m[36m(pid=36025)[0m     @     0x564f728b6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36025)[0m     @     0x564f72941baf _PyEval_EvalCodeWithName
[2m[36m(pid=36025)[0m     @     0x564f72942643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36025)[0m     @     0x564f728b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36025)[0m     @     0x564f72941baf _PyEval_EvalCodeWithName
[2m[36m(pid=36025)[0m     @     0x564f72942643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36025)[0m     @     0x564f728b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36025)[0m     @     0x564f72941baf _PyEval_EvalCodeWithName
[2m[36m(pid=36025)[0m     @     0x564f72942643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36010)[0m     @     0x7f75419e54f5 at::Tensor::copy_()
[2m[36m(pid=36010)[0m     @     0x7f7543eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36010)[0m     @     0x7f75419e54f5 at::Tensor::copy_()
[2m[36m(pid=36010)[0m     @     0x7f7547a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36010)[0m     @     0x561018816fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36010)[0m     @     0x561018771b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36010)[0m     @     0x5610187fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36010)[0m     @     0x5610187fda20 method_vectorcall
[2m[36m(pid=36010)[0m     @     0x561018771bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36010)[0m     @     0x5610187fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36010)[0m     @     0x5610187fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36010)[0m     @     0x561018772689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36010)[0m     @     0x5610187fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36010)[0m     @     0x5610187fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36010)[0m     @     0x561018772689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36010)[0m     @     0x5610187fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36010)[0m     @     0x5610187fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36010)[0m     @     0x561018772689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36010)[0m     @     0x5610187fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36010)[0m     @     0x5610187fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36010)[0m     @     0x561018772689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36086)[0m     @     0x7ef59eb954f5 at::Tensor::copy_()
[2m[36m(pid=36086)[0m     @     0x7ef5a10688de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36086)[0m     @     0x7ef59eb954f5 at::Tensor::copy_()
[2m[36m(pid=36086)[0m     @     0x7ef5a4c4079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36086)[0m     @     0x55603837afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36086)[0m     @     0x5560382d5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36086)[0m     @     0x556038360baf _PyEval_EvalCodeWithName
[2m[36m(pid=36086)[0m     @     0x556038361a20 method_vectorcall
[2m[36m(pid=36086)[0m     @     0x5560382d5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36086)[0m     @     0x556038360baf _PyEval_EvalCodeWithName
[2m[36m(pid=36086)[0m     @     0x556038361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36086)[0m     @     0x5560382d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36086)[0m     @     0x556038360baf _PyEval_EvalCodeWithName
[2m[36m(pid=36086)[0m     @     0x556038361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36086)[0m     @     0x5560382d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36056)[0m     @     0x7f9d56af55a4 at::native::copy_()
[2m[36m(pid=36056)[0m     @     0x7f9d571e04f5 at::Tensor::copy_()
[2m[36m(pid=36056)[0m     @     0x7f9d596b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36056)[0m     @     0x7f9d571e04f5 at::Tensor::copy_()
[2m[36m(pid=36056)[0m     @     0x7f9d5d28b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36056)[0m     @     0x55e3ec04dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36056)[0m     @     0x55e3ebfa8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36056)[0m     @     0x55e3ec033baf _PyEval_EvalCodeWithName
[2m[36m(pid=36056)[0m     @     0x55e3ec034a20 method_vectorcall
[2m[36m(pid=36056)[0m     @     0x55e3ebfa8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36008)[0m     @     0x7ef376b534f5 at::Tensor::copy_()
[2m[36m(pid=36008)[0m     @     0x7ef3790268de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36008)[0m     @     0x7ef376b534f5 at::Tensor::copy_()
[2m[36m(pid=36008)[0m     @     0x7ef37cbfe79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36008)[0m     @     0x5578f5240fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36008)[0m     @     0x5578f519bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36008)[0m     @     0x5578f5226baf _PyEval_EvalCodeWithName
[2m[36m(pid=36008)[0m     @     0x5578f5227a20 method_vectorcall
[2m[36m(pid=36008)[0m     @     0x5578f519bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36008)[0m     @     0x5578f5226baf _PyEval_EvalCodeWithName
[2m[36m(pid=36008)[0m     @     0x5578f5227643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36008)[0m     @     0x5578f519c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36008)[0m     @     0x5578f5226baf _PyEval_EvalCodeWithName
[2m[36m(pid=36008)[0m     @     0x5578f5227643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36008)[0m     @     0x5578f519c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36008)[0m     @     0x5578f5226baf _PyEval_EvalCodeWithName
[2m[36m(pid=36008)[0m     @     0x5578f5227643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36008)[0m     @     0x5578f519c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36008)[0m     @     0x5578f5226baf _PyEval_EvalCodeWithName
[2m[36m(pid=36008)[0m     @     0x5578f5227643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36008)[0m     @     0x5578f519c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36015)[0m     @     0x7fa5495258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36015)[0m     @     0x7fa549525ad3 at::TensorIterator::for_each()
[2m[36m(pid=36015)[0m     @     0x7fa549525d91 at::TensorIterator::for_each()
[2m[36m(pid=36059)[0m     @     0x7fbf5cccf5a4 at::native::copy_()
[2m[36m(pid=36059)[0m     @     0x7fbf5d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=36059)[0m     @     0x7fbf5f88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36076)[0m     @     0x7f399c0fd4f5 at::Tensor::copy_()
[2m[36m(pid=36076)[0m     @     0x7f399e5d08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36076)[0m     @     0x7f399c0fd4f5 at::Tensor::copy_()
[2m[36m(pid=36076)[0m     @     0x7f39a21a879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36076)[0m     @     0x564dda75cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36076)[0m     @     0x564dda6b7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36076)[0m     @     0x564dda742baf _PyEval_EvalCodeWithName
[2m[36m(pid=36076)[0m     @     0x564dda743a20 method_vectorcall
[2m[36m(pid=36076)[0m     @     0x564dda6b7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36076)[0m     @     0x564dda742baf _PyEval_EvalCodeWithName
[2m[36m(pid=36076)[0m     @     0x564dda743643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36076)[0m     @     0x564dda6b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36076)[0m     @     0x564dda742baf _PyEval_EvalCodeWithName
[2m[36m(pid=36076)[0m     @     0x564dda743643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36076)[0m     @     0x564dda6b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36076)[0m     @     0x564dda742baf _PyEval_EvalCodeWithName
[2m[36m(pid=36076)[0m     @     0x564dda743643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36076)[0m     @     0x564dda6b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36076)[0m     @     0x564dda742baf _PyEval_EvalCodeWithName
[2m[36m(pid=36076)[0m     @     0x564dda743643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36076)[0m     @     0x564dda6b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36006)[0m     @     0x7f4fa2b704f5 at::Tensor::copy_()
[2m[36m(pid=36006)[0m     @     0x7f4fa50438de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36006)[0m     @     0x7f4fa2b704f5 at::Tensor::copy_()
[2m[36m(pid=36006)[0m     @     0x7f4fa8c1b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36006)[0m     @     0x565155d32fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36006)[0m     @     0x565155c8db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36006)[0m     @     0x565155d18baf _PyEval_EvalCodeWithName
[2m[36m(pid=36006)[0m     @     0x565155d19a20 method_vectorcall
[2m[36m(pid=36006)[0m     @     0x565155c8dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36006)[0m     @     0x565155d18baf _PyEval_EvalCodeWithName
[2m[36m(pid=36006)[0m     @     0x565155d19643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36006)[0m     @     0x565155c8e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36006)[0m     @     0x565155d18baf _PyEval_EvalCodeWithName
[2m[36m(pid=36006)[0m     @     0x565155d19643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36022)[0m     @     0x7f5969da75a4 at::native::copy_()
[2m[36m(pid=36022)[0m     @     0x7f596a4924f5 at::Tensor::copy_()
[2m[36m(pid=36022)[0m     @     0x7f596c9658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36022)[0m     @     0x7f596a4924f5 at::Tensor::copy_()
[2m[36m(pid=36022)[0m     @     0x7f597053d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36022)[0m     @     0x564403d93fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36022)[0m     @     0x564403ceeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36022)[0m     @     0x564403d79baf _PyEval_EvalCodeWithName
[2m[36m(pid=36022)[0m     @     0x564403d7aa20 method_vectorcall
[2m[36m(pid=36022)[0m     @     0x564403ceebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36022)[0m     @     0x564403d79baf _PyEval_EvalCodeWithName
[2m[36m(pid=36022)[0m     @     0x564403d7a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36022)[0m     @     0x564403cef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36033)[0m     @     0x7fadb2bd68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36033)[0m     @     0x7fadb07034f5 at::Tensor::copy_()
[2m[36m(pid=36033)[0m     @     0x7fadb67ae79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36033)[0m     @     0x55ed39f0ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36033)[0m     @     0x55ed39e6ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36033)[0m     @     0x55ed39ef5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36033)[0m     @     0x55ed39ef6a20 method_vectorcall
[2m[36m(pid=36033)[0m     @     0x55ed39e6abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36033)[0m     @     0x55ed39ef5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36033)[0m     @     0x55ed39ef6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36033)[0m     @     0x55ed39e6b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36033)[0m     @     0x55ed39ef5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36033)[0m     @     0x55ed39ef6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36033)[0m     @     0x55ed39e6b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36033)[0m     @     0x55ed39ef5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36033)[0m     @     0x55ed39ef6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36033)[0m     @     0x55ed39e6b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36033)[0m     @     0x55ed39ef5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36033)[0m     @     0x55ed39ef6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36033)[0m     @     0x55ed39e6b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36117)[0m     @     0x7f0dbea944f5 at::Tensor::copy_()
[2m[36m(pid=36117)[0m     @     0x7f0dc0f678de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36117)[0m     @     0x7f0dbea944f5 at::Tensor::copy_()
[2m[36m(pid=36117)[0m     @     0x7f0dc4b3f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36117)[0m     @     0x564853a45fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36117)[0m     @     0x5648539a0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36120)[0m     @     0x7eea331334f5 at::Tensor::copy_()
[2m[36m(pid=36120)[0m     @     0x7eea356068de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36120)[0m     @     0x7eea331334f5 at::Tensor::copy_()
[2m[36m(pid=36120)[0m     @     0x7eea391de79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36120)[0m     @     0x55980953efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36120)[0m     @     0x559809499b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36120)[0m     @     0x559809524baf _PyEval_EvalCodeWithName
[2m[36m(pid=36120)[0m     @     0x559809525a20 method_vectorcall
[2m[36m(pid=36120)[0m     @     0x559809499bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36029)[0m     @     0x7edaa7bc18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36029)[0m     @     0x7edaa56ee4f5 at::Tensor::copy_()
[2m[36m(pid=36029)[0m     @     0x7edaab79979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36029)[0m     @     0x55776d829fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36029)[0m     @     0x55776d784b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36029)[0m     @     0x55776d80fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36029)[0m     @     0x55776d810a20 method_vectorcall
[2m[36m(pid=36029)[0m     @     0x55776d784bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36029)[0m     @     0x55776d80fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36029)[0m     @     0x55776d810643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36029)[0m     @     0x55776d785689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36029)[0m     @     0x55776d80fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36029)[0m     @     0x55776d810643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36029)[0m     @     0x55776d785689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36029)[0m     @     0x55776d80fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36029)[0m     @     0x55776d810643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36029)[0m     @     0x55776d785689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36029)[0m     @     0x55776d80fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36029)[0m     @     0x55776d810643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36029)[0m     @     0x55776d785689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36087)[0m     @     0x7f924765dd91 at::TensorIterator::for_each()
[2m[36m(pid=36087)[0m     @     0x7f9247f40b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36087)[0m     @     0x7f9247f63c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36084)[0m     @     0x7f1ad371b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36084)[0m     @     0x7f1ad12484f5 at::Tensor::copy_()
[2m[36m(pid=36084)[0m     @     0x7f1ad72f379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36084)[0m     @     0x558391486fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36084)[0m     @     0x5583913e1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36084)[0m     @     0x55839146cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36084)[0m     @     0x55839146da20 method_vectorcall
[2m[36m(pid=36084)[0m     @     0x5583913e1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36084)[0m     @     0x55839146cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36084)[0m     @     0x55839146d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36084)[0m     @     0x5583913e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36084)[0m     @     0x55839146cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36084)[0m     @     0x55839146d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36084)[0m     @     0x5583913e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36084)[0m     @     0x55839146cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36084)[0m     @     0x55839146d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36084)[0m     @     0x5583913e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36084)[0m     @     0x55839146cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36084)[0m     @     0x55839146d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36084)[0m     @     0x5583913e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36019)[0m     @     0x7f87190288de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36019)[0m     @     0x7f8716b554f5 at::Tensor::copy_()
[2m[36m(pid=36019)[0m     @     0x7f871cc0079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36019)[0m     @     0x563d611c6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36019)[0m     @     0x563d61121b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36019)[0m     @     0x563d611acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36019)[0m     @     0x563d611ada20 method_vectorcall
[2m[36m(pid=36019)[0m     @     0x563d61121bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36019)[0m     @     0x563d611acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36019)[0m     @     0x563d611ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36019)[0m     @     0x563d61122689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36019)[0m     @     0x563d611acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36019)[0m     @     0x563d611ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36019)[0m     @     0x563d61122689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36019)[0m     @     0x563d611acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36019)[0m     @     0x563d611ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36019)[0m     @     0x563d61122689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36019)[0m     @     0x563d611acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36019)[0m     @     0x563d611ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36019)[0m     @     0x563d61122689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36011)[0m     @     0x7f351f3124f5 at::Tensor::copy_()
[2m[36m(pid=36011)[0m     @     0x7f35253bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36011)[0m     @     0x55707a935fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36011)[0m     @     0x55707a890b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36011)[0m     @     0x55707a91bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36011)[0m     @     0x55707a91ca20 method_vectorcall
[2m[36m(pid=36011)[0m     @     0x55707a890bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36011)[0m     @     0x55707a91bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36011)[0m     @     0x55707a91c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36011)[0m     @     0x55707a891689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36011)[0m     @     0x55707a91bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36011)[0m     @     0x55707a91c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36011)[0m     @     0x55707a891689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36011)[0m     @     0x55707a91bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36011)[0m     @     0x55707a91c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36011)[0m     @     0x55707a891689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36011)[0m     @     0x55707a91bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36011)[0m     @     0x55707a91c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36011)[0m     @     0x55707a891689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36002)[0m     @     0x7eeebb3618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36002)[0m     @     0x7eeeb8e8e4f5 at::Tensor::copy_()
[2m[36m(pid=36002)[0m     @     0x7eeebef3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36002)[0m     @     0x56230b076fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36002)[0m     @     0x56230afd1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36002)[0m     @     0x56230b05cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36002)[0m     @     0x56230b05da20 method_vectorcall
[2m[36m(pid=36002)[0m     @     0x56230afd1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36002)[0m     @     0x56230b05cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36002)[0m     @     0x56230b05d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36002)[0m     @     0x56230afd2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36002)[0m     @     0x56230b05cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36002)[0m     @     0x56230b05d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36002)[0m     @     0x56230afd2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36002)[0m     @     0x56230b05cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36002)[0m     @     0x56230b05d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36002)[0m     @     0x56230afd2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36002)[0m     @     0x56230b05cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36002)[0m     @     0x56230b05d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36002)[0m     @     0x56230afd2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36082)[0m     @     0x7fc993c808de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36082)[0m     @     0x7fc9917ad4f5 at::Tensor::copy_()
[2m[36m(pid=36082)[0m     @     0x7fc99785879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36082)[0m     @     0x556c64e20fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36082)[0m     @     0x556c64d7bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36082)[0m     @     0x556c64e06baf _PyEval_EvalCodeWithName
[2m[36m(pid=36082)[0m     @     0x556c64e07a20 method_vectorcall
[2m[36m(pid=36082)[0m     @     0x556c64d7bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36082)[0m     @     0x556c64e06baf _PyEval_EvalCodeWithName
[2m[36m(pid=36082)[0m     @     0x556c64e07643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36082)[0m     @     0x556c64d7c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36082)[0m     @     0x556c64e06baf _PyEval_EvalCodeWithName
[2m[36m(pid=36082)[0m     @     0x556c64e07643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36082)[0m     @     0x556c64d7c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36082)[0m     @     0x556c64e06baf _PyEval_EvalCodeWithName
[2m[36m(pid=36082)[0m     @     0x556c64e07643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36004)[0m     @     0x7f2bc21548de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36004)[0m     @     0x7f2bbfc814f5 at::Tensor::copy_()
[2m[36m(pid=36004)[0m     @     0x7f2bc5d2c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36004)[0m     @     0x55ff60aa1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36004)[0m     @     0x55ff609fcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36004)[0m     @     0x55ff60a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=36004)[0m     @     0x55ff60a88a20 method_vectorcall
[2m[36m(pid=36004)[0m     @     0x55ff609fcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36004)[0m     @     0x55ff60a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=36004)[0m     @     0x55ff60a88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36004)[0m     @     0x55ff609fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36004)[0m     @     0x55ff60a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=36004)[0m     @     0x55ff60a88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36004)[0m     @     0x55ff609fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36004)[0m     @     0x55ff60a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=36004)[0m     @     0x55ff60a88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36004)[0m     @     0x55ff609fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36004)[0m     @     0x55ff60a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=36004)[0m     @     0x55ff60a88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36030)[0m     @     0x564fe295fa20 method_vectorcall
[2m[36m(pid=36030)[0m     @     0x564fe28d3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36030)[0m     @     0x564fe295ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36030)[0m     @     0x564fe295f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36030)[0m     @     0x564fe28d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36030)[0m     @     0x564fe295ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36030)[0m     @     0x564fe295f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36030)[0m     @     0x564fe28d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36030)[0m     @     0x564fe295ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36030)[0m     @     0x564fe295f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36030)[0m     @     0x564fe28d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36030)[0m     @     0x564fe295ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36030)[0m     @     0x564fe295f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36030)[0m     @     0x564fe28d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36089)[0m     @     0x7f4ed494a4f5 at::Tensor::copy_()
[2m[36m(pid=36089)[0m     @     0x7f4eda9f579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36089)[0m     @     0x55a185199fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36089)[0m     @     0x55a1850f4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36089)[0m     @     0x55a18517fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36089)[0m     @     0x55a185180a20 method_vectorcall
[2m[36m(pid=36089)[0m     @     0x55a1850f4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36089)[0m     @     0x55a18517fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36089)[0m     @     0x55a185180643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36089)[0m     @     0x55a1850f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36089)[0m     @     0x55a18517fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36089)[0m     @     0x55a185180643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36089)[0m     @     0x55a1850f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36089)[0m     @     0x55a18517fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36089)[0m     @     0x55a185180643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36089)[0m     @     0x55a1850f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36089)[0m     @     0x55a18517fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36089)[0m     @     0x55a185180643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36089)[0m     @     0x55a1850f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36133)[0m     @     0x7f75847924f5 at::Tensor::copy_()
[2m[36m(pid=36133)[0m     @     0x7f7586c658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36133)[0m     @     0x7f75847924f5 at::Tensor::copy_()
[2m[36m(pid=36133)[0m     @     0x7f758a83d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36133)[0m     @     0x563619c85fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36133)[0m     @     0x563619be0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36133)[0m     @     0x563619c6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36133)[0m     @     0x563619c6ca20 method_vectorcall
[2m[36m(pid=36075)[0m     @     0x7f1ec9e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36075)[0m     @     0x7f1ec79cc4f5 at::Tensor::copy_()
[2m[36m(pid=36024)[0m     @     0x7fb725e3a4f5 at::Tensor::copy_()
[2m[36m(pid=36024)[0m     @     0x7fb72bee579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36024)[0m     @     0x55adbbca2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36024)[0m     @     0x55adbbbfdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36024)[0m     @     0x55adbbc88baf _PyEval_EvalCodeWithName
[2m[36m(pid=36024)[0m     @     0x55adbbc89a20 method_vectorcall
[2m[36m(pid=36024)[0m     @     0x55adbbbfdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36024)[0m     @     0x55adbbc88baf _PyEval_EvalCodeWithName
[2m[36m(pid=36024)[0m     @     0x55adbbc89643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36024)[0m     @     0x55adbbbfe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36024)[0m     @     0x55adbbc88baf _PyEval_EvalCodeWithName
[2m[36m(pid=36024)[0m     @     0x55adbbc89643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36024)[0m     @     0x55adbbbfe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36024)[0m     @     0x55adbbc88baf _PyEval_EvalCodeWithName
[2m[36m(pid=36024)[0m     @     0x55adbbc89643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36024)[0m     @     0x55adbbbfe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36024)[0m     @     0x55adbbc88baf _PyEval_EvalCodeWithName
[2m[36m(pid=36024)[0m     @     0x55adbbc89643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36024)[0m     @     0x55adbbbfe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36017)[0m     @     0x56441e974baf _PyEval_EvalCodeWithName
[2m[36m(pid=36017)[0m     @     0x56441e975643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36017)[0m     @     0x56441e8ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36037)[0m     @     0x7f86c65f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36037)[0m     @     0x7f86c41244f5 at::Tensor::copy_()
[2m[36m(pid=36037)[0m     @     0x7f86ca1cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36037)[0m     @     0x564b38960fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36037)[0m     @     0x564b388bbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36037)[0m     @     0x564b38946baf _PyEval_EvalCodeWithName
[2m[36m(pid=36037)[0m     @     0x564b38947a20 method_vectorcall
[2m[36m(pid=36037)[0m     @     0x564b388bbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36037)[0m     @     0x564b38946baf _PyEval_EvalCodeWithName
[2m[36m(pid=36037)[0m     @     0x564b38947643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36037)[0m     @     0x564b388bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36037)[0m     @     0x564b38946baf _PyEval_EvalCodeWithName
[2m[36m(pid=36037)[0m     @     0x564b38947643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36037)[0m     @     0x564b388bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36037)[0m     @     0x564b38946baf _PyEval_EvalCodeWithName
[2m[36m(pid=36037)[0m     @     0x564b38947643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36037)[0m     @     0x564b388bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36037)[0m     @     0x564b38946baf _PyEval_EvalCodeWithName
[2m[36m(pid=36037)[0m     @     0x564b38947643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36037)[0m     @     0x564b388bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36020)[0m     @     0x7f9118d274f5 at::Tensor::copy_()
[2m[36m(pid=36020)[0m     @     0x7f911edd279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36020)[0m     @     0x5567db679fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36020)[0m     @     0x5567db5d4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36020)[0m     @     0x5567db65fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36020)[0m     @     0x5567db660a20 method_vectorcall
[2m[36m(pid=36020)[0m     @     0x5567db5d4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36020)[0m     @     0x5567db65fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36020)[0m     @     0x5567db660643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36020)[0m     @     0x5567db5d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36020)[0m     @     0x5567db65fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36020)[0m     @     0x5567db660643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36020)[0m     @     0x5567db5d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36020)[0m     @     0x5567db65fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36020)[0m     @     0x5567db660643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36020)[0m     @     0x5567db5d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36020)[0m     @     0x5567db65fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36020)[0m     @     0x5567db660643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36020)[0m     @     0x5567db5d5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36103)[0m     @     0x7faaac42779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36103)[0m     @     0x563d282e6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36103)[0m     @     0x563d28241b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36103)[0m     @     0x563d282ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36103)[0m     @     0x563d282cda20 method_vectorcall
[2m[36m(pid=36103)[0m     @     0x563d28241bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36103)[0m     @     0x563d282ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36103)[0m     @     0x563d282cd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36103)[0m     @     0x563d28242689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36103)[0m     @     0x563d282ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36103)[0m     @     0x563d282cd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36103)[0m     @     0x563d28242689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36103)[0m     @     0x563d282ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36103)[0m     @     0x563d282cd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36103)[0m     @     0x563d28242689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36103)[0m     @     0x563d282ccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36103)[0m     @     0x563d282cd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36103)[0m     @     0x563d28242689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36016)[0m     @     0x7f3e88a654f5 at::Tensor::copy_()
[2m[36m(pid=36016)[0m     @     0x7f3e8eb1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36016)[0m     @     0x55854b6b5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36016)[0m     @     0x55854b610b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36016)[0m     @     0x55854b69bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36016)[0m     @     0x55854b69ca20 method_vectorcall
[2m[36m(pid=36016)[0m     @     0x55854b610bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36016)[0m     @     0x55854b69bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36016)[0m     @     0x55854b69c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36016)[0m     @     0x55854b611689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36016)[0m     @     0x55854b69bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36016)[0m     @     0x55854b69c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36016)[0m     @     0x55854b611689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36016)[0m     @     0x55854b69bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36016)[0m     @     0x55854b69c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36016)[0m     @     0x55854b611689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36016)[0m     @     0x55854b69bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36016)[0m     @     0x55854b69c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36016)[0m     @     0x55854b611689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36068)[0m     @     0x7f9e27a774f5 at::Tensor::copy_()
[2m[36m(pid=36068)[0m     @     0x7f9e2db2279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36068)[0m     @     0x556c6dcd4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36068)[0m     @     0x556c6dc2fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36068)[0m     @     0x556c6dcbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36068)[0m     @     0x556c6dcbba20 method_vectorcall
[2m[36m(pid=36068)[0m     @     0x556c6dc2fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36068)[0m     @     0x556c6dcbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36068)[0m     @     0x556c6dcbb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36068)[0m     @     0x556c6dc30689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36068)[0m     @     0x556c6dcbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36068)[0m     @     0x556c6dcbb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36068)[0m     @     0x556c6dc30689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36068)[0m     @     0x556c6dcbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36068)[0m     @     0x556c6dcbb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36068)[0m     @     0x556c6dc30689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36068)[0m     @     0x556c6dcbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36068)[0m     @     0x556c6dcbb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36068)[0m     @     0x556c6dc30689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36066)[0m     @     0x7f3b0bdb18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36066)[0m     @     0x7f3b098de4f5 at::Tensor::copy_()
[2m[36m(pid=36066)[0m     @     0x7f3b0f98979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36066)[0m     @     0x5596493f2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36066)[0m     @     0x55964934db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36066)[0m     @     0x5596493d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36066)[0m     @     0x5596493d9a20 method_vectorcall
[2m[36m(pid=36066)[0m     @     0x55964934dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36066)[0m     @     0x5596493d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36066)[0m     @     0x5596493d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36066)[0m     @     0x55964934e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36066)[0m     @     0x5596493d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36066)[0m     @     0x5596493d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36066)[0m     @     0x55964934e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36066)[0m     @     0x5596493d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36066)[0m     @     0x5596493d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36066)[0m     @     0x55964934e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36066)[0m     @     0x5596493d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36066)[0m     @     0x5596493d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36066)[0m     @     0x55964934e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36099)[0m     @     0x7eec139cc4f5 at::Tensor::copy_()
[2m[36m(pid=36099)[0m     @     0x7eec15e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36099)[0m     @     0x7eec139cc4f5 at::Tensor::copy_()
[2m[36m(pid=36099)[0m     @     0x7eec19a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36099)[0m     @     0x564b8b778fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36099)[0m     @     0x564b8b6d3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36099)[0m     @     0x564b8b75ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36099)[0m     @     0x564b8b75fa20 method_vectorcall
[2m[36m(pid=36077)[0m     @     0x7fa1c09b95a4 at::native::copy_()
[2m[36m(pid=36077)[0m     @     0x7fa1c10a44f5 at::Tensor::copy_()
[2m[36m(pid=36077)[0m     @     0x7fa1c35778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36023)[0m     @     0x7f0a2e9b14f5 at::Tensor::copy_()
[2m[36m(pid=36023)[0m     @     0x7f0a34a5c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36023)[0m     @     0x55630e6dbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36023)[0m     @     0x55630e636b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36023)[0m     @     0x55630e6c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36023)[0m     @     0x55630e6c2a20 method_vectorcall
[2m[36m(pid=36023)[0m     @     0x55630e636bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36023)[0m     @     0x55630e6c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36023)[0m     @     0x55630e6c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36023)[0m     @     0x55630e637689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36023)[0m     @     0x55630e6c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36023)[0m     @     0x55630e6c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36023)[0m     @     0x55630e637689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36023)[0m     @     0x55630e6c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36023)[0m     @     0x55630e6c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36023)[0m     @     0x55630e637689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36023)[0m     @     0x55630e6c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36023)[0m     @     0x55630e6c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36023)[0m     @     0x55630e637689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36080)[0m     @     0x7f6ef503979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36080)[0m     @     0x563e2bbc3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36080)[0m     @     0x563e2bb1eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36080)[0m     @     0x563e2bba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36080)[0m     @     0x563e2bbaaa20 method_vectorcall
[2m[36m(pid=36080)[0m     @     0x563e2bb1ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36080)[0m     @     0x563e2bba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36080)[0m     @     0x563e2bbaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36080)[0m     @     0x563e2bb1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36080)[0m     @     0x563e2bba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36080)[0m     @     0x563e2bbaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36080)[0m     @     0x563e2bb1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36080)[0m     @     0x563e2bba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36080)[0m     @     0x563e2bbaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36080)[0m     @     0x563e2bb1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36080)[0m     @     0x563e2bba9baf _PyEval_EvalCodeWithName
[2m[36m(pid=36080)[0m     @     0x563e2bbaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36080)[0m     @     0x563e2bb1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36012)[0m     @     0x7f69100d379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36012)[0m     @     0x558e38da4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36012)[0m     @     0x558e38cffb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36012)[0m     @     0x558e38d8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36012)[0m     @     0x558e38d8ba20 method_vectorcall
[2m[36m(pid=36012)[0m     @     0x558e38cffbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36012)[0m     @     0x558e38d8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36012)[0m     @     0x558e38d8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36012)[0m     @     0x558e38d00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36012)[0m     @     0x558e38d8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36012)[0m     @     0x558e38d8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36012)[0m     @     0x558e38d00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36012)[0m     @     0x558e38d8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36012)[0m     @     0x558e38d8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36012)[0m     @     0x558e38d00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36012)[0m     @     0x558e38d8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36012)[0m     @     0x558e38d8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36012)[0m     @     0x558e38d00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36081)[0m     @     0x7f140cb3f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36081)[0m     @     0x564d8710efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36081)[0m     @     0x564d87069b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36081)[0m     @     0x564d870f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36081)[0m     @     0x564d870f5a20 method_vectorcall
[2m[36m(pid=36081)[0m     @     0x564d87069bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36081)[0m     @     0x564d870f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36081)[0m     @     0x564d870f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36081)[0m     @     0x564d8706a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36081)[0m     @     0x564d870f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36081)[0m     @     0x564d870f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36081)[0m     @     0x564d8706a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36081)[0m     @     0x564d870f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36081)[0m     @     0x564d870f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36081)[0m     @     0x564d8706a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36081)[0m     @     0x564d870f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36081)[0m     @     0x564d870f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36081)[0m     @     0x564d8706a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36007)[0m     @     0x7ee637fa44f5 at::Tensor::copy_()
[2m[36m(pid=36007)[0m     @     0x7ee63e04f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36007)[0m     @     0x555dba159fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36007)[0m     @     0x555dba0b4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36007)[0m     @     0x555dba13fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36007)[0m     @     0x555dba140a20 method_vectorcall
[2m[36m(pid=36007)[0m     @     0x555dba0b4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36007)[0m     @     0x555dba13fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36007)[0m     @     0x555dba140643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36007)[0m     @     0x555dba0b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36007)[0m     @     0x555dba13fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36007)[0m     @     0x555dba140643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36007)[0m     @     0x555dba0b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36007)[0m     @     0x555dba13fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36007)[0m     @     0x555dba140643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36007)[0m     @     0x555dba0b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36007)[0m     @     0x555dba13fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36007)[0m     @     0x555dba140643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36007)[0m     @     0x555dba0b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36027)[0m     @     0x7f9856ce54f5 at::Tensor::copy_()
[2m[36m(pid=36027)[0m     @     0x7f985cd9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36027)[0m     @     0x55b623774fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36027)[0m     @     0x55b6236cfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36027)[0m     @     0x55b62375abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36027)[0m     @     0x55b62375ba20 method_vectorcall
[2m[36m(pid=36027)[0m     @     0x55b6236cfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36027)[0m     @     0x55b62375abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36027)[0m     @     0x55b62375b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36027)[0m     @     0x55b6236d0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36027)[0m     @     0x55b62375abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36027)[0m     @     0x55b62375b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36027)[0m     @     0x55b6236d0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36027)[0m     @     0x55b62375abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36027)[0m     @     0x55b62375b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36027)[0m     @     0x55b6236d0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36027)[0m     @     0x55b62375abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36027)[0m     @     0x55b62375b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36027)[0m     @     0x55b6236d0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36085)[0m     @     0x7fb2ba49179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36085)[0m     @     0x55a30bebcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36085)[0m     @     0x55a30be17b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36085)[0m     @     0x55a30bea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36085)[0m     @     0x55a30bea3a20 method_vectorcall
[2m[36m(pid=36085)[0m     @     0x55a30be17bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36085)[0m     @     0x55a30bea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36085)[0m     @     0x55a30bea3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36085)[0m     @     0x55a30be18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36085)[0m     @     0x55a30bea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36085)[0m     @     0x55a30bea3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36085)[0m     @     0x55a30be18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36085)[0m     @     0x55a30bea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36085)[0m     @     0x55a30bea3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36085)[0m     @     0x55a30be18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36085)[0m     @     0x55a30bea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36085)[0m     @     0x55a30bea3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36085)[0m     @     0x55a30be18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36083)[0m     @     0x7f1ee3eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36083)[0m     @     0x7f1ee19e54f5 at::Tensor::copy_()
[2m[36m(pid=36083)[0m     @     0x7f1ee7a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36083)[0m     @     0x55810a738fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36009)[0m     @     0x7efb3cb104f5 at::Tensor::copy_()
[2m[36m(pid=36009)[0m     @     0x7efb42bbb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36009)[0m     @     0x55c938a00fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36009)[0m     @     0x55c93895bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36009)[0m     @     0x55c9389e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36009)[0m     @     0x55c9389e7a20 method_vectorcall
[2m[36m(pid=36009)[0m     @     0x55c93895bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36009)[0m     @     0x55c9389e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36009)[0m     @     0x55c9389e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36009)[0m     @     0x55c93895c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36009)[0m     @     0x55c9389e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36009)[0m     @     0x55c9389e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36009)[0m     @     0x55c93895c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36009)[0m     @     0x55c9389e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36009)[0m     @     0x55c9389e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36009)[0m     @     0x55c93895c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36009)[0m     @     0x55c9389e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=36009)[0m     @     0x55c9389e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36009)[0m     @     0x55c93895c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36003)[0m     @     0x7fa386a3c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36003)[0m     @     0x56418f126fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36003)[0m     @     0x56418f081b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36003)[0m     @     0x56418f10cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36003)[0m     @     0x56418f10da20 method_vectorcall
[2m[36m(pid=36003)[0m     @     0x56418f081bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36003)[0m     @     0x56418f10cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36003)[0m     @     0x56418f10d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36003)[0m     @     0x56418f082689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36003)[0m     @     0x56418f10cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36003)[0m     @     0x56418f10d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36003)[0m     @     0x56418f082689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36003)[0m     @     0x56418f10cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36003)[0m     @     0x56418f10d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36003)[0m     @     0x56418f082689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36003)[0m     @     0x56418f10cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36003)[0m     @     0x56418f10d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36003)[0m     @     0x56418f082689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36070)[0m     @     0x559d9607f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36070)[0m     @     0x559d95ff4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36070)[0m     @     0x559d9607ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36070)[0m     @     0x559d9607f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36070)[0m     @     0x559d95ff4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36070)[0m     @     0x559d9607ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36070)[0m     @     0x559d9607f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36070)[0m     @     0x559d95ff4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36070)[0m     @     0x559d9607ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36070)[0m     @     0x559d9607f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36070)[0m     @     0x559d95ff4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36102)[0m     @     0x7eec6d0d58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36102)[0m     @     0x7eec6ac024f5 at::Tensor::copy_()
[2m[36m(pid=36102)[0m     @     0x7eec70cad79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36102)[0m     @     0x561e471eafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36102)[0m     @     0x561e47145b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36102)[0m     @     0x561e471d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36102)[0m     @     0x561e471d1a20 method_vectorcall
[2m[36m(pid=36102)[0m     @     0x561e47145bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36102)[0m     @     0x561e471d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36078)[0m     @     0x7f6163cc24f5 at::Tensor::copy_()
[2m[36m(pid=36078)[0m     @     0x7f6169d6d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36078)[0m     @     0x55f276765fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36078)[0m     @     0x55f2766c0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36078)[0m     @     0x55f27674bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36078)[0m     @     0x55f27674ca20 method_vectorcall
[2m[36m(pid=36078)[0m     @     0x55f2766c0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36078)[0m     @     0x55f27674bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36078)[0m     @     0x55f27674c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36078)[0m     @     0x55f2766c1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36078)[0m     @     0x55f27674bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36078)[0m     @     0x55f27674c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36078)[0m     @     0x55f2766c1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36078)[0m     @     0x55f27674bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36078)[0m     @     0x55f27674c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36078)[0m     @     0x55f2766c1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36078)[0m     @     0x55f27674bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36078)[0m     @     0x55f27674c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36078)[0m     @     0x55f2766c1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36090)[0m     @     0x563743a43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36090)[0m     @     0x563743acdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36090)[0m     @     0x563743ace643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36090)[0m     @     0x563743a43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36090)[0m     @     0x563743acdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36090)[0m     @     0x563743ace643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36090)[0m     @     0x563743a43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36025)[0m     @     0x564f728b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36025)[0m     @     0x564f72941baf _PyEval_EvalCodeWithName
[2m[36m(pid=36025)[0m     @     0x564f72942643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36025)[0m     @     0x564f728b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36086)[0m     @     0x556038360baf _PyEval_EvalCodeWithName
[2m[36m(pid=36086)[0m     @     0x556038361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36086)[0m     @     0x5560382d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36086)[0m     @     0x556038360baf _PyEval_EvalCodeWithName
[2m[36m(pid=36086)[0m     @     0x556038361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36086)[0m     @     0x5560382d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36056)[0m     @     0x55e3ec033baf _PyEval_EvalCodeWithName
[2m[36m(pid=36056)[0m     @     0x55e3ec034643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36056)[0m     @     0x55e3ebfa9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36056)[0m     @     0x55e3ec033baf _PyEval_EvalCodeWithName
[2m[36m(pid=36056)[0m     @     0x55e3ec034643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36056)[0m     @     0x55e3ebfa9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36056)[0m     @     0x55e3ec033baf _PyEval_EvalCodeWithName
[2m[36m(pid=36056)[0m     @     0x55e3ec034643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36056)[0m     @     0x55e3ebfa9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36056)[0m     @     0x55e3ec033baf _PyEval_EvalCodeWithName
[2m[36m(pid=36056)[0m     @     0x55e3ec034643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36056)[0m     @     0x55e3ebfa9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36015)[0m     @     0x7fa549e08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36015)[0m     @     0x7fa549e2bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36015)[0m     @     0x7fa5492cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36015)[0m     @     0x7fa5492cb388 at::native::copy_impl()
[2m[36m(pid=36015)[0m     @     0x7fa5492cd5a4 at::native::copy_()
[2m[36m(pid=36059)[0m     @     0x7fbf5d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=36059)[0m     @     0x7fbf6346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36059)[0m     @     0x55f977be4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36059)[0m     @     0x55f977b3fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36059)[0m     @     0x55f977bcabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36059)[0m     @     0x55f977bcba20 method_vectorcall
[2m[36m(pid=36059)[0m     @     0x55f977b3fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36059)[0m     @     0x55f977bcabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36059)[0m     @     0x55f977bcb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36059)[0m     @     0x55f977b40689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36059)[0m     @     0x55f977bcabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36059)[0m     @     0x55f977bcb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36059)[0m     @     0x55f977b40689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36059)[0m     @     0x55f977bcabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36059)[0m     @     0x55f977bcb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36059)[0m     @     0x55f977b40689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36059)[0m     @     0x55f977bcabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36059)[0m     @     0x55f977bcb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36059)[0m     @     0x55f977b40689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36006)[0m     @     0x565155c8e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36006)[0m     @     0x565155d18baf _PyEval_EvalCodeWithName
[2m[36m(pid=36006)[0m     @     0x565155d19643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36006)[0m     @     0x565155c8e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36006)[0m     @     0x565155d18baf _PyEval_EvalCodeWithName
[2m[36m(pid=36006)[0m     @     0x565155d19643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36006)[0m     @     0x565155c8e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36022)[0m     @     0x564403d79baf _PyEval_EvalCodeWithName
[2m[36m(pid=36022)[0m     @     0x564403d7a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36022)[0m     @     0x564403cef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36022)[0m     @     0x564403d79baf _PyEval_EvalCodeWithName
[2m[36m(pid=36022)[0m     @     0x564403d7a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36022)[0m     @     0x564403cef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36022)[0m     @     0x564403d79baf _PyEval_EvalCodeWithName
[2m[36m(pid=36022)[0m     @     0x564403d7a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36022)[0m     @     0x564403cef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36117)[0m     @     0x564853a2bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36117)[0m     @     0x564853a2ca20 method_vectorcall
[2m[36m(pid=36117)[0m     @     0x5648539a0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36117)[0m     @     0x564853a2bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36117)[0m     @     0x564853a2c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36117)[0m     @     0x5648539a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36117)[0m     @     0x564853a2bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36117)[0m     @     0x564853a2c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36117)[0m     @     0x5648539a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36117)[0m     @     0x564853a2bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36117)[0m     @     0x564853a2c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36117)[0m     @     0x5648539a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36117)[0m     @     0x564853a2bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36117)[0m     @     0x564853a2c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36117)[0m     @     0x5648539a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36120)[0m     @     0x559809524baf _PyEval_EvalCodeWithName
[2m[36m(pid=36120)[0m     @     0x559809525643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36120)[0m     @     0x55980949a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36120)[0m     @     0x559809524baf _PyEval_EvalCodeWithName
[2m[36m(pid=36120)[0m     @     0x559809525643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36120)[0m     @     0x55980949a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36120)[0m     @     0x559809524baf _PyEval_EvalCodeWithName
[2m[36m(pid=36120)[0m     @     0x559809525643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36120)[0m     @     0x55980949a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36120)[0m     @     0x559809524baf _PyEval_EvalCodeWithName
[2m[36m(pid=36120)[0m     @     0x559809525643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36120)[0m     @     0x55980949a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36087)[0m     @     0x7f9247405a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36087)[0m     @     0x7f9247403388 at::native::copy_impl()
[2m[36m(pid=36087)[0m     @     0x7f92474055a4 at::native::copy_()
[2m[36m(pid=36082)[0m     @     0x556c64d7c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36082)[0m     @     0x556c64e06baf _PyEval_EvalCodeWithName
[2m[36m(pid=36082)[0m     @     0x556c64e07643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36082)[0m     @     0x556c64d7c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36004)[0m     @     0x55ff609fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36133)[0m     @     0x563619be0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36133)[0m     @     0x563619c6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36133)[0m     @     0x563619c6c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36133)[0m     @     0x563619be1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36133)[0m     @     0x563619c6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36133)[0m     @     0x563619c6c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36133)[0m     @     0x563619be1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36133)[0m     @     0x563619c6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36133)[0m     @     0x563619c6c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36133)[0m     @     0x563619be1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36133)[0m     @     0x563619c6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36133)[0m     @     0x563619c6c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36133)[0m     @     0x563619be1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36075)[0m     @     0x7f1ecda7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36075)[0m     @     0x55aa59082fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36075)[0m     @     0x55aa58fddb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36075)[0m     @     0x55aa59068baf _PyEval_EvalCodeWithName
[2m[36m(pid=36075)[0m     @     0x55aa59069a20 method_vectorcall
[2m[36m(pid=36075)[0m     @     0x55aa58fddbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36075)[0m     @     0x55aa59068baf _PyEval_EvalCodeWithName
[2m[36m(pid=36075)[0m     @     0x55aa59069643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36075)[0m     @     0x55aa58fde689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36075)[0m     @     0x55aa59068baf _PyEval_EvalCodeWithName
[2m[36m(pid=36075)[0m     @     0x55aa59069643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36075)[0m     @     0x55aa58fde689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36075)[0m     @     0x55aa59068baf _PyEval_EvalCodeWithName
[2m[36m(pid=36075)[0m     @     0x55aa59069643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36075)[0m     @     0x55aa58fde689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36075)[0m     @     0x55aa59068baf _PyEval_EvalCodeWithName
[2m[36m(pid=36075)[0m     @     0x55aa59069643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36075)[0m     @     0x55aa58fde689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36099)[0m     @     0x564b8b6d3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36099)[0m     @     0x564b8b75ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36099)[0m     @     0x564b8b75f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36099)[0m     @     0x564b8b6d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36099)[0m     @     0x564b8b75ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36099)[0m     @     0x564b8b75f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36099)[0m     @     0x564b8b6d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36099)[0m     @     0x564b8b75ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36099)[0m     @     0x564b8b75f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36099)[0m     @     0x564b8b6d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36099)[0m     @     0x564b8b75ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36099)[0m     @     0x564b8b75f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36099)[0m     @     0x564b8b6d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36077)[0m     @     0x7fa1c10a44f5 at::Tensor::copy_()
[2m[36m(pid=36077)[0m     @     0x7fa1c714f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36077)[0m     @     0x562657f08fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36077)[0m     @     0x562657e63b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36077)[0m     @     0x562657eeebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36077)[0m     @     0x562657eefa20 method_vectorcall
[2m[36m(pid=36077)[0m     @     0x562657e63bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36077)[0m     @     0x562657eeebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36077)[0m     @     0x562657eef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36077)[0m     @     0x562657e64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36077)[0m     @     0x562657eeebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36077)[0m     @     0x562657eef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36077)[0m     @     0x562657e64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36077)[0m     @     0x562657eeebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36077)[0m     @     0x562657eef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36077)[0m     @     0x562657e64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36077)[0m     @     0x562657eeebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36077)[0m     @     0x562657eef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36077)[0m     @     0x562657e64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36083)[0m     @     0x55810a693b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36083)[0m     @     0x55810a71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36083)[0m     @     0x55810a71fa20 method_vectorcall
[2m[36m(pid=36083)[0m     @     0x55810a693bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36083)[0m     @     0x55810a71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36083)[0m     @     0x55810a71f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36083)[0m     @     0x55810a694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36083)[0m     @     0x55810a71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36083)[0m     @     0x55810a71f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36083)[0m     @     0x55810a694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36083)[0m     @     0x55810a71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36083)[0m     @     0x55810a71f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36083)[0m     @     0x55810a694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36083)[0m     @     0x55810a71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36083)[0m     @     0x55810a71f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36083)[0m     @     0x55810a694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36102)[0m     @     0x561e471d1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36102)[0m     @     0x561e47146689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36102)[0m     @     0x561e471d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36102)[0m     @     0x561e471d1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36102)[0m     @     0x561e47146689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36102)[0m     @     0x561e471d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36102)[0m     @     0x561e471d1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36102)[0m     @     0x561e47146689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36102)[0m     @     0x561e471d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36102)[0m     @     0x561e471d1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36102)[0m     @     0x561e47146689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36015)[0m     @     0x7fa5499b84f5 at::Tensor::copy_()
[2m[36m(pid=36015)[0m     @     0x7fa54be8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36087)[0m     @     0x7f9247af04f5 at::Tensor::copy_()
[2m[36m(pid=36087)[0m     @     0x7f9249fc38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36015)[0m     @     0x7fa5499b84f5 at::Tensor::copy_()
[2m[36m(pid=36015)[0m     @     0x7fa54fa6379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36015)[0m     @     0x555b2c81afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36015)[0m     @     0x555b2c775b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36015)[0m     @     0x555b2c800baf _PyEval_EvalCodeWithName
[2m[36m(pid=36015)[0m     @     0x555b2c801a20 method_vectorcall
[2m[36m(pid=36015)[0m     @     0x555b2c775bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36015)[0m     @     0x555b2c800baf _PyEval_EvalCodeWithName
[2m[36m(pid=36015)[0m     @     0x555b2c801643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36015)[0m     @     0x555b2c776689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36015)[0m     @     0x555b2c800baf _PyEval_EvalCodeWithName
[2m[36m(pid=36015)[0m     @     0x555b2c801643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36015)[0m     @     0x555b2c776689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36015)[0m     @     0x555b2c800baf _PyEval_EvalCodeWithName
[2m[36m(pid=36015)[0m     @     0x555b2c801643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36015)[0m     @     0x555b2c776689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36015)[0m     @     0x555b2c800baf _PyEval_EvalCodeWithName
[2m[36m(pid=36015)[0m     @     0x555b2c801643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36015)[0m     @     0x555b2c776689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36087)[0m     @     0x7f9247af04f5 at::Tensor::copy_()
[2m[36m(pid=36087)[0m     @     0x7f924db9b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36087)[0m     @     0x55f2d5a84fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36087)[0m     @     0x55f2d59dfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36087)[0m     @     0x55f2d5a6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36087)[0m     @     0x55f2d5a6ba20 method_vectorcall
[2m[36m(pid=36087)[0m     @     0x55f2d59dfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36087)[0m     @     0x55f2d5a6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36087)[0m     @     0x55f2d5a6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36087)[0m     @     0x55f2d59e0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36087)[0m     @     0x55f2d5a6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36087)[0m     @     0x55f2d5a6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36087)[0m     @     0x55f2d59e0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36087)[0m     @     0x55f2d5a6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36087)[0m     @     0x55f2d5a6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36087)[0m     @     0x55f2d59e0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36087)[0m     @     0x55f2d5a6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36087)[0m     @     0x55f2d5a6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36087)[0m     @     0x55f2d59e0689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:06:52,200	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.
2020-11-05 10:06:52,201	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.
2020-11-05 10:06:52,207	ERROR trial_runner.py:567 -- Trial PPO_jss_env_9bf91_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=36107, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
== Status ==
Memory usage on this node: 22.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_9bf91_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_9bf91_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_9bf91_00000_0_2020-11-05_10-06-44/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

2020-11-05 10:06:52,223	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.
2020-11-05 10:06:52,223	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.
2020-11-05 10:06:52,224	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.
2020-11-05 10:06:52,224	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.
2020-11-05 10:06:52,224	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.
2020-11-05 10:06:52,224	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.
2020-11-05 10:06:52,224	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.
== Status ==
Memory usage on this node: 22.4/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_9bf91_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_9bf91_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_9bf91_00000_0_2020-11-05_10-06-44/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_9bf91_00000])
2020-11-05 10:06:52,235	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.
2020-11-05 10:06:52,235	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.
