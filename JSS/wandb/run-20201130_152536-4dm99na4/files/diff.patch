diff --git a/JSS.egg-info/SOURCES.txt b/JSS.egg-info/SOURCES.txt
index 26a5070..f15aace 100644
--- a/JSS.egg-info/SOURCES.txt
+++ b/JSS.egg-info/SOURCES.txt
@@ -18,6 +18,7 @@ JSS/multiprocessing_env.py
 JSS/random_loop.py
 JSS/train.py
 JSS/train_wandb.py
+JSS/train_wandb_impala.py
 JSS.egg-info/PKG-INFO
 JSS.egg-info/SOURCES.txt
 JSS.egg-info/dependency_links.txt
diff --git a/JSS/.ipynb_checkpoints/models-checkpoint.py b/JSS/.ipynb_checkpoints/models-checkpoint.py
index 30be0cd..933b659 100644
--- a/JSS/.ipynb_checkpoints/models-checkpoint.py
+++ b/JSS/.ipynb_checkpoints/models-checkpoint.py
@@ -1,49 +1,14 @@
 import gym
 
-from ray.rllib.models.torch.torch_modelv2 import TorchModelV2
-from ray.rllib.models.torch.fcnet import FullyConnectedNetwork
-
-from ray.rllib.utils.framework import try_import_tf, try_import_torch
-
-torch, nn = try_import_torch()
-
+from ray.rllib.utils.framework import try_import_tf
 
 from ray.rllib.agents.dqn.distributional_q_tf_model import DistributionalQTFModel
-from ray.rllib.models.tf.fcnet import FullyConnectedNetwork as FullyConnectedNetworkTF
+from ray.rllib.models.tf.fcnet import FullyConnectedNetwork
 from ray.rllib.models.tf.tf_modelv2 import TFModelV2
 
 
 tf1, tf, tfv = try_import_tf()
 
-
-class FCMaskedActionsModelV1(TorchModelV2, nn.Module):
-
-    def __init__(self,
-                 obs_space,
-                 action_space,
-                 num_outputs,
-                 model_config,
-                 name):
-        nn.Module.__init__(self)
-        super(FCMaskedActionsModelV1, self).__init__(obs_space, action_space, action_space.n, model_config, name)
-        true_obs_space = gym.spaces.MultiBinary(n=obs_space.shape[0] - action_space.n)
-        self.action_model = FullyConnectedNetwork(
-            obs_space=true_obs_space, action_space=action_space, num_outputs=action_space.n,
-            model_config=model_config, name=name + "action_model")
-
-    def forward(self, input_dict, state, seq_lens):
-        # Extract the available actions tensor from the observation.
-        action_mask = input_dict["obs"]["action_mask"]
-        # Compute the predicted action embedding
-
-        raw_actions, _ = self.action_model({
-            "obs": input_dict["obs"]["real_obs"]
-        })
-        return raw_actions.masked_fill(action_mask == 0, torch.finfo(torch.float).min), state
-
-    def value_function(self):
-        return self.action_model.value_function()
-
 class FCMaskedActionsModelTF(DistributionalQTFModel, TFModelV2):
     def __init__(self,
                  obs_space,
@@ -55,9 +20,9 @@ class FCMaskedActionsModelTF(DistributionalQTFModel, TFModelV2):
         super(FCMaskedActionsModelTF, self).__init__(
             obs_space, action_space, num_outputs, model_config, name, **kw)
         true_obs_space = gym.spaces.MultiBinary(n=obs_space.shape[0] - action_space.n)
-        self.action_embed_model = FullyConnectedNetworkTF(
-            true_obs_space, action_space, action_space.n,
-            model_config, name + "_action_embed")
+        self.action_embed_model = FullyConnectedNetwork(
+            obs_space=true_obs_space, action_space=action_space, num_outputs=action_space.n,
+            model_config=model_config, name=name + "action_model")
         self.register_variables(self.action_embed_model.variables())
 
     def forward(self, input_dict, state, seq_lens):
@@ -67,7 +32,8 @@ class FCMaskedActionsModelTF(DistributionalQTFModel, TFModelV2):
         raw_actions, _ = self.action_embed_model({
             "obs": input_dict["obs"]["real_obs"]
         })
-        return tf.where(action_mask == 1, tf.float32.min, raw_actions), state
+        inf_mask = tf.maximum(tf.math.log(action_mask), tf.float32.min)
+        return raw_actions + inf_mask, state
 
     def value_function(self):
         return self.action_embed_model.value_function()
\ No newline at end of file
diff --git a/JSS/.ipynb_checkpoints/train_wandb-checkpoint.py b/JSS/.ipynb_checkpoints/train_wandb-checkpoint.py
index 645950c..aec3dba 100644
--- a/JSS/.ipynb_checkpoints/train_wandb-checkpoint.py
+++ b/JSS/.ipynb_checkpoints/train_wandb-checkpoint.py
@@ -20,7 +20,7 @@ from ray.tune import register_env
 from JSS.env_wrapper import BestActionsWrapper
 from JSS.env.JSS import JSS
 
-from JSS.models import FCMaskedActionsModelV1, FCMaskedActionsModelTF
+from JSS.models import FCMaskedActionsModelTF
 from ray.tune.utils import flatten_dict
 
 def env_creator(env_config):
@@ -66,15 +66,15 @@ def train_func():
         'env': 'jss_env',
         'seed': 0,
         'framework': 'tf',
-        'log_level': 'INFO',
-        'num_gpus': 0,
+        'log_level': 'WARN',
+        'num_gpus': 1,
         'instance_path': '/JSS/JSS/env/instances/ta51',
         'evaluation_interval': None,
         'metrics_smoothing_episodes': 1000,
         'gamma': 1.0,
-        'num_workers': 1,
+        'num_workers': mp.cpu_count(),
         'layer_nb': 2,
-        'train_batch_size': 100,
+        'train_batch_size': 32001,
         'num_envs_per_worker': 1, # TO TUNE
         'rollout_fragment_length': 512, # TO TUNE
         'sgd_minibatch_size': 56, # TO TUNE
diff --git a/JSS/__pycache__/CustomCallbacks.cpython-38.pyc b/JSS/__pycache__/CustomCallbacks.cpython-38.pyc
index d8867e4..db3d095 100644
Binary files a/JSS/__pycache__/CustomCallbacks.cpython-38.pyc and b/JSS/__pycache__/CustomCallbacks.cpython-38.pyc differ
diff --git a/JSS/__pycache__/PrioritizedReplayBuffer.cpython-38.pyc b/JSS/__pycache__/PrioritizedReplayBuffer.cpython-38.pyc
index b792499..c9e1a89 100644
Binary files a/JSS/__pycache__/PrioritizedReplayBuffer.cpython-38.pyc and b/JSS/__pycache__/PrioritizedReplayBuffer.cpython-38.pyc differ
diff --git a/JSS/__pycache__/__init__.cpython-38.pyc b/JSS/__pycache__/__init__.cpython-38.pyc
index b15f5c2..4a3e906 100644
Binary files a/JSS/__pycache__/__init__.cpython-38.pyc and b/JSS/__pycache__/__init__.cpython-38.pyc differ
diff --git a/JSS/__pycache__/env_wrapper.cpython-38.pyc b/JSS/__pycache__/env_wrapper.cpython-38.pyc
index 5d1eee5..c9ff223 100644
Binary files a/JSS/__pycache__/env_wrapper.cpython-38.pyc and b/JSS/__pycache__/env_wrapper.cpython-38.pyc differ
diff --git a/JSS/__pycache__/models.cpython-38.pyc b/JSS/__pycache__/models.cpython-38.pyc
index da2b3d7..b92e3ad 100644
Binary files a/JSS/__pycache__/models.cpython-38.pyc and b/JSS/__pycache__/models.cpython-38.pyc differ
diff --git a/JSS/env/__pycache__/JSS.cpython-38.pyc b/JSS/env/__pycache__/JSS.cpython-38.pyc
index bca43d6..3f55a97 100644
Binary files a/JSS/env/__pycache__/JSS.cpython-38.pyc and b/JSS/env/__pycache__/JSS.cpython-38.pyc differ
diff --git a/JSS/env/__pycache__/__init__.cpython-38.pyc b/JSS/env/__pycache__/__init__.cpython-38.pyc
index 758925f..e094225 100644
Binary files a/JSS/env/__pycache__/__init__.cpython-38.pyc and b/JSS/env/__pycache__/__init__.cpython-38.pyc differ
diff --git a/JSS/models.py b/JSS/models.py
index 30be0cd..933b659 100644
--- a/JSS/models.py
+++ b/JSS/models.py
@@ -1,49 +1,14 @@
 import gym
 
-from ray.rllib.models.torch.torch_modelv2 import TorchModelV2
-from ray.rllib.models.torch.fcnet import FullyConnectedNetwork
-
-from ray.rllib.utils.framework import try_import_tf, try_import_torch
-
-torch, nn = try_import_torch()
-
+from ray.rllib.utils.framework import try_import_tf
 
 from ray.rllib.agents.dqn.distributional_q_tf_model import DistributionalQTFModel
-from ray.rllib.models.tf.fcnet import FullyConnectedNetwork as FullyConnectedNetworkTF
+from ray.rllib.models.tf.fcnet import FullyConnectedNetwork
 from ray.rllib.models.tf.tf_modelv2 import TFModelV2
 
 
 tf1, tf, tfv = try_import_tf()
 
-
-class FCMaskedActionsModelV1(TorchModelV2, nn.Module):
-
-    def __init__(self,
-                 obs_space,
-                 action_space,
-                 num_outputs,
-                 model_config,
-                 name):
-        nn.Module.__init__(self)
-        super(FCMaskedActionsModelV1, self).__init__(obs_space, action_space, action_space.n, model_config, name)
-        true_obs_space = gym.spaces.MultiBinary(n=obs_space.shape[0] - action_space.n)
-        self.action_model = FullyConnectedNetwork(
-            obs_space=true_obs_space, action_space=action_space, num_outputs=action_space.n,
-            model_config=model_config, name=name + "action_model")
-
-    def forward(self, input_dict, state, seq_lens):
-        # Extract the available actions tensor from the observation.
-        action_mask = input_dict["obs"]["action_mask"]
-        # Compute the predicted action embedding
-
-        raw_actions, _ = self.action_model({
-            "obs": input_dict["obs"]["real_obs"]
-        })
-        return raw_actions.masked_fill(action_mask == 0, torch.finfo(torch.float).min), state
-
-    def value_function(self):
-        return self.action_model.value_function()
-
 class FCMaskedActionsModelTF(DistributionalQTFModel, TFModelV2):
     def __init__(self,
                  obs_space,
@@ -55,9 +20,9 @@ class FCMaskedActionsModelTF(DistributionalQTFModel, TFModelV2):
         super(FCMaskedActionsModelTF, self).__init__(
             obs_space, action_space, num_outputs, model_config, name, **kw)
         true_obs_space = gym.spaces.MultiBinary(n=obs_space.shape[0] - action_space.n)
-        self.action_embed_model = FullyConnectedNetworkTF(
-            true_obs_space, action_space, action_space.n,
-            model_config, name + "_action_embed")
+        self.action_embed_model = FullyConnectedNetwork(
+            obs_space=true_obs_space, action_space=action_space, num_outputs=action_space.n,
+            model_config=model_config, name=name + "action_model")
         self.register_variables(self.action_embed_model.variables())
 
     def forward(self, input_dict, state, seq_lens):
@@ -67,7 +32,8 @@ class FCMaskedActionsModelTF(DistributionalQTFModel, TFModelV2):
         raw_actions, _ = self.action_embed_model({
             "obs": input_dict["obs"]["real_obs"]
         })
-        return tf.where(action_mask == 1, tf.float32.min, raw_actions), state
+        inf_mask = tf.maximum(tf.math.log(action_mask), tf.float32.min)
+        return raw_actions + inf_mask, state
 
     def value_function(self):
         return self.action_embed_model.value_function()
\ No newline at end of file
diff --git a/JSS/train_wandb.py b/JSS/train_wandb.py
index 645950c..aec3dba 100644
--- a/JSS/train_wandb.py
+++ b/JSS/train_wandb.py
@@ -20,7 +20,7 @@ from ray.tune import register_env
 from JSS.env_wrapper import BestActionsWrapper
 from JSS.env.JSS import JSS
 
-from JSS.models import FCMaskedActionsModelV1, FCMaskedActionsModelTF
+from JSS.models import FCMaskedActionsModelTF
 from ray.tune.utils import flatten_dict
 
 def env_creator(env_config):
@@ -66,15 +66,15 @@ def train_func():
         'env': 'jss_env',
         'seed': 0,
         'framework': 'tf',
-        'log_level': 'INFO',
-        'num_gpus': 0,
+        'log_level': 'WARN',
+        'num_gpus': 1,
         'instance_path': '/JSS/JSS/env/instances/ta51',
         'evaluation_interval': None,
         'metrics_smoothing_episodes': 1000,
         'gamma': 1.0,
-        'num_workers': 1,
+        'num_workers': mp.cpu_count(),
         'layer_nb': 2,
-        'train_batch_size': 100,
+        'train_batch_size': 32001,
         'num_envs_per_worker': 1, # TO TUNE
         'rollout_fragment_length': 512, # TO TUNE
         'sgd_minibatch_size': 56, # TO TUNE
diff --git a/JSS/wandb/debug-internal.log b/JSS/wandb/debug-internal.log
index 8622470..94b082e 120000
--- a/JSS/wandb/debug-internal.log
+++ b/JSS/wandb/debug-internal.log
@@ -1 +1 @@
-run-20201130_140528-2zb4hbbp/logs/debug-internal.log
\ No newline at end of file
+run-20201130_152536-4dm99na4/logs/debug-internal.log
\ No newline at end of file
diff --git a/JSS/wandb/debug.log b/JSS/wandb/debug.log
index a0b8761..789d6a4 120000
--- a/JSS/wandb/debug.log
+++ b/JSS/wandb/debug.log
@@ -1 +1 @@
-run-20201130_140528-2zb4hbbp/logs/debug.log
\ No newline at end of file
+run-20201130_152536-4dm99na4/logs/debug.log
\ No newline at end of file
diff --git a/JSS/wandb/latest-run b/JSS/wandb/latest-run
index 86c02df..6159873 120000
--- a/JSS/wandb/latest-run
+++ b/JSS/wandb/latest-run
@@ -1 +1 @@
-run-20201130_140528-2zb4hbbp
\ No newline at end of file
+run-20201130_152536-4dm99na4
\ No newline at end of file
