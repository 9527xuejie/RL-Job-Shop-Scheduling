2020-11-05 10:09:47,153	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_09655_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=46936)[0m 2020-11-05 10:09:50,040	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=46921)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46921)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46921)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46921)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46921)[0m *** SIGSEGV (@0x0) received by PID 46921 (TID 0x7f77aa712700) from PID 0; stack trace: ***
[2m[36m(pid=46921)[0m     @     0x7f77aa2eb390 (unknown)
[2m[36m(pid=46921)[0m     @     0x7f48aa13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46921)[0m     @     0x7f48a98657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46921)[0m     @     0x7f48a98688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46858)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46858)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46858)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46858)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46858)[0m *** SIGSEGV (@0x0) received by PID 46858 (TID 0x7f804987b700) from PID 0; stack trace: ***
[2m[36m(pid=46858)[0m     @     0x7f8049454390 (unknown)
[2m[36m(pid=46858)[0m     @     0x7f5149377f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46858)[0m     @     0x7f5148aa27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46858)[0m     @     0x7f5148aa58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46899)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46899)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46899)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46899)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46899)[0m *** SIGSEGV (@0x0) received by PID 46899 (TID 0x7f55fde9b700) from PID 0; stack trace: ***
[2m[36m(pid=46899)[0m     @     0x7f55fda74390 (unknown)
[2m[36m(pid=46899)[0m     @     0x7f26fd7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46899)[0m     @     0x7f26fcf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46905)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46905)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46905)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46905)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46905)[0m *** SIGSEGV (@0x0) received by PID 46905 (TID 0x7f9de2f07700) from PID 0; stack trace: ***
[2m[36m(pid=46905)[0m     @     0x7f9de2ae0390 (unknown)
[2m[36m(pid=46905)[0m     @     0x7f6ee2a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46905)[0m     @     0x7f6ee214c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46905)[0m     @     0x7f6ee214f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46905)[0m     @     0x7f6ee214fad3 at::TensorIterator::for_each()
[2m[36m(pid=46920)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46920)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46920)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46920)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46920)[0m *** SIGSEGV (@0x0) received by PID 46920 (TID 0x7fa2dd7a7700) from PID 0; stack trace: ***
[2m[36m(pid=46920)[0m     @     0x7fa2dd380390 (unknown)
[2m[36m(pid=46920)[0m     @     0x7f73dd30af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46920)[0m     @     0x7f73dca357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46920)[0m     @     0x7f73dca388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46924)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46924)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46924)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46924)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46924)[0m *** SIGSEGV (@0x0) received by PID 46924 (TID 0x7f0263647700) from PID 0; stack trace: ***
[2m[36m(pid=46924)[0m     @     0x7f0263220390 (unknown)
[2m[36m(pid=46924)[0m     @     0x7ed363124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46924)[0m     @     0x7ed36284f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46917)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46917)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46917)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46917)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46917)[0m *** SIGSEGV (@0x0) received by PID 46917 (TID 0x7f5d73dec700) from PID 0; stack trace: ***
[2m[36m(pid=46917)[0m     @     0x7f5d739c5390 (unknown)
[2m[36m(pid=46917)[0m     @     0x7f2e73818f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46917)[0m     @     0x7f2e72f437db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46917)[0m     @     0x7f2e72f468f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46848)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46848)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46848)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46848)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46848)[0m *** SIGSEGV (@0x0) received by PID 46848 (TID 0x7f1e2d372700) from PID 0; stack trace: ***
[2m[36m(pid=46848)[0m     @     0x7f1e2cf4b390 (unknown)
[2m[36m(pid=46848)[0m     @     0x7eef2cea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46848)[0m     @     0x7eef2c5cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46900)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46900)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46900)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46900)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46900)[0m *** SIGSEGV (@0x0) received by PID 46900 (TID 0x7f304e535700) from PID 0; stack trace: ***
[2m[36m(pid=46900)[0m     @     0x7f304e10e390 (unknown)
[2m[36m(pid=46900)[0m     @     0x7f014e0cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46900)[0m     @     0x7f014d7f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46867)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46867)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46867)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46838)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46838)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46838)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46838)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46838)[0m *** SIGSEGV (@0x0) received by PID 46838 (TID 0x7f361912e700) from PID 0; stack trace: ***
[2m[36m(pid=46838)[0m     @     0x7f3618d07390 (unknown)
[2m[36m(pid=46838)[0m     @     0x7f0718b85f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46838)[0m     @     0x7f07182b07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46963)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46963)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46963)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46963)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46963)[0m *** SIGSEGV (@0x0) received by PID 46963 (TID 0x7ff58e3b7700) from PID 0; stack trace: ***
[2m[36m(pid=46963)[0m     @     0x7ff58df90390 (unknown)
[2m[36m(pid=46963)[0m     @     0x7fc68de24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46963)[0m     @     0x7fc68d54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46963)[0m     @     0x7fc68d5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46846)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46846)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46846)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46846)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46846)[0m *** SIGSEGV (@0x0) received by PID 46846 (TID 0x7fb5cefc0700) from PID 0; stack trace: ***
[2m[36m(pid=46846)[0m     @     0x7fb5ceb99390 (unknown)
[2m[36m(pid=46846)[0m     @     0x7f86cead1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46846)[0m     @     0x7f86ce1fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46846)[0m     @     0x7f86ce1ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46841)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46841)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46841)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46898)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46898)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46898)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46898)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46898)[0m *** SIGSEGV (@0x0) received by PID 46898 (TID 0x7f0fefc6c700) from PID 0; stack trace: ***
[2m[36m(pid=46898)[0m     @     0x7f0fef845390 (unknown)
[2m[36m(pid=46898)[0m     @     0x7ee0ef751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46898)[0m     @     0x7ee0eee7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46898)[0m     @     0x7ee0eee7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46975)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46975)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46975)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46889)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46889)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46889)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46889)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46889)[0m *** SIGSEGV (@0x0) received by PID 46889 (TID 0x7f58a26f5700) from PID 0; stack trace: ***
[2m[36m(pid=46889)[0m     @     0x7f58a22ce390 (unknown)
[2m[36m(pid=46889)[0m     @     0x7f29a2279f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46889)[0m     @     0x7f29a19a47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46889)[0m     @     0x7f29a19a78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46904)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46904)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46904)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46904)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46904)[0m *** SIGSEGV (@0x0) received by PID 46904 (TID 0x7f7cc4c39700) from PID 0; stack trace: ***
[2m[36m(pid=46904)[0m     @     0x7f7cc4812390 (unknown)
[2m[36m(pid=46904)[0m     @     0x7f4dc460ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46904)[0m     @     0x7f4dc3d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46904)[0m     @     0x7f4dc3d3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46961)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46961)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46961)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46961)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46961)[0m *** SIGSEGV (@0x0) received by PID 46961 (TID 0x7f422665b700) from PID 0; stack trace: ***
[2m[36m(pid=46961)[0m     @     0x7f4226234390 (unknown)
[2m[36m(pid=46961)[0m     @     0x7f132613af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46961)[0m     @     0x7f13258657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46961)[0m     @     0x7f13258688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46961)[0m     @     0x7f1325868ad3 at::TensorIterator::for_each()
[2m[36m(pid=46840)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46840)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46840)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46840)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46840)[0m *** SIGSEGV (@0x0) received by PID 46840 (TID 0x7ff1fc3d8700) from PID 0; stack trace: ***
[2m[36m(pid=46840)[0m     @     0x7ff1fbfb1390 (unknown)
[2m[36m(pid=46840)[0m     @     0x7fc2fbe0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46840)[0m     @     0x7fc2fb5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46840)[0m     @     0x7fc2fb5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46840)[0m     @     0x7fc2fb539ad3 at::TensorIterator::for_each()
[2m[36m(pid=46840)[0m     @     0x7fc2fb539d91 at::TensorIterator::for_each()
[2m[36m(pid=46913)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46913)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46913)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46837)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46837)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46837)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46836)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46836)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46836)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46836)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46836)[0m *** SIGSEGV (@0x0) received by PID 46836 (TID 0x7f69bf5f1700) from PID 0; stack trace: ***
[2m[36m(pid=46869)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46869)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46869)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46845)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46845)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46845)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46845)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46845)[0m *** SIGSEGV (@0x0) received by PID 46845 (TID 0x7f7b2bee5700) from PID 0; stack trace: ***
[2m[36m(pid=46845)[0m     @     0x7f7b2babe390 (unknown)
[2m[36m(pid=46845)[0m     @     0x7f4c2b9c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46884)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46884)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46884)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46884)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46884)[0m *** SIGSEGV (@0x0) received by PID 46884 (TID 0x7f4b2679a700) from PID 0; stack trace: ***
[2m[36m(pid=46884)[0m     @     0x7f4b26373390 (unknown)
[2m[36m(pid=46884)[0m     @     0x7f1c2631ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46884)[0m     @     0x7f1c25a497db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46873)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46873)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46873)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46873)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46873)[0m *** SIGSEGV (@0x0) received by PID 46873 (TID 0x7f6bc5be0700) from PID 0; stack trace: ***
[2m[36m(pid=46873)[0m     @     0x7f6bc57b9390 (unknown)
[2m[36m(pid=46860)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46860)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46860)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46860)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46860)[0m *** SIGSEGV (@0x0) received by PID 46860 (TID 0x7efd37ed5700) from PID 0; stack trace: ***
[2m[36m(pid=46860)[0m     @     0x7efd37aae390 (unknown)
[2m[36m(pid=46860)[0m     @     0x7ece36c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46972)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46972)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46972)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46972)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46972)[0m *** SIGSEGV (@0x0) received by PID 46972 (TID 0x7f0c95350700) from PID 0; stack trace: ***
[2m[36m(pid=46967)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46967)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46967)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46967)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46967)[0m *** SIGSEGV (@0x0) received by PID 46967 (TID 0x7f14cc036700) from PID 0; stack trace: ***
[2m[36m(pid=46967)[0m     @     0x7f14cbc0f390 (unknown)
[2m[36m(pid=46967)[0m     @     0x7ee5cbaf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46967)[0m     @     0x7ee5cb2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46967)[0m     @     0x7ee5cb2238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46967)[0m     @     0x7ee5cb223ad3 at::TensorIterator::for_each()
[2m[36m(pid=46967)[0m     @     0x7ee5cb223d91 at::TensorIterator::for_each()
[2m[36m(pid=46967)[0m     @     0x7ee5cbb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46967)[0m     @     0x7ee5cbb29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46967)[0m     @     0x7ee5cafcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46890)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46890)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46890)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46890)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46890)[0m *** SIGSEGV (@0x0) received by PID 46890 (TID 0x7fa91f96c700) from PID 0; stack trace: ***
[2m[36m(pid=46890)[0m     @     0x7fa91f545390 (unknown)
[2m[36m(pid=46890)[0m     @     0x7f7a1f4eaf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46890)[0m     @     0x7f7a1ec157db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46890)[0m     @     0x7f7a1ec188f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46890)[0m     @     0x7f7a1ec18ad3 at::TensorIterator::for_each()
[2m[36m(pid=46890)[0m     @     0x7f7a1ec18d91 at::TensorIterator::for_each()
[2m[36m(pid=46890)[0m     @     0x7f7a1f4fbb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46890)[0m     @     0x7f7a1f51ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46890)[0m     @     0x7f7a1e9c0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46890)[0m     @     0x7f7a1e9be388 at::native::copy_impl()
[2m[36m(pid=46943)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46943)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46943)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46943)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46943)[0m *** SIGSEGV (@0x0) received by PID 46943 (TID 0x7f583d8c1700) from PID 0; stack trace: ***
[2m[36m(pid=46943)[0m     @     0x7f583d49a390 (unknown)
[2m[36m(pid=46943)[0m     @     0x7f293d377f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46943)[0m     @     0x7f293caa27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46943)[0m     @     0x7f293caa58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46943)[0m     @     0x7f293caa5ad3 at::TensorIterator::for_each()
[2m[36m(pid=46943)[0m     @     0x7f293caa5d91 at::TensorIterator::for_each()
[2m[36m(pid=46943)[0m     @     0x7f293d388b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46943)[0m     @     0x7f293d3abc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46943)[0m     @     0x7f293c84da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46943)[0m     @     0x7f293c84b388 at::native::copy_impl()
[2m[36m(pid=46943)[0m     @     0x7f293c84d5a4 at::native::copy_()
[2m[36m(pid=46943)[0m     @     0x7f293cf384f5 at::Tensor::copy_()
[2m[36m(pid=46945)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46945)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46945)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46945)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46945)[0m *** SIGSEGV (@0x0) received by PID 46945 (TID 0x7fa5a127a700) from PID 0; stack trace: ***
[2m[36m(pid=46945)[0m     @     0x7fa5a0e53390 (unknown)
[2m[36m(pid=46945)[0m     @     0x7f76a0dd2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46945)[0m     @     0x7f76a04fd7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46945)[0m     @     0x7f76a05008f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46945)[0m     @     0x7f76a0500ad3 at::TensorIterator::for_each()
[2m[36m(pid=46945)[0m     @     0x7f76a0500d91 at::TensorIterator::for_each()
[2m[36m(pid=46945)[0m     @     0x7f76a0de3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46945)[0m     @     0x7f76a0e06c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46945)[0m     @     0x7f76a02a8a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46945)[0m     @     0x7f76a02a6388 at::native::copy_impl()
[2m[36m(pid=46945)[0m     @     0x7f76a02a85a4 at::native::copy_()
[2m[36m(pid=46945)[0m     @     0x7f76a09934f5 at::Tensor::copy_()
[2m[36m(pid=46947)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46947)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46947)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46947)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46947)[0m *** SIGSEGV (@0x0) received by PID 46947 (TID 0x7f1827b64700) from PID 0; stack trace: ***
[2m[36m(pid=46947)[0m     @     0x7f182773d390 (unknown)
[2m[36m(pid=46947)[0m     @     0x7ee9276aef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46947)[0m     @     0x7ee926dd97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46947)[0m     @     0x7ee926ddc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46947)[0m     @     0x7ee926ddcad3 at::TensorIterator::for_each()
[2m[36m(pid=46947)[0m     @     0x7ee926ddcd91 at::TensorIterator::for_each()
[2m[36m(pid=46947)[0m     @     0x7ee9276bfb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46947)[0m     @     0x7ee9276e2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46947)[0m     @     0x7ee926b84a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46954)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46954)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46954)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46954)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46954)[0m *** SIGSEGV (@0x0) received by PID 46954 (TID 0x7fbb18cf5700) from PID 0; stack trace: ***
[2m[36m(pid=46954)[0m     @     0x7fbb188ce390 (unknown)
[2m[36m(pid=46954)[0m     @     0x7f8c1877cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46954)[0m     @     0x7f8c17ea77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46954)[0m     @     0x7f8c17eaa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46954)[0m     @     0x7f8c17eaaad3 at::TensorIterator::for_each()
[2m[36m(pid=46954)[0m     @     0x7f8c17eaad91 at::TensorIterator::for_each()
[2m[36m(pid=46954)[0m     @     0x7f8c1878db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46954)[0m     @     0x7f8c187b0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46954)[0m     @     0x7f8c17c52a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46954)[0m     @     0x7f8c17c50388 at::native::copy_impl()
[2m[36m(pid=46954)[0m     @     0x7f8c17c525a4 at::native::copy_()
[2m[36m(pid=46954)[0m     @     0x7f8c1833d4f5 at::Tensor::copy_()
[2m[36m(pid=46954)[0m     @     0x7f8c1a8108de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46932)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46932)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46932)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46932)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46932)[0m *** SIGSEGV (@0x0) received by PID 46932 (TID 0x7f1028622700) from PID 0; stack trace: ***
[2m[36m(pid=46932)[0m     @     0x7f10281fb390 (unknown)
[2m[36m(pid=46932)[0m     @     0x7ee1280cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46932)[0m     @     0x7ee1277f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46932)[0m     @     0x7ee1277fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46932)[0m     @     0x7ee1277fbad3 at::TensorIterator::for_each()
[2m[36m(pid=46932)[0m     @     0x7ee1277fbd91 at::TensorIterator::for_each()
[2m[36m(pid=46932)[0m     @     0x7ee1280deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46932)[0m     @     0x7ee128101c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46932)[0m     @     0x7ee1275a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46932)[0m     @     0x7ee1275a1388 at::native::copy_impl()
[2m[36m(pid=46932)[0m     @     0x7ee1275a35a4 at::native::copy_()
[2m[36m(pid=46952)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46952)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46952)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46952)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46952)[0m *** SIGSEGV (@0x0) received by PID 46952 (TID 0x7f3384e59700) from PID 0; stack trace: ***
[2m[36m(pid=46952)[0m     @     0x7f3384a32390 (unknown)
[2m[36m(pid=46952)[0m     @     0x7f0484774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46952)[0m     @     0x7f0483e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46952)[0m     @     0x7f0483ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46952)[0m     @     0x7f0483ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=46952)[0m     @     0x7f0483ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=46952)[0m     @     0x7f0484785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46952)[0m     @     0x7f04847a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46952)[0m     @     0x7f0483c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46952)[0m     @     0x7f0483c48388 at::native::copy_impl()
[2m[36m(pid=46952)[0m     @     0x7f0483c4a5a4 at::native::copy_()
[2m[36m(pid=46952)[0m     @     0x7f04843354f5 at::Tensor::copy_()
[2m[36m(pid=46952)[0m     @     0x7f04868088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46915)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46915)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46915)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46915)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46915)[0m *** SIGSEGV (@0x0) received by PID 46915 (TID 0x7f58bec80700) from PID 0; stack trace: ***
[2m[36m(pid=46915)[0m     @     0x7f58be859390 (unknown)
[2m[36m(pid=46915)[0m     @     0x7f29be70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46915)[0m     @     0x7f29bde357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46915)[0m     @     0x7f29bde388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46915)[0m     @     0x7f29bde38ad3 at::TensorIterator::for_each()
[2m[36m(pid=46915)[0m     @     0x7f29bde38d91 at::TensorIterator::for_each()
[2m[36m(pid=46915)[0m     @     0x7f29be71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46915)[0m     @     0x7f29be73ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46942)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46942)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46942)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46942)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46942)[0m *** SIGSEGV (@0x0) received by PID 46942 (TID 0x7f71df2b0700) from PID 0; stack trace: ***
[2m[36m(pid=46942)[0m     @     0x7f71dee89390 (unknown)
[2m[36m(pid=46942)[0m     @     0x7f42dee26f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46942)[0m     @     0x7f42de5517db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46942)[0m     @     0x7f42de5548f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46942)[0m     @     0x7f42de554ad3 at::TensorIterator::for_each()
[2m[36m(pid=46942)[0m     @     0x7f42de554d91 at::TensorIterator::for_each()
[2m[36m(pid=46942)[0m     @     0x7f42dee37b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46942)[0m     @     0x7f42dee5ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46942)[0m     @     0x7f42de2fca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46942)[0m     @     0x7f42de2fa388 at::native::copy_impl()
[2m[36m(pid=46942)[0m     @     0x7f42de2fc5a4 at::native::copy_()
[2m[36m(pid=46914)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46914)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46914)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46914)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46914)[0m *** SIGSEGV (@0x0) received by PID 46914 (TID 0x7f248dec7700) from PID 0; stack trace: ***
[2m[36m(pid=46914)[0m     @     0x7f248daa0390 (unknown)
[2m[36m(pid=46914)[0m     @     0x7ef58da0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46914)[0m     @     0x7ef58d1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46914)[0m     @     0x7ef58d1388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46914)[0m     @     0x7ef58d138ad3 at::TensorIterator::for_each()
[2m[36m(pid=46914)[0m     @     0x7ef58d138d91 at::TensorIterator::for_each()
[2m[36m(pid=46914)[0m     @     0x7ef58da1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46914)[0m     @     0x7ef58da3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46914)[0m     @     0x7ef58cee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46914)[0m     @     0x7ef58cede388 at::native::copy_impl()
[2m[36m(pid=46914)[0m     @     0x7ef58cee05a4 at::native::copy_()
[2m[36m(pid=46896)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46896)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46896)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46896)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46896)[0m *** SIGSEGV (@0x0) received by PID 46896 (TID 0x7f384bca0700) from PID 0; stack trace: ***
[2m[36m(pid=46896)[0m     @     0x7f384b879390 (unknown)
[2m[36m(pid=46896)[0m     @     0x7f094b751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46896)[0m     @     0x7f094ae7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46896)[0m     @     0x7f094ae7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46923)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46923)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46923)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46923)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46923)[0m *** SIGSEGV (@0x0) received by PID 46923 (TID 0x7fd8914e1700) from PID 0; stack trace: ***
[2m[36m(pid=46923)[0m     @     0x7fd8910ba390 (unknown)
[2m[36m(pid=46923)[0m     @     0x7fa991048f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46923)[0m     @     0x7fa9907737db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46938)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46938)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46938)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46938)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46938)[0m *** SIGSEGV (@0x0) received by PID 46938 (TID 0x7ffb2cf2e700) from PID 0; stack trace: ***
[2m[36m(pid=46938)[0m     @     0x7ffb2cb07390 (unknown)
[2m[36m(pid=46938)[0m     @     0x7fcc2c9e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46938)[0m     @     0x7fcc2c1137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46921)[0m     @     0x7f48a9868ad3 at::TensorIterator::for_each()
[2m[36m(pid=46921)[0m     @     0x7f48a9868d91 at::TensorIterator::for_each()
[2m[36m(pid=46921)[0m     @     0x7f48aa14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46921)[0m     @     0x7f48aa16ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46921)[0m     @     0x7f48a9610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46921)[0m     @     0x7f48a960e388 at::native::copy_impl()
[2m[36m(pid=46921)[0m     @     0x7f48a96105a4 at::native::copy_()
[2m[36m(pid=46948)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46948)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46948)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46948)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46948)[0m *** SIGSEGV (@0x0) received by PID 46948 (TID 0x7f662363e700) from PID 0; stack trace: ***
[2m[36m(pid=46948)[0m     @     0x7f6623217390 (unknown)
[2m[36m(pid=46948)[0m     @     0x7f3722c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46948)[0m     @     0x7f37223407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46948)[0m     @     0x7f37223438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46970)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46970)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46970)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46970)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46970)[0m *** SIGSEGV (@0x0) received by PID 46970 (TID 0x7fc2b4154700) from PID 0; stack trace: ***
[2m[36m(pid=46970)[0m     @     0x7fc2b3d2d390 (unknown)
[2m[36m(pid=46970)[0m     @     0x7f93b3900f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46970)[0m     @     0x7f93b302b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46853)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46853)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46853)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46853)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46853)[0m *** SIGSEGV (@0x0) received by PID 46853 (TID 0x7fb76f911700) from PID 0; stack trace: ***
[2m[36m(pid=46853)[0m     @     0x7fb76f4ea390 (unknown)
[2m[36m(pid=46853)[0m     @     0x7f886f48ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46871)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46871)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46871)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46871)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46871)[0m *** SIGSEGV (@0x0) received by PID 46871 (TID 0x7fd4a7251700) from PID 0; stack trace: ***
[2m[36m(pid=46885)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46885)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46885)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46885)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46885)[0m *** SIGSEGV (@0x0) received by PID 46885 (TID 0x7fb1826c4700) from PID 0; stack trace: ***
[2m[36m(pid=46852)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46852)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46852)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46852)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46852)[0m *** SIGSEGV (@0x0) received by PID 46852 (TID 0x7fa415c9d700) from PID 0; stack trace: ***
[2m[36m(pid=46852)[0m     @     0x7fa415876390 (unknown)
[2m[36m(pid=46852)[0m     @     0x7f75157f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46852)[0m     @     0x7f7514f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46852)[0m     @     0x7f7514f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46858)[0m     @     0x7f5148aa5ad3 at::TensorIterator::for_each()
[2m[36m(pid=46858)[0m     @     0x7f5148aa5d91 at::TensorIterator::for_each()
[2m[36m(pid=46858)[0m     @     0x7f5149388b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46858)[0m     @     0x7f51493abc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46858)[0m     @     0x7f514884da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46858)[0m     @     0x7f514884b388 at::native::copy_impl()
[2m[36m(pid=46850)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46850)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46850)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46850)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46850)[0m *** SIGSEGV (@0x0) received by PID 46850 (TID 0x7fc256d2b700) from PID 0; stack trace: ***
[2m[36m(pid=46850)[0m     @     0x7fc256904390 (unknown)
[2m[36m(pid=46850)[0m     @     0x7f9356897f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46850)[0m     @     0x7f9355fc27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46850)[0m     @     0x7f9355fc58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46854)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46854)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46854)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46854)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46854)[0m *** SIGSEGV (@0x0) received by PID 46854 (TID 0x7fb01a03e700) from PID 0; stack trace: ***
[2m[36m(pid=46854)[0m     @     0x7fb019c17390 (unknown)
[2m[36m(pid=46854)[0m     @     0x7f8119b9ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46854)[0m     @     0x7f81192ca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46929)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46929)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46929)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46929)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46929)[0m *** SIGSEGV (@0x0) received by PID 46929 (TID 0x7fddc51a8700) from PID 0; stack trace: ***
[2m[36m(pid=46929)[0m     @     0x7fddc4d81390 (unknown)
[2m[36m(pid=46929)[0m     @     0x7faec4c74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46929)[0m     @     0x7faec439f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46847)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46847)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46847)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46847)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46847)[0m *** SIGSEGV (@0x0) received by PID 46847 (TID 0x7f09157cb700) from PID 0; stack trace: ***
[2m[36m(pid=46847)[0m     @     0x7f09153a4390 (unknown)
[2m[36m(pid=46847)[0m     @     0x7eda1533af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46847)[0m     @     0x7eda14a657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46847)[0m     @     0x7eda14a688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46849)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46849)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46849)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46849)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46849)[0m *** SIGSEGV (@0x0) received by PID 46849 (TID 0x7fe40fa25700) from PID 0; stack trace: ***
[2m[36m(pid=46849)[0m     @     0x7fe40f5fe390 (unknown)
[2m[36m(pid=46849)[0m     @     0x7fb50f58df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46849)[0m     @     0x7fb50ecb87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46849)[0m     @     0x7fb50ecbb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46978)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46978)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46978)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46902)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46902)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46902)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46902)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46902)[0m *** SIGSEGV (@0x0) received by PID 46902 (TID 0x7f593edc5700) from PID 0; stack trace: ***
[2m[36m(pid=46965)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46965)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46965)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46965)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46965)[0m *** SIGSEGV (@0x0) received by PID 46965 (TID 0x7f081f308700) from PID 0; stack trace: ***
[2m[36m(pid=46906)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46906)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46906)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46906)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46906)[0m *** SIGSEGV (@0x0) received by PID 46906 (TID 0x7f169d301700) from PID 0; stack trace: ***
[2m[36m(pid=46906)[0m     @     0x7f169ceda390 (unknown)
[2m[36m(pid=46906)[0m     @     0x7ee79ce77f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46906)[0m     @     0x7ee79c5a27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46906)[0m     @     0x7ee79c5a58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46899)[0m     @     0x7f26fcf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46899)[0m     @     0x7f26fcf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=46899)[0m     @     0x7f26fcf27d91 at::TensorIterator::for_each()
[2m[36m(pid=46899)[0m     @     0x7f26fd80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46899)[0m     @     0x7f26fd82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46905)[0m     @     0x7f6ee214fd91 at::TensorIterator::for_each()
[2m[36m(pid=46905)[0m     @     0x7f6ee2a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46905)[0m     @     0x7f6ee2a55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46905)[0m     @     0x7f6ee1ef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46905)[0m     @     0x7f6ee1ef5388 at::native::copy_impl()
[2m[36m(pid=46905)[0m     @     0x7f6ee1ef75a4 at::native::copy_()
[2m[36m(pid=46920)[0m     @     0x7f73dca38ad3 at::TensorIterator::for_each()
[2m[36m(pid=46920)[0m     @     0x7f73dca38d91 at::TensorIterator::for_each()
[2m[36m(pid=46920)[0m     @     0x7f73dd31bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46920)[0m     @     0x7f73dd33ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46920)[0m     @     0x7f73dc7e0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46920)[0m     @     0x7f73dc7de388 at::native::copy_impl()
[2m[36m(pid=46924)[0m     @     0x7ed3628528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46924)[0m     @     0x7ed362852ad3 at::TensorIterator::for_each()
[2m[36m(pid=46924)[0m     @     0x7ed362852d91 at::TensorIterator::for_each()
[2m[36m(pid=46924)[0m     @     0x7ed363135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46924)[0m     @     0x7ed363158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46924)[0m     @     0x7ed3625faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46917)[0m     @     0x7f2e72f46ad3 at::TensorIterator::for_each()
[2m[36m(pid=46917)[0m     @     0x7f2e72f46d91 at::TensorIterator::for_each()
[2m[36m(pid=46917)[0m     @     0x7f2e73829b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46917)[0m     @     0x7f2e7384cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46917)[0m     @     0x7f2e72ceea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46917)[0m     @     0x7f2e72cec388 at::native::copy_impl()
[2m[36m(pid=46848)[0m     @     0x7eef2c5d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46848)[0m     @     0x7eef2c5d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=46848)[0m     @     0x7eef2c5d2d91 at::TensorIterator::for_each()
[2m[36m(pid=46848)[0m     @     0x7eef2ceb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46848)[0m     @     0x7eef2ced8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46900)[0m     @     0x7f014d7fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46900)[0m     @     0x7f014d7fbad3 at::TensorIterator::for_each()
[2m[36m(pid=46900)[0m     @     0x7f014d7fbd91 at::TensorIterator::for_each()
[2m[36m(pid=46900)[0m     @     0x7f014e0deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46900)[0m     @     0x7f014e101c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46867)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46867)[0m *** SIGSEGV (@0x0) received by PID 46867 (TID 0x7f5d507be700) from PID 0; stack trace: ***
[2m[36m(pid=46867)[0m     @     0x7f5d50397390 (unknown)
[2m[36m(pid=46867)[0m     @     0x7f2e50333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46867)[0m     @     0x7f2e4fa5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46867)[0m     @     0x7f2e4fa618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46844)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46844)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46844)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46844)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46844)[0m *** SIGSEGV (@0x0) received by PID 46844 (TID 0x7fa9a8ca4700) from PID 0; stack trace: ***
[2m[36m(pid=46844)[0m     @     0x7fa9a887d390 (unknown)
[2m[36m(pid=46844)[0m     @     0x7f7aa874cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46844)[0m     @     0x7f7aa7e777db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46844)[0m     @     0x7f7aa7e7a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46855)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46855)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46855)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46855)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46855)[0m *** SIGSEGV (@0x0) received by PID 46855 (TID 0x7f4a68fea700) from PID 0; stack trace: ***
[2m[36m(pid=46855)[0m     @     0x7f4a68bc3390 (unknown)
[2m[36m(pid=46855)[0m     @     0x7f1b68b42f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46855)[0m     @     0x7f1b6826d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46855)[0m     @     0x7f1b682708f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46838)[0m     @     0x7f07182b38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46838)[0m     @     0x7f07182b3ad3 at::TensorIterator::for_each()
[2m[36m(pid=46838)[0m     @     0x7f07182b3d91 at::TensorIterator::for_each()
[2m[36m(pid=46838)[0m     @     0x7f0718b96b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46838)[0m     @     0x7f0718bb9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46838)[0m     @     0x7f071805ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46922)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46922)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46922)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46922)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46922)[0m *** SIGSEGV (@0x0) received by PID 46922 (TID 0x7fbc1dae9700) from PID 0; stack trace: ***
[2m[36m(pid=46922)[0m     @     0x7fbc1d6c2390 (unknown)
[2m[36m(pid=46922)[0m     @     0x7f8d1d674f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46922)[0m     @     0x7f8d1cd9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46922)[0m     @     0x7f8d1cda28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46963)[0m     @     0x7fc68d552ad3 at::TensorIterator::for_each()
[2m[36m(pid=46963)[0m     @     0x7fc68d552d91 at::TensorIterator::for_each()
[2m[36m(pid=46963)[0m     @     0x7fc68de35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46963)[0m     @     0x7fc68de58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46963)[0m     @     0x7fc68d2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46963)[0m     @     0x7fc68d2f8388 at::native::copy_impl()
[2m[36m(pid=46846)[0m     @     0x7f86ce1ffad3 at::TensorIterator::for_each()
[2m[36m(pid=46846)[0m     @     0x7f86ce1ffd91 at::TensorIterator::for_each()
[2m[36m(pid=46846)[0m     @     0x7f86ceae2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46846)[0m     @     0x7f86ceb05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46846)[0m     @     0x7f86cdfa7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46846)[0m     @     0x7f86cdfa5388 at::native::copy_impl()
[2m[36m(pid=46846)[0m     @     0x7f86cdfa75a4 at::native::copy_()
[2m[36m(pid=46918)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46918)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46918)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46918)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46918)[0m *** SIGSEGV (@0x0) received by PID 46918 (TID 0x7f78d609d700) from PID 0; stack trace: ***
[2m[36m(pid=46918)[0m     @     0x7f78d5c76390 (unknown)
[2m[36m(pid=46918)[0m     @     0x7f49d5a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46918)[0m     @     0x7f49d51357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46841)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46841)[0m *** SIGSEGV (@0x0) received by PID 46841 (TID 0x7f7347f62700) from PID 0; stack trace: ***
[2m[36m(pid=46841)[0m     @     0x7f7347b3b390 (unknown)
[2m[36m(pid=46841)[0m     @     0x7f4447ac8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46841)[0m     @     0x7f44471f37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46841)[0m     @     0x7f44471f68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46898)[0m     @     0x7ee0eee7fad3 at::TensorIterator::for_each()
[2m[36m(pid=46898)[0m     @     0x7ee0eee7fd91 at::TensorIterator::for_each()
[2m[36m(pid=46898)[0m     @     0x7ee0ef762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46898)[0m     @     0x7ee0ef785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46898)[0m     @     0x7ee0eec27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46898)[0m     @     0x7ee0eec25388 at::native::copy_impl()
[2m[36m(pid=46898)[0m     @     0x7ee0eec275a4 at::native::copy_()
[2m[36m(pid=46975)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46975)[0m *** SIGSEGV (@0x0) received by PID 46975 (TID 0x7fcaac4a7700) from PID 0; stack trace: ***
[2m[36m(pid=46975)[0m     @     0x7fcaac080390 (unknown)
[2m[36m(pid=46975)[0m     @     0x7f9bac014f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46975)[0m     @     0x7f9bab73f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46975)[0m     @     0x7f9bab7428f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46889)[0m     @     0x7f29a19a7ad3 at::TensorIterator::for_each()
[2m[36m(pid=46889)[0m     @     0x7f29a19a7d91 at::TensorIterator::for_each()
[2m[36m(pid=46889)[0m     @     0x7f29a228ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46889)[0m     @     0x7f29a22adc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46889)[0m     @     0x7f29a174fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46889)[0m     @     0x7f29a174d388 at::native::copy_impl()
[2m[36m(pid=46904)[0m     @     0x7f4dc3d3cad3 at::TensorIterator::for_each()
[2m[36m(pid=46904)[0m     @     0x7f4dc3d3cd91 at::TensorIterator::for_each()
[2m[36m(pid=46904)[0m     @     0x7f4dc461fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46904)[0m     @     0x7f4dc4642c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46904)[0m     @     0x7f4dc3ae4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46904)[0m     @     0x7f4dc3ae2388 at::native::copy_impl()
[2m[36m(pid=46961)[0m     @     0x7f1325868d91 at::TensorIterator::for_each()
[2m[36m(pid=46961)[0m     @     0x7f132614bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46961)[0m     @     0x7f132616ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46961)[0m     @     0x7f1325610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46961)[0m     @     0x7f132560e388 at::native::copy_impl()
[2m[36m(pid=46961)[0m     @     0x7f13256105a4 at::native::copy_()
[2m[36m(pid=46859)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46859)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46859)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46859)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46859)[0m *** SIGSEGV (@0x0) received by PID 46859 (TID 0x7f6bab36a700) from PID 0; stack trace: ***
[2m[36m(pid=46859)[0m     @     0x7f6baaf43390 (unknown)
[2m[36m(pid=46859)[0m     @     0x7f3caaed3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46859)[0m     @     0x7f3caa5fe7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46859)[0m     @     0x7f3caa6018f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46859)[0m     @     0x7f3caa601ad3 at::TensorIterator::for_each()
[2m[36m(pid=46859)[0m     @     0x7f3caa601d91 at::TensorIterator::for_each()
[2m[36m(pid=46840)[0m     @     0x7fc2fbe1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46840)[0m     @     0x7fc2fbe3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46840)[0m     @     0x7fc2fb2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46840)[0m     @     0x7fc2fb2df388 at::native::copy_impl()
[2m[36m(pid=46840)[0m     @     0x7fc2fb2e15a4 at::native::copy_()
[2m[36m(pid=46840)[0m     @     0x7fc2fb9cc4f5 at::Tensor::copy_()
[2m[36m(pid=46840)[0m     @     0x7fc2fde9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46840)[0m     @     0x7fc2fb9cc4f5 at::Tensor::copy_()
[2m[36m(pid=46840)[0m     @     0x7fc301a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46840)[0m     @     0x555e572ecfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46840)[0m     @     0x555e57247b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46894)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46894)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46894)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46894)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46894)[0m *** SIGSEGV (@0x0) received by PID 46894 (TID 0x7f3dc1e3d700) from PID 0; stack trace: ***
[2m[36m(pid=46894)[0m     @     0x7f3dc1a16390 (unknown)
[2m[36m(pid=46894)[0m     @     0x7f0ec17f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46894)[0m     @     0x7f0ec0f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46894)[0m     @     0x7f0ec0f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46951)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46951)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46951)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46951)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46951)[0m *** SIGSEGV (@0x0) received by PID 46951 (TID 0x7fe00cfc7700) from PID 0; stack trace: ***
[2m[36m(pid=46951)[0m     @     0x7fe00cba0390 (unknown)
[2m[36m(pid=46951)[0m     @     0x7fb10cb3bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46951)[0m     @     0x7fb10c2667db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46951)[0m     @     0x7fb10c2698f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46927)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46927)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46927)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46927)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46927)[0m *** SIGSEGV (@0x0) received by PID 46927 (TID 0x7f7612021700) from PID 0; stack trace: ***
[2m[36m(pid=46927)[0m     @     0x7f7611bfa390 (unknown)
[2m[36m(pid=46927)[0m     @     0x7f4711b9ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46927)[0m     @     0x7f47112ca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46927)[0m     @     0x7f47112cd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46940)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46940)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46940)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46940)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46940)[0m *** SIGSEGV (@0x0) received by PID 46940 (TID 0x7fe279071700) from PID 0; stack trace: ***
[2m[36m(pid=46861)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46861)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46861)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46861)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46861)[0m *** SIGSEGV (@0x0) received by PID 46861 (TID 0x7fcef9824700) from PID 0; stack trace: ***
[2m[36m(pid=46861)[0m     @     0x7fcef93fd390 (unknown)
[2m[36m(pid=46861)[0m     @     0x7f9ff939ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46861)[0m     @     0x7f9ff8aca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46861)[0m     @     0x7f9ff8acd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46925)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46925)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46925)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46925)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46925)[0m *** SIGSEGV (@0x0) received by PID 46925 (TID 0x7f85457ec700) from PID 0; stack trace: ***
[2m[36m(pid=46925)[0m     @     0x7f85453c5390 (unknown)
[2m[36m(pid=46925)[0m     @     0x7f564535ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46925)[0m     @     0x7f5644a8a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46925)[0m     @     0x7f5644a8d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46856)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46856)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46856)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46856)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46856)[0m *** SIGSEGV (@0x0) received by PID 46856 (TID 0x7f09e845b700) from PID 0; stack trace: ***
[2m[36m(pid=46856)[0m     @     0x7f09e8034390 (unknown)
[2m[36m(pid=46856)[0m     @     0x7edae7e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46856)[0m     @     0x7edae75367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46856)[0m     @     0x7edae75398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46856)[0m     @     0x7edae7539ad3 at::TensorIterator::for_each()
[2m[36m(pid=46864)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46864)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46864)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46864)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46864)[0m *** SIGSEGV (@0x0) received by PID 46864 (TID 0x7f6c409ec700) from PID 0; stack trace: ***
[2m[36m(pid=46864)[0m     @     0x7f6c405c5390 (unknown)
[2m[36m(pid=46864)[0m     @     0x7f3d40536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46864)[0m     @     0x7f3d3fc617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46864)[0m     @     0x7f3d3fc648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46864)[0m     @     0x7f3d3fc64ad3 at::TensorIterator::for_each()
[2m[36m(pid=46857)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46857)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46857)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46857)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46857)[0m *** SIGSEGV (@0x0) received by PID 46857 (TID 0x7f50f7e5c700) from PID 0; stack trace: ***
[2m[36m(pid=46857)[0m     @     0x7f50f7a35390 (unknown)
[2m[36m(pid=46857)[0m     @     0x7f21f78def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46857)[0m     @     0x7f21f70097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46857)[0m     @     0x7f21f700c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46857)[0m     @     0x7f21f700cad3 at::TensorIterator::for_each()
[2m[36m(pid=46857)[0m     @     0x7f21f700cd91 at::TensorIterator::for_each()
[2m[36m(pid=46868)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46868)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46868)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46868)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46868)[0m *** SIGSEGV (@0x0) received by PID 46868 (TID 0x7f3f1118c700) from PID 0; stack trace: ***
[2m[36m(pid=46868)[0m     @     0x7f3f10d65390 (unknown)
[2m[36m(pid=46868)[0m     @     0x7f1010c1ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46868)[0m     @     0x7f101034a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46868)[0m     @     0x7f101034d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46887)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46887)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46887)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46887)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46887)[0m *** SIGSEGV (@0x0) received by PID 46887 (TID 0x7f250e59c700) from PID 0; stack trace: ***
[2m[36m(pid=46913)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46913)[0m *** SIGSEGV (@0x0) received by PID 46913 (TID 0x7fa65e622700) from PID 0; stack trace: ***
[2m[36m(pid=46913)[0m     @     0x7fa65e1fb390 (unknown)
[2m[36m(pid=46913)[0m     @     0x7f775e13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46913)[0m     @     0x7f775d8657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46913)[0m     @     0x7f775d8688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46913)[0m     @     0x7f775d868ad3 at::TensorIterator::for_each()
[2m[36m(pid=46842)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46842)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46842)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46842)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46842)[0m *** SIGSEGV (@0x0) received by PID 46842 (TID 0x7f4f542b6700) from PID 0; stack trace: ***
[2m[36m(pid=46842)[0m     @     0x7f4f53e8f390 (unknown)
[2m[36m(pid=46842)[0m     @     0x7f2053e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46842)[0m     @     0x7f20535367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46956)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46956)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46956)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46956)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46956)[0m *** SIGSEGV (@0x0) received by PID 46956 (TID 0x7f0b124d2700) from PID 0; stack trace: ***
[2m[36m(pid=46956)[0m     @     0x7f0b120ab390 (unknown)
[2m[36m(pid=46837)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46837)[0m *** SIGSEGV (@0x0) received by PID 46837 (TID 0x7f3101cbc700) from PID 0; stack trace: ***
[2m[36m(pid=46837)[0m     @     0x7f3101895390 (unknown)
[2m[36m(pid=46837)[0m     @     0x7f02017f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46837)[0m     @     0x7f0200f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46837)[0m     @     0x7f0200f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46837)[0m     @     0x7f0200f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=46892)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46892)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46892)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46892)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46892)[0m *** SIGSEGV (@0x0) received by PID 46892 (TID 0x7f5f7f92f700) from PID 0; stack trace: ***
[2m[36m(pid=46892)[0m     @     0x7f5f7f508390 (unknown)
[2m[36m(pid=46892)[0m     @     0x7f307f48ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46892)[0m     @     0x7f307ebba7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46892)[0m     @     0x7f307ebbd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46958)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46958)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46958)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46958)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46958)[0m *** SIGSEGV (@0x0) received by PID 46958 (TID 0x7ff5d2738700) from PID 0; stack trace: ***
[2m[36m(pid=46958)[0m     @     0x7ff5d2311390 (unknown)
[2m[36m(pid=46958)[0m     @     0x7fc6d22b9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46958)[0m     @     0x7fc6d19e47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46839)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=46839)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=46839)[0m *** Aborted at 1604570995 (unix time) try "date -d @1604570995" if you are using GNU date ***
[2m[36m(pid=46839)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46839)[0m *** SIGSEGV (@0x0) received by PID 46839 (TID 0x7f2d72705700) from PID 0; stack trace: ***
[2m[36m(pid=46839)[0m     @     0x7f2d722de390 (unknown)
[2m[36m(pid=46839)[0m     @     0x7efe7226cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46839)[0m     @     0x7efe719977db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46839)[0m     @     0x7efe7199a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46836)[0m     @     0x7f69bf1ca390 (unknown)
[2m[36m(pid=46836)[0m     @     0x7f3abf124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46836)[0m     @     0x7f3abe84f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46836)[0m     @     0x7f3abe8528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46836)[0m     @     0x7f3abe852ad3 at::TensorIterator::for_each()
[2m[36m(pid=46836)[0m     @     0x7f3abe852d91 at::TensorIterator::for_each()
[2m[36m(pid=46869)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46869)[0m *** SIGSEGV (@0x0) received by PID 46869 (TID 0x7f7412b8c700) from PID 0; stack trace: ***
[2m[36m(pid=46869)[0m     @     0x7f7412765390 (unknown)
[2m[36m(pid=46869)[0m     @     0x7f451257cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46869)[0m     @     0x7f4511ca77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46869)[0m     @     0x7f4511caa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46869)[0m     @     0x7f4511caaad3 at::TensorIterator::for_each()
[2m[36m(pid=46869)[0m     @     0x7f4511caad91 at::TensorIterator::for_each()
[2m[36m(pid=46869)[0m     @     0x7f451258db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46845)[0m     @     0x7f4c2b0f07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46845)[0m     @     0x7f4c2b0f38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46845)[0m     @     0x7f4c2b0f3ad3 at::TensorIterator::for_each()
[2m[36m(pid=46845)[0m     @     0x7f4c2b0f3d91 at::TensorIterator::for_each()
[2m[36m(pid=46845)[0m     @     0x7f4c2b9d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46845)[0m     @     0x7f4c2b9f9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46884)[0m     @     0x7f1c25a4c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46884)[0m     @     0x7f1c25a4cad3 at::TensorIterator::for_each()
[2m[36m(pid=46884)[0m     @     0x7f1c25a4cd91 at::TensorIterator::for_each()
[2m[36m(pid=46884)[0m     @     0x7f1c2632fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46884)[0m     @     0x7f1c26352c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46884)[0m     @     0x7f1c257f4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46884)[0m     @     0x7f1c257f2388 at::native::copy_impl()
[2m[36m(pid=46873)[0m     @     0x7f3cc56f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46873)[0m     @     0x7f3cc4e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46873)[0m     @     0x7f3cc4e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46873)[0m     @     0x7f3cc4e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=46873)[0m     @     0x7f3cc4e22d91 at::TensorIterator::for_each()
[2m[36m(pid=46873)[0m     @     0x7f3cc5705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46873)[0m     @     0x7f3cc5728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46860)[0m     @     0x7ece363407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46860)[0m     @     0x7ece363438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46860)[0m     @     0x7ece36343ad3 at::TensorIterator::for_each()
[2m[36m(pid=46860)[0m     @     0x7ece36343d91 at::TensorIterator::for_each()
[2m[36m(pid=46860)[0m     @     0x7ece36c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46860)[0m     @     0x7ece36c49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46972)[0m     @     0x7f0c94f29390 (unknown)
[2m[36m(pid=46972)[0m     @     0x7edd94ea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46972)[0m     @     0x7edd945cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46972)[0m     @     0x7edd945d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46972)[0m     @     0x7edd945d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=46972)[0m     @     0x7edd945d2d91 at::TensorIterator::for_each()
[2m[36m(pid=46972)[0m     @     0x7edd94eb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46972)[0m     @     0x7edd94ed8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46967)[0m     @     0x7ee5cafc9388 at::native::copy_impl()
[2m[36m(pid=46967)[0m     @     0x7ee5cafcb5a4 at::native::copy_()
[2m[36m(pid=46967)[0m     @     0x7ee5cb6b64f5 at::Tensor::copy_()
[2m[36m(pid=46967)[0m     @     0x7ee5cdb898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46967)[0m     @     0x7ee5cb6b64f5 at::Tensor::copy_()
[2m[36m(pid=46967)[0m     @     0x7ee5d176179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46967)[0m     @     0x55ddab41cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46967)[0m     @     0x55ddab377b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46967)[0m     @     0x55ddab402baf _PyEval_EvalCodeWithName
[2m[36m(pid=46967)[0m     @     0x55ddab403a20 method_vectorcall
[2m[36m(pid=46967)[0m     @     0x55ddab377bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46890)[0m     @     0x7f7a1e9c05a4 at::native::copy_()
[2m[36m(pid=46890)[0m     @     0x7f7a1f0ab4f5 at::Tensor::copy_()
[2m[36m(pid=46890)[0m     @     0x7f7a2157e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46890)[0m     @     0x7f7a1f0ab4f5 at::Tensor::copy_()
[2m[36m(pid=46890)[0m     @     0x7f7a2515679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46890)[0m     @     0x55af5d0e5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46890)[0m     @     0x55af5d040b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46890)[0m     @     0x55af5d0cbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46890)[0m     @     0x55af5d0cca20 method_vectorcall
[2m[36m(pid=46890)[0m     @     0x55af5d040bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46890)[0m     @     0x55af5d0cbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46890)[0m     @     0x55af5d0cc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46890)[0m     @     0x55af5d041689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46890)[0m     @     0x55af5d0cbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46890)[0m     @     0x55af5d0cc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46890)[0m     @     0x55af5d041689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46890)[0m     @     0x55af5d0cbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46890)[0m     @     0x55af5d0cc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46890)[0m     @     0x55af5d041689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46890)[0m     @     0x55af5d0cbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46890)[0m     @     0x55af5d0cc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46890)[0m     @     0x55af5d041689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46943)[0m     @     0x7f293f40b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46943)[0m     @     0x7f293cf384f5 at::Tensor::copy_()
[2m[36m(pid=46943)[0m     @     0x7f2942fe379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46943)[0m     @     0x56095527afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46943)[0m     @     0x5609551d5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46943)[0m     @     0x560955260baf _PyEval_EvalCodeWithName
[2m[36m(pid=46943)[0m     @     0x560955261a20 method_vectorcall
[2m[36m(pid=46943)[0m     @     0x5609551d5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46943)[0m     @     0x560955260baf _PyEval_EvalCodeWithName
[2m[36m(pid=46943)[0m     @     0x560955261643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46943)[0m     @     0x5609551d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46943)[0m     @     0x560955260baf _PyEval_EvalCodeWithName
[2m[36m(pid=46943)[0m     @     0x560955261643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46943)[0m     @     0x5609551d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46943)[0m     @     0x560955260baf _PyEval_EvalCodeWithName
[2m[36m(pid=46943)[0m     @     0x560955261643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46943)[0m     @     0x5609551d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46943)[0m     @     0x560955260baf _PyEval_EvalCodeWithName
[2m[36m(pid=46943)[0m     @     0x560955261643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46943)[0m     @     0x5609551d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46945)[0m     @     0x7f76a2e668de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46945)[0m     @     0x7f76a09934f5 at::Tensor::copy_()
[2m[36m(pid=46945)[0m     @     0x7f76a6a3e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46945)[0m     @     0x55cf97f2afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46945)[0m     @     0x55cf97e85b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46945)[0m     @     0x55cf97f10baf _PyEval_EvalCodeWithName
[2m[36m(pid=46945)[0m     @     0x55cf97f11a20 method_vectorcall
[2m[36m(pid=46945)[0m     @     0x55cf97e85bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46945)[0m     @     0x55cf97f10baf _PyEval_EvalCodeWithName
[2m[36m(pid=46945)[0m     @     0x55cf97f11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46945)[0m     @     0x55cf97e86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46945)[0m     @     0x55cf97f10baf _PyEval_EvalCodeWithName
[2m[36m(pid=46945)[0m     @     0x55cf97f11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46945)[0m     @     0x55cf97e86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46945)[0m     @     0x55cf97f10baf _PyEval_EvalCodeWithName
[2m[36m(pid=46945)[0m     @     0x55cf97f11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46945)[0m     @     0x55cf97e86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46945)[0m     @     0x55cf97f10baf _PyEval_EvalCodeWithName
[2m[36m(pid=46945)[0m     @     0x55cf97f11643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46945)[0m     @     0x55cf97e86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46947)[0m     @     0x7ee926b82388 at::native::copy_impl()
[2m[36m(pid=46947)[0m     @     0x7ee926b845a4 at::native::copy_()
[2m[36m(pid=46947)[0m     @     0x7ee92726f4f5 at::Tensor::copy_()
[2m[36m(pid=46947)[0m     @     0x7ee9297428de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46947)[0m     @     0x7ee92726f4f5 at::Tensor::copy_()
[2m[36m(pid=46947)[0m     @     0x7ee92d31a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46947)[0m     @     0x563a61f9afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46947)[0m     @     0x563a61ef5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46947)[0m     @     0x563a61f80baf _PyEval_EvalCodeWithName
[2m[36m(pid=46947)[0m     @     0x563a61f81a20 method_vectorcall
[2m[36m(pid=46947)[0m     @     0x563a61ef5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46947)[0m     @     0x563a61f80baf _PyEval_EvalCodeWithName
[2m[36m(pid=46954)[0m     @     0x7f8c1833d4f5 at::Tensor::copy_()
[2m[36m(pid=46954)[0m     @     0x7f8c1e3e879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46954)[0m     @     0x556b4a06ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46954)[0m     @     0x556b49fcab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46954)[0m     @     0x556b4a055baf _PyEval_EvalCodeWithName
[2m[36m(pid=46954)[0m     @     0x556b4a056a20 method_vectorcall
[2m[36m(pid=46954)[0m     @     0x556b49fcabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46954)[0m     @     0x556b4a055baf _PyEval_EvalCodeWithName
[2m[36m(pid=46954)[0m     @     0x556b4a056643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46954)[0m     @     0x556b49fcb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46954)[0m     @     0x556b4a055baf _PyEval_EvalCodeWithName
[2m[36m(pid=46954)[0m     @     0x556b4a056643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46954)[0m     @     0x556b49fcb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46954)[0m     @     0x556b4a055baf _PyEval_EvalCodeWithName
[2m[36m(pid=46954)[0m     @     0x556b4a056643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46954)[0m     @     0x556b49fcb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46954)[0m     @     0x556b4a055baf _PyEval_EvalCodeWithName
[2m[36m(pid=46954)[0m     @     0x556b4a056643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46954)[0m     @     0x556b49fcb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46932)[0m     @     0x7ee127c8e4f5 at::Tensor::copy_()
[2m[36m(pid=46932)[0m     @     0x7ee12a1618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46932)[0m     @     0x7ee127c8e4f5 at::Tensor::copy_()
[2m[36m(pid=46932)[0m     @     0x7ee12dd3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46932)[0m     @     0x55eb61973fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46932)[0m     @     0x55eb618ceb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46932)[0m     @     0x55eb61959baf _PyEval_EvalCodeWithName
[2m[36m(pid=46932)[0m     @     0x55eb6195aa20 method_vectorcall
[2m[36m(pid=46932)[0m     @     0x55eb618cebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46932)[0m     @     0x55eb61959baf _PyEval_EvalCodeWithName
[2m[36m(pid=46932)[0m     @     0x55eb6195a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46932)[0m     @     0x55eb618cf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46932)[0m     @     0x55eb61959baf _PyEval_EvalCodeWithName
[2m[36m(pid=46932)[0m     @     0x55eb6195a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46932)[0m     @     0x55eb618cf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46932)[0m     @     0x55eb61959baf _PyEval_EvalCodeWithName
[2m[36m(pid=46932)[0m     @     0x55eb6195a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46932)[0m     @     0x55eb618cf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46932)[0m     @     0x55eb61959baf _PyEval_EvalCodeWithName
[2m[36m(pid=46932)[0m     @     0x55eb6195a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46932)[0m     @     0x55eb618cf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46952)[0m     @     0x7f04843354f5 at::Tensor::copy_()
[2m[36m(pid=46952)[0m     @     0x7f048a3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46952)[0m     @     0x55695c79dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46952)[0m     @     0x55695c6f8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46952)[0m     @     0x55695c783baf _PyEval_EvalCodeWithName
[2m[36m(pid=46952)[0m     @     0x55695c784a20 method_vectorcall
[2m[36m(pid=46952)[0m     @     0x55695c6f8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46952)[0m     @     0x55695c783baf _PyEval_EvalCodeWithName
[2m[36m(pid=46952)[0m     @     0x55695c784643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46952)[0m     @     0x55695c6f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46952)[0m     @     0x55695c783baf _PyEval_EvalCodeWithName
[2m[36m(pid=46952)[0m     @     0x55695c784643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46952)[0m     @     0x55695c6f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46952)[0m     @     0x55695c783baf _PyEval_EvalCodeWithName
[2m[36m(pid=46952)[0m     @     0x55695c784643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46952)[0m     @     0x55695c6f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46952)[0m     @     0x55695c783baf _PyEval_EvalCodeWithName
[2m[36m(pid=46952)[0m     @     0x55695c784643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46952)[0m     @     0x55695c6f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46915)[0m     @     0x7f29bdbe0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46915)[0m     @     0x7f29bdbde388 at::native::copy_impl()
[2m[36m(pid=46915)[0m     @     0x7f29bdbe05a4 at::native::copy_()
[2m[36m(pid=46915)[0m     @     0x7f29be2cb4f5 at::Tensor::copy_()
[2m[36m(pid=46915)[0m     @     0x7f29c079e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46915)[0m     @     0x7f29be2cb4f5 at::Tensor::copy_()
[2m[36m(pid=46915)[0m     @     0x7f29c437679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46915)[0m     @     0x564be111dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46915)[0m     @     0x564be1078b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46915)[0m     @     0x564be1103baf _PyEval_EvalCodeWithName
[2m[36m(pid=46915)[0m     @     0x564be1104a20 method_vectorcall
[2m[36m(pid=46915)[0m     @     0x564be1078bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46942)[0m     @     0x7f42de9e74f5 at::Tensor::copy_()
[2m[36m(pid=46942)[0m     @     0x7f42e0eba8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46942)[0m     @     0x7f42de9e74f5 at::Tensor::copy_()
[2m[36m(pid=46942)[0m     @     0x7f42e4a9279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46942)[0m     @     0x563889276fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46942)[0m     @     0x5638891d1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46942)[0m     @     0x56388925cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46942)[0m     @     0x56388925da20 method_vectorcall
[2m[36m(pid=46942)[0m     @     0x5638891d1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46942)[0m     @     0x56388925cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46942)[0m     @     0x56388925d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46942)[0m     @     0x5638891d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46942)[0m     @     0x56388925cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46942)[0m     @     0x56388925d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46942)[0m     @     0x5638891d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46942)[0m     @     0x56388925cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46942)[0m     @     0x56388925d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46942)[0m     @     0x5638891d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46942)[0m     @     0x56388925cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46942)[0m     @     0x56388925d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46942)[0m     @     0x5638891d2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46914)[0m     @     0x7ef58d5cb4f5 at::Tensor::copy_()
[2m[36m(pid=46914)[0m     @     0x7ef58fa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46914)[0m     @     0x7ef58d5cb4f5 at::Tensor::copy_()
[2m[36m(pid=46914)[0m     @     0x7ef59367679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46914)[0m     @     0x5569d7c46fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46914)[0m     @     0x5569d7ba1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46914)[0m     @     0x5569d7c2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46914)[0m     @     0x5569d7c2da20 method_vectorcall
[2m[36m(pid=46914)[0m     @     0x5569d7ba1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46914)[0m     @     0x5569d7c2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46914)[0m     @     0x5569d7c2d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46914)[0m     @     0x5569d7ba2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46914)[0m     @     0x5569d7c2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46914)[0m     @     0x5569d7c2d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46914)[0m     @     0x5569d7ba2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46914)[0m     @     0x5569d7c2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46914)[0m     @     0x5569d7c2d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46914)[0m     @     0x5569d7ba2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46914)[0m     @     0x5569d7c2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46914)[0m     @     0x5569d7c2d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46914)[0m     @     0x5569d7ba2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46896)[0m     @     0x7f094ae7fad3 at::TensorIterator::for_each()
[2m[36m(pid=46896)[0m     @     0x7f094ae7fd91 at::TensorIterator::for_each()
[2m[36m(pid=46896)[0m     @     0x7f094b762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46896)[0m     @     0x7f094b785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46896)[0m     @     0x7f094ac27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46896)[0m     @     0x7f094ac25388 at::native::copy_impl()
[2m[36m(pid=46896)[0m     @     0x7f094ac275a4 at::native::copy_()
[2m[36m(pid=46923)[0m     @     0x7fa9907768f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46923)[0m     @     0x7fa990776ad3 at::TensorIterator::for_each()
[2m[36m(pid=46923)[0m     @     0x7fa990776d91 at::TensorIterator::for_each()
[2m[36m(pid=46923)[0m     @     0x7fa991059b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46923)[0m     @     0x7fa99107cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46923)[0m     @     0x7fa99051ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46923)[0m     @     0x7fa99051c388 at::native::copy_impl()
[2m[36m(pid=46938)[0m     @     0x7fcc2c1168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46938)[0m     @     0x7fcc2c116ad3 at::TensorIterator::for_each()
[2m[36m(pid=46938)[0m     @     0x7fcc2c116d91 at::TensorIterator::for_each()
[2m[36m(pid=46938)[0m     @     0x7fcc2c9f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46938)[0m     @     0x7fcc2ca1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46938)[0m     @     0x7fcc2bebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46938)[0m     @     0x7fcc2bebc388 at::native::copy_impl()
[2m[36m(pid=46921)[0m     @     0x7f48a9cfb4f5 at::Tensor::copy_()
[2m[36m(pid=46921)[0m     @     0x7f48ac1ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46921)[0m     @     0x7f48a9cfb4f5 at::Tensor::copy_()
[2m[36m(pid=46921)[0m     @     0x7f48afda679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46921)[0m     @     0x5582c0081fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46921)[0m     @     0x5582bffdcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46921)[0m     @     0x5582c0067baf _PyEval_EvalCodeWithName
[2m[36m(pid=46921)[0m     @     0x5582c0068a20 method_vectorcall
[2m[36m(pid=46921)[0m     @     0x5582bffdcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46921)[0m     @     0x5582c0067baf _PyEval_EvalCodeWithName
[2m[36m(pid=46921)[0m     @     0x5582c0068643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46921)[0m     @     0x5582bffdd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46921)[0m     @     0x5582c0067baf _PyEval_EvalCodeWithName
[2m[36m(pid=46921)[0m     @     0x5582c0068643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46921)[0m     @     0x5582bffdd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46921)[0m     @     0x5582c0067baf _PyEval_EvalCodeWithName
[2m[36m(pid=46921)[0m     @     0x5582c0068643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46921)[0m     @     0x5582bffdd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46921)[0m     @     0x5582c0067baf _PyEval_EvalCodeWithName
[2m[36m(pid=46921)[0m     @     0x5582c0068643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46921)[0m     @     0x5582bffdd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46948)[0m     @     0x7f3722343ad3 at::TensorIterator::for_each()
[2m[36m(pid=46948)[0m     @     0x7f3722343d91 at::TensorIterator::for_each()
[2m[36m(pid=46948)[0m     @     0x7f3722c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46948)[0m     @     0x7f3722c49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46948)[0m     @     0x7f37220eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46948)[0m     @     0x7f37220e9388 at::native::copy_impl()
[2m[36m(pid=46948)[0m     @     0x7f37220eb5a4 at::native::copy_()
[2m[36m(pid=46970)[0m     @     0x7f93b302e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46970)[0m     @     0x7f93b302ead3 at::TensorIterator::for_each()
[2m[36m(pid=46970)[0m     @     0x7f93b302ed91 at::TensorIterator::for_each()
[2m[36m(pid=46970)[0m     @     0x7f93b3911b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46970)[0m     @     0x7f93b3934c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46970)[0m     @     0x7f93b2dd6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46970)[0m     @     0x7f93b2dd4388 at::native::copy_impl()
[2m[36m(pid=46853)[0m     @     0x7f886ebba7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46853)[0m     @     0x7f886ebbd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46853)[0m     @     0x7f886ebbdad3 at::TensorIterator::for_each()
[2m[36m(pid=46853)[0m     @     0x7f886ebbdd91 at::TensorIterator::for_each()
[2m[36m(pid=46853)[0m     @     0x7f886f4a0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46853)[0m     @     0x7f886f4c3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46871)[0m     @     0x7fd4a6e2a390 (unknown)
[2m[36m(pid=46871)[0m     @     0x7fa5a6dc3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46871)[0m     @     0x7fa5a64ee7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46871)[0m     @     0x7fa5a64f18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46871)[0m     @     0x7fa5a64f1ad3 at::TensorIterator::for_each()
[2m[36m(pid=46885)[0m     @     0x7fb18229d390 (unknown)
[2m[36m(pid=46885)[0m     @     0x7f8282239f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46885)[0m     @     0x7f82819647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46885)[0m     @     0x7f82819678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46885)[0m     @     0x7f8281967ad3 at::TensorIterator::for_each()
[2m[36m(pid=46852)[0m     @     0x7f7514f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=46852)[0m     @     0x7f7514f27d91 at::TensorIterator::for_each()
[2m[36m(pid=46852)[0m     @     0x7f751580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46852)[0m     @     0x7f751582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46852)[0m     @     0x7f7514ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46852)[0m     @     0x7f7514ccd388 at::native::copy_impl()
[2m[36m(pid=46852)[0m     @     0x7f7514ccf5a4 at::native::copy_()
[2m[36m(pid=46858)[0m     @     0x7f514884d5a4 at::native::copy_()
[2m[36m(pid=46858)[0m     @     0x7f5148f384f5 at::Tensor::copy_()
[2m[36m(pid=46858)[0m     @     0x7f514b40b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46858)[0m     @     0x7f5148f384f5 at::Tensor::copy_()
[2m[36m(pid=46858)[0m     @     0x7f514efe379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46858)[0m     @     0x55a2a5d80fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46858)[0m     @     0x55a2a5cdbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46858)[0m     @     0x55a2a5d66baf _PyEval_EvalCodeWithName
[2m[36m(pid=46858)[0m     @     0x55a2a5d67a20 method_vectorcall
[2m[36m(pid=46858)[0m     @     0x55a2a5cdbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46858)[0m     @     0x55a2a5d66baf _PyEval_EvalCodeWithName
[2m[36m(pid=46858)[0m     @     0x55a2a5d67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46858)[0m     @     0x55a2a5cdc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46858)[0m     @     0x55a2a5d66baf _PyEval_EvalCodeWithName
[2m[36m(pid=46858)[0m     @     0x55a2a5d67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46858)[0m     @     0x55a2a5cdc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46858)[0m     @     0x55a2a5d66baf _PyEval_EvalCodeWithName
[2m[36m(pid=46858)[0m     @     0x55a2a5d67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46858)[0m     @     0x55a2a5cdc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46858)[0m     @     0x55a2a5d66baf _PyEval_EvalCodeWithName
[2m[36m(pid=46858)[0m     @     0x55a2a5d67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46858)[0m     @     0x55a2a5cdc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46850)[0m     @     0x7f9355fc5ad3 at::TensorIterator::for_each()
[2m[36m(pid=46850)[0m     @     0x7f9355fc5d91 at::TensorIterator::for_each()
[2m[36m(pid=46850)[0m     @     0x7f93568a8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46850)[0m     @     0x7f93568cbc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46850)[0m     @     0x7f9355d6da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46850)[0m     @     0x7f9355d6b388 at::native::copy_impl()
[2m[36m(pid=46854)[0m     @     0x7f81192cd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46854)[0m     @     0x7f81192cdad3 at::TensorIterator::for_each()
[2m[36m(pid=46854)[0m     @     0x7f81192cdd91 at::TensorIterator::for_each()
[2m[36m(pid=46854)[0m     @     0x7f8119bb0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46854)[0m     @     0x7f8119bd3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46929)[0m     @     0x7faec43a28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46929)[0m     @     0x7faec43a2ad3 at::TensorIterator::for_each()
[2m[36m(pid=46929)[0m     @     0x7faec43a2d91 at::TensorIterator::for_each()
[2m[36m(pid=46929)[0m     @     0x7faec4c85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46929)[0m     @     0x7faec4ca8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46929)[0m     @     0x7faec414aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46929)[0m     @     0x7faec4148388 at::native::copy_impl()
[2m[36m(pid=46847)[0m     @     0x7eda14a68ad3 at::TensorIterator::for_each()
[2m[36m(pid=46847)[0m     @     0x7eda14a68d91 at::TensorIterator::for_each()
[2m[36m(pid=46847)[0m     @     0x7eda1534bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46847)[0m     @     0x7eda1536ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46847)[0m     @     0x7eda14810a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46847)[0m     @     0x7eda1480e388 at::native::copy_impl()
[2m[36m(pid=46847)[0m     @     0x7eda148105a4 at::native::copy_()
[2m[36m(pid=46849)[0m     @     0x7fb50ecbbad3 at::TensorIterator::for_each()
[2m[36m(pid=46849)[0m     @     0x7fb50ecbbd91 at::TensorIterator::for_each()
[2m[36m(pid=46849)[0m     @     0x7fb50f59eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46849)[0m     @     0x7fb50f5c1c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46849)[0m     @     0x7fb50ea63a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46849)[0m     @     0x7fb50ea61388 at::native::copy_impl()
[2m[36m(pid=46849)[0m     @     0x7fb50ea635a4 at::native::copy_()
[2m[36m(pid=46978)[0m PC: @                0x0 (unknown)
[2m[36m(pid=46978)[0m *** SIGSEGV (@0x0) received by PID 46978 (TID 0x7fa3c81c7700) from PID 0; stack trace: ***
[2m[36m(pid=46978)[0m     @     0x7fa3c7da0390 (unknown)
[2m[36m(pid=46978)[0m     @     0x7f74c7d39f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46978)[0m     @     0x7f74c74647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46978)[0m     @     0x7f74c74678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46902)[0m     @     0x7f593e99e390 (unknown)
[2m[36m(pid=46902)[0m     @     0x7f2a3e93af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46902)[0m     @     0x7f2a3e0657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46902)[0m     @     0x7f2a3e0688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46902)[0m     @     0x7f2a3e068ad3 at::TensorIterator::for_each()
[2m[36m(pid=46902)[0m     @     0x7f2a3e068d91 at::TensorIterator::for_each()
[2m[36m(pid=46902)[0m     @     0x7f2a3e94bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46902)[0m     @     0x7f2a3e96ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46965)[0m     @     0x7f081eee1390 (unknown)
[2m[36m(pid=46965)[0m     @     0x7ed91ee81f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46965)[0m     @     0x7ed91e5ac7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46965)[0m     @     0x7ed91e5af8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46965)[0m     @     0x7ed91e5afad3 at::TensorIterator::for_each()
[2m[36m(pid=46965)[0m     @     0x7ed91e5afd91 at::TensorIterator::for_each()
[2m[36m(pid=46965)[0m     @     0x7ed91ee92b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46965)[0m     @     0x7ed91eeb5c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46906)[0m     @     0x7ee79c5a5ad3 at::TensorIterator::for_each()
[2m[36m(pid=46906)[0m     @     0x7ee79c5a5d91 at::TensorIterator::for_each()
[2m[36m(pid=46906)[0m     @     0x7ee79ce88b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46906)[0m     @     0x7ee79ceabc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46906)[0m     @     0x7ee79c34da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46906)[0m     @     0x7ee79c34b388 at::native::copy_impl()
[2m[36m(pid=46899)[0m     @     0x7f26fcccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46899)[0m     @     0x7f26fcccd388 at::native::copy_impl()
[2m[36m(pid=46899)[0m     @     0x7f26fcccf5a4 at::native::copy_()
[2m[36m(pid=46899)[0m     @     0x7f26fd3ba4f5 at::Tensor::copy_()
[2m[36m(pid=46899)[0m     @     0x7f26ff88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46899)[0m     @     0x7f26fd3ba4f5 at::Tensor::copy_()
[2m[36m(pid=46905)[0m     @     0x7f6ee25e24f5 at::Tensor::copy_()
[2m[36m(pid=46905)[0m     @     0x7f6ee4ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46905)[0m     @     0x7f6ee25e24f5 at::Tensor::copy_()
[2m[36m(pid=46905)[0m     @     0x7f6ee868d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46905)[0m     @     0x55a1e2666fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46905)[0m     @     0x55a1e25c1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46905)[0m     @     0x55a1e264cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46905)[0m     @     0x55a1e264da20 method_vectorcall
[2m[36m(pid=46905)[0m     @     0x55a1e25c1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46905)[0m     @     0x55a1e264cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46905)[0m     @     0x55a1e264d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46905)[0m     @     0x55a1e25c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46905)[0m     @     0x55a1e264cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46905)[0m     @     0x55a1e264d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46905)[0m     @     0x55a1e25c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46905)[0m     @     0x55a1e264cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46905)[0m     @     0x55a1e264d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46905)[0m     @     0x55a1e25c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46905)[0m     @     0x55a1e264cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46905)[0m     @     0x55a1e264d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46905)[0m     @     0x55a1e25c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46920)[0m     @     0x7f73dc7e05a4 at::native::copy_()
[2m[36m(pid=46920)[0m     @     0x7f73dcecb4f5 at::Tensor::copy_()
[2m[36m(pid=46920)[0m     @     0x7f73df39e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46920)[0m     @     0x7f73dcecb4f5 at::Tensor::copy_()
[2m[36m(pid=46920)[0m     @     0x7f73e2f7679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46920)[0m     @     0x5625d5535fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46920)[0m     @     0x5625d5490b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46920)[0m     @     0x5625d551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46920)[0m     @     0x5625d551ca20 method_vectorcall
[2m[36m(pid=46920)[0m     @     0x5625d5490bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46920)[0m     @     0x5625d551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46920)[0m     @     0x5625d551c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46920)[0m     @     0x5625d5491689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46920)[0m     @     0x5625d551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46920)[0m     @     0x5625d551c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46920)[0m     @     0x5625d5491689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46920)[0m     @     0x5625d551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46920)[0m     @     0x5625d551c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46920)[0m     @     0x5625d5491689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46920)[0m     @     0x5625d551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46920)[0m     @     0x5625d551c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46920)[0m     @     0x5625d5491689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46924)[0m     @     0x7ed3625f8388 at::native::copy_impl()
[2m[36m(pid=46924)[0m     @     0x7ed3625fa5a4 at::native::copy_()
[2m[36m(pid=46924)[0m     @     0x7ed362ce54f5 at::Tensor::copy_()
[2m[36m(pid=46924)[0m     @     0x7ed3651b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46924)[0m     @     0x7ed362ce54f5 at::Tensor::copy_()
[2m[36m(pid=46924)[0m     @     0x7ed368d9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46924)[0m     @     0x56068a260fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46924)[0m     @     0x56068a1bbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46924)[0m     @     0x56068a246baf _PyEval_EvalCodeWithName
[2m[36m(pid=46924)[0m     @     0x56068a247a20 method_vectorcall
[2m[36m(pid=46924)[0m     @     0x56068a1bbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46924)[0m     @     0x56068a246baf _PyEval_EvalCodeWithName
[2m[36m(pid=46924)[0m     @     0x56068a247643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46924)[0m     @     0x56068a1bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46924)[0m     @     0x56068a246baf _PyEval_EvalCodeWithName
[2m[36m(pid=46924)[0m     @     0x56068a247643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46924)[0m     @     0x56068a1bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46924)[0m     @     0x56068a246baf _PyEval_EvalCodeWithName
[2m[36m(pid=46924)[0m     @     0x56068a247643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46924)[0m     @     0x56068a1bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46924)[0m     @     0x56068a246baf _PyEval_EvalCodeWithName
[2m[36m(pid=46924)[0m     @     0x56068a247643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46924)[0m     @     0x56068a1bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46917)[0m     @     0x7f2e72cee5a4 at::native::copy_()
[2m[36m(pid=46917)[0m     @     0x7f2e733d94f5 at::Tensor::copy_()
[2m[36m(pid=46917)[0m     @     0x7f2e758ac8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46917)[0m     @     0x7f2e733d94f5 at::Tensor::copy_()
[2m[36m(pid=46917)[0m     @     0x7f2e7948479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46917)[0m     @     0x55b620d19fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46917)[0m     @     0x55b620c74b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46917)[0m     @     0x55b620cffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46917)[0m     @     0x55b620d00a20 method_vectorcall
[2m[36m(pid=46917)[0m     @     0x55b620c74bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46917)[0m     @     0x55b620cffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46917)[0m     @     0x55b620d00643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46917)[0m     @     0x55b620c75689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46917)[0m     @     0x55b620cffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46917)[0m     @     0x55b620d00643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46917)[0m     @     0x55b620c75689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46917)[0m     @     0x55b620cffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46917)[0m     @     0x55b620d00643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46917)[0m     @     0x55b620c75689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46917)[0m     @     0x55b620cffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46917)[0m     @     0x55b620d00643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46917)[0m     @     0x55b620c75689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46848)[0m     @     0x7eef2c37aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46848)[0m     @     0x7eef2c378388 at::native::copy_impl()
[2m[36m(pid=46848)[0m     @     0x7eef2c37a5a4 at::native::copy_()
[2m[36m(pid=46848)[0m     @     0x7eef2ca654f5 at::Tensor::copy_()
[2m[36m(pid=46848)[0m     @     0x7eef2ef388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46848)[0m     @     0x7eef2ca654f5 at::Tensor::copy_()
[2m[36m(pid=46848)[0m     @     0x7eef32b1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46848)[0m     @     0x563f2a8f3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46848)[0m     @     0x563f2a84eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46848)[0m     @     0x563f2a8d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46848)[0m     @     0x563f2a8daa20 method_vectorcall
[2m[36m(pid=46848)[0m     @     0x563f2a84ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46848)[0m     @     0x563f2a8d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46848)[0m     @     0x563f2a8da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46848)[0m     @     0x563f2a84f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46848)[0m     @     0x563f2a8d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46848)[0m     @     0x563f2a8da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46848)[0m     @     0x563f2a84f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46848)[0m     @     0x563f2a8d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46848)[0m     @     0x563f2a8da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46848)[0m     @     0x563f2a84f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46848)[0m     @     0x563f2a8d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46900)[0m     @     0x7f014d5a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46900)[0m     @     0x7f014d5a1388 at::native::copy_impl()
[2m[36m(pid=46900)[0m     @     0x7f014d5a35a4 at::native::copy_()
[2m[36m(pid=46900)[0m     @     0x7f014dc8e4f5 at::Tensor::copy_()
[2m[36m(pid=46900)[0m     @     0x7f01501618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46900)[0m     @     0x7f014dc8e4f5 at::Tensor::copy_()
[2m[36m(pid=46867)[0m     @     0x7f2e4fa61ad3 at::TensorIterator::for_each()
[2m[36m(pid=46867)[0m     @     0x7f2e4fa61d91 at::TensorIterator::for_each()
[2m[36m(pid=46867)[0m     @     0x7f2e50344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46867)[0m     @     0x7f2e50367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46867)[0m     @     0x7f2e4f809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46867)[0m     @     0x7f2e4f807388 at::native::copy_impl()
[2m[36m(pid=46867)[0m     @     0x7f2e4f8095a4 at::native::copy_()
[2m[36m(pid=46844)[0m     @     0x7f7aa7e7aad3 at::TensorIterator::for_each()
[2m[36m(pid=46844)[0m     @     0x7f7aa7e7ad91 at::TensorIterator::for_each()
[2m[36m(pid=46844)[0m     @     0x7f7aa875db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46844)[0m     @     0x7f7aa8780c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46844)[0m     @     0x7f7aa7c22a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46844)[0m     @     0x7f7aa7c20388 at::native::copy_impl()
[2m[36m(pid=46855)[0m     @     0x7f1b68270ad3 at::TensorIterator::for_each()
[2m[36m(pid=46855)[0m     @     0x7f1b68270d91 at::TensorIterator::for_each()
[2m[36m(pid=46855)[0m     @     0x7f1b68b53b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46855)[0m     @     0x7f1b68b76c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46855)[0m     @     0x7f1b68018a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46855)[0m     @     0x7f1b68016388 at::native::copy_impl()
[2m[36m(pid=46838)[0m     @     0x7f0718059388 at::native::copy_impl()
[2m[36m(pid=46838)[0m     @     0x7f071805b5a4 at::native::copy_()
[2m[36m(pid=46838)[0m     @     0x7f07187464f5 at::Tensor::copy_()
[2m[36m(pid=46838)[0m     @     0x7f071ac198de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46838)[0m     @     0x7f07187464f5 at::Tensor::copy_()
[2m[36m(pid=46838)[0m     @     0x7f071e7f179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46838)[0m     @     0x55c5c5e23fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46838)[0m     @     0x55c5c5d7eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46838)[0m     @     0x55c5c5e09baf _PyEval_EvalCodeWithName
[2m[36m(pid=46838)[0m     @     0x55c5c5e0aa20 method_vectorcall
[2m[36m(pid=46838)[0m     @     0x55c5c5d7ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46838)[0m     @     0x55c5c5e09baf _PyEval_EvalCodeWithName
[2m[36m(pid=46838)[0m     @     0x55c5c5e0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46838)[0m     @     0x55c5c5d7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46838)[0m     @     0x55c5c5e09baf _PyEval_EvalCodeWithName
[2m[36m(pid=46838)[0m     @     0x55c5c5e0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46838)[0m     @     0x55c5c5d7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46838)[0m     @     0x55c5c5e09baf _PyEval_EvalCodeWithName
[2m[36m(pid=46838)[0m     @     0x55c5c5e0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46838)[0m     @     0x55c5c5d7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46838)[0m     @     0x55c5c5e09baf _PyEval_EvalCodeWithName
[2m[36m(pid=46838)[0m     @     0x55c5c5e0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46838)[0m     @     0x55c5c5d7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46922)[0m     @     0x7f8d1cda2ad3 at::TensorIterator::for_each()
[2m[36m(pid=46922)[0m     @     0x7f8d1cda2d91 at::TensorIterator::for_each()
[2m[36m(pid=46922)[0m     @     0x7f8d1d685b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46922)[0m     @     0x7f8d1d6a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46922)[0m     @     0x7f8d1cb4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46922)[0m     @     0x7f8d1cb48388 at::native::copy_impl()
[2m[36m(pid=46922)[0m     @     0x7f8d1cb4a5a4 at::native::copy_()
[2m[36m(pid=46963)[0m     @     0x7fc68d2fa5a4 at::native::copy_()
[2m[36m(pid=46963)[0m     @     0x7fc68d9e54f5 at::Tensor::copy_()
[2m[36m(pid=46963)[0m     @     0x7fc68feb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46963)[0m     @     0x7fc68d9e54f5 at::Tensor::copy_()
[2m[36m(pid=46963)[0m     @     0x7fc693a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46963)[0m     @     0x55b138db6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46963)[0m     @     0x55b138d11b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46963)[0m     @     0x55b138d9cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46963)[0m     @     0x55b138d9da20 method_vectorcall
[2m[36m(pid=46963)[0m     @     0x55b138d11bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46846)[0m     @     0x7f86ce6924f5 at::Tensor::copy_()
[2m[36m(pid=46846)[0m     @     0x7f86d0b658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46846)[0m     @     0x7f86ce6924f5 at::Tensor::copy_()
[2m[36m(pid=46846)[0m     @     0x7f86d473d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46846)[0m     @     0x559c3e7e3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46846)[0m     @     0x559c3e73eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46846)[0m     @     0x559c3e7c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46846)[0m     @     0x559c3e7caa20 method_vectorcall
[2m[36m(pid=46846)[0m     @     0x559c3e73ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46846)[0m     @     0x559c3e7c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46846)[0m     @     0x559c3e7ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46846)[0m     @     0x559c3e73f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46846)[0m     @     0x559c3e7c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46846)[0m     @     0x559c3e7ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46846)[0m     @     0x559c3e73f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46846)[0m     @     0x559c3e7c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46846)[0m     @     0x559c3e7ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46846)[0m     @     0x559c3e73f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46846)[0m     @     0x559c3e7c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46846)[0m     @     0x559c3e7ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46846)[0m     @     0x559c3e73f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46918)[0m     @     0x7f49d51388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46918)[0m     @     0x7f49d5138ad3 at::TensorIterator::for_each()
[2m[36m(pid=46918)[0m     @     0x7f49d5138d91 at::TensorIterator::for_each()
[2m[36m(pid=46918)[0m     @     0x7f49d5a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46918)[0m     @     0x7f49d5a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46918)[0m     @     0x7f49d4ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46918)[0m     @     0x7f49d4ede388 at::native::copy_impl()
[2m[36m(pid=46841)[0m     @     0x7f44471f6ad3 at::TensorIterator::for_each()
[2m[36m(pid=46841)[0m     @     0x7f44471f6d91 at::TensorIterator::for_each()
[2m[36m(pid=46841)[0m     @     0x7f4447ad9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46841)[0m     @     0x7f4447afcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46841)[0m     @     0x7f4446f9ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46841)[0m     @     0x7f4446f9c388 at::native::copy_impl()
[2m[36m(pid=46841)[0m     @     0x7f4446f9e5a4 at::native::copy_()
[2m[36m(pid=46898)[0m     @     0x7ee0ef3124f5 at::Tensor::copy_()
[2m[36m(pid=46898)[0m     @     0x7ee0f17e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46898)[0m     @     0x7ee0ef3124f5 at::Tensor::copy_()
[2m[36m(pid=46898)[0m     @     0x7ee0f53bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46898)[0m     @     0x5589011b9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46898)[0m     @     0x558901114b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46898)[0m     @     0x55890119fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46898)[0m     @     0x5589011a0a20 method_vectorcall
[2m[36m(pid=46898)[0m     @     0x558901114bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46898)[0m     @     0x55890119fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46898)[0m     @     0x5589011a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46898)[0m     @     0x558901115689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46898)[0m     @     0x55890119fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46898)[0m     @     0x5589011a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46898)[0m     @     0x558901115689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46898)[0m     @     0x55890119fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46898)[0m     @     0x5589011a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46898)[0m     @     0x558901115689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46898)[0m     @     0x55890119fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46898)[0m     @     0x5589011a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46898)[0m     @     0x558901115689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46975)[0m     @     0x7f9bab742ad3 at::TensorIterator::for_each()
[2m[36m(pid=46975)[0m     @     0x7f9bab742d91 at::TensorIterator::for_each()
[2m[36m(pid=46975)[0m     @     0x7f9bac025b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46975)[0m     @     0x7f9bac048c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46975)[0m     @     0x7f9bab4eaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46975)[0m     @     0x7f9bab4e8388 at::native::copy_impl()
[2m[36m(pid=46975)[0m     @     0x7f9bab4ea5a4 at::native::copy_()
[2m[36m(pid=46889)[0m     @     0x7f29a174f5a4 at::native::copy_()
[2m[36m(pid=46889)[0m     @     0x7f29a1e3a4f5 at::Tensor::copy_()
[2m[36m(pid=46889)[0m     @     0x7f29a430d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46889)[0m     @     0x7f29a1e3a4f5 at::Tensor::copy_()
[2m[36m(pid=46889)[0m     @     0x7f29a7ee579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46889)[0m     @     0x561e3764bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46889)[0m     @     0x561e375a6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46889)[0m     @     0x561e37631baf _PyEval_EvalCodeWithName
[2m[36m(pid=46889)[0m     @     0x561e37632a20 method_vectorcall
[2m[36m(pid=46889)[0m     @     0x561e375a6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46889)[0m     @     0x561e37631baf _PyEval_EvalCodeWithName
[2m[36m(pid=46889)[0m     @     0x561e37632643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46889)[0m     @     0x561e375a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46889)[0m     @     0x561e37631baf _PyEval_EvalCodeWithName
[2m[36m(pid=46889)[0m     @     0x561e37632643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46889)[0m     @     0x561e375a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46889)[0m     @     0x561e37631baf _PyEval_EvalCodeWithName
[2m[36m(pid=46889)[0m     @     0x561e37632643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46889)[0m     @     0x561e375a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46889)[0m     @     0x561e37631baf _PyEval_EvalCodeWithName
[2m[36m(pid=46889)[0m     @     0x561e37632643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46889)[0m     @     0x561e375a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46904)[0m     @     0x7f4dc3ae45a4 at::native::copy_()
[2m[36m(pid=46904)[0m     @     0x7f4dc41cf4f5 at::Tensor::copy_()
[2m[36m(pid=46904)[0m     @     0x7f4dc66a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46904)[0m     @     0x7f4dc41cf4f5 at::Tensor::copy_()
[2m[36m(pid=46904)[0m     @     0x7f4dca27a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46904)[0m     @     0x5574164a4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46904)[0m     @     0x5574163ffb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46904)[0m     @     0x55741648abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46904)[0m     @     0x55741648ba20 method_vectorcall
[2m[36m(pid=46904)[0m     @     0x5574163ffbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46904)[0m     @     0x55741648abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46904)[0m     @     0x55741648b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46904)[0m     @     0x557416400689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46904)[0m     @     0x55741648abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46904)[0m     @     0x55741648b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46904)[0m     @     0x557416400689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46904)[0m     @     0x55741648abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46904)[0m     @     0x55741648b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46904)[0m     @     0x557416400689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46904)[0m     @     0x55741648abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46904)[0m     @     0x55741648b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46904)[0m     @     0x557416400689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46961)[0m     @     0x7f1325cfb4f5 at::Tensor::copy_()
[2m[36m(pid=46961)[0m     @     0x7f13281ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46961)[0m     @     0x7f1325cfb4f5 at::Tensor::copy_()
[2m[36m(pid=46961)[0m     @     0x7f132bda679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46961)[0m     @     0x5586921a9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46961)[0m     @     0x558692104b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46961)[0m     @     0x55869218fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46961)[0m     @     0x558692190a20 method_vectorcall
[2m[36m(pid=46961)[0m     @     0x558692104bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46961)[0m     @     0x55869218fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46961)[0m     @     0x558692190643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46961)[0m     @     0x558692105689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46961)[0m     @     0x55869218fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46961)[0m     @     0x558692190643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46961)[0m     @     0x558692105689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46961)[0m     @     0x55869218fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46961)[0m     @     0x558692190643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46961)[0m     @     0x558692105689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46961)[0m     @     0x55869218fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46961)[0m     @     0x558692190643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46961)[0m     @     0x558692105689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46859)[0m     @     0x7f3caaee4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46859)[0m     @     0x7f3caaf07c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46859)[0m     @     0x7f3caa3a9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46859)[0m     @     0x7f3caa3a7388 at::native::copy_impl()
[2m[36m(pid=46859)[0m     @     0x7f3caa3a95a4 at::native::copy_()
[2m[36m(pid=46840)[0m     @     0x555e572d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46840)[0m     @     0x555e572d3a20 method_vectorcall
[2m[36m(pid=46840)[0m     @     0x555e57247bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46840)[0m     @     0x555e572d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46840)[0m     @     0x555e572d3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46840)[0m     @     0x555e57248689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46840)[0m     @     0x555e572d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46840)[0m     @     0x555e572d3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46840)[0m     @     0x555e57248689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46840)[0m     @     0x555e572d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46840)[0m     @     0x555e572d3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46840)[0m     @     0x555e57248689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46840)[0m     @     0x555e572d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46840)[0m     @     0x555e572d3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46840)[0m     @     0x555e57248689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46894)[0m     @     0x7f0ec0f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=46894)[0m     @     0x7f0ec0f27d91 at::TensorIterator::for_each()
[2m[36m(pid=46894)[0m     @     0x7f0ec180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46894)[0m     @     0x7f0ec182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46894)[0m     @     0x7f0ec0ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46894)[0m     @     0x7f0ec0ccd388 at::native::copy_impl()
[2m[36m(pid=46951)[0m     @     0x7fb10c269ad3 at::TensorIterator::for_each()
[2m[36m(pid=46951)[0m     @     0x7fb10c269d91 at::TensorIterator::for_each()
[2m[36m(pid=46951)[0m     @     0x7fb10cb4cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46951)[0m     @     0x7fb10cb6fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46951)[0m     @     0x7fb10c011a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46927)[0m     @     0x7f47112cdad3 at::TensorIterator::for_each()
[2m[36m(pid=46927)[0m     @     0x7f47112cdd91 at::TensorIterator::for_each()
[2m[36m(pid=46927)[0m     @     0x7f4711bb0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46927)[0m     @     0x7f4711bd3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46927)[0m     @     0x7f4711075a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46927)[0m     @     0x7f4711073388 at::native::copy_impl()
[2m[36m(pid=46940)[0m     @     0x7fe278c4a390 (unknown)
[2m[36m(pid=46940)[0m     @     0x7fb378a8bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46940)[0m     @     0x7fb3781b67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46861)[0m     @     0x7f9ff8acdad3 at::TensorIterator::for_each()
[2m[36m(pid=46861)[0m     @     0x7f9ff8acdd91 at::TensorIterator::for_each()
[2m[36m(pid=46861)[0m     @     0x7f9ff93b0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46861)[0m     @     0x7f9ff93d3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46861)[0m     @     0x7f9ff8875a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46861)[0m     @     0x7f9ff8873388 at::native::copy_impl()
[2m[36m(pid=46925)[0m     @     0x7f5644a8dad3 at::TensorIterator::for_each()
[2m[36m(pid=46925)[0m     @     0x7f5644a8dd91 at::TensorIterator::for_each()
[2m[36m(pid=46925)[0m     @     0x7f5645370b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46925)[0m     @     0x7f5645393c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46925)[0m     @     0x7f5644835a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46925)[0m     @     0x7f5644833388 at::native::copy_impl()
[2m[36m(pid=46925)[0m     @     0x7f56448355a4 at::native::copy_()
[2m[36m(pid=46856)[0m     @     0x7edae7539d91 at::TensorIterator::for_each()
[2m[36m(pid=46856)[0m     @     0x7edae7e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46856)[0m     @     0x7edae7e3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46856)[0m     @     0x7edae72e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46856)[0m     @     0x7edae72df388 at::native::copy_impl()
[2m[36m(pid=46856)[0m     @     0x7edae72e15a4 at::native::copy_()
[2m[36m(pid=46856)[0m     @     0x7edae79cc4f5 at::Tensor::copy_()
[2m[36m(pid=46856)[0m     @     0x7edae9e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46864)[0m     @     0x7f3d3fc64d91 at::TensorIterator::for_each()
[2m[36m(pid=46864)[0m     @     0x7f3d40547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46864)[0m     @     0x7f3d4056ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46864)[0m     @     0x7f3d3fa0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46864)[0m     @     0x7f3d3fa0a388 at::native::copy_impl()
[2m[36m(pid=46864)[0m     @     0x7f3d3fa0c5a4 at::native::copy_()
[2m[36m(pid=46864)[0m     @     0x7f3d400f74f5 at::Tensor::copy_()
[2m[36m(pid=46857)[0m     @     0x7f21f78efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46857)[0m     @     0x7f21f7912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46857)[0m     @     0x7f21f6db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46857)[0m     @     0x7f21f6db2388 at::native::copy_impl()
[2m[36m(pid=46857)[0m     @     0x7f21f6db45a4 at::native::copy_()
[2m[36m(pid=46857)[0m     @     0x7f21f749f4f5 at::Tensor::copy_()
[2m[36m(pid=46857)[0m     @     0x7f21f99728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46868)[0m     @     0x7f101034dad3 at::TensorIterator::for_each()
[2m[36m(pid=46868)[0m     @     0x7f101034dd91 at::TensorIterator::for_each()
[2m[36m(pid=46868)[0m     @     0x7f1010c30b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46868)[0m     @     0x7f1010c53c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46868)[0m     @     0x7f10100f5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46868)[0m     @     0x7f10100f3388 at::native::copy_impl()
[2m[36m(pid=46887)[0m     @     0x7f250e175390 (unknown)
[2m[36m(pid=46887)[0m     @     0x7ef60e135f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46887)[0m     @     0x7ef60d8607db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46887)[0m     @     0x7ef60d8638f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46913)[0m     @     0x7f775d868d91 at::TensorIterator::for_each()
[2m[36m(pid=46913)[0m     @     0x7f775e14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46913)[0m     @     0x7f775e16ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46913)[0m     @     0x7f775d610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46913)[0m     @     0x7f775d60e388 at::native::copy_impl()
[2m[36m(pid=46913)[0m     @     0x7f775d6105a4 at::native::copy_()
[2m[36m(pid=46842)[0m     @     0x7f20535398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46842)[0m     @     0x7f2053539ad3 at::TensorIterator::for_each()
[2m[36m(pid=46956)[0m     @     0x7edc1204df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=46956)[0m     @     0x7edc117787db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=46956)[0m     @     0x7edc1177b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46837)[0m     @     0x7f0200f27d91 at::TensorIterator::for_each()
[2m[36m(pid=46837)[0m     @     0x7f020180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46837)[0m     @     0x7f020182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46837)[0m     @     0x7f0200ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46837)[0m     @     0x7f0200ccd388 at::native::copy_impl()
[2m[36m(pid=46837)[0m     @     0x7f0200ccf5a4 at::native::copy_()
[2m[36m(pid=46837)[0m     @     0x7f02013ba4f5 at::Tensor::copy_()
[2m[36m(pid=46892)[0m     @     0x7f307ebbdad3 at::TensorIterator::for_each()
[2m[36m(pid=46892)[0m     @     0x7f307ebbdd91 at::TensorIterator::for_each()
[2m[36m(pid=46892)[0m     @     0x7f307f4a0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46892)[0m     @     0x7f307f4c3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46892)[0m     @     0x7f307e965a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46892)[0m     @     0x7f307e963388 at::native::copy_impl()
[2m[36m(pid=46892)[0m     @     0x7f307e9655a4 at::native::copy_()
[2m[36m(pid=46958)[0m     @     0x7fc6d19e78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46958)[0m     @     0x7fc6d19e7ad3 at::TensorIterator::for_each()
[2m[36m(pid=46958)[0m     @     0x7fc6d19e7d91 at::TensorIterator::for_each()
[2m[36m(pid=46958)[0m     @     0x7fc6d22cab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46958)[0m     @     0x7fc6d22edc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46839)[0m     @     0x7efe7199aad3 at::TensorIterator::for_each()
[2m[36m(pid=46839)[0m     @     0x7efe7199ad91 at::TensorIterator::for_each()
[2m[36m(pid=46839)[0m     @     0x7efe7227db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46839)[0m     @     0x7efe722a0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46839)[0m     @     0x7efe71742a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46839)[0m     @     0x7efe71740388 at::native::copy_impl()
[2m[36m(pid=46836)[0m     @     0x7f3abf135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46836)[0m     @     0x7f3abf158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46836)[0m     @     0x7f3abe5faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46836)[0m     @     0x7f3abe5f8388 at::native::copy_impl()
[2m[36m(pid=46836)[0m     @     0x7f3abe5fa5a4 at::native::copy_()
[2m[36m(pid=46836)[0m     @     0x7f3abece54f5 at::Tensor::copy_()
[2m[36m(pid=46869)[0m     @     0x7f45125b0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46869)[0m     @     0x7f4511a52a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46869)[0m     @     0x7f4511a50388 at::native::copy_impl()
[2m[36m(pid=46869)[0m     @     0x7f4511a525a4 at::native::copy_()
[2m[36m(pid=46845)[0m     @     0x7f4c2ae9ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46845)[0m     @     0x7f4c2ae99388 at::native::copy_impl()
[2m[36m(pid=46845)[0m     @     0x7f4c2ae9b5a4 at::native::copy_()
[2m[36m(pid=46845)[0m     @     0x7f4c2b5864f5 at::Tensor::copy_()
[2m[36m(pid=46845)[0m     @     0x7f4c2da598de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46884)[0m     @     0x7f1c257f45a4 at::native::copy_()
[2m[36m(pid=46884)[0m     @     0x7f1c25edf4f5 at::Tensor::copy_()
[2m[36m(pid=46884)[0m     @     0x7f1c283b28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46873)[0m     @     0x7f3cc4bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46873)[0m     @     0x7f3cc4bc8388 at::native::copy_impl()
[2m[36m(pid=46873)[0m     @     0x7f3cc4bca5a4 at::native::copy_()
[2m[36m(pid=46873)[0m     @     0x7f3cc52b54f5 at::Tensor::copy_()
[2m[36m(pid=46860)[0m     @     0x7ece360eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46860)[0m     @     0x7ece360e9388 at::native::copy_impl()
[2m[36m(pid=46860)[0m     @     0x7ece360eb5a4 at::native::copy_()
[2m[36m(pid=46860)[0m     @     0x7ece367d64f5 at::Tensor::copy_()
[2m[36m(pid=46972)[0m     @     0x7edd9437aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46972)[0m     @     0x7edd94378388 at::native::copy_impl()
[2m[36m(pid=46972)[0m     @     0x7edd9437a5a4 at::native::copy_()
[2m[36m(pid=46967)[0m     @     0x55ddab402baf _PyEval_EvalCodeWithName
[2m[36m(pid=46967)[0m     @     0x55ddab403643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46967)[0m     @     0x55ddab378689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46967)[0m     @     0x55ddab402baf _PyEval_EvalCodeWithName
[2m[36m(pid=46967)[0m     @     0x55ddab403643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46967)[0m     @     0x55ddab378689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46967)[0m     @     0x55ddab402baf _PyEval_EvalCodeWithName
[2m[36m(pid=46967)[0m     @     0x55ddab403643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46967)[0m     @     0x55ddab378689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46967)[0m     @     0x55ddab402baf _PyEval_EvalCodeWithName
[2m[36m(pid=46967)[0m     @     0x55ddab403643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46967)[0m     @     0x55ddab378689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46947)[0m     @     0x563a61f81643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46947)[0m     @     0x563a61ef6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46947)[0m     @     0x563a61f80baf _PyEval_EvalCodeWithName
[2m[36m(pid=46947)[0m     @     0x563a61f81643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46947)[0m     @     0x563a61ef6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46947)[0m     @     0x563a61f80baf _PyEval_EvalCodeWithName
[2m[36m(pid=46947)[0m     @     0x563a61f81643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46947)[0m     @     0x563a61ef6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46947)[0m     @     0x563a61f80baf _PyEval_EvalCodeWithName
[2m[36m(pid=46947)[0m     @     0x563a61f81643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46947)[0m     @     0x563a61ef6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46915)[0m     @     0x564be1103baf _PyEval_EvalCodeWithName
[2m[36m(pid=46915)[0m     @     0x564be1104643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46915)[0m     @     0x564be1079689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46915)[0m     @     0x564be1103baf _PyEval_EvalCodeWithName
[2m[36m(pid=46915)[0m     @     0x564be1104643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46915)[0m     @     0x564be1079689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46915)[0m     @     0x564be1103baf _PyEval_EvalCodeWithName
[2m[36m(pid=46915)[0m     @     0x564be1104643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46915)[0m     @     0x564be1079689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46915)[0m     @     0x564be1103baf _PyEval_EvalCodeWithName
[2m[36m(pid=46915)[0m     @     0x564be1104643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46915)[0m     @     0x564be1079689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46896)[0m     @     0x7f094b3124f5 at::Tensor::copy_()
[2m[36m(pid=46896)[0m     @     0x7f094d7e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46896)[0m     @     0x7f094b3124f5 at::Tensor::copy_()
[2m[36m(pid=46896)[0m     @     0x7f09513bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46896)[0m     @     0x55d5dfebffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46896)[0m     @     0x55d5dfe1ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46896)[0m     @     0x55d5dfea5baf _PyEval_EvalCodeWithName
[2m[36m(pid=46896)[0m     @     0x55d5dfea6a20 method_vectorcall
[2m[36m(pid=46896)[0m     @     0x55d5dfe1abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46896)[0m     @     0x55d5dfea5baf _PyEval_EvalCodeWithName
[2m[36m(pid=46896)[0m     @     0x55d5dfea6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46923)[0m     @     0x7fa99051e5a4 at::native::copy_()
[2m[36m(pid=46923)[0m     @     0x7fa990c094f5 at::Tensor::copy_()
[2m[36m(pid=46923)[0m     @     0x7fa9930dc8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46938)[0m     @     0x7fcc2bebe5a4 at::native::copy_()
[2m[36m(pid=46938)[0m     @     0x7fcc2c5a94f5 at::Tensor::copy_()
[2m[36m(pid=46938)[0m     @     0x7fcc2ea7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46938)[0m     @     0x7fcc2c5a94f5 at::Tensor::copy_()
[2m[36m(pid=46948)[0m     @     0x7f37227d64f5 at::Tensor::copy_()
[2m[36m(pid=46948)[0m     @     0x7f3724ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46948)[0m     @     0x7f37227d64f5 at::Tensor::copy_()
[2m[36m(pid=46948)[0m     @     0x7f372847779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46948)[0m     @     0x561c52e55fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46948)[0m     @     0x561c52db0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46948)[0m     @     0x561c52e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46948)[0m     @     0x561c52e3ca20 method_vectorcall
[2m[36m(pid=46948)[0m     @     0x561c52db0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46948)[0m     @     0x561c52e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46948)[0m     @     0x561c52e3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46948)[0m     @     0x561c52db1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46948)[0m     @     0x561c52e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46948)[0m     @     0x561c52e3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46948)[0m     @     0x561c52db1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46948)[0m     @     0x561c52e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46948)[0m     @     0x561c52e3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46948)[0m     @     0x561c52db1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46970)[0m     @     0x7f93b2dd65a4 at::native::copy_()
[2m[36m(pid=46970)[0m     @     0x7f93b34c14f5 at::Tensor::copy_()
[2m[36m(pid=46970)[0m     @     0x7f93b59948de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46853)[0m     @     0x7f886e965a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46853)[0m     @     0x7f886e963388 at::native::copy_impl()
[2m[36m(pid=46853)[0m     @     0x7f886e9655a4 at::native::copy_()
[2m[36m(pid=46853)[0m     @     0x7f886f0504f5 at::Tensor::copy_()
[2m[36m(pid=46871)[0m     @     0x7fa5a64f1d91 at::TensorIterator::for_each()
[2m[36m(pid=46871)[0m     @     0x7fa5a6dd4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46871)[0m     @     0x7fa5a6df7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46885)[0m     @     0x7f8281967d91 at::TensorIterator::for_each()
[2m[36m(pid=46885)[0m     @     0x7f828224ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46885)[0m     @     0x7f828226dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46885)[0m     @     0x7f828170fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46852)[0m     @     0x7f75153ba4f5 at::Tensor::copy_()
[2m[36m(pid=46852)[0m     @     0x7f751788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46852)[0m     @     0x7f75153ba4f5 at::Tensor::copy_()
[2m[36m(pid=46852)[0m     @     0x7f751b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46852)[0m     @     0x55a7e247cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46852)[0m     @     0x55a7e23d7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46852)[0m     @     0x55a7e2462baf _PyEval_EvalCodeWithName
[2m[36m(pid=46852)[0m     @     0x55a7e2463a20 method_vectorcall
[2m[36m(pid=46852)[0m     @     0x55a7e23d7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46852)[0m     @     0x55a7e2462baf _PyEval_EvalCodeWithName
[2m[36m(pid=46852)[0m     @     0x55a7e2463643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46852)[0m     @     0x55a7e23d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46852)[0m     @     0x55a7e2462baf _PyEval_EvalCodeWithName
[2m[36m(pid=46852)[0m     @     0x55a7e2463643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46852)[0m     @     0x55a7e23d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46852)[0m     @     0x55a7e2462baf _PyEval_EvalCodeWithName
[2m[36m(pid=46852)[0m     @     0x55a7e2463643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46852)[0m     @     0x55a7e23d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46852)[0m     @     0x55a7e2462baf _PyEval_EvalCodeWithName
[2m[36m(pid=46852)[0m     @     0x55a7e2463643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46852)[0m     @     0x55a7e23d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46850)[0m     @     0x7f9355d6d5a4 at::native::copy_()
[2m[36m(pid=46850)[0m     @     0x7f93564584f5 at::Tensor::copy_()
[2m[36m(pid=46850)[0m     @     0x7f935892b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46850)[0m     @     0x7f93564584f5 at::Tensor::copy_()
[2m[36m(pid=46850)[0m     @     0x7f935c50379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46854)[0m     @     0x7f8119075a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46854)[0m     @     0x7f8119073388 at::native::copy_impl()
[2m[36m(pid=46854)[0m     @     0x7f81190755a4 at::native::copy_()
[2m[36m(pid=46854)[0m     @     0x7f81197604f5 at::Tensor::copy_()
[2m[36m(pid=46854)[0m     @     0x7f811bc338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46929)[0m     @     0x7faec414a5a4 at::native::copy_()
[2m[36m(pid=46929)[0m     @     0x7faec48354f5 at::Tensor::copy_()
[2m[36m(pid=46929)[0m     @     0x7faec6d088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46847)[0m     @     0x7eda14efb4f5 at::Tensor::copy_()
[2m[36m(pid=46847)[0m     @     0x7eda173ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46847)[0m     @     0x7eda14efb4f5 at::Tensor::copy_()
[2m[36m(pid=46847)[0m     @     0x7eda1afa679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46847)[0m     @     0x5640eac0bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46847)[0m     @     0x5640eab66b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46847)[0m     @     0x5640eabf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46847)[0m     @     0x5640eabf2a20 method_vectorcall
[2m[36m(pid=46847)[0m     @     0x5640eab66bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46849)[0m     @     0x7fb50f14e4f5 at::Tensor::copy_()
[2m[36m(pid=46849)[0m     @     0x7fb5116218de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46849)[0m     @     0x7fb50f14e4f5 at::Tensor::copy_()
[2m[36m(pid=46849)[0m     @     0x7fb5151f979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46849)[0m     @     0x5646d21b1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46849)[0m     @     0x5646d210cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46849)[0m     @     0x5646d2197baf _PyEval_EvalCodeWithName
[2m[36m(pid=46849)[0m     @     0x5646d2198a20 method_vectorcall
[2m[36m(pid=46849)[0m     @     0x5646d210cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46849)[0m     @     0x5646d2197baf _PyEval_EvalCodeWithName
[2m[36m(pid=46849)[0m     @     0x5646d2198643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46849)[0m     @     0x5646d210d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46849)[0m     @     0x5646d2197baf _PyEval_EvalCodeWithName
[2m[36m(pid=46849)[0m     @     0x5646d2198643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46849)[0m     @     0x5646d210d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46849)[0m     @     0x5646d2197baf _PyEval_EvalCodeWithName
[2m[36m(pid=46849)[0m     @     0x5646d2198643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46849)[0m     @     0x5646d210d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46849)[0m     @     0x5646d2197baf _PyEval_EvalCodeWithName
[2m[36m(pid=46849)[0m     @     0x5646d2198643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46978)[0m     @     0x7f74c7467ad3 at::TensorIterator::for_each()
[2m[36m(pid=46902)[0m     @     0x7f2a3de10a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46902)[0m     @     0x7f2a3de0e388 at::native::copy_impl()
[2m[36m(pid=46902)[0m     @     0x7f2a3de105a4 at::native::copy_()
[2m[36m(pid=46965)[0m     @     0x7ed91e357a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46965)[0m     @     0x7ed91e355388 at::native::copy_impl()
[2m[36m(pid=46965)[0m     @     0x7ed91e3575a4 at::native::copy_()
[2m[36m(pid=46965)[0m     @     0x7ed91ea424f5 at::Tensor::copy_()
[2m[36m(pid=46906)[0m     @     0x7ee79c34d5a4 at::native::copy_()
[2m[36m(pid=46906)[0m     @     0x7ee79ca384f5 at::Tensor::copy_()
[2m[36m(pid=46906)[0m     @     0x7ee79ef0b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46899)[0m     @     0x7f270346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46899)[0m     @     0x55b10143cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46899)[0m     @     0x55b101397b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46899)[0m     @     0x55b101422baf _PyEval_EvalCodeWithName
[2m[36m(pid=46899)[0m     @     0x55b101423a20 method_vectorcall
[2m[36m(pid=46899)[0m     @     0x55b101397bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46899)[0m     @     0x55b101422baf _PyEval_EvalCodeWithName
[2m[36m(pid=46899)[0m     @     0x55b101423643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46899)[0m     @     0x55b101398689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46899)[0m     @     0x55b101422baf _PyEval_EvalCodeWithName
[2m[36m(pid=46899)[0m     @     0x55b101423643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46899)[0m     @     0x55b101398689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46899)[0m     @     0x55b101422baf _PyEval_EvalCodeWithName
[2m[36m(pid=46899)[0m     @     0x55b101423643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46899)[0m     @     0x55b101398689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46899)[0m     @     0x55b101422baf _PyEval_EvalCodeWithName
[2m[36m(pid=46899)[0m     @     0x55b101423643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46899)[0m     @     0x55b101398689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46848)[0m     @     0x563f2a8da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46848)[0m     @     0x563f2a84f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46900)[0m     @     0x7f0153d3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46900)[0m     @     0x5593dedd3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46900)[0m     @     0x5593ded2eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46900)[0m     @     0x5593dedb9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46900)[0m     @     0x5593dedbaa20 method_vectorcall
[2m[36m(pid=46900)[0m     @     0x5593ded2ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46900)[0m     @     0x5593dedb9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46900)[0m     @     0x5593dedba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46900)[0m     @     0x5593ded2f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46900)[0m     @     0x5593dedb9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46900)[0m     @     0x5593dedba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46900)[0m     @     0x5593ded2f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46900)[0m     @     0x5593dedb9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46900)[0m     @     0x5593dedba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46900)[0m     @     0x5593ded2f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46900)[0m     @     0x5593dedb9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46900)[0m     @     0x5593dedba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46900)[0m     @     0x5593ded2f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46867)[0m     @     0x7f2e4fef44f5 at::Tensor::copy_()
[2m[36m(pid=46867)[0m     @     0x7f2e523c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46867)[0m     @     0x7f2e4fef44f5 at::Tensor::copy_()
[2m[36m(pid=46867)[0m     @     0x7f2e55f9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46867)[0m     @     0x56106a8fefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46867)[0m     @     0x56106a859b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46867)[0m     @     0x56106a8e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46867)[0m     @     0x56106a8e5a20 method_vectorcall
[2m[36m(pid=46867)[0m     @     0x56106a859bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46867)[0m     @     0x56106a8e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46867)[0m     @     0x56106a8e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46867)[0m     @     0x56106a85a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46867)[0m     @     0x56106a8e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46867)[0m     @     0x56106a8e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46867)[0m     @     0x56106a85a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46867)[0m     @     0x56106a8e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46867)[0m     @     0x56106a8e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46867)[0m     @     0x56106a85a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46867)[0m     @     0x56106a8e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46867)[0m     @     0x56106a8e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46867)[0m     @     0x56106a85a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46844)[0m     @     0x7f7aa7c225a4 at::native::copy_()
[2m[36m(pid=46844)[0m     @     0x7f7aa830d4f5 at::Tensor::copy_()
[2m[36m(pid=46844)[0m     @     0x7f7aaa7e08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46844)[0m     @     0x7f7aa830d4f5 at::Tensor::copy_()
[2m[36m(pid=46844)[0m     @     0x7f7aae3b879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46844)[0m     @     0x5576c050dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46844)[0m     @     0x5576c0468b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46844)[0m     @     0x5576c04f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46844)[0m     @     0x5576c04f4a20 method_vectorcall
[2m[36m(pid=46844)[0m     @     0x5576c0468bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46844)[0m     @     0x5576c04f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46844)[0m     @     0x5576c04f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46844)[0m     @     0x5576c0469689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46844)[0m     @     0x5576c04f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46844)[0m     @     0x5576c04f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46844)[0m     @     0x5576c0469689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46844)[0m     @     0x5576c04f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46844)[0m     @     0x5576c04f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46844)[0m     @     0x5576c0469689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46844)[0m     @     0x5576c04f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46844)[0m     @     0x5576c04f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46844)[0m     @     0x5576c0469689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46855)[0m     @     0x7f1b680185a4 at::native::copy_()
[2m[36m(pid=46855)[0m     @     0x7f1b687034f5 at::Tensor::copy_()
[2m[36m(pid=46855)[0m     @     0x7f1b6abd68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46855)[0m     @     0x7f1b687034f5 at::Tensor::copy_()
[2m[36m(pid=46855)[0m     @     0x7f1b6e7ae79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46855)[0m     @     0x5586af581fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46855)[0m     @     0x5586af4dcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46855)[0m     @     0x5586af567baf _PyEval_EvalCodeWithName
[2m[36m(pid=46855)[0m     @     0x5586af568a20 method_vectorcall
[2m[36m(pid=46855)[0m     @     0x5586af4dcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46855)[0m     @     0x5586af567baf _PyEval_EvalCodeWithName
[2m[36m(pid=46855)[0m     @     0x5586af568643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46855)[0m     @     0x5586af4dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46855)[0m     @     0x5586af567baf _PyEval_EvalCodeWithName
[2m[36m(pid=46855)[0m     @     0x5586af568643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46855)[0m     @     0x5586af4dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46855)[0m     @     0x5586af567baf _PyEval_EvalCodeWithName
[2m[36m(pid=46855)[0m     @     0x5586af568643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46855)[0m     @     0x5586af4dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46855)[0m     @     0x5586af567baf _PyEval_EvalCodeWithName
[2m[36m(pid=46855)[0m     @     0x5586af568643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46855)[0m     @     0x5586af4dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46922)[0m     @     0x7f8d1d2354f5 at::Tensor::copy_()
[2m[36m(pid=46922)[0m     @     0x7f8d1f7088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46922)[0m     @     0x7f8d1d2354f5 at::Tensor::copy_()
[2m[36m(pid=46922)[0m     @     0x7f8d232e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46922)[0m     @     0x55dccd34bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46922)[0m     @     0x55dccd2a6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46922)[0m     @     0x55dccd331baf _PyEval_EvalCodeWithName
[2m[36m(pid=46922)[0m     @     0x55dccd332a20 method_vectorcall
[2m[36m(pid=46922)[0m     @     0x55dccd2a6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46922)[0m     @     0x55dccd331baf _PyEval_EvalCodeWithName
[2m[36m(pid=46922)[0m     @     0x55dccd332643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46922)[0m     @     0x55dccd2a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46922)[0m     @     0x55dccd331baf _PyEval_EvalCodeWithName
[2m[36m(pid=46922)[0m     @     0x55dccd332643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46922)[0m     @     0x55dccd2a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46922)[0m     @     0x55dccd331baf _PyEval_EvalCodeWithName
[2m[36m(pid=46922)[0m     @     0x55dccd332643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46922)[0m     @     0x55dccd2a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46922)[0m     @     0x55dccd331baf _PyEval_EvalCodeWithName
[2m[36m(pid=46922)[0m     @     0x55dccd332643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46922)[0m     @     0x55dccd2a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46963)[0m     @     0x55b138d9cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46963)[0m     @     0x55b138d9d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46963)[0m     @     0x55b138d12689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46963)[0m     @     0x55b138d9cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46963)[0m     @     0x55b138d9d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46963)[0m     @     0x55b138d12689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46963)[0m     @     0x55b138d9cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46963)[0m     @     0x55b138d9d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46963)[0m     @     0x55b138d12689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46963)[0m     @     0x55b138d9cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46963)[0m     @     0x55b138d9d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46963)[0m     @     0x55b138d12689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46918)[0m     @     0x7f49d4ee05a4 at::native::copy_()
[2m[36m(pid=46918)[0m     @     0x7f49d55cb4f5 at::Tensor::copy_()
[2m[36m(pid=46918)[0m     @     0x7f49d7a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46918)[0m     @     0x7f49d55cb4f5 at::Tensor::copy_()
[2m[36m(pid=46918)[0m     @     0x7f49db67679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46918)[0m     @     0x55e180120fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46918)[0m     @     0x55e18007bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46918)[0m     @     0x55e180106baf _PyEval_EvalCodeWithName
[2m[36m(pid=46918)[0m     @     0x55e180107a20 method_vectorcall
[2m[36m(pid=46918)[0m     @     0x55e18007bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46918)[0m     @     0x55e180106baf _PyEval_EvalCodeWithName
[2m[36m(pid=46918)[0m     @     0x55e180107643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46918)[0m     @     0x55e18007c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46918)[0m     @     0x55e180106baf _PyEval_EvalCodeWithName
[2m[36m(pid=46918)[0m     @     0x55e180107643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46918)[0m     @     0x55e18007c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46918)[0m     @     0x55e180106baf _PyEval_EvalCodeWithName
[2m[36m(pid=46918)[0m     @     0x55e180107643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46918)[0m     @     0x55e18007c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46918)[0m     @     0x55e180106baf _PyEval_EvalCodeWithName
[2m[36m(pid=46918)[0m     @     0x55e180107643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46918)[0m     @     0x55e18007c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46841)[0m     @     0x7f44476894f5 at::Tensor::copy_()
[2m[36m(pid=46841)[0m     @     0x7f4449b5c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46841)[0m     @     0x7f44476894f5 at::Tensor::copy_()
[2m[36m(pid=46841)[0m     @     0x7f444d73479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46841)[0m     @     0x56300fdacfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46841)[0m     @     0x56300fd07b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46841)[0m     @     0x56300fd92baf _PyEval_EvalCodeWithName
[2m[36m(pid=46841)[0m     @     0x56300fd93a20 method_vectorcall
[2m[36m(pid=46841)[0m     @     0x56300fd07bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46841)[0m     @     0x56300fd92baf _PyEval_EvalCodeWithName
[2m[36m(pid=46841)[0m     @     0x56300fd93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46841)[0m     @     0x56300fd08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46841)[0m     @     0x56300fd92baf _PyEval_EvalCodeWithName
[2m[36m(pid=46841)[0m     @     0x56300fd93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46975)[0m     @     0x7f9babbd54f5 at::Tensor::copy_()
[2m[36m(pid=46975)[0m     @     0x7f9bae0a88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46975)[0m     @     0x7f9babbd54f5 at::Tensor::copy_()
[2m[36m(pid=46975)[0m     @     0x7f9bb1c8079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46975)[0m     @     0x56252df39fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46975)[0m     @     0x56252de94b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46975)[0m     @     0x56252df1fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46975)[0m     @     0x56252df20a20 method_vectorcall
[2m[36m(pid=46975)[0m     @     0x56252de94bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46975)[0m     @     0x56252df1fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46975)[0m     @     0x56252df20643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46975)[0m     @     0x56252de95689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46975)[0m     @     0x56252df1fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46975)[0m     @     0x56252df20643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46975)[0m     @     0x56252de95689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46975)[0m     @     0x56252df1fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46975)[0m     @     0x56252df20643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46975)[0m     @     0x56252de95689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46975)[0m     @     0x56252df1fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46975)[0m     @     0x56252df20643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46975)[0m     @     0x56252de95689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46859)[0m     @     0x7f3caaa944f5 at::Tensor::copy_()
[2m[36m(pid=46859)[0m     @     0x7f3cacf678de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46859)[0m     @     0x7f3caaa944f5 at::Tensor::copy_()
[2m[36m(pid=46859)[0m     @     0x7f3cb0b3f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46859)[0m     @     0x556c78c5efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46859)[0m     @     0x556c78bb9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46859)[0m     @     0x556c78c44baf _PyEval_EvalCodeWithName
[2m[36m(pid=46859)[0m     @     0x556c78c45a20 method_vectorcall
[2m[36m(pid=46859)[0m     @     0x556c78bb9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46859)[0m     @     0x556c78c44baf _PyEval_EvalCodeWithName
[2m[36m(pid=46859)[0m     @     0x556c78c45643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46859)[0m     @     0x556c78bba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46859)[0m     @     0x556c78c44baf _PyEval_EvalCodeWithName
[2m[36m(pid=46859)[0m     @     0x556c78c45643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46859)[0m     @     0x556c78bba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46859)[0m     @     0x556c78c44baf _PyEval_EvalCodeWithName
[2m[36m(pid=46859)[0m     @     0x556c78c45643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46859)[0m     @     0x556c78bba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46859)[0m     @     0x556c78c44baf _PyEval_EvalCodeWithName
[2m[36m(pid=46859)[0m     @     0x556c78c45643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46859)[0m     @     0x556c78bba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46894)[0m     @     0x7f0ec0ccf5a4 at::native::copy_()
[2m[36m(pid=46894)[0m     @     0x7f0ec13ba4f5 at::Tensor::copy_()
[2m[36m(pid=46894)[0m     @     0x7f0ec388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46894)[0m     @     0x7f0ec13ba4f5 at::Tensor::copy_()
[2m[36m(pid=46894)[0m     @     0x7f0ec746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46894)[0m     @     0x55be7a2dbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46894)[0m     @     0x55be7a236b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46894)[0m     @     0x55be7a2c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46894)[0m     @     0x55be7a2c2a20 method_vectorcall
[2m[36m(pid=46894)[0m     @     0x55be7a236bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46894)[0m     @     0x55be7a2c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46894)[0m     @     0x55be7a2c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46951)[0m     @     0x7fb10c00f388 at::native::copy_impl()
[2m[36m(pid=46951)[0m     @     0x7fb10c0115a4 at::native::copy_()
[2m[36m(pid=46951)[0m     @     0x7fb10c6fc4f5 at::Tensor::copy_()
[2m[36m(pid=46951)[0m     @     0x7fb10ebcf8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46927)[0m     @     0x7f47110755a4 at::native::copy_()
[2m[36m(pid=46927)[0m     @     0x7f47117604f5 at::Tensor::copy_()
[2m[36m(pid=46927)[0m     @     0x7f4713c338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46927)[0m     @     0x7f47117604f5 at::Tensor::copy_()
[2m[36m(pid=46940)[0m     @     0x7fb3781b98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=46940)[0m     @     0x7fb3781b9ad3 at::TensorIterator::for_each()
[2m[36m(pid=46940)[0m     @     0x7fb3781b9d91 at::TensorIterator::for_each()
[2m[36m(pid=46940)[0m     @     0x7fb378a9cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46861)[0m     @     0x7f9ff88755a4 at::native::copy_()
[2m[36m(pid=46861)[0m     @     0x7f9ff8f604f5 at::Tensor::copy_()
[2m[36m(pid=46861)[0m     @     0x7f9ffb4338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46861)[0m     @     0x7f9ff8f604f5 at::Tensor::copy_()
[2m[36m(pid=46861)[0m     @     0x7f9fff00b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46861)[0m     @     0x562c46349fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46861)[0m     @     0x562c462a4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46861)[0m     @     0x562c4632fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46861)[0m     @     0x562c46330a20 method_vectorcall
[2m[36m(pid=46861)[0m     @     0x562c462a4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46861)[0m     @     0x562c4632fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46861)[0m     @     0x562c46330643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46861)[0m     @     0x562c462a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46861)[0m     @     0x562c4632fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46861)[0m     @     0x562c46330643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46861)[0m     @     0x562c462a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46861)[0m     @     0x562c4632fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46861)[0m     @     0x562c46330643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46861)[0m     @     0x562c462a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46861)[0m     @     0x562c4632fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46861)[0m     @     0x562c46330643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46861)[0m     @     0x562c462a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46925)[0m     @     0x7f5644f204f5 at::Tensor::copy_()
[2m[36m(pid=46925)[0m     @     0x7f56473f38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46925)[0m     @     0x7f5644f204f5 at::Tensor::copy_()
[2m[36m(pid=46856)[0m     @     0x7edae79cc4f5 at::Tensor::copy_()
[2m[36m(pid=46856)[0m     @     0x7edaeda7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46856)[0m     @     0x55d7d3ae5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46856)[0m     @     0x55d7d3a40b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46856)[0m     @     0x55d7d3acbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46856)[0m     @     0x55d7d3acca20 method_vectorcall
[2m[36m(pid=46856)[0m     @     0x55d7d3a40bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46856)[0m     @     0x55d7d3acbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46856)[0m     @     0x55d7d3acc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46856)[0m     @     0x55d7d3a41689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46856)[0m     @     0x55d7d3acbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46856)[0m     @     0x55d7d3acc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46856)[0m     @     0x55d7d3a41689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46856)[0m     @     0x55d7d3acbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46856)[0m     @     0x55d7d3acc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46856)[0m     @     0x55d7d3a41689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46856)[0m     @     0x55d7d3acbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46856)[0m     @     0x55d7d3acc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46856)[0m     @     0x55d7d3a41689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46864)[0m     @     0x7f3d425ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46864)[0m     @     0x7f3d400f74f5 at::Tensor::copy_()
[2m[36m(pid=46864)[0m     @     0x7f3d461a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46864)[0m     @     0x5587ddde5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46864)[0m     @     0x5587ddd40b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46864)[0m     @     0x5587dddcbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46864)[0m     @     0x5587dddcca20 method_vectorcall
[2m[36m(pid=46864)[0m     @     0x5587ddd40bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46864)[0m     @     0x5587dddcbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46864)[0m     @     0x5587dddcc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46864)[0m     @     0x5587ddd41689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46864)[0m     @     0x5587dddcbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46864)[0m     @     0x5587dddcc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46864)[0m     @     0x5587ddd41689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46864)[0m     @     0x5587dddcbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46864)[0m     @     0x5587dddcc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46864)[0m     @     0x5587ddd41689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46864)[0m     @     0x5587dddcbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46864)[0m     @     0x5587dddcc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46864)[0m     @     0x5587ddd41689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46857)[0m     @     0x7f21f749f4f5 at::Tensor::copy_()
[2m[36m(pid=46857)[0m     @     0x7f21fd54a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46857)[0m     @     0x55fabfc8afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46857)[0m     @     0x55fabfbe5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46857)[0m     @     0x55fabfc70baf _PyEval_EvalCodeWithName
[2m[36m(pid=46857)[0m     @     0x55fabfc71a20 method_vectorcall
[2m[36m(pid=46857)[0m     @     0x55fabfbe5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46857)[0m     @     0x55fabfc70baf _PyEval_EvalCodeWithName
[2m[36m(pid=46857)[0m     @     0x55fabfc71643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46857)[0m     @     0x55fabfbe6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46857)[0m     @     0x55fabfc70baf _PyEval_EvalCodeWithName
[2m[36m(pid=46857)[0m     @     0x55fabfc71643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46857)[0m     @     0x55fabfbe6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46857)[0m     @     0x55fabfc70baf _PyEval_EvalCodeWithName
[2m[36m(pid=46857)[0m     @     0x55fabfc71643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46857)[0m     @     0x55fabfbe6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46857)[0m     @     0x55fabfc70baf _PyEval_EvalCodeWithName
[2m[36m(pid=46857)[0m     @     0x55fabfc71643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46857)[0m     @     0x55fabfbe6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46868)[0m     @     0x7f10100f55a4 at::native::copy_()
[2m[36m(pid=46868)[0m     @     0x7f10107e04f5 at::Tensor::copy_()
[2m[36m(pid=46868)[0m     @     0x7f1012cb38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46887)[0m     @     0x7ef60d863ad3 at::TensorIterator::for_each()
[2m[36m(pid=46887)[0m     @     0x7ef60d863d91 at::TensorIterator::for_each()
[2m[36m(pid=46887)[0m     @     0x7ef60e146b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46913)[0m     @     0x7f775dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=46913)[0m     @     0x7f77601ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46913)[0m     @     0x7f775dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=46913)[0m     @     0x7f7763da679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46913)[0m     @     0x55a79fb50fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46913)[0m     @     0x55a79faabb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46913)[0m     @     0x55a79fb36baf _PyEval_EvalCodeWithName
[2m[36m(pid=46913)[0m     @     0x55a79fb37a20 method_vectorcall
[2m[36m(pid=46913)[0m     @     0x55a79faabbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46913)[0m     @     0x55a79fb36baf _PyEval_EvalCodeWithName
[2m[36m(pid=46913)[0m     @     0x55a79fb37643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46913)[0m     @     0x55a79faac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46842)[0m     @     0x7f2053539d91 at::TensorIterator::for_each()
[2m[36m(pid=46842)[0m     @     0x7f2053e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46842)[0m     @     0x7f2053e3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46842)[0m     @     0x7f20532e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46842)[0m     @     0x7f20532df388 at::native::copy_impl()
[2m[36m(pid=46956)[0m     @     0x7edc1177bad3 at::TensorIterator::for_each()
[2m[36m(pid=46956)[0m     @     0x7edc1177bd91 at::TensorIterator::for_each()
[2m[36m(pid=46837)[0m     @     0x7f020388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46837)[0m     @     0x7f02013ba4f5 at::Tensor::copy_()
[2m[36m(pid=46837)[0m     @     0x7f020746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46837)[0m     @     0x558ddf618fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46837)[0m     @     0x558ddf573b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46837)[0m     @     0x558ddf5febaf _PyEval_EvalCodeWithName
[2m[36m(pid=46837)[0m     @     0x558ddf5ffa20 method_vectorcall
[2m[36m(pid=46837)[0m     @     0x558ddf573bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46837)[0m     @     0x558ddf5febaf _PyEval_EvalCodeWithName
[2m[36m(pid=46837)[0m     @     0x558ddf5ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46837)[0m     @     0x558ddf574689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46837)[0m     @     0x558ddf5febaf _PyEval_EvalCodeWithName
[2m[36m(pid=46837)[0m     @     0x558ddf5ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46837)[0m     @     0x558ddf574689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46837)[0m     @     0x558ddf5febaf _PyEval_EvalCodeWithName
[2m[36m(pid=46837)[0m     @     0x558ddf5ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46837)[0m     @     0x558ddf574689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46837)[0m     @     0x558ddf5febaf _PyEval_EvalCodeWithName
[2m[36m(pid=46837)[0m     @     0x558ddf5ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46837)[0m     @     0x558ddf574689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46892)[0m     @     0x7f307f0504f5 at::Tensor::copy_()
[2m[36m(pid=46892)[0m     @     0x7f30815238de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46892)[0m     @     0x7f307f0504f5 at::Tensor::copy_()
[2m[36m(pid=46892)[0m     @     0x7f30850fb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46892)[0m     @     0x55e962995fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46892)[0m     @     0x55e9628f0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46892)[0m     @     0x55e96297bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46892)[0m     @     0x55e96297ca20 method_vectorcall
[2m[36m(pid=46892)[0m     @     0x55e9628f0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46892)[0m     @     0x55e96297bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46892)[0m     @     0x55e96297c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46892)[0m     @     0x55e9628f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46892)[0m     @     0x55e96297bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46892)[0m     @     0x55e96297c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46892)[0m     @     0x55e9628f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46892)[0m     @     0x55e96297bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46892)[0m     @     0x55e96297c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46892)[0m     @     0x55e9628f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46892)[0m     @     0x55e96297bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46892)[0m     @     0x55e96297c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46892)[0m     @     0x55e9628f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46958)[0m     @     0x7fc6d178fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46958)[0m     @     0x7fc6d178d388 at::native::copy_impl()
[2m[36m(pid=46958)[0m     @     0x7fc6d178f5a4 at::native::copy_()
[2m[36m(pid=46958)[0m     @     0x7fc6d1e7a4f5 at::Tensor::copy_()
[2m[36m(pid=46958)[0m     @     0x7fc6d434d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46839)[0m     @     0x7efe717425a4 at::native::copy_()
[2m[36m(pid=46839)[0m     @     0x7efe71e2d4f5 at::Tensor::copy_()
[2m[36m(pid=46839)[0m     @     0x7efe743008de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46839)[0m     @     0x7efe71e2d4f5 at::Tensor::copy_()
[2m[36m(pid=46839)[0m     @     0x7efe77ed879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46839)[0m     @     0x557f0072cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46839)[0m     @     0x557f00687b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46839)[0m     @     0x557f00712baf _PyEval_EvalCodeWithName
[2m[36m(pid=46839)[0m     @     0x557f00713a20 method_vectorcall
[2m[36m(pid=46839)[0m     @     0x557f00687bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46839)[0m     @     0x557f00712baf _PyEval_EvalCodeWithName
[2m[36m(pid=46839)[0m     @     0x557f00713643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46839)[0m     @     0x557f00688689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46839)[0m     @     0x557f00712baf _PyEval_EvalCodeWithName
[2m[36m(pid=46839)[0m     @     0x557f00713643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46839)[0m     @     0x557f00688689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46839)[0m     @     0x557f00712baf _PyEval_EvalCodeWithName
[2m[36m(pid=46839)[0m     @     0x557f00713643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46839)[0m     @     0x557f00688689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46836)[0m     @     0x7f3ac11b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46836)[0m     @     0x7f3abece54f5 at::Tensor::copy_()
[2m[36m(pid=46836)[0m     @     0x7f3ac4d9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46836)[0m     @     0x5583fe102fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46836)[0m     @     0x5583fe05db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46836)[0m     @     0x5583fe0e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46836)[0m     @     0x5583fe0e9a20 method_vectorcall
[2m[36m(pid=46836)[0m     @     0x5583fe05dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46836)[0m     @     0x5583fe0e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46836)[0m     @     0x5583fe0e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46836)[0m     @     0x5583fe05e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46836)[0m     @     0x5583fe0e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46836)[0m     @     0x5583fe0e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46836)[0m     @     0x5583fe05e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46836)[0m     @     0x5583fe0e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46836)[0m     @     0x5583fe0e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46836)[0m     @     0x5583fe05e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46836)[0m     @     0x5583fe0e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46836)[0m     @     0x5583fe0e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46836)[0m     @     0x5583fe05e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46869)[0m     @     0x7f451213d4f5 at::Tensor::copy_()
[2m[36m(pid=46869)[0m     @     0x7f45146108de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46869)[0m     @     0x7f451213d4f5 at::Tensor::copy_()
[2m[36m(pid=46869)[0m     @     0x7f45181e879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46869)[0m     @     0x562968863fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46869)[0m     @     0x5629687beb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46869)[0m     @     0x562968849baf _PyEval_EvalCodeWithName
[2m[36m(pid=46869)[0m     @     0x56296884aa20 method_vectorcall
[2m[36m(pid=46869)[0m     @     0x5629687bebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46869)[0m     @     0x562968849baf _PyEval_EvalCodeWithName
[2m[36m(pid=46869)[0m     @     0x56296884a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46869)[0m     @     0x5629687bf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46869)[0m     @     0x562968849baf _PyEval_EvalCodeWithName
[2m[36m(pid=46869)[0m     @     0x56296884a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46869)[0m     @     0x5629687bf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46869)[0m     @     0x562968849baf _PyEval_EvalCodeWithName
[2m[36m(pid=46869)[0m     @     0x56296884a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46869)[0m     @     0x5629687bf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46869)[0m     @     0x562968849baf _PyEval_EvalCodeWithName
[2m[36m(pid=46869)[0m     @     0x56296884a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46869)[0m     @     0x5629687bf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46845)[0m     @     0x7f4c2b5864f5 at::Tensor::copy_()
[2m[36m(pid=46845)[0m     @     0x7f4c3163179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46845)[0m     @     0x55703d88efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46845)[0m     @     0x55703d7e9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46845)[0m     @     0x55703d874baf _PyEval_EvalCodeWithName
[2m[36m(pid=46845)[0m     @     0x55703d875a20 method_vectorcall
[2m[36m(pid=46845)[0m     @     0x55703d7e9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46845)[0m     @     0x55703d874baf _PyEval_EvalCodeWithName
[2m[36m(pid=46845)[0m     @     0x55703d875643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46845)[0m     @     0x55703d7ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46845)[0m     @     0x55703d874baf _PyEval_EvalCodeWithName
[2m[36m(pid=46845)[0m     @     0x55703d875643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46845)[0m     @     0x55703d7ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46845)[0m     @     0x55703d874baf _PyEval_EvalCodeWithName
[2m[36m(pid=46845)[0m     @     0x55703d875643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46845)[0m     @     0x55703d7ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46845)[0m     @     0x55703d874baf _PyEval_EvalCodeWithName
[2m[36m(pid=46845)[0m     @     0x55703d875643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46845)[0m     @     0x55703d7ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46884)[0m     @     0x7f1c25edf4f5 at::Tensor::copy_()
[2m[36m(pid=46884)[0m     @     0x7f1c2bf8a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46884)[0m     @     0x5604c5da6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46884)[0m     @     0x5604c5d01b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46884)[0m     @     0x5604c5d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46884)[0m     @     0x5604c5d8da20 method_vectorcall
[2m[36m(pid=46884)[0m     @     0x5604c5d01bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46884)[0m     @     0x5604c5d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46884)[0m     @     0x5604c5d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46884)[0m     @     0x5604c5d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46884)[0m     @     0x5604c5d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46884)[0m     @     0x5604c5d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46884)[0m     @     0x5604c5d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46884)[0m     @     0x5604c5d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46884)[0m     @     0x5604c5d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46884)[0m     @     0x5604c5d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46884)[0m     @     0x5604c5d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46884)[0m     @     0x5604c5d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46884)[0m     @     0x5604c5d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46873)[0m     @     0x7f3cc77888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46873)[0m     @     0x7f3cc52b54f5 at::Tensor::copy_()
[2m[36m(pid=46873)[0m     @     0x7f3ccb36079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46873)[0m     @     0x55629d6aafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46873)[0m     @     0x55629d605b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46873)[0m     @     0x55629d690baf _PyEval_EvalCodeWithName
[2m[36m(pid=46873)[0m     @     0x55629d691a20 method_vectorcall
[2m[36m(pid=46873)[0m     @     0x55629d605bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46860)[0m     @     0x7ece38ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46860)[0m     @     0x7ece367d64f5 at::Tensor::copy_()
[2m[36m(pid=46860)[0m     @     0x7ece3c47779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46860)[0m     @     0x564754171fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46860)[0m     @     0x5647540ccb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46860)[0m     @     0x564754157baf _PyEval_EvalCodeWithName
[2m[36m(pid=46860)[0m     @     0x564754158a20 method_vectorcall
[2m[36m(pid=46860)[0m     @     0x5647540ccbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46860)[0m     @     0x564754157baf _PyEval_EvalCodeWithName
[2m[36m(pid=46860)[0m     @     0x564754158643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46860)[0m     @     0x5647540cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46860)[0m     @     0x564754157baf _PyEval_EvalCodeWithName
[2m[36m(pid=46860)[0m     @     0x564754158643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46860)[0m     @     0x5647540cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46860)[0m     @     0x564754157baf _PyEval_EvalCodeWithName
[2m[36m(pid=46860)[0m     @     0x564754158643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46860)[0m     @     0x5647540cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46860)[0m     @     0x564754157baf _PyEval_EvalCodeWithName
[2m[36m(pid=46860)[0m     @     0x564754158643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46860)[0m     @     0x5647540cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46972)[0m     @     0x7edd94a654f5 at::Tensor::copy_()
[2m[36m(pid=46972)[0m     @     0x7edd96f388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46972)[0m     @     0x7edd94a654f5 at::Tensor::copy_()
[2m[36m(pid=46972)[0m     @     0x7edd9ab1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46972)[0m     @     0x5601ba9f3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46972)[0m     @     0x5601ba94eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46972)[0m     @     0x5601ba9d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46972)[0m     @     0x5601ba9daa20 method_vectorcall
[2m[36m(pid=46972)[0m     @     0x5601ba94ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46972)[0m     @     0x5601ba9d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46972)[0m     @     0x5601ba9da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46972)[0m     @     0x5601ba94f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46972)[0m     @     0x5601ba9d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46972)[0m     @     0x5601ba9da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46972)[0m     @     0x5601ba94f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46972)[0m     @     0x5601ba9d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46972)[0m     @     0x5601ba9da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46972)[0m     @     0x5601ba94f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46972)[0m     @     0x5601ba9d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=46972)[0m     @     0x5601ba9da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46972)[0m     @     0x5601ba94f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46896)[0m     @     0x55d5dfe1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46896)[0m     @     0x55d5dfea5baf _PyEval_EvalCodeWithName
[2m[36m(pid=46896)[0m     @     0x55d5dfea6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46896)[0m     @     0x55d5dfe1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46896)[0m     @     0x55d5dfea5baf _PyEval_EvalCodeWithName
[2m[36m(pid=46896)[0m     @     0x55d5dfea6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46896)[0m     @     0x55d5dfe1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46896)[0m     @     0x55d5dfea5baf _PyEval_EvalCodeWithName
[2m[36m(pid=46896)[0m     @     0x55d5dfea6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46896)[0m     @     0x55d5dfe1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46923)[0m     @     0x7fa990c094f5 at::Tensor::copy_()
[2m[36m(pid=46923)[0m     @     0x7fa996cb479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46923)[0m     @     0x55b879611fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46923)[0m     @     0x55b87956cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46923)[0m     @     0x55b8795f7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46923)[0m     @     0x55b8795f8a20 method_vectorcall
[2m[36m(pid=46923)[0m     @     0x55b87956cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46923)[0m     @     0x55b8795f7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46923)[0m     @     0x55b8795f8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46923)[0m     @     0x55b87956d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46923)[0m     @     0x55b8795f7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46923)[0m     @     0x55b8795f8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46923)[0m     @     0x55b87956d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46923)[0m     @     0x55b8795f7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46923)[0m     @     0x55b8795f8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46923)[0m     @     0x55b87956d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46923)[0m     @     0x55b8795f7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46923)[0m     @     0x55b8795f8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46923)[0m     @     0x55b87956d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46938)[0m     @     0x7fcc3265479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46938)[0m     @     0x557ede841fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46938)[0m     @     0x557ede79cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46938)[0m     @     0x557ede827baf _PyEval_EvalCodeWithName
[2m[36m(pid=46938)[0m     @     0x557ede828a20 method_vectorcall
[2m[36m(pid=46938)[0m     @     0x557ede79cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46938)[0m     @     0x557ede827baf _PyEval_EvalCodeWithName
[2m[36m(pid=46938)[0m     @     0x557ede828643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46938)[0m     @     0x557ede79d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46938)[0m     @     0x557ede827baf _PyEval_EvalCodeWithName
[2m[36m(pid=46938)[0m     @     0x557ede828643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46938)[0m     @     0x557ede79d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46938)[0m     @     0x557ede827baf _PyEval_EvalCodeWithName
[2m[36m(pid=46938)[0m     @     0x557ede828643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46938)[0m     @     0x557ede79d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46938)[0m     @     0x557ede827baf _PyEval_EvalCodeWithName
[2m[36m(pid=46938)[0m     @     0x557ede828643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46938)[0m     @     0x557ede79d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46948)[0m     @     0x561c52e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46948)[0m     @     0x561c52e3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46948)[0m     @     0x561c52db1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46970)[0m     @     0x7f93b34c14f5 at::Tensor::copy_()
[2m[36m(pid=46970)[0m     @     0x7f93b956c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46970)[0m     @     0x55f0a653efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46970)[0m     @     0x55f0a6499b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46970)[0m     @     0x55f0a6524baf _PyEval_EvalCodeWithName
[2m[36m(pid=46970)[0m     @     0x55f0a6525a20 method_vectorcall
[2m[36m(pid=46970)[0m     @     0x55f0a6499bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46970)[0m     @     0x55f0a6524baf _PyEval_EvalCodeWithName
[2m[36m(pid=46970)[0m     @     0x55f0a6525643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46970)[0m     @     0x55f0a649a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46970)[0m     @     0x55f0a6524baf _PyEval_EvalCodeWithName
[2m[36m(pid=46970)[0m     @     0x55f0a6525643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46970)[0m     @     0x55f0a649a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46970)[0m     @     0x55f0a6524baf _PyEval_EvalCodeWithName
[2m[36m(pid=46970)[0m     @     0x55f0a6525643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46970)[0m     @     0x55f0a649a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46970)[0m     @     0x55f0a6524baf _PyEval_EvalCodeWithName
[2m[36m(pid=46970)[0m     @     0x55f0a6525643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46970)[0m     @     0x55f0a649a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46853)[0m     @     0x7f88715238de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46853)[0m     @     0x7f886f0504f5 at::Tensor::copy_()
[2m[36m(pid=46853)[0m     @     0x7f88750fb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46853)[0m     @     0x559738dfdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46853)[0m     @     0x559738d58b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46853)[0m     @     0x559738de3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46853)[0m     @     0x559738de4a20 method_vectorcall
[2m[36m(pid=46853)[0m     @     0x559738d58bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46853)[0m     @     0x559738de3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46853)[0m     @     0x559738de4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46853)[0m     @     0x559738d59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46853)[0m     @     0x559738de3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46853)[0m     @     0x559738de4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46853)[0m     @     0x559738d59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46853)[0m     @     0x559738de3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46853)[0m     @     0x559738de4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46853)[0m     @     0x559738d59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46853)[0m     @     0x559738de3baf _PyEval_EvalCodeWithName
[2m[36m(pid=46853)[0m     @     0x559738de4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46853)[0m     @     0x559738d59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46871)[0m     @     0x7fa5a6299a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46871)[0m     @     0x7fa5a6297388 at::native::copy_impl()
[2m[36m(pid=46871)[0m     @     0x7fa5a62995a4 at::native::copy_()
[2m[36m(pid=46871)[0m     @     0x7fa5a69844f5 at::Tensor::copy_()
[2m[36m(pid=46885)[0m     @     0x7f828170d388 at::native::copy_impl()
[2m[36m(pid=46885)[0m     @     0x7f828170f5a4 at::native::copy_()
[2m[36m(pid=46885)[0m     @     0x7f8281dfa4f5 at::Tensor::copy_()
[2m[36m(pid=46885)[0m     @     0x7f82842cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46850)[0m     @     0x561961c9cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46850)[0m     @     0x561961bf7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46850)[0m     @     0x561961c82baf _PyEval_EvalCodeWithName
[2m[36m(pid=46850)[0m     @     0x561961c83a20 method_vectorcall
[2m[36m(pid=46850)[0m     @     0x561961bf7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46850)[0m     @     0x561961c82baf _PyEval_EvalCodeWithName
[2m[36m(pid=46850)[0m     @     0x561961c83643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46850)[0m     @     0x561961bf8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46850)[0m     @     0x561961c82baf _PyEval_EvalCodeWithName
[2m[36m(pid=46850)[0m     @     0x561961c83643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46850)[0m     @     0x561961bf8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46850)[0m     @     0x561961c82baf _PyEval_EvalCodeWithName
[2m[36m(pid=46850)[0m     @     0x561961c83643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46850)[0m     @     0x561961bf8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46850)[0m     @     0x561961c82baf _PyEval_EvalCodeWithName
[2m[36m(pid=46850)[0m     @     0x561961c83643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46850)[0m     @     0x561961bf8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46854)[0m     @     0x7f81197604f5 at::Tensor::copy_()
[2m[36m(pid=46854)[0m     @     0x7f811f80b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46854)[0m     @     0x55714196cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46854)[0m     @     0x5571418c7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46854)[0m     @     0x557141952baf _PyEval_EvalCodeWithName
[2m[36m(pid=46854)[0m     @     0x557141953a20 method_vectorcall
[2m[36m(pid=46854)[0m     @     0x5571418c7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46854)[0m     @     0x557141952baf _PyEval_EvalCodeWithName
[2m[36m(pid=46854)[0m     @     0x557141953643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46854)[0m     @     0x5571418c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46854)[0m     @     0x557141952baf _PyEval_EvalCodeWithName
[2m[36m(pid=46854)[0m     @     0x557141953643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46854)[0m     @     0x5571418c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46854)[0m     @     0x557141952baf _PyEval_EvalCodeWithName
[2m[36m(pid=46854)[0m     @     0x557141953643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46854)[0m     @     0x5571418c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46854)[0m     @     0x557141952baf _PyEval_EvalCodeWithName
[2m[36m(pid=46854)[0m     @     0x557141953643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46854)[0m     @     0x5571418c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46929)[0m     @     0x7faec48354f5 at::Tensor::copy_()
[2m[36m(pid=46929)[0m     @     0x7faeca8e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46929)[0m     @     0x55f85b3b2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46929)[0m     @     0x55f85b30db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46929)[0m     @     0x55f85b398baf _PyEval_EvalCodeWithName
[2m[36m(pid=46929)[0m     @     0x55f85b399a20 method_vectorcall
[2m[36m(pid=46929)[0m     @     0x55f85b30dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46929)[0m     @     0x55f85b398baf _PyEval_EvalCodeWithName
[2m[36m(pid=46929)[0m     @     0x55f85b399643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46929)[0m     @     0x55f85b30e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46929)[0m     @     0x55f85b398baf _PyEval_EvalCodeWithName
[2m[36m(pid=46929)[0m     @     0x55f85b399643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46929)[0m     @     0x55f85b30e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46929)[0m     @     0x55f85b398baf _PyEval_EvalCodeWithName
[2m[36m(pid=46929)[0m     @     0x55f85b399643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46929)[0m     @     0x55f85b30e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46929)[0m     @     0x55f85b398baf _PyEval_EvalCodeWithName
[2m[36m(pid=46929)[0m     @     0x55f85b399643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46929)[0m     @     0x55f85b30e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46847)[0m     @     0x5640eabf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46847)[0m     @     0x5640eabf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46847)[0m     @     0x5640eab67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46847)[0m     @     0x5640eabf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46847)[0m     @     0x5640eabf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46847)[0m     @     0x5640eab67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46847)[0m     @     0x5640eabf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46847)[0m     @     0x5640eabf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46847)[0m     @     0x5640eab67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46847)[0m     @     0x5640eabf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46847)[0m     @     0x5640eabf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46847)[0m     @     0x5640eab67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46849)[0m     @     0x5646d210d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46978)[0m     @     0x7f74c7467d91 at::TensorIterator::for_each()
[2m[36m(pid=46978)[0m     @     0x7f74c7d4ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46978)[0m     @     0x7f74c7d6dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46978)[0m     @     0x7f74c720fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46978)[0m     @     0x7f74c720d388 at::native::copy_impl()
[2m[36m(pid=46902)[0m     @     0x7f2a3e4fb4f5 at::Tensor::copy_()
[2m[36m(pid=46902)[0m     @     0x7f2a409ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46902)[0m     @     0x7f2a3e4fb4f5 at::Tensor::copy_()
[2m[36m(pid=46902)[0m     @     0x7f2a445a679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46902)[0m     @     0x564ce8732fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46902)[0m     @     0x564ce868db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46902)[0m     @     0x564ce8718baf _PyEval_EvalCodeWithName
[2m[36m(pid=46902)[0m     @     0x564ce8719a20 method_vectorcall
[2m[36m(pid=46902)[0m     @     0x564ce868dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46902)[0m     @     0x564ce8718baf _PyEval_EvalCodeWithName
[2m[36m(pid=46902)[0m     @     0x564ce8719643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46902)[0m     @     0x564ce868e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46902)[0m     @     0x564ce8718baf _PyEval_EvalCodeWithName
[2m[36m(pid=46902)[0m     @     0x564ce8719643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46902)[0m     @     0x564ce868e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46902)[0m     @     0x564ce8718baf _PyEval_EvalCodeWithName
[2m[36m(pid=46902)[0m     @     0x564ce8719643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46902)[0m     @     0x564ce868e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46902)[0m     @     0x564ce8718baf _PyEval_EvalCodeWithName
[2m[36m(pid=46902)[0m     @     0x564ce8719643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46902)[0m     @     0x564ce868e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46965)[0m     @     0x7ed920f158de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46965)[0m     @     0x7ed91ea424f5 at::Tensor::copy_()
[2m[36m(pid=46965)[0m     @     0x7ed924aed79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46965)[0m     @     0x55976a4e7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46965)[0m     @     0x55976a442b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46965)[0m     @     0x55976a4cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46965)[0m     @     0x55976a4cea20 method_vectorcall
[2m[36m(pid=46965)[0m     @     0x55976a442bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46965)[0m     @     0x55976a4cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46965)[0m     @     0x55976a4ce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46965)[0m     @     0x55976a443689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46965)[0m     @     0x55976a4cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46965)[0m     @     0x55976a4ce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46965)[0m     @     0x55976a443689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46965)[0m     @     0x55976a4cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46965)[0m     @     0x55976a4ce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46965)[0m     @     0x55976a443689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46965)[0m     @     0x55976a4cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46965)[0m     @     0x55976a4ce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46965)[0m     @     0x55976a443689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46906)[0m     @     0x7ee79ca384f5 at::Tensor::copy_()
[2m[36m(pid=46906)[0m     @     0x7ee7a2ae379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46906)[0m     @     0x5633a6da6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46906)[0m     @     0x5633a6d01b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46906)[0m     @     0x5633a6d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46906)[0m     @     0x5633a6d8da20 method_vectorcall
[2m[36m(pid=46906)[0m     @     0x5633a6d01bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46906)[0m     @     0x5633a6d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46906)[0m     @     0x5633a6d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46906)[0m     @     0x5633a6d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46906)[0m     @     0x5633a6d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46906)[0m     @     0x5633a6d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46906)[0m     @     0x5633a6d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46906)[0m     @     0x5633a6d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46906)[0m     @     0x5633a6d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46906)[0m     @     0x5633a6d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46906)[0m     @     0x5633a6d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46906)[0m     @     0x5633a6d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46906)[0m     @     0x5633a6d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46841)[0m     @     0x56300fd08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46841)[0m     @     0x56300fd92baf _PyEval_EvalCodeWithName
[2m[36m(pid=46841)[0m     @     0x56300fd93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46841)[0m     @     0x56300fd08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46841)[0m     @     0x56300fd92baf _PyEval_EvalCodeWithName
[2m[36m(pid=46841)[0m     @     0x56300fd93643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46841)[0m     @     0x56300fd08689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46894)[0m     @     0x55be7a237689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46894)[0m     @     0x55be7a2c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46894)[0m     @     0x55be7a2c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46894)[0m     @     0x55be7a237689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46894)[0m     @     0x55be7a2c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46894)[0m     @     0x55be7a2c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46894)[0m     @     0x55be7a237689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46894)[0m     @     0x55be7a2c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=46894)[0m     @     0x55be7a2c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46894)[0m     @     0x55be7a237689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46951)[0m     @     0x7fb10c6fc4f5 at::Tensor::copy_()
[2m[36m(pid=46951)[0m     @     0x7fb1127a779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46951)[0m     @     0x55f30f0f2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46951)[0m     @     0x55f30f04db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46951)[0m     @     0x55f30f0d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46951)[0m     @     0x55f30f0d9a20 method_vectorcall
[2m[36m(pid=46951)[0m     @     0x55f30f04dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46951)[0m     @     0x55f30f0d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46951)[0m     @     0x55f30f0d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46951)[0m     @     0x55f30f04e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46951)[0m     @     0x55f30f0d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46951)[0m     @     0x55f30f0d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46951)[0m     @     0x55f30f04e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46951)[0m     @     0x55f30f0d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46951)[0m     @     0x55f30f0d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46951)[0m     @     0x55f30f04e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46951)[0m     @     0x55f30f0d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46951)[0m     @     0x55f30f0d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46951)[0m     @     0x55f30f04e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46927)[0m     @     0x7f471780b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46927)[0m     @     0x55fd6cddefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46927)[0m     @     0x55fd6cd39b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46927)[0m     @     0x55fd6cdc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46927)[0m     @     0x55fd6cdc5a20 method_vectorcall
[2m[36m(pid=46927)[0m     @     0x55fd6cd39bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46927)[0m     @     0x55fd6cdc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46927)[0m     @     0x55fd6cdc5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46927)[0m     @     0x55fd6cd3a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46927)[0m     @     0x55fd6cdc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46927)[0m     @     0x55fd6cdc5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46927)[0m     @     0x55fd6cd3a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46927)[0m     @     0x55fd6cdc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46927)[0m     @     0x55fd6cdc5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46927)[0m     @     0x55fd6cd3a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46927)[0m     @     0x55fd6cdc4baf _PyEval_EvalCodeWithName
[2m[36m(pid=46927)[0m     @     0x55fd6cdc5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46927)[0m     @     0x55fd6cd3a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46940)[0m     @     0x7fb378abfc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46940)[0m     @     0x7fb377f61a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46940)[0m     @     0x7fb377f5f388 at::native::copy_impl()
[2m[36m(pid=46940)[0m     @     0x7fb377f615a4 at::native::copy_()
[2m[36m(pid=46925)[0m     @     0x7f564afcb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46925)[0m     @     0x55ad84d02fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46925)[0m     @     0x55ad84c5db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46925)[0m     @     0x55ad84ce8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46925)[0m     @     0x55ad84ce9a20 method_vectorcall
[2m[36m(pid=46925)[0m     @     0x55ad84c5dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46925)[0m     @     0x55ad84ce8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46925)[0m     @     0x55ad84ce9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46925)[0m     @     0x55ad84c5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46925)[0m     @     0x55ad84ce8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46925)[0m     @     0x55ad84ce9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46925)[0m     @     0x55ad84c5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46925)[0m     @     0x55ad84ce8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46925)[0m     @     0x55ad84ce9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46925)[0m     @     0x55ad84c5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46925)[0m     @     0x55ad84ce8baf _PyEval_EvalCodeWithName
[2m[36m(pid=46925)[0m     @     0x55ad84ce9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46925)[0m     @     0x55ad84c5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46868)[0m     @     0x7f10107e04f5 at::Tensor::copy_()
[2m[36m(pid=46868)[0m     @     0x7f101688b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46868)[0m     @     0x5610742e0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46868)[0m     @     0x56107423bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46868)[0m     @     0x5610742c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=46868)[0m     @     0x5610742c7a20 method_vectorcall
[2m[36m(pid=46868)[0m     @     0x56107423bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46868)[0m     @     0x5610742c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=46868)[0m     @     0x5610742c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46868)[0m     @     0x56107423c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46868)[0m     @     0x5610742c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=46868)[0m     @     0x5610742c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46868)[0m     @     0x56107423c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46868)[0m     @     0x5610742c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=46868)[0m     @     0x5610742c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46868)[0m     @     0x56107423c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46868)[0m     @     0x5610742c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=46868)[0m     @     0x5610742c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46868)[0m     @     0x56107423c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46887)[0m     @     0x7ef60e169c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46887)[0m     @     0x7ef60d60ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46887)[0m     @     0x7ef60d609388 at::native::copy_impl()
[2m[36m(pid=46887)[0m     @     0x7ef60d60b5a4 at::native::copy_()
[2m[36m(pid=46913)[0m     @     0x55a79fb36baf _PyEval_EvalCodeWithName
[2m[36m(pid=46913)[0m     @     0x55a79fb37643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46913)[0m     @     0x55a79faac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46913)[0m     @     0x55a79fb36baf _PyEval_EvalCodeWithName
[2m[36m(pid=46913)[0m     @     0x55a79fb37643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46913)[0m     @     0x55a79faac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46913)[0m     @     0x55a79fb36baf _PyEval_EvalCodeWithName
[2m[36m(pid=46913)[0m     @     0x55a79fb37643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46913)[0m     @     0x55a79faac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46842)[0m     @     0x7f20532e15a4 at::native::copy_()
[2m[36m(pid=46842)[0m     @     0x7f20539cc4f5 at::Tensor::copy_()
[2m[36m(pid=46842)[0m     @     0x7f2055e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46842)[0m     @     0x7f20539cc4f5 at::Tensor::copy_()
[2m[36m(pid=46956)[0m     @     0x7edc1205eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=46956)[0m     @     0x7edc12081c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=46956)[0m     @     0x7edc11523a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=46956)[0m     @     0x7edc11521388 at::native::copy_impl()
[2m[36m(pid=46958)[0m     @     0x7fc6d1e7a4f5 at::Tensor::copy_()
[2m[36m(pid=46958)[0m     @     0x7fc6d7f2579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46958)[0m     @     0x55a997f0cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46958)[0m     @     0x55a997e67b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46958)[0m     @     0x55a997ef2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46958)[0m     @     0x55a997ef3a20 method_vectorcall
[2m[36m(pid=46958)[0m     @     0x55a997e67bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46958)[0m     @     0x55a997ef2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46958)[0m     @     0x55a997ef3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46958)[0m     @     0x55a997e68689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46958)[0m     @     0x55a997ef2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46958)[0m     @     0x55a997ef3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46958)[0m     @     0x55a997e68689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46958)[0m     @     0x55a997ef2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46958)[0m     @     0x55a997ef3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46958)[0m     @     0x55a997e68689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46958)[0m     @     0x55a997ef2baf _PyEval_EvalCodeWithName
[2m[36m(pid=46958)[0m     @     0x55a997ef3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46958)[0m     @     0x55a997e68689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46839)[0m     @     0x557f00712baf _PyEval_EvalCodeWithName
[2m[36m(pid=46839)[0m     @     0x557f00713643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46839)[0m     @     0x557f00688689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46873)[0m     @     0x55629d690baf _PyEval_EvalCodeWithName
[2m[36m(pid=46873)[0m     @     0x55629d691643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46873)[0m     @     0x55629d606689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46873)[0m     @     0x55629d690baf _PyEval_EvalCodeWithName
[2m[36m(pid=46873)[0m     @     0x55629d691643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46873)[0m     @     0x55629d606689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46873)[0m     @     0x55629d690baf _PyEval_EvalCodeWithName
[2m[36m(pid=46873)[0m     @     0x55629d691643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46873)[0m     @     0x55629d606689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46873)[0m     @     0x55629d690baf _PyEval_EvalCodeWithName
[2m[36m(pid=46873)[0m     @     0x55629d691643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46873)[0m     @     0x55629d606689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46871)[0m     @     0x7fa5a8e578de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46871)[0m     @     0x7fa5a69844f5 at::Tensor::copy_()
[2m[36m(pid=46871)[0m     @     0x7fa5aca2f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46871)[0m     @     0x557071036fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46871)[0m     @     0x557070f91b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46871)[0m     @     0x55707101cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46871)[0m     @     0x55707101da20 method_vectorcall
[2m[36m(pid=46871)[0m     @     0x557070f91bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46871)[0m     @     0x55707101cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46871)[0m     @     0x55707101d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46871)[0m     @     0x557070f92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46871)[0m     @     0x55707101cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46871)[0m     @     0x55707101d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46871)[0m     @     0x557070f92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46871)[0m     @     0x55707101cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46871)[0m     @     0x55707101d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46871)[0m     @     0x557070f92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46871)[0m     @     0x55707101cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46871)[0m     @     0x55707101d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46871)[0m     @     0x557070f92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46885)[0m     @     0x7f8281dfa4f5 at::Tensor::copy_()
[2m[36m(pid=46885)[0m     @     0x7f8287ea579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46885)[0m     @     0x5559aeac9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46885)[0m     @     0x5559aea24b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46885)[0m     @     0x5559aeaafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46885)[0m     @     0x5559aeab0a20 method_vectorcall
[2m[36m(pid=46885)[0m     @     0x5559aea24bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46885)[0m     @     0x5559aeaafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46885)[0m     @     0x5559aeab0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46885)[0m     @     0x5559aea25689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46885)[0m     @     0x5559aeaafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46885)[0m     @     0x5559aeab0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46885)[0m     @     0x5559aea25689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46885)[0m     @     0x5559aeaafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46885)[0m     @     0x5559aeab0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46885)[0m     @     0x5559aea25689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46885)[0m     @     0x5559aeaafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46885)[0m     @     0x5559aeab0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46885)[0m     @     0x5559aea25689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46978)[0m     @     0x7f74c720f5a4 at::native::copy_()
[2m[36m(pid=46978)[0m     @     0x7f74c78fa4f5 at::Tensor::copy_()
[2m[36m(pid=46978)[0m     @     0x7f74c9dcd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46940)[0m     @     0x7fb37864c4f5 at::Tensor::copy_()
[2m[36m(pid=46940)[0m     @     0x7fb37ab1f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46887)[0m     @     0x7ef60dcf64f5 at::Tensor::copy_()
[2m[36m(pid=46887)[0m     @     0x7ef6101c98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46887)[0m     @     0x7ef60dcf64f5 at::Tensor::copy_()
[2m[36m(pid=46842)[0m     @     0x7f2059a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46842)[0m     @     0x55db9daa4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46842)[0m     @     0x55db9d9ffb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46842)[0m     @     0x55db9da8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46842)[0m     @     0x55db9da8ba20 method_vectorcall
[2m[36m(pid=46842)[0m     @     0x55db9d9ffbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46842)[0m     @     0x55db9da8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46842)[0m     @     0x55db9da8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46842)[0m     @     0x55db9da00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46842)[0m     @     0x55db9da8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46842)[0m     @     0x55db9da8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46842)[0m     @     0x55db9da00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46842)[0m     @     0x55db9da8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46842)[0m     @     0x55db9da8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46842)[0m     @     0x55db9da00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46842)[0m     @     0x55db9da8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=46842)[0m     @     0x55db9da8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46842)[0m     @     0x55db9da00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46956)[0m     @     0x7edc115235a4 at::native::copy_()
[2m[36m(pid=46956)[0m     @     0x7edc11c0e4f5 at::Tensor::copy_()
[2m[36m(pid=46956)[0m     @     0x7edc140e18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=46956)[0m     @     0x7edc11c0e4f5 at::Tensor::copy_()
[2m[36m(pid=46956)[0m     @     0x7edc17cb979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46956)[0m     @     0x55f718cd9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46978)[0m     @     0x7f74c78fa4f5 at::Tensor::copy_()
[2m[36m(pid=46978)[0m     @     0x7f74cd9a579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46978)[0m     @     0x56325d132fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46978)[0m     @     0x56325d08db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46978)[0m     @     0x56325d118baf _PyEval_EvalCodeWithName
[2m[36m(pid=46978)[0m     @     0x56325d119a20 method_vectorcall
[2m[36m(pid=46978)[0m     @     0x56325d08dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46978)[0m     @     0x56325d118baf _PyEval_EvalCodeWithName
[2m[36m(pid=46978)[0m     @     0x56325d119643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46978)[0m     @     0x56325d08e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46978)[0m     @     0x56325d118baf _PyEval_EvalCodeWithName
[2m[36m(pid=46978)[0m     @     0x56325d119643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46978)[0m     @     0x56325d08e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46978)[0m     @     0x56325d118baf _PyEval_EvalCodeWithName
[2m[36m(pid=46978)[0m     @     0x56325d119643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46978)[0m     @     0x56325d08e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46978)[0m     @     0x56325d118baf _PyEval_EvalCodeWithName
[2m[36m(pid=46978)[0m     @     0x56325d119643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46978)[0m     @     0x56325d08e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46940)[0m     @     0x7fb37864c4f5 at::Tensor::copy_()
[2m[36m(pid=46940)[0m     @     0x7fb37e6f779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46940)[0m     @     0x564ddba2dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46940)[0m     @     0x564ddb988b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46940)[0m     @     0x564ddba13baf _PyEval_EvalCodeWithName
[2m[36m(pid=46940)[0m     @     0x564ddba14a20 method_vectorcall
[2m[36m(pid=46940)[0m     @     0x564ddb988bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46940)[0m     @     0x564ddba13baf _PyEval_EvalCodeWithName
[2m[36m(pid=46940)[0m     @     0x564ddba14643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46940)[0m     @     0x564ddb989689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46940)[0m     @     0x564ddba13baf _PyEval_EvalCodeWithName
[2m[36m(pid=46940)[0m     @     0x564ddba14643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46940)[0m     @     0x564ddb989689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46940)[0m     @     0x564ddba13baf _PyEval_EvalCodeWithName
[2m[36m(pid=46940)[0m     @     0x564ddba14643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46940)[0m     @     0x564ddb989689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46940)[0m     @     0x564ddba13baf _PyEval_EvalCodeWithName
[2m[36m(pid=46940)[0m     @     0x564ddba14643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46940)[0m     @     0x564ddb989689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46887)[0m     @     0x7ef613da179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=46887)[0m     @     0x5640186e1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=46887)[0m     @     0x56401863cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46887)[0m     @     0x5640186c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46887)[0m     @     0x5640186c8a20 method_vectorcall
[2m[36m(pid=46887)[0m     @     0x56401863cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46887)[0m     @     0x5640186c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46887)[0m     @     0x5640186c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46887)[0m     @     0x56401863d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46887)[0m     @     0x5640186c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46887)[0m     @     0x5640186c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46887)[0m     @     0x56401863d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46887)[0m     @     0x5640186c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46887)[0m     @     0x5640186c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46887)[0m     @     0x56401863d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46887)[0m     @     0x5640186c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=46887)[0m     @     0x5640186c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46887)[0m     @     0x56401863d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46956)[0m     @     0x55f718c34b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46956)[0m     @     0x55f718cbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46956)[0m     @     0x55f718cc0a20 method_vectorcall
[2m[36m(pid=46956)[0m     @     0x55f718c34bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46956)[0m     @     0x55f718cbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46956)[0m     @     0x55f718cc0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46956)[0m     @     0x55f718c35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46956)[0m     @     0x55f718cbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46956)[0m     @     0x55f718cc0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46956)[0m     @     0x55f718c35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46956)[0m     @     0x55f718cbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46956)[0m     @     0x55f718cc0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46956)[0m     @     0x55f718c35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=46956)[0m     @     0x55f718cbfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=46956)[0m     @     0x55f718cc0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=46956)[0m     @     0x55f718c35689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:09:55,777	ERROR trial_runner.py:567 -- Trial PPO_jss_env_09655_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=46936, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
2020-11-05 10:09:55,781	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.
2020-11-05 10:09:55,782	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.
== Status ==
Memory usage on this node: 24.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_09655_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_09655_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_09655_00000_0_2020-11-05_10-09-48/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

== Status ==
Memory usage on this node: 24.1/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_09655_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_09655_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_09655_00000_0_2020-11-05_10-09-48/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_09655_00000])
