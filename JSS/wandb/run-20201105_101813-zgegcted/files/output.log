2020-11-05 10:18:15,636	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 15.6/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/558.25 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_3868e_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=9762)[0m 2020-11-05 10:18:18,436	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=9763)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9763)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9763)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9763)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9763)[0m *** SIGSEGV (@0x0) received by PID 9763 (TID 0x7fe90c9a3700) from PID 0; stack trace: ***
[2m[36m(pid=9763)[0m     @     0x7fe90c57c390 (unknown)
[2m[36m(pid=9763)[0m     @     0x7fba0c521f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9763)[0m     @     0x7fba0bc4c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9763)[0m     @     0x7fba0bc4f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9763)[0m     @     0x7fba0bc4fad3 at::TensorIterator::for_each()
[2m[36m(pid=9763)[0m     @     0x7fba0bc4fd91 at::TensorIterator::for_each()
[2m[36m(pid=9763)[0m     @     0x7fba0c532b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9717)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9717)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9717)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9717)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9717)[0m *** SIGSEGV (@0x0) received by PID 9717 (TID 0x7fa5113ec700) from PID 0; stack trace: ***
[2m[36m(pid=9717)[0m     @     0x7fa510fc5390 (unknown)
[2m[36m(pid=9717)[0m     @     0x7f7610f4ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9717)[0m     @     0x7f761067a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9717)[0m     @     0x7f761067d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9717)[0m     @     0x7f761067dad3 at::TensorIterator::for_each()
[2m[36m(pid=9649)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9649)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9649)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9649)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9649)[0m *** SIGSEGV (@0x0) received by PID 9649 (TID 0x7f9bfe4da700) from PID 0; stack trace: ***
[2m[36m(pid=9649)[0m     @     0x7f9bfe0b3390 (unknown)
[2m[36m(pid=9649)[0m     @     0x7f6cfdd89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9649)[0m     @     0x7f6cfd4b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9649)[0m     @     0x7f6cfd4b78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9649)[0m     @     0x7f6cfd4b7ad3 at::TensorIterator::for_each()
[2m[36m(pid=9715)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9715)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9715)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9715)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9715)[0m *** SIGSEGV (@0x0) received by PID 9715 (TID 0x7f0eae3f4700) from PID 0; stack trace: ***
[2m[36m(pid=9715)[0m     @     0x7f0eadfcd390 (unknown)
[2m[36m(pid=9715)[0m     @     0x7edfade24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9715)[0m     @     0x7edfad54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9715)[0m     @     0x7edfad5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9715)[0m     @     0x7edfad552ad3 at::TensorIterator::for_each()
[2m[36m(pid=9715)[0m     @     0x7edfad552d91 at::TensorIterator::for_each()
[2m[36m(pid=9748)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9748)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9748)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9748)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9748)[0m *** SIGSEGV (@0x0) received by PID 9748 (TID 0x7f965c41c700) from PID 0; stack trace: ***
[2m[36m(pid=9748)[0m     @     0x7f965bff5390 (unknown)
[2m[36m(pid=9748)[0m     @     0x7f675bed8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9748)[0m     @     0x7f675b6037db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9748)[0m     @     0x7f675b6068f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9748)[0m     @     0x7f675b606ad3 at::TensorIterator::for_each()
[2m[36m(pid=9748)[0m     @     0x7f675b606d91 at::TensorIterator::for_each()
[2m[36m(pid=9748)[0m     @     0x7f675bee9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9748)[0m     @     0x7f675bf0cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9669)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9669)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9669)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9669)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9669)[0m *** SIGSEGV (@0x0) received by PID 9669 (TID 0x7fddda3ec700) from PID 0; stack trace: ***
[2m[36m(pid=9669)[0m     @     0x7fddd9fc5390 (unknown)
[2m[36m(pid=9669)[0m     @     0x7faed9e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9669)[0m     @     0x7faed954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9669)[0m     @     0x7faed95528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9669)[0m     @     0x7faed9552ad3 at::TensorIterator::for_each()
[2m[36m(pid=9648)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9648)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9648)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9648)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9648)[0m *** SIGSEGV (@0x0) received by PID 9648 (TID 0x7fd1fefa8700) from PID 0; stack trace: ***
[2m[36m(pid=9648)[0m     @     0x7fd1feb81390 (unknown)
[2m[36m(pid=9648)[0m     @     0x7fa2fea21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9648)[0m     @     0x7fa2fe14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9648)[0m     @     0x7fa2fe14f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9648)[0m     @     0x7fa2fe14fad3 at::TensorIterator::for_each()
[2m[36m(pid=9648)[0m     @     0x7fa2fe14fd91 at::TensorIterator::for_each()
[2m[36m(pid=9648)[0m     @     0x7fa2fea32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9746)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9746)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9746)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9746)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9746)[0m *** SIGSEGV (@0x0) received by PID 9746 (TID 0x7f48eb928700) from PID 0; stack trace: ***
[2m[36m(pid=9746)[0m     @     0x7f48eb501390 (unknown)
[2m[36m(pid=9746)[0m     @     0x7f19eb4b7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9746)[0m     @     0x7f19eabe27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9746)[0m     @     0x7f19eabe58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9738)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9738)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9738)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9738)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9738)[0m *** SIGSEGV (@0x0) received by PID 9738 (TID 0x7f187c09e700) from PID 0; stack trace: ***
[2m[36m(pid=9738)[0m     @     0x7f187bc77390 (unknown)
[2m[36m(pid=9738)[0m     @     0x7ee97baf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9738)[0m     @     0x7ee97b2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9738)[0m     @     0x7ee97b2238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9738)[0m     @     0x7ee97b223ad3 at::TensorIterator::for_each()
[2m[36m(pid=9738)[0m     @     0x7ee97b223d91 at::TensorIterator::for_each()
[2m[36m(pid=9738)[0m     @     0x7ee97bb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9738)[0m     @     0x7ee97bb29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9728)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9728)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9728)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9728)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9728)[0m *** SIGSEGV (@0x0) received by PID 9728 (TID 0x7ff52a41f700) from PID 0; stack trace: ***
[2m[36m(pid=9728)[0m     @     0x7ff529ff8390 (unknown)
[2m[36m(pid=9728)[0m     @     0x7fc629e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9728)[0m     @     0x7fc62954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9728)[0m     @     0x7fc6295528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9728)[0m     @     0x7fc629552ad3 at::TensorIterator::for_each()
[2m[36m(pid=9736)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9736)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9736)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9736)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9736)[0m *** SIGSEGV (@0x0) received by PID 9736 (TID 0x7ff006516700) from PID 0; stack trace: ***
[2m[36m(pid=9736)[0m     @     0x7ff0060ef390 (unknown)
[2m[36m(pid=9736)[0m     @     0x7fc1060a8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9736)[0m     @     0x7fc1057d37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9736)[0m     @     0x7fc1057d68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9736)[0m     @     0x7fc1057d6ad3 at::TensorIterator::for_each()
[2m[36m(pid=9736)[0m     @     0x7fc1057d6d91 at::TensorIterator::for_each()
[2m[36m(pid=9668)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9668)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9668)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9668)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9668)[0m *** SIGSEGV (@0x0) received by PID 9668 (TID 0x7fe1bbd53700) from PID 0; stack trace: ***
[2m[36m(pid=9668)[0m     @     0x7fe1bb92c390 (unknown)
[2m[36m(pid=9668)[0m     @     0x7fb2bac15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9668)[0m     @     0x7fb2ba3407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9668)[0m     @     0x7fb2ba3438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9668)[0m     @     0x7fb2ba343ad3 at::TensorIterator::for_each()
[2m[36m(pid=9737)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9737)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9737)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9737)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9737)[0m *** SIGSEGV (@0x0) received by PID 9737 (TID 0x7f0751854700) from PID 0; stack trace: ***
[2m[36m(pid=9737)[0m     @     0x7f075142d390 (unknown)
[2m[36m(pid=9737)[0m     @     0x7ed8513eaf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9737)[0m     @     0x7ed850b157db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9737)[0m     @     0x7ed850b188f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9737)[0m     @     0x7ed850b18ad3 at::TensorIterator::for_each()
[2m[36m(pid=9737)[0m     @     0x7ed850b18d91 at::TensorIterator::for_each()
[2m[36m(pid=9737)[0m     @     0x7ed8513fbb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9737)[0m     @     0x7ed85141ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9721)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9721)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9721)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9721)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9721)[0m *** SIGSEGV (@0x0) received by PID 9721 (TID 0x7fd169701700) from PID 0; stack trace: ***
[2m[36m(pid=9721)[0m     @     0x7fd1692da390 (unknown)
[2m[36m(pid=9721)[0m     @     0x7fa26924af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9721)[0m     @     0x7fa2689757db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9721)[0m     @     0x7fa2689788f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9721)[0m     @     0x7fa268978ad3 at::TensorIterator::for_each()
[2m[36m(pid=9768)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9768)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9768)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9768)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9768)[0m *** SIGSEGV (@0x0) received by PID 9768 (TID 0x7f44a7d33700) from PID 0; stack trace: ***
[2m[36m(pid=9768)[0m     @     0x7f44a790c390 (unknown)
[2m[36m(pid=9768)[0m     @     0x7f15a78a8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9768)[0m     @     0x7f15a6fd37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9768)[0m     @     0x7f15a6fd68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9768)[0m     @     0x7f15a6fd6ad3 at::TensorIterator::for_each()
[2m[36m(pid=9768)[0m     @     0x7f15a6fd6d91 at::TensorIterator::for_each()
[2m[36m(pid=9654)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9654)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9654)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9654)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9654)[0m *** SIGSEGV (@0x0) received by PID 9654 (TID 0x7f0310e78700) from PID 0; stack trace: ***
[2m[36m(pid=9654)[0m     @     0x7f0310a51390 (unknown)
[2m[36m(pid=9654)[0m     @     0x7ed410911f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9654)[0m     @     0x7ed41003c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9654)[0m     @     0x7ed41003f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9755)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9755)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9755)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9755)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9755)[0m *** SIGSEGV (@0x0) received by PID 9755 (TID 0x7fc5d8d63700) from PID 0; stack trace: ***
[2m[36m(pid=9755)[0m     @     0x7fc5d893c390 (unknown)
[2m[36m(pid=9755)[0m     @     0x7f96d8774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9755)[0m     @     0x7f96d7e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9755)[0m     @     0x7f96d7ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9755)[0m     @     0x7f96d7ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=9755)[0m     @     0x7f96d7ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=9755)[0m     @     0x7f96d8785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9755)[0m     @     0x7f96d87a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9734)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9734)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9734)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9734)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9734)[0m *** SIGSEGV (@0x0) received by PID 9734 (TID 0x7fe2d1c37700) from PID 0; stack trace: ***
[2m[36m(pid=9734)[0m     @     0x7fe2d1810390 (unknown)
[2m[36m(pid=9734)[0m     @     0x7fb3d16f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9734)[0m     @     0x7fb3d0e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9734)[0m     @     0x7fb3d0e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9734)[0m     @     0x7fb3d0e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=9734)[0m     @     0x7fb3d0e22d91 at::TensorIterator::for_each()
[2m[36m(pid=9767)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9767)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9767)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9767)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9767)[0m *** SIGSEGV (@0x0) received by PID 9767 (TID 0x7f6014158700) from PID 0; stack trace: ***
[2m[36m(pid=9767)[0m     @     0x7f6013d31390 (unknown)
[2m[36m(pid=9767)[0m     @     0x7f3113900f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9767)[0m     @     0x7f311302b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9767)[0m     @     0x7f311302e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9767)[0m     @     0x7f311302ead3 at::TensorIterator::for_each()
[2m[36m(pid=9767)[0m     @     0x7f311302ed91 at::TensorIterator::for_each()
[2m[36m(pid=9767)[0m     @     0x7f3113911b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9767)[0m     @     0x7f3113934c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9662)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9662)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9662)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9662)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9662)[0m *** SIGSEGV (@0x0) received by PID 9662 (TID 0x7f8008972700) from PID 0; stack trace: ***
[2m[36m(pid=9662)[0m     @     0x7f800854b390 (unknown)
[2m[36m(pid=9662)[0m     @     0x7f51084f6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9662)[0m     @     0x7f5107c217db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9662)[0m     @     0x7f5107c248f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9662)[0m     @     0x7f5107c24ad3 at::TensorIterator::for_each()
[2m[36m(pid=9662)[0m     @     0x7f5107c24d91 at::TensorIterator::for_each()
[2m[36m(pid=9662)[0m     @     0x7f5108507b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9662)[0m     @     0x7f510852ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9769)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9769)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9769)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9675)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9675)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9675)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9675)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9675)[0m *** SIGSEGV (@0x0) received by PID 9675 (TID 0x7f5477c4a700) from PID 0; stack trace: ***
[2m[36m(pid=9675)[0m     @     0x7f5477823390 (unknown)
[2m[36m(pid=9675)[0m     @     0x7f25777a9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9675)[0m     @     0x7f2576ed47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9675)[0m     @     0x7f2576ed78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9675)[0m     @     0x7f2576ed7ad3 at::TensorIterator::for_each()
[2m[36m(pid=9684)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9684)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9684)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9659)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9659)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9659)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9659)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9659)[0m *** SIGSEGV (@0x0) received by PID 9659 (TID 0x7fb59e49a700) from PID 0; stack trace: ***
[2m[36m(pid=9659)[0m     @     0x7fb59e073390 (unknown)
[2m[36m(pid=9659)[0m     @     0x7f869e005f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9659)[0m     @     0x7f869d7307db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9659)[0m     @     0x7f869d7338f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9659)[0m     @     0x7f869d733ad3 at::TensorIterator::for_each()
[2m[36m(pid=9659)[0m     @     0x7f869d733d91 at::TensorIterator::for_each()
[2m[36m(pid=9659)[0m     @     0x7f869e016b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9659)[0m     @     0x7f869e039c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9650)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9650)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9650)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9740)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9740)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9740)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9647)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9647)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9647)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9757)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9757)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9757)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9757)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9757)[0m *** SIGSEGV (@0x0) received by PID 9757 (TID 0x7fa789c9f700) from PID 0; stack trace: ***
[2m[36m(pid=9757)[0m     @     0x7fa789878390 (unknown)
[2m[36m(pid=9757)[0m     @     0x7f78896f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9757)[0m     @     0x7f7888e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9757)[0m     @     0x7f7888e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9757)[0m     @     0x7f7888e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=9757)[0m     @     0x7f7888e22d91 at::TensorIterator::for_each()
[2m[36m(pid=9757)[0m     @     0x7f7889705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9757)[0m     @     0x7f7889728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9726)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9726)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9726)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9726)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9726)[0m *** SIGSEGV (@0x0) received by PID 9726 (TID 0x7f1e0adf6700) from PID 0; stack trace: ***
[2m[36m(pid=9726)[0m     @     0x7f1e0a9cf390 (unknown)
[2m[36m(pid=9726)[0m     @     0x7eef0a70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9726)[0m     @     0x7eef09e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9726)[0m     @     0x7eef09e388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9726)[0m     @     0x7eef09e38ad3 at::TensorIterator::for_each()
[2m[36m(pid=9726)[0m     @     0x7eef09e38d91 at::TensorIterator::for_each()
[2m[36m(pid=9726)[0m     @     0x7eef0a71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9726)[0m     @     0x7eef0a73ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9726)[0m     @     0x7eef09be0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9726)[0m     @     0x7eef09bde388 at::native::copy_impl()
[2m[36m(pid=9726)[0m     @     0x7eef09be05a4 at::native::copy_()
[2m[36m(pid=9732)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9732)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9732)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9732)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9732)[0m *** SIGSEGV (@0x0) received by PID 9732 (TID 0x7f4b52660700) from PID 0; stack trace: ***
[2m[36m(pid=9732)[0m     @     0x7f4b52239390 (unknown)
[2m[36m(pid=9732)[0m     @     0x7f1c5208af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9732)[0m     @     0x7f1c517b57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9732)[0m     @     0x7f1c517b88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9732)[0m     @     0x7f1c517b8ad3 at::TensorIterator::for_each()
[2m[36m(pid=9732)[0m     @     0x7f1c517b8d91 at::TensorIterator::for_each()
[2m[36m(pid=9732)[0m     @     0x7f1c5209bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9732)[0m     @     0x7f1c520bec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9732)[0m     @     0x7f1c51560a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9732)[0m     @     0x7f1c5155e388 at::native::copy_impl()
[2m[36m(pid=9732)[0m     @     0x7f1c515605a4 at::native::copy_()
[2m[36m(pid=9759)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9759)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9759)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9759)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9759)[0m *** SIGSEGV (@0x0) received by PID 9759 (TID 0x7f2f817e5700) from PID 0; stack trace: ***
[2m[36m(pid=9759)[0m     @     0x7f2f813be390 (unknown)
[2m[36m(pid=9759)[0m     @     0x7f008136cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9759)[0m     @     0x7f0080a977db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9759)[0m     @     0x7f0080a9a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9759)[0m     @     0x7f0080a9aad3 at::TensorIterator::for_each()
[2m[36m(pid=9759)[0m     @     0x7f0080a9ad91 at::TensorIterator::for_each()
[2m[36m(pid=9759)[0m     @     0x7f008137db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9759)[0m     @     0x7f00813a0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9759)[0m     @     0x7f0080842a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9759)[0m     @     0x7f0080840388 at::native::copy_impl()
[2m[36m(pid=9759)[0m     @     0x7f00808425a4 at::native::copy_()
[2m[36m(pid=9733)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9733)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9733)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9733)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9733)[0m *** SIGSEGV (@0x0) received by PID 9733 (TID 0x7f878c136700) from PID 0; stack trace: ***
[2m[36m(pid=9733)[0m     @     0x7f878bd0f390 (unknown)
[2m[36m(pid=9733)[0m     @     0x7f588bbf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9733)[0m     @     0x7f588b3227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9733)[0m     @     0x7f588b3258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9733)[0m     @     0x7f588b325ad3 at::TensorIterator::for_each()
[2m[36m(pid=9733)[0m     @     0x7f588b325d91 at::TensorIterator::for_each()
[2m[36m(pid=9733)[0m     @     0x7f588bc08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9733)[0m     @     0x7f588bc2bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9655)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9655)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9655)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9655)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9655)[0m *** SIGSEGV (@0x0) received by PID 9655 (TID 0x7efdffb2c700) from PID 0; stack trace: ***
[2m[36m(pid=9655)[0m     @     0x7efdff705390 (unknown)
[2m[36m(pid=9655)[0m     @     0x7eceff61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9655)[0m     @     0x7ecefed4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9655)[0m     @     0x7ecefed4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9655)[0m     @     0x7ecefed4dad3 at::TensorIterator::for_each()
[2m[36m(pid=9655)[0m     @     0x7ecefed4dd91 at::TensorIterator::for_each()
[2m[36m(pid=9655)[0m     @     0x7eceff630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9655)[0m     @     0x7eceff653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9655)[0m     @     0x7ecefeaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9655)[0m     @     0x7ecefeaf3388 at::native::copy_impl()
[2m[36m(pid=9784)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9784)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9784)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9784)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9784)[0m *** SIGSEGV (@0x0) received by PID 9784 (TID 0x7fd84514d700) from PID 0; stack trace: ***
[2m[36m(pid=9784)[0m     @     0x7fd844d26390 (unknown)
[2m[36m(pid=9784)[0m     @     0x7fa944bd1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9784)[0m     @     0x7fa9442fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9784)[0m     @     0x7fa9442ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9784)[0m     @     0x7fa9442ffad3 at::TensorIterator::for_each()
[2m[36m(pid=9784)[0m     @     0x7fa9442ffd91 at::TensorIterator::for_each()
[2m[36m(pid=9784)[0m     @     0x7fa944be2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9784)[0m     @     0x7fa944c05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9784)[0m     @     0x7fa9440a7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9784)[0m     @     0x7fa9440a5388 at::native::copy_impl()
[2m[36m(pid=9784)[0m     @     0x7fa9440a75a4 at::native::copy_()
[2m[36m(pid=9735)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9735)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9735)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9735)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9735)[0m *** SIGSEGV (@0x0) received by PID 9735 (TID 0x7fbea7f6c700) from PID 0; stack trace: ***
[2m[36m(pid=9735)[0m     @     0x7fbea7b45390 (unknown)
[2m[36m(pid=9735)[0m     @     0x7f8fa7af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9735)[0m     @     0x7f8fa72207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9735)[0m     @     0x7f8fa72238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9735)[0m     @     0x7f8fa7223ad3 at::TensorIterator::for_each()
[2m[36m(pid=9735)[0m     @     0x7f8fa7223d91 at::TensorIterator::for_each()
[2m[36m(pid=9735)[0m     @     0x7f8fa7b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9735)[0m     @     0x7f8fa7b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9735)[0m     @     0x7f8fa6fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9735)[0m     @     0x7f8fa6fc9388 at::native::copy_impl()
[2m[36m(pid=9711)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9711)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9711)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9711)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9711)[0m *** SIGSEGV (@0x0) received by PID 9711 (TID 0x7ff833771700) from PID 0; stack trace: ***
[2m[36m(pid=9711)[0m     @     0x7ff83334a390 (unknown)
[2m[36m(pid=9711)[0m     @     0x7fc933229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9711)[0m     @     0x7fc9329547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9711)[0m     @     0x7fc9329578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9711)[0m     @     0x7fc932957ad3 at::TensorIterator::for_each()
[2m[36m(pid=9711)[0m     @     0x7fc932957d91 at::TensorIterator::for_each()
[2m[36m(pid=9711)[0m     @     0x7fc93323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9711)[0m     @     0x7fc93325dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9711)[0m     @     0x7fc9326ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9744)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9744)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9744)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9744)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9744)[0m *** SIGSEGV (@0x0) received by PID 9744 (TID 0x7fb7babdf700) from PID 0; stack trace: ***
[2m[36m(pid=9744)[0m     @     0x7fb7ba7b8390 (unknown)
[2m[36m(pid=9744)[0m     @     0x7f88ba5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9744)[0m     @     0x7f88b9ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9744)[0m     @     0x7f88b9cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9744)[0m     @     0x7f88b9cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=9744)[0m     @     0x7f88b9cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=9744)[0m     @     0x7f88ba5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9744)[0m     @     0x7f88ba5d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9724)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9724)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9724)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9789)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9789)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9789)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9718)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9718)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9718)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9666)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9666)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9666)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9666)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9666)[0m *** SIGSEGV (@0x0) received by PID 9666 (TID 0x7f458590a700) from PID 0; stack trace: ***
[2m[36m(pid=9773)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9773)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9773)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9773)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9773)[0m *** SIGSEGV (@0x0) received by PID 9773 (TID 0x7f0f69dc0700) from PID 0; stack trace: ***
[2m[36m(pid=9773)[0m     @     0x7f0f69999390 (unknown)
[2m[36m(pid=9773)[0m     @     0x7ee0697f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9773)[0m     @     0x7ee068f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9773)[0m     @     0x7ee068f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9773)[0m     @     0x7ee068f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=9773)[0m     @     0x7ee068f27d91 at::TensorIterator::for_each()
[2m[36m(pid=9773)[0m     @     0x7ee06980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9773)[0m     @     0x7ee06982dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9773)[0m     @     0x7ee068ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9773)[0m     @     0x7ee068ccd388 at::native::copy_impl()
[2m[36m(pid=9773)[0m     @     0x7ee068ccf5a4 at::native::copy_()
[2m[36m(pid=9786)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9786)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9786)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9786)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9786)[0m *** SIGSEGV (@0x0) received by PID 9786 (TID 0x7f6a1f953700) from PID 0; stack trace: ***
[2m[36m(pid=9786)[0m     @     0x7f6a1f52c390 (unknown)
[2m[36m(pid=9786)[0m     @     0x7f3b1f4cff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9786)[0m     @     0x7f3b1ebfa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9786)[0m     @     0x7f3b1ebfd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9786)[0m     @     0x7f3b1ebfdad3 at::TensorIterator::for_each()
[2m[36m(pid=9786)[0m     @     0x7f3b1ebfdd91 at::TensorIterator::for_each()
[2m[36m(pid=9786)[0m     @     0x7f3b1f4e0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9786)[0m     @     0x7f3b1f503c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9786)[0m     @     0x7f3b1e9a5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9786)[0m     @     0x7f3b1e9a3388 at::native::copy_impl()
[2m[36m(pid=9786)[0m     @     0x7f3b1e9a55a4 at::native::copy_()
[2m[36m(pid=9729)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9729)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9729)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9729)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9729)[0m *** SIGSEGV (@0x0) received by PID 9729 (TID 0x7f3d8981d700) from PID 0; stack trace: ***
[2m[36m(pid=9729)[0m     @     0x7f3d893f6390 (unknown)
[2m[36m(pid=9729)[0m     @     0x7f0e89377f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9729)[0m     @     0x7f0e88aa27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9729)[0m     @     0x7f0e88aa58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9729)[0m     @     0x7f0e88aa5ad3 at::TensorIterator::for_each()
[2m[36m(pid=9729)[0m     @     0x7f0e88aa5d91 at::TensorIterator::for_each()
[2m[36m(pid=9729)[0m     @     0x7f0e89388b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9729)[0m     @     0x7f0e893abc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9729)[0m     @     0x7f0e8884da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9729)[0m     @     0x7f0e8884b388 at::native::copy_impl()
[2m[36m(pid=9729)[0m     @     0x7f0e8884d5a4 at::native::copy_()
[2m[36m(pid=9776)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9776)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9776)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9776)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9776)[0m *** SIGSEGV (@0x0) received by PID 9776 (TID 0x7fc3c1ba1700) from PID 0; stack trace: ***
[2m[36m(pid=9776)[0m     @     0x7fc3c177a390 (unknown)
[2m[36m(pid=9776)[0m     @     0x7f94c16f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9776)[0m     @     0x7f94c0e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9776)[0m     @     0x7f94c0e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9776)[0m     @     0x7f94c0e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=9776)[0m     @     0x7f94c0e22d91 at::TensorIterator::for_each()
[2m[36m(pid=9776)[0m     @     0x7f94c1705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9776)[0m     @     0x7f94c1728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9776)[0m     @     0x7f94c0bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9776)[0m     @     0x7f94c0bc8388 at::native::copy_impl()
[2m[36m(pid=9776)[0m     @     0x7f94c0bca5a4 at::native::copy_()
[2m[36m(pid=9776)[0m     @     0x7f94c12b54f5 at::Tensor::copy_()
[2m[36m(pid=9751)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9751)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9751)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9751)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9751)[0m *** SIGSEGV (@0x0) received by PID 9751 (TID 0x7f3d62071700) from PID 0; stack trace: ***
[2m[36m(pid=9751)[0m     @     0x7f3d61c4a390 (unknown)
[2m[36m(pid=9751)[0m     @     0x7f0e61a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9751)[0m     @     0x7f0e611357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9751)[0m     @     0x7f0e611388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9751)[0m     @     0x7f0e61138ad3 at::TensorIterator::for_each()
[2m[36m(pid=9751)[0m     @     0x7f0e61138d91 at::TensorIterator::for_each()
[2m[36m(pid=9751)[0m     @     0x7f0e61a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9751)[0m     @     0x7f0e61a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9751)[0m     @     0x7f0e60ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9751)[0m     @     0x7f0e60ede388 at::native::copy_impl()
[2m[36m(pid=9751)[0m     @     0x7f0e60ee05a4 at::native::copy_()
[2m[36m(pid=9751)[0m     @     0x7f0e615cb4f5 at::Tensor::copy_()
[2m[36m(pid=9763)[0m     @     0x7fba0c555c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9763)[0m     @     0x7fba0b9f7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9763)[0m     @     0x7fba0b9f5388 at::native::copy_impl()
[2m[36m(pid=9763)[0m     @     0x7fba0b9f75a4 at::native::copy_()
[2m[36m(pid=9717)[0m     @     0x7f761067dd91 at::TensorIterator::for_each()
[2m[36m(pid=9717)[0m     @     0x7f7610f60b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9717)[0m     @     0x7f7610f83c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9717)[0m     @     0x7f7610425a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9717)[0m     @     0x7f7610423388 at::native::copy_impl()
[2m[36m(pid=9649)[0m     @     0x7f6cfd4b7d91 at::TensorIterator::for_each()
[2m[36m(pid=9649)[0m     @     0x7f6cfdd9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9649)[0m     @     0x7f6cfddbdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9649)[0m     @     0x7f6cfd25fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9649)[0m     @     0x7f6cfd25d388 at::native::copy_impl()
[2m[36m(pid=9649)[0m     @     0x7f6cfd25f5a4 at::native::copy_()
[2m[36m(pid=9715)[0m     @     0x7edfade35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9715)[0m     @     0x7edfade58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9715)[0m     @     0x7edfad2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9715)[0m     @     0x7edfad2f8388 at::native::copy_impl()
[2m[36m(pid=9715)[0m     @     0x7edfad2fa5a4 at::native::copy_()
[2m[36m(pid=9748)[0m     @     0x7f675b3aea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9748)[0m     @     0x7f675b3ac388 at::native::copy_impl()
[2m[36m(pid=9748)[0m     @     0x7f675b3ae5a4 at::native::copy_()
[2m[36m(pid=9748)[0m     @     0x7f675ba994f5 at::Tensor::copy_()
[2m[36m(pid=9669)[0m     @     0x7faed9552d91 at::TensorIterator::for_each()
[2m[36m(pid=9669)[0m     @     0x7faed9e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9669)[0m     @     0x7faed9e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9669)[0m     @     0x7faed92faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9669)[0m     @     0x7faed92f8388 at::native::copy_impl()
[2m[36m(pid=9669)[0m     @     0x7faed92fa5a4 at::native::copy_()
[2m[36m(pid=9648)[0m     @     0x7fa2fea55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9648)[0m     @     0x7fa2fdef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9648)[0m     @     0x7fa2fdef5388 at::native::copy_impl()
[2m[36m(pid=9648)[0m     @     0x7fa2fdef75a4 at::native::copy_()
[2m[36m(pid=9746)[0m     @     0x7f19eabe5ad3 at::TensorIterator::for_each()
[2m[36m(pid=9746)[0m     @     0x7f19eabe5d91 at::TensorIterator::for_each()
[2m[36m(pid=9738)[0m     @     0x7ee97afcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9738)[0m     @     0x7ee97afc9388 at::native::copy_impl()
[2m[36m(pid=9738)[0m     @     0x7ee97afcb5a4 at::native::copy_()
[2m[36m(pid=9728)[0m     @     0x7fc629552d91 at::TensorIterator::for_each()
[2m[36m(pid=9728)[0m     @     0x7fc629e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9728)[0m     @     0x7fc629e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9728)[0m     @     0x7fc6292faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9736)[0m     @     0x7fc1060b9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9736)[0m     @     0x7fc1060dcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9736)[0m     @     0x7fc10557ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9736)[0m     @     0x7fc10557c388 at::native::copy_impl()
[2m[36m(pid=9736)[0m     @     0x7fc10557e5a4 at::native::copy_()
[2m[36m(pid=9668)[0m     @     0x7fb2ba343d91 at::TensorIterator::for_each()
[2m[36m(pid=9668)[0m     @     0x7fb2bac26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9668)[0m     @     0x7fb2bac49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9737)[0m     @     0x7ed8508c0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9737)[0m     @     0x7ed8508be388 at::native::copy_impl()
[2m[36m(pid=9737)[0m     @     0x7ed8508c05a4 at::native::copy_()
[2m[36m(pid=9721)[0m     @     0x7fa268978d91 at::TensorIterator::for_each()
[2m[36m(pid=9721)[0m     @     0x7fa26925bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9721)[0m     @     0x7fa26927ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9768)[0m     @     0x7f15a78b9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9768)[0m     @     0x7f15a78dcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9768)[0m     @     0x7f15a6d7ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9768)[0m     @     0x7f15a6d7c388 at::native::copy_impl()
[2m[36m(pid=9654)[0m     @     0x7ed41003fad3 at::TensorIterator::for_each()
[2m[36m(pid=9654)[0m     @     0x7ed41003fd91 at::TensorIterator::for_each()
[2m[36m(pid=9654)[0m     @     0x7ed410922b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9725)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9725)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9725)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9755)[0m     @     0x7f96d7c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9755)[0m     @     0x7f96d7c48388 at::native::copy_impl()
[2m[36m(pid=9755)[0m     @     0x7f96d7c4a5a4 at::native::copy_()
[2m[36m(pid=9734)[0m     @     0x7fb3d1705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9734)[0m     @     0x7fb3d1728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9734)[0m     @     0x7fb3d0bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9734)[0m     @     0x7fb3d0bc8388 at::native::copy_impl()
[2m[36m(pid=9734)[0m     @     0x7fb3d0bca5a4 at::native::copy_()
[2m[36m(pid=9767)[0m     @     0x7f3112dd6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9767)[0m     @     0x7f3112dd4388 at::native::copy_impl()
[2m[36m(pid=9767)[0m     @     0x7f3112dd65a4 at::native::copy_()
[2m[36m(pid=9745)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9745)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9745)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9745)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9745)[0m *** SIGSEGV (@0x0) received by PID 9745 (TID 0x7f3e0e58b700) from PID 0; stack trace: ***
[2m[36m(pid=9754)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9754)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9754)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9754)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9754)[0m *** SIGSEGV (@0x0) received by PID 9754 (TID 0x7fc531a9b700) from PID 0; stack trace: ***
[2m[36m(pid=9754)[0m     @     0x7fc531674390 (unknown)
[2m[36m(pid=9677)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9677)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9677)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9677)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9677)[0m *** SIGSEGV (@0x0) received by PID 9677 (TID 0x7fcf8cd8b700) from PID 0; stack trace: ***
[2m[36m(pid=9662)[0m     @     0x7f51079cca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9662)[0m     @     0x7f51079ca388 at::native::copy_impl()
[2m[36m(pid=9662)[0m     @     0x7f51079cc5a4 at::native::copy_()
[2m[36m(pid=9662)[0m     @     0x7f51080b74f5 at::Tensor::copy_()
[2m[36m(pid=9662)[0m     @     0x7f510a58a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9685)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9685)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9685)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9685)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9685)[0m *** SIGSEGV (@0x0) received by PID 9685 (TID 0x7f3b6e029700) from PID 0; stack trace: ***
[2m[36m(pid=9665)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9665)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9665)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9665)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9665)[0m *** SIGSEGV (@0x0) received by PID 9665 (TID 0x7f9697ce0700) from PID 0; stack trace: ***
[2m[36m(pid=9665)[0m     @     0x7f96978b9390 (unknown)
[2m[36m(pid=9683)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9683)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9683)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9683)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9683)[0m *** SIGSEGV (@0x0) received by PID 9683 (TID 0x7feb6500d700) from PID 0; stack trace: ***
[2m[36m(pid=9683)[0m     @     0x7feb64be6390 (unknown)
[2m[36m(pid=9770)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9770)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9770)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9770)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9770)[0m *** SIGSEGV (@0x0) received by PID 9770 (TID 0x7f43c8ea1700) from PID 0; stack trace: ***
[2m[36m(pid=9663)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9663)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9663)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9663)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9663)[0m *** SIGSEGV (@0x0) received by PID 9663 (TID 0x7f4f423e5700) from PID 0; stack trace: ***
[2m[36m(pid=9663)[0m     @     0x7f4f41fbe390 (unknown)
[2m[36m(pid=9681)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9681)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9681)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9681)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9681)[0m *** SIGSEGV (@0x0) received by PID 9681 (TID 0x7fc4e01fb700) from PID 0; stack trace: ***
[2m[36m(pid=9681)[0m     @     0x7fc4dfdd4390 (unknown)
[2m[36m(pid=9681)[0m     @     0x7f95dfd43f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9681)[0m     @     0x7f95df46e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9651)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9651)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9651)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9651)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9651)[0m *** SIGSEGV (@0x0) received by PID 9651 (TID 0x7f621e7d7700) from PID 0; stack trace: ***
[2m[36m(pid=9651)[0m     @     0x7f621e3b0390 (unknown)
[2m[36m(pid=9660)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9660)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9660)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9658)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9658)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9658)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9658)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9658)[0m *** SIGSEGV (@0x0) received by PID 9658 (TID 0x7f275dcf0700) from PID 0; stack trace: ***
[2m[36m(pid=9658)[0m     @     0x7f275d8c9390 (unknown)
[2m[36m(pid=9664)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9664)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9664)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9664)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9664)[0m *** SIGSEGV (@0x0) received by PID 9664 (TID 0x7fe387962700) from PID 0; stack trace: ***
[2m[36m(pid=9664)[0m     @     0x7fe38753b390 (unknown)
[2m[36m(pid=9730)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9730)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9730)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9730)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9730)[0m *** SIGSEGV (@0x0) received by PID 9730 (TID 0x7f656182d700) from PID 0; stack trace: ***
[2m[36m(pid=9730)[0m     @     0x7f6561406390 (unknown)
[2m[36m(pid=9730)[0m     @     0x7f36613acf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9730)[0m     @     0x7f3660ad77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9730)[0m     @     0x7f3660ada8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9667)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9667)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9667)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9667)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9667)[0m *** SIGSEGV (@0x0) received by PID 9667 (TID 0x7f2e5af89700) from PID 0; stack trace: ***
[2m[36m(pid=9667)[0m     @     0x7f2e5ab62390 (unknown)
[2m[36m(pid=9667)[0m     @     0x7eff5a9ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9667)[0m     @     0x7eff5a0f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9670)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9670)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9670)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9723)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9723)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9723)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9723)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9723)[0m *** SIGSEGV (@0x0) received by PID 9723 (TID 0x7f0ec2a88700) from PID 0; stack trace: ***
[2m[36m(pid=9723)[0m     @     0x7f0ec2661390 (unknown)
[2m[36m(pid=9723)[0m     @     0x7edfc2365f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9723)[0m     @     0x7edfc1a907db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9723)[0m     @     0x7edfc1a938f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9769)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9769)[0m *** SIGSEGV (@0x0) received by PID 9769 (TID 0x7f3036a91700) from PID 0; stack trace: ***
[2m[36m(pid=9769)[0m     @     0x7f303666a390 (unknown)
[2m[36m(pid=9769)[0m     @     0x7f01364f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9769)[0m     @     0x7f0135c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9653)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9653)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9653)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9675)[0m     @     0x7f2576ed7d91 at::TensorIterator::for_each()
[2m[36m(pid=9675)[0m     @     0x7f25777bab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9675)[0m     @     0x7f25777ddc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9675)[0m     @     0x7f2576c7fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9675)[0m     @     0x7f2576c7d388 at::native::copy_impl()
[2m[36m(pid=9684)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9684)[0m *** SIGSEGV (@0x0) received by PID 9684 (TID 0x7f4d28896700) from PID 0; stack trace: ***
[2m[36m(pid=9684)[0m     @     0x7f4d2846f390 (unknown)
[2m[36m(pid=9659)[0m     @     0x7f869d4dba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9659)[0m     @     0x7f869d4d9388 at::native::copy_impl()
[2m[36m(pid=9659)[0m     @     0x7f869d4db5a4 at::native::copy_()
[2m[36m(pid=9659)[0m     @     0x7f869dbc64f5 at::Tensor::copy_()
[2m[36m(pid=9650)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9650)[0m *** SIGSEGV (@0x0) received by PID 9650 (TID 0x7fb94034e700) from PID 0; stack trace: ***
[2m[36m(pid=9650)[0m     @     0x7fb93ff27390 (unknown)
[2m[36m(pid=9650)[0m     @     0x7f8a3fe0ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9650)[0m     @     0x7f8a3f5397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9650)[0m     @     0x7f8a3f53c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9742)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9742)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9742)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9742)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9742)[0m *** SIGSEGV (@0x0) received by PID 9742 (TID 0x7f3ffa2db700) from PID 0; stack trace: ***
[2m[36m(pid=9742)[0m     @     0x7f3ff9eb4390 (unknown)
[2m[36m(pid=9657)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9657)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9657)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9657)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9657)[0m *** SIGSEGV (@0x0) received by PID 9657 (TID 0x7f37b1ee6700) from PID 0; stack trace: ***
[2m[36m(pid=9657)[0m     @     0x7f37b1abf390 (unknown)
[2m[36m(pid=9657)[0m     @     0x7f08b1a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9657)[0m     @     0x7f08b11357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9671)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9671)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9671)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9671)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9671)[0m *** SIGSEGV (@0x0) received by PID 9671 (TID 0x7f95c4586700) from PID 0; stack trace: ***
[2m[36m(pid=9722)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9722)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9722)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9731)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9731)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9731)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9652)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9652)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9652)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9652)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9652)[0m *** SIGSEGV (@0x0) received by PID 9652 (TID 0x7f51e2d46700) from PID 0; stack trace: ***
[2m[36m(pid=9652)[0m     @     0x7f51e291f390 (unknown)
[2m[36m(pid=9652)[0m     @     0x7f22e270af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9740)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9740)[0m *** SIGSEGV (@0x0) received by PID 9740 (TID 0x7f8d3f704700) from PID 0; stack trace: ***
[2m[36m(pid=9740)[0m     @     0x7f8d3f2dd390 (unknown)
[2m[36m(pid=9740)[0m     @     0x7f5e3f229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9740)[0m     @     0x7f5e3e9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9740)[0m     @     0x7f5e3e9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9647)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9647)[0m *** SIGSEGV (@0x0) received by PID 9647 (TID 0x7fe26252c700) from PID 0; stack trace: ***
[2m[36m(pid=9647)[0m     @     0x7fe262105390 (unknown)
[2m[36m(pid=9647)[0m     @     0x7fb361f8df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9647)[0m     @     0x7fb3616b87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9647)[0m     @     0x7fb3616bb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9714)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9714)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9714)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9714)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9714)[0m *** SIGSEGV (@0x0) received by PID 9714 (TID 0x7f6417016700) from PID 0; stack trace: ***
[2m[36m(pid=9714)[0m     @     0x7f6416bef390 (unknown)
[2m[36m(pid=9714)[0m     @     0x7f3516b6df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9714)[0m     @     0x7f35162987db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9713)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9713)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9713)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9713)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9713)[0m *** SIGSEGV (@0x0) received by PID 9713 (TID 0x7f3c51dc4700) from PID 0; stack trace: ***
[2m[36m(pid=9678)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9678)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9678)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9719)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9719)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9719)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9719)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9719)[0m *** SIGSEGV (@0x0) received by PID 9719 (TID 0x7f9cad778700) from PID 0; stack trace: ***
[2m[36m(pid=9719)[0m     @     0x7f9cad351390 (unknown)
[2m[36m(pid=9719)[0m     @     0x7f6dad2d4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9712)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9712)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9712)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9712)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9712)[0m *** SIGSEGV (@0x0) received by PID 9712 (TID 0x7fd14b3b4700) from PID 0; stack trace: ***
[2m[36m(pid=9712)[0m     @     0x7fd14af8d390 (unknown)
[2m[36m(pid=9712)[0m     @     0x7fa24af13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9712)[0m     @     0x7fa24a63e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9757)[0m     @     0x7f7888bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9757)[0m     @     0x7f7888bc8388 at::native::copy_impl()
[2m[36m(pid=9757)[0m     @     0x7f7888bca5a4 at::native::copy_()
[2m[36m(pid=9757)[0m     @     0x7f78892b54f5 at::Tensor::copy_()
[2m[36m(pid=9757)[0m     @     0x7f788b7888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9726)[0m     @     0x7eef0a2cb4f5 at::Tensor::copy_()
[2m[36m(pid=9726)[0m     @     0x7eef0c79e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9726)[0m     @     0x7eef0a2cb4f5 at::Tensor::copy_()
[2m[36m(pid=9726)[0m     @     0x7eef1037679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9726)[0m     @     0x5577e6852fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9726)[0m     @     0x5577e67adb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9726)[0m     @     0x5577e6838baf _PyEval_EvalCodeWithName
[2m[36m(pid=9726)[0m     @     0x5577e6839a20 method_vectorcall
[2m[36m(pid=9726)[0m     @     0x5577e67adbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9726)[0m     @     0x5577e6838baf _PyEval_EvalCodeWithName
[2m[36m(pid=9726)[0m     @     0x5577e6839643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9726)[0m     @     0x5577e67ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9726)[0m     @     0x5577e6838baf _PyEval_EvalCodeWithName
[2m[36m(pid=9726)[0m     @     0x5577e6839643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9726)[0m     @     0x5577e67ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9726)[0m     @     0x5577e6838baf _PyEval_EvalCodeWithName
[2m[36m(pid=9726)[0m     @     0x5577e6839643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9726)[0m     @     0x5577e67ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9726)[0m     @     0x5577e6838baf _PyEval_EvalCodeWithName
[2m[36m(pid=9726)[0m     @     0x5577e6839643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9726)[0m     @     0x5577e67ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9732)[0m     @     0x7f1c51c4b4f5 at::Tensor::copy_()
[2m[36m(pid=9732)[0m     @     0x7f1c5411e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9732)[0m     @     0x7f1c51c4b4f5 at::Tensor::copy_()
[2m[36m(pid=9732)[0m     @     0x7f1c57cf679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9732)[0m     @     0x55a25e975fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9732)[0m     @     0x55a25e8d0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9732)[0m     @     0x55a25e95bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9732)[0m     @     0x55a25e95ca20 method_vectorcall
[2m[36m(pid=9732)[0m     @     0x55a25e8d0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9732)[0m     @     0x55a25e95bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9732)[0m     @     0x55a25e95c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9732)[0m     @     0x55a25e8d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9732)[0m     @     0x55a25e95bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9732)[0m     @     0x55a25e95c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9732)[0m     @     0x55a25e8d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9732)[0m     @     0x55a25e95bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9732)[0m     @     0x55a25e95c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9732)[0m     @     0x55a25e8d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9732)[0m     @     0x55a25e95bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9732)[0m     @     0x55a25e95c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9732)[0m     @     0x55a25e8d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9759)[0m     @     0x7f0080f2d4f5 at::Tensor::copy_()
[2m[36m(pid=9759)[0m     @     0x7f00834008de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9759)[0m     @     0x7f0080f2d4f5 at::Tensor::copy_()
[2m[36m(pid=9759)[0m     @     0x7f0086fd879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9759)[0m     @     0x558783db5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9759)[0m     @     0x558783d10b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9759)[0m     @     0x558783d9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9759)[0m     @     0x558783d9ca20 method_vectorcall
[2m[36m(pid=9759)[0m     @     0x558783d10bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9759)[0m     @     0x558783d9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9759)[0m     @     0x558783d9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9759)[0m     @     0x558783d11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9759)[0m     @     0x558783d9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9759)[0m     @     0x558783d9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9759)[0m     @     0x558783d11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9759)[0m     @     0x558783d9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9759)[0m     @     0x558783d9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9759)[0m     @     0x558783d11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9759)[0m     @     0x558783d9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9759)[0m     @     0x558783d9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9759)[0m     @     0x558783d11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9733)[0m     @     0x7f588b0cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9733)[0m     @     0x7f588b0cb388 at::native::copy_impl()
[2m[36m(pid=9733)[0m     @     0x7f588b0cd5a4 at::native::copy_()
[2m[36m(pid=9733)[0m     @     0x7f588b7b84f5 at::Tensor::copy_()
[2m[36m(pid=9733)[0m     @     0x7f588dc8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9655)[0m     @     0x7ecefeaf55a4 at::native::copy_()
[2m[36m(pid=9655)[0m     @     0x7eceff1e04f5 at::Tensor::copy_()
[2m[36m(pid=9655)[0m     @     0x7ecf016b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9655)[0m     @     0x7eceff1e04f5 at::Tensor::copy_()
[2m[36m(pid=9655)[0m     @     0x7ecf0528b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9655)[0m     @     0x555657602fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9655)[0m     @     0x55565755db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9655)[0m     @     0x5556575e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9655)[0m     @     0x5556575e9a20 method_vectorcall
[2m[36m(pid=9655)[0m     @     0x55565755dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9655)[0m     @     0x5556575e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9655)[0m     @     0x5556575e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9655)[0m     @     0x55565755e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9655)[0m     @     0x5556575e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9655)[0m     @     0x5556575e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9655)[0m     @     0x55565755e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9655)[0m     @     0x5556575e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9655)[0m     @     0x5556575e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9655)[0m     @     0x55565755e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9655)[0m     @     0x5556575e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9655)[0m     @     0x5556575e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9655)[0m     @     0x55565755e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9784)[0m     @     0x7fa9447924f5 at::Tensor::copy_()
[2m[36m(pid=9784)[0m     @     0x7fa946c658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9784)[0m     @     0x7fa9447924f5 at::Tensor::copy_()
[2m[36m(pid=9784)[0m     @     0x7fa94a83d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9784)[0m     @     0x5595addcafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9784)[0m     @     0x5595add25b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9784)[0m     @     0x5595addb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=9784)[0m     @     0x5595addb1a20 method_vectorcall
[2m[36m(pid=9784)[0m     @     0x5595add25bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9784)[0m     @     0x5595addb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=9784)[0m     @     0x5595addb1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9784)[0m     @     0x5595add26689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9784)[0m     @     0x5595addb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=9784)[0m     @     0x5595addb1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9784)[0m     @     0x5595add26689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9784)[0m     @     0x5595addb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=9784)[0m     @     0x5595addb1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9784)[0m     @     0x5595add26689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9784)[0m     @     0x5595addb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=9784)[0m     @     0x5595addb1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9784)[0m     @     0x5595add26689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9735)[0m     @     0x7f8fa6fcb5a4 at::native::copy_()
[2m[36m(pid=9735)[0m     @     0x7f8fa76b64f5 at::Tensor::copy_()
[2m[36m(pid=9735)[0m     @     0x7f8fa9b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9735)[0m     @     0x7f8fa76b64f5 at::Tensor::copy_()
[2m[36m(pid=9735)[0m     @     0x7f8fad76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9735)[0m     @     0x5629b798efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9735)[0m     @     0x5629b78e9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9735)[0m     @     0x5629b7974baf _PyEval_EvalCodeWithName
[2m[36m(pid=9735)[0m     @     0x5629b7975a20 method_vectorcall
[2m[36m(pid=9735)[0m     @     0x5629b78e9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9735)[0m     @     0x5629b7974baf _PyEval_EvalCodeWithName
[2m[36m(pid=9735)[0m     @     0x5629b7975643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9735)[0m     @     0x5629b78ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9735)[0m     @     0x5629b7974baf _PyEval_EvalCodeWithName
[2m[36m(pid=9735)[0m     @     0x5629b7975643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9735)[0m     @     0x5629b78ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9735)[0m     @     0x5629b7974baf _PyEval_EvalCodeWithName
[2m[36m(pid=9735)[0m     @     0x5629b7975643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9735)[0m     @     0x5629b78ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9735)[0m     @     0x5629b7974baf _PyEval_EvalCodeWithName
[2m[36m(pid=9735)[0m     @     0x5629b7975643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9735)[0m     @     0x5629b78ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9711)[0m     @     0x7fc9326fd388 at::native::copy_impl()
[2m[36m(pid=9711)[0m     @     0x7fc9326ff5a4 at::native::copy_()
[2m[36m(pid=9711)[0m     @     0x7fc932dea4f5 at::Tensor::copy_()
[2m[36m(pid=9711)[0m     @     0x7fc9352bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9711)[0m     @     0x7fc932dea4f5 at::Tensor::copy_()
[2m[36m(pid=9711)[0m     @     0x7fc938e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9711)[0m     @     0x5559b8ad5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9711)[0m     @     0x5559b8a30b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9711)[0m     @     0x5559b8abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9711)[0m     @     0x5559b8abca20 method_vectorcall
[2m[36m(pid=9711)[0m     @     0x5559b8a30bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9711)[0m     @     0x5559b8abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9744)[0m     @     0x7f88b9a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9744)[0m     @     0x7f88b9a78388 at::native::copy_impl()
[2m[36m(pid=9744)[0m     @     0x7f88b9a7a5a4 at::native::copy_()
[2m[36m(pid=9744)[0m     @     0x7f88ba1654f5 at::Tensor::copy_()
[2m[36m(pid=9744)[0m     @     0x7f88bc6388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9744)[0m     @     0x7f88ba1654f5 at::Tensor::copy_()
[2m[36m(pid=9744)[0m     @     0x7f88c021079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9744)[0m     @     0x559f01bd8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9744)[0m     @     0x559f01b33b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9744)[0m     @     0x559f01bbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9744)[0m     @     0x559f01bbfa20 method_vectorcall
[2m[36m(pid=9744)[0m     @     0x559f01b33bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9724)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9724)[0m *** SIGSEGV (@0x0) received by PID 9724 (TID 0x7f9518013700) from PID 0; stack trace: ***
[2m[36m(pid=9724)[0m     @     0x7f9517bec390 (unknown)
[2m[36m(pid=9724)[0m     @     0x7f6617af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9724)[0m     @     0x7f66172207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9724)[0m     @     0x7f66172238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9724)[0m     @     0x7f6617223ad3 at::TensorIterator::for_each()
[2m[36m(pid=9789)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9789)[0m *** SIGSEGV (@0x0) received by PID 9789 (TID 0x7fc4a2440700) from PID 0; stack trace: ***
[2m[36m(pid=9789)[0m     @     0x7fc4a2019390 (unknown)
[2m[36m(pid=9789)[0m     @     0x7f95a1e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9789)[0m     @     0x7f95a154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9789)[0m     @     0x7f95a15528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9789)[0m     @     0x7f95a1552ad3 at::TensorIterator::for_each()
[2m[36m(pid=9718)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9718)[0m *** SIGSEGV (@0x0) received by PID 9718 (TID 0x7fcc02778700) from PID 0; stack trace: ***
[2m[36m(pid=9718)[0m     @     0x7fcc02351390 (unknown)
[2m[36m(pid=9718)[0m     @     0x7f9d022def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9718)[0m     @     0x7f9d01a097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9718)[0m     @     0x7f9d01a0c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9718)[0m     @     0x7f9d01a0cad3 at::TensorIterator::for_each()
[2m[36m(pid=9666)[0m     @     0x7f45854e3390 (unknown)
[2m[36m(pid=9666)[0m     @     0x7f1685432f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9666)[0m     @     0x7f1684b5d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9666)[0m     @     0x7f1684b608f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9666)[0m     @     0x7f1684b60ad3 at::TensorIterator::for_each()
[2m[36m(pid=9666)[0m     @     0x7f1684b60d91 at::TensorIterator::for_each()
[2m[36m(pid=9773)[0m     @     0x7ee0693ba4f5 at::Tensor::copy_()
[2m[36m(pid=9773)[0m     @     0x7ee06b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9773)[0m     @     0x7ee0693ba4f5 at::Tensor::copy_()
[2m[36m(pid=9773)[0m     @     0x7ee06f46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9773)[0m     @     0x55b715d44fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9773)[0m     @     0x55b715c9fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9773)[0m     @     0x55b715d2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9773)[0m     @     0x55b715d2ba20 method_vectorcall
[2m[36m(pid=9773)[0m     @     0x55b715c9fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9773)[0m     @     0x55b715d2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9773)[0m     @     0x55b715d2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9773)[0m     @     0x55b715ca0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9773)[0m     @     0x55b715d2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9773)[0m     @     0x55b715d2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9773)[0m     @     0x55b715ca0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9773)[0m     @     0x55b715d2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9773)[0m     @     0x55b715d2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9773)[0m     @     0x55b715ca0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9773)[0m     @     0x55b715d2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9773)[0m     @     0x55b715d2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9773)[0m     @     0x55b715ca0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9786)[0m     @     0x7f3b1f0904f5 at::Tensor::copy_()
[2m[36m(pid=9786)[0m     @     0x7f3b215638de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9786)[0m     @     0x7f3b1f0904f5 at::Tensor::copy_()
[2m[36m(pid=9786)[0m     @     0x7f3b2513b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9786)[0m     @     0x55edcd6e9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9786)[0m     @     0x55edcd644b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9786)[0m     @     0x55edcd6cfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9786)[0m     @     0x55edcd6d0a20 method_vectorcall
[2m[36m(pid=9786)[0m     @     0x55edcd644bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9786)[0m     @     0x55edcd6cfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9786)[0m     @     0x55edcd6d0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9786)[0m     @     0x55edcd645689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9786)[0m     @     0x55edcd6cfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9786)[0m     @     0x55edcd6d0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9786)[0m     @     0x55edcd645689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9786)[0m     @     0x55edcd6cfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9786)[0m     @     0x55edcd6d0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9786)[0m     @     0x55edcd645689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9786)[0m     @     0x55edcd6cfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9786)[0m     @     0x55edcd6d0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9786)[0m     @     0x55edcd645689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9729)[0m     @     0x7f0e88f384f5 at::Tensor::copy_()
[2m[36m(pid=9729)[0m     @     0x7f0e8b40b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9729)[0m     @     0x7f0e88f384f5 at::Tensor::copy_()
[2m[36m(pid=9729)[0m     @     0x7f0e8efe379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9729)[0m     @     0x55cc8563ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9729)[0m     @     0x55cc8559ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9729)[0m     @     0x55cc85625baf _PyEval_EvalCodeWithName
[2m[36m(pid=9729)[0m     @     0x55cc85626a20 method_vectorcall
[2m[36m(pid=9729)[0m     @     0x55cc8559abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9729)[0m     @     0x55cc85625baf _PyEval_EvalCodeWithName
[2m[36m(pid=9729)[0m     @     0x55cc85626643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9729)[0m     @     0x55cc8559b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9729)[0m     @     0x55cc85625baf _PyEval_EvalCodeWithName
[2m[36m(pid=9729)[0m     @     0x55cc85626643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9729)[0m     @     0x55cc8559b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9729)[0m     @     0x55cc85625baf _PyEval_EvalCodeWithName
[2m[36m(pid=9729)[0m     @     0x55cc85626643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9729)[0m     @     0x55cc8559b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9729)[0m     @     0x55cc85625baf _PyEval_EvalCodeWithName
[2m[36m(pid=9729)[0m     @     0x55cc85626643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9729)[0m     @     0x55cc8559b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9776)[0m     @     0x7f94c37888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9776)[0m     @     0x7f94c12b54f5 at::Tensor::copy_()
[2m[36m(pid=9776)[0m     @     0x7f94c736079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9776)[0m     @     0x55dac60fffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9776)[0m     @     0x55dac605ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9776)[0m     @     0x55dac60e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=9776)[0m     @     0x55dac60e6a20 method_vectorcall
[2m[36m(pid=9776)[0m     @     0x55dac605abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9776)[0m     @     0x55dac60e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=9776)[0m     @     0x55dac60e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9776)[0m     @     0x55dac605b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9776)[0m     @     0x55dac60e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=9776)[0m     @     0x55dac60e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9776)[0m     @     0x55dac605b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9776)[0m     @     0x55dac60e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=9776)[0m     @     0x55dac60e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9776)[0m     @     0x55dac605b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9776)[0m     @     0x55dac60e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=9776)[0m     @     0x55dac60e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9776)[0m     @     0x55dac605b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9751)[0m     @     0x7f0e63a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9751)[0m     @     0x7f0e615cb4f5 at::Tensor::copy_()
[2m[36m(pid=9751)[0m     @     0x7f0e6767679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9751)[0m     @     0x56484b745fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9751)[0m     @     0x56484b6a0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9751)[0m     @     0x56484b72bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9751)[0m     @     0x56484b72ca20 method_vectorcall
[2m[36m(pid=9751)[0m     @     0x56484b6a0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9751)[0m     @     0x56484b72bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9751)[0m     @     0x56484b72c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9751)[0m     @     0x56484b6a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9751)[0m     @     0x56484b72bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9751)[0m     @     0x56484b72c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9751)[0m     @     0x56484b6a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9751)[0m     @     0x56484b72bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9751)[0m     @     0x56484b72c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9751)[0m     @     0x56484b6a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9751)[0m     @     0x56484b72bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9751)[0m     @     0x56484b72c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9751)[0m     @     0x56484b6a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9763)[0m     @     0x7fba0c0e24f5 at::Tensor::copy_()
[2m[36m(pid=9763)[0m     @     0x7fba0e5b58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9763)[0m     @     0x7fba0c0e24f5 at::Tensor::copy_()
[2m[36m(pid=9763)[0m     @     0x7fba1218d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9763)[0m     @     0x5577fd092fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9763)[0m     @     0x5577fcfedb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9763)[0m     @     0x5577fd078baf _PyEval_EvalCodeWithName
[2m[36m(pid=9763)[0m     @     0x5577fd079a20 method_vectorcall
[2m[36m(pid=9763)[0m     @     0x5577fcfedbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9763)[0m     @     0x5577fd078baf _PyEval_EvalCodeWithName
[2m[36m(pid=9763)[0m     @     0x5577fd079643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9763)[0m     @     0x5577fcfee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9763)[0m     @     0x5577fd078baf _PyEval_EvalCodeWithName
[2m[36m(pid=9763)[0m     @     0x5577fd079643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9763)[0m     @     0x5577fcfee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9763)[0m     @     0x5577fd078baf _PyEval_EvalCodeWithName
[2m[36m(pid=9763)[0m     @     0x5577fd079643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9763)[0m     @     0x5577fcfee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9763)[0m     @     0x5577fd078baf _PyEval_EvalCodeWithName
[2m[36m(pid=9763)[0m     @     0x5577fd079643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9763)[0m     @     0x5577fcfee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9717)[0m     @     0x7f76104255a4 at::native::copy_()
[2m[36m(pid=9717)[0m     @     0x7f7610b104f5 at::Tensor::copy_()
[2m[36m(pid=9717)[0m     @     0x7f7612fe38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9717)[0m     @     0x7f7610b104f5 at::Tensor::copy_()
[2m[36m(pid=9717)[0m     @     0x7f7616bbb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9717)[0m     @     0x556e1dd7bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9717)[0m     @     0x556e1dcd6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9717)[0m     @     0x556e1dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=9717)[0m     @     0x556e1dd62a20 method_vectorcall
[2m[36m(pid=9717)[0m     @     0x556e1dcd6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9717)[0m     @     0x556e1dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=9717)[0m     @     0x556e1dd62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9717)[0m     @     0x556e1dcd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9717)[0m     @     0x556e1dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=9717)[0m     @     0x556e1dd62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9717)[0m     @     0x556e1dcd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9717)[0m     @     0x556e1dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=9717)[0m     @     0x556e1dd62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9717)[0m     @     0x556e1dcd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9717)[0m     @     0x556e1dd61baf _PyEval_EvalCodeWithName
[2m[36m(pid=9717)[0m     @     0x556e1dd62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9717)[0m     @     0x556e1dcd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9649)[0m     @     0x7f6cfd94a4f5 at::Tensor::copy_()
[2m[36m(pid=9649)[0m     @     0x7f6cffe1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9649)[0m     @     0x7f6cfd94a4f5 at::Tensor::copy_()
[2m[36m(pid=9649)[0m     @     0x7f6d039f579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9649)[0m     @     0x557b856a2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9649)[0m     @     0x557b855fdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9649)[0m     @     0x557b85688baf _PyEval_EvalCodeWithName
[2m[36m(pid=9649)[0m     @     0x557b85689a20 method_vectorcall
[2m[36m(pid=9649)[0m     @     0x557b855fdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9649)[0m     @     0x557b85688baf _PyEval_EvalCodeWithName
[2m[36m(pid=9649)[0m     @     0x557b85689643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9649)[0m     @     0x557b855fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9649)[0m     @     0x557b85688baf _PyEval_EvalCodeWithName
[2m[36m(pid=9649)[0m     @     0x557b85689643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9649)[0m     @     0x557b855fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9649)[0m     @     0x557b85688baf _PyEval_EvalCodeWithName
[2m[36m(pid=9649)[0m     @     0x557b85689643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9649)[0m     @     0x557b855fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9649)[0m     @     0x557b85688baf _PyEval_EvalCodeWithName
[2m[36m(pid=9649)[0m     @     0x557b85689643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9649)[0m     @     0x557b855fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9715)[0m     @     0x7edfad9e54f5 at::Tensor::copy_()
[2m[36m(pid=9715)[0m     @     0x7edfafeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9715)[0m     @     0x7edfad9e54f5 at::Tensor::copy_()
[2m[36m(pid=9715)[0m     @     0x7edfb3a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9715)[0m     @     0x5648bcdc8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9715)[0m     @     0x5648bcd23b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9715)[0m     @     0x5648bcdaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9715)[0m     @     0x5648bcdafa20 method_vectorcall
[2m[36m(pid=9715)[0m     @     0x5648bcd23bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9715)[0m     @     0x5648bcdaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9715)[0m     @     0x5648bcdaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9715)[0m     @     0x5648bcd24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9715)[0m     @     0x5648bcdaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9715)[0m     @     0x5648bcdaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9715)[0m     @     0x5648bcd24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9715)[0m     @     0x5648bcdaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9715)[0m     @     0x5648bcdaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9715)[0m     @     0x5648bcd24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9715)[0m     @     0x5648bcdaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9715)[0m     @     0x5648bcdaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9715)[0m     @     0x5648bcd24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9748)[0m     @     0x7f675df6c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9748)[0m     @     0x7f675ba994f5 at::Tensor::copy_()
[2m[36m(pid=9748)[0m     @     0x7f6761b4479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9748)[0m     @     0x55e98008bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9748)[0m     @     0x55e97ffe6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9748)[0m     @     0x55e980071baf _PyEval_EvalCodeWithName
[2m[36m(pid=9748)[0m     @     0x55e980072a20 method_vectorcall
[2m[36m(pid=9748)[0m     @     0x55e97ffe6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9748)[0m     @     0x55e980071baf _PyEval_EvalCodeWithName
[2m[36m(pid=9748)[0m     @     0x55e980072643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9748)[0m     @     0x55e97ffe7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9748)[0m     @     0x55e980071baf _PyEval_EvalCodeWithName
[2m[36m(pid=9748)[0m     @     0x55e980072643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9748)[0m     @     0x55e97ffe7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9748)[0m     @     0x55e980071baf _PyEval_EvalCodeWithName
[2m[36m(pid=9748)[0m     @     0x55e980072643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9748)[0m     @     0x55e97ffe7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9748)[0m     @     0x55e980071baf _PyEval_EvalCodeWithName
[2m[36m(pid=9748)[0m     @     0x55e980072643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9748)[0m     @     0x55e97ffe7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9669)[0m     @     0x7faed99e54f5 at::Tensor::copy_()
[2m[36m(pid=9669)[0m     @     0x7faedbeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9669)[0m     @     0x7faed99e54f5 at::Tensor::copy_()
[2m[36m(pid=9669)[0m     @     0x7faedfa9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9669)[0m     @     0x55d69f481fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9669)[0m     @     0x55d69f3dcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9669)[0m     @     0x55d69f467baf _PyEval_EvalCodeWithName
[2m[36m(pid=9669)[0m     @     0x55d69f468a20 method_vectorcall
[2m[36m(pid=9669)[0m     @     0x55d69f3dcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9669)[0m     @     0x55d69f467baf _PyEval_EvalCodeWithName
[2m[36m(pid=9669)[0m     @     0x55d69f468643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9669)[0m     @     0x55d69f3dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9669)[0m     @     0x55d69f467baf _PyEval_EvalCodeWithName
[2m[36m(pid=9669)[0m     @     0x55d69f468643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9669)[0m     @     0x55d69f3dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9669)[0m     @     0x55d69f467baf _PyEval_EvalCodeWithName
[2m[36m(pid=9669)[0m     @     0x55d69f468643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9669)[0m     @     0x55d69f3dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9669)[0m     @     0x55d69f467baf _PyEval_EvalCodeWithName
[2m[36m(pid=9669)[0m     @     0x55d69f468643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9669)[0m     @     0x55d69f3dd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9648)[0m     @     0x7fa2fe5e24f5 at::Tensor::copy_()
[2m[36m(pid=9648)[0m     @     0x7fa300ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9648)[0m     @     0x7fa2fe5e24f5 at::Tensor::copy_()
[2m[36m(pid=9648)[0m     @     0x7fa30468d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9648)[0m     @     0x556d4bb75fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9648)[0m     @     0x556d4bad0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9648)[0m     @     0x556d4bb5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9648)[0m     @     0x556d4bb5ca20 method_vectorcall
[2m[36m(pid=9648)[0m     @     0x556d4bad0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9648)[0m     @     0x556d4bb5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9648)[0m     @     0x556d4bb5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9648)[0m     @     0x556d4bad1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9648)[0m     @     0x556d4bb5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9648)[0m     @     0x556d4bb5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9648)[0m     @     0x556d4bad1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9648)[0m     @     0x556d4bb5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9648)[0m     @     0x556d4bb5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9648)[0m     @     0x556d4bad1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9648)[0m     @     0x556d4bb5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9648)[0m     @     0x556d4bb5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9648)[0m     @     0x556d4bad1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9746)[0m     @     0x7f19eb4c8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9746)[0m     @     0x7f19eb4ebc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9746)[0m     @     0x7f19ea98da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9746)[0m     @     0x7f19ea98b388 at::native::copy_impl()
[2m[36m(pid=9746)[0m     @     0x7f19ea98d5a4 at::native::copy_()
[2m[36m(pid=9746)[0m     @     0x7f19eb0784f5 at::Tensor::copy_()
[2m[36m(pid=9746)[0m     @     0x7f19ed54b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9738)[0m     @     0x7ee97b6b64f5 at::Tensor::copy_()
[2m[36m(pid=9738)[0m     @     0x7ee97db898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9738)[0m     @     0x7ee97b6b64f5 at::Tensor::copy_()
[2m[36m(pid=9738)[0m     @     0x7ee98176179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9738)[0m     @     0x5625597fbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9738)[0m     @     0x562559756b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9738)[0m     @     0x5625597e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9738)[0m     @     0x5625597e2a20 method_vectorcall
[2m[36m(pid=9738)[0m     @     0x562559756bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9738)[0m     @     0x5625597e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9738)[0m     @     0x5625597e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9738)[0m     @     0x562559757689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9738)[0m     @     0x5625597e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9738)[0m     @     0x5625597e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9738)[0m     @     0x562559757689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9738)[0m     @     0x5625597e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9738)[0m     @     0x5625597e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9738)[0m     @     0x562559757689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9738)[0m     @     0x5625597e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9738)[0m     @     0x5625597e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9738)[0m     @     0x562559757689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9728)[0m     @     0x7fc6292f8388 at::native::copy_impl()
[2m[36m(pid=9728)[0m     @     0x7fc6292fa5a4 at::native::copy_()
[2m[36m(pid=9728)[0m     @     0x7fc6299e54f5 at::Tensor::copy_()
[2m[36m(pid=9728)[0m     @     0x7fc62beb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9728)[0m     @     0x7fc6299e54f5 at::Tensor::copy_()
[2m[36m(pid=9728)[0m     @     0x7fc62fa9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9728)[0m     @     0x55c770b84fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9728)[0m     @     0x55c770adfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9728)[0m     @     0x55c770b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9728)[0m     @     0x55c770b6ba20 method_vectorcall
[2m[36m(pid=9728)[0m     @     0x55c770adfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9728)[0m     @     0x55c770b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9728)[0m     @     0x55c770b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9728)[0m     @     0x55c770ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9728)[0m     @     0x55c770b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9728)[0m     @     0x55c770b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9728)[0m     @     0x55c770ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9728)[0m     @     0x55c770b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9728)[0m     @     0x55c770b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9728)[0m     @     0x55c770ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9728)[0m     @     0x55c770b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9728)[0m     @     0x55c770b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9728)[0m     @     0x55c770ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9736)[0m     @     0x7fc105c694f5 at::Tensor::copy_()
[2m[36m(pid=9736)[0m     @     0x7fc10813c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9736)[0m     @     0x7fc105c694f5 at::Tensor::copy_()
[2m[36m(pid=9736)[0m     @     0x7fc10bd1479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9736)[0m     @     0x561152f62fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9736)[0m     @     0x561152ebdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9736)[0m     @     0x561152f48baf _PyEval_EvalCodeWithName
[2m[36m(pid=9736)[0m     @     0x561152f49a20 method_vectorcall
[2m[36m(pid=9736)[0m     @     0x561152ebdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9736)[0m     @     0x561152f48baf _PyEval_EvalCodeWithName
[2m[36m(pid=9736)[0m     @     0x561152f49643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9736)[0m     @     0x561152ebe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9736)[0m     @     0x561152f48baf _PyEval_EvalCodeWithName
[2m[36m(pid=9736)[0m     @     0x561152f49643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9736)[0m     @     0x561152ebe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9736)[0m     @     0x561152f48baf _PyEval_EvalCodeWithName
[2m[36m(pid=9736)[0m     @     0x561152f49643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9736)[0m     @     0x561152ebe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9736)[0m     @     0x561152f48baf _PyEval_EvalCodeWithName
[2m[36m(pid=9736)[0m     @     0x561152f49643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9736)[0m     @     0x561152ebe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9668)[0m     @     0x7fb2ba0eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9668)[0m     @     0x7fb2ba0e9388 at::native::copy_impl()
[2m[36m(pid=9668)[0m     @     0x7fb2ba0eb5a4 at::native::copy_()
[2m[36m(pid=9668)[0m     @     0x7fb2ba7d64f5 at::Tensor::copy_()
[2m[36m(pid=9668)[0m     @     0x7fb2bcca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9668)[0m     @     0x7fb2ba7d64f5 at::Tensor::copy_()
[2m[36m(pid=9668)[0m     @     0x7fb2c047779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9668)[0m     @     0x55fd72572fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9668)[0m     @     0x55fd724cdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9668)[0m     @     0x55fd72558baf _PyEval_EvalCodeWithName
[2m[36m(pid=9668)[0m     @     0x55fd72559a20 method_vectorcall
[2m[36m(pid=9668)[0m     @     0x55fd724cdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9668)[0m     @     0x55fd72558baf _PyEval_EvalCodeWithName
[2m[36m(pid=9668)[0m     @     0x55fd72559643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9668)[0m     @     0x55fd724ce689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9668)[0m     @     0x55fd72558baf _PyEval_EvalCodeWithName
[2m[36m(pid=9668)[0m     @     0x55fd72559643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9668)[0m     @     0x55fd724ce689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9737)[0m     @     0x7ed850fab4f5 at::Tensor::copy_()
[2m[36m(pid=9737)[0m     @     0x7ed85347e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9737)[0m     @     0x7ed850fab4f5 at::Tensor::copy_()
[2m[36m(pid=9737)[0m     @     0x7ed85705679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9737)[0m     @     0x55b0c7d27fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9737)[0m     @     0x55b0c7c82b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9737)[0m     @     0x55b0c7d0dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9737)[0m     @     0x55b0c7d0ea20 method_vectorcall
[2m[36m(pid=9737)[0m     @     0x55b0c7c82bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9737)[0m     @     0x55b0c7d0dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9737)[0m     @     0x55b0c7d0e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9737)[0m     @     0x55b0c7c83689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9737)[0m     @     0x55b0c7d0dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9737)[0m     @     0x55b0c7d0e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9737)[0m     @     0x55b0c7c83689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9737)[0m     @     0x55b0c7d0dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9737)[0m     @     0x55b0c7d0e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9737)[0m     @     0x55b0c7c83689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9737)[0m     @     0x55b0c7d0dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9737)[0m     @     0x55b0c7d0e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9737)[0m     @     0x55b0c7c83689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9721)[0m     @     0x7fa268720a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9721)[0m     @     0x7fa26871e388 at::native::copy_impl()
[2m[36m(pid=9721)[0m     @     0x7fa2687205a4 at::native::copy_()
[2m[36m(pid=9721)[0m     @     0x7fa268e0b4f5 at::Tensor::copy_()
[2m[36m(pid=9721)[0m     @     0x7fa26b2de8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9721)[0m     @     0x7fa268e0b4f5 at::Tensor::copy_()
[2m[36m(pid=9721)[0m     @     0x7fa26eeb679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9721)[0m     @     0x560867970fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9721)[0m     @     0x5608678cbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9721)[0m     @     0x560867956baf _PyEval_EvalCodeWithName
[2m[36m(pid=9721)[0m     @     0x560867957a20 method_vectorcall
[2m[36m(pid=9721)[0m     @     0x5608678cbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9721)[0m     @     0x560867956baf _PyEval_EvalCodeWithName
[2m[36m(pid=9768)[0m     @     0x7f15a6d7e5a4 at::native::copy_()
[2m[36m(pid=9768)[0m     @     0x7f15a74694f5 at::Tensor::copy_()
[2m[36m(pid=9768)[0m     @     0x7f15a993c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9768)[0m     @     0x7f15a74694f5 at::Tensor::copy_()
[2m[36m(pid=9768)[0m     @     0x7f15ad51479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9768)[0m     @     0x561585cc6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9768)[0m     @     0x561585c21b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9768)[0m     @     0x561585cacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9768)[0m     @     0x561585cada20 method_vectorcall
[2m[36m(pid=9768)[0m     @     0x561585c21bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9768)[0m     @     0x561585cacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9768)[0m     @     0x561585cad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9768)[0m     @     0x561585c22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9768)[0m     @     0x561585cacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9768)[0m     @     0x561585cad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9768)[0m     @     0x561585c22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9768)[0m     @     0x561585cacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9768)[0m     @     0x561585cad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9768)[0m     @     0x561585c22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9768)[0m     @     0x561585cacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9768)[0m     @     0x561585cad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9768)[0m     @     0x561585c22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9654)[0m     @     0x7ed410945c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9654)[0m     @     0x7ed40fde7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9654)[0m     @     0x7ed40fde5388 at::native::copy_impl()
[2m[36m(pid=9654)[0m     @     0x7ed40fde75a4 at::native::copy_()
[2m[36m(pid=9654)[0m     @     0x7ed4104d24f5 at::Tensor::copy_()
[2m[36m(pid=9654)[0m     @     0x7ed4129a58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9727)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9727)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9727)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9727)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9727)[0m *** SIGSEGV (@0x0) received by PID 9727 (TID 0x7fecc615f700) from PID 0; stack trace: ***
[2m[36m(pid=9727)[0m     @     0x7fecc5d38390 (unknown)
[2m[36m(pid=9727)[0m     @     0x7fbdc5c0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9727)[0m     @     0x7fbdc53387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9727)[0m     @     0x7fbdc533b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9727)[0m     @     0x7fbdc533bad3 at::TensorIterator::for_each()
[2m[36m(pid=9716)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9716)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9716)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9716)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9716)[0m *** SIGSEGV (@0x0) received by PID 9716 (TID 0x7ff950bc5700) from PID 0; stack trace: ***
[2m[36m(pid=9716)[0m     @     0x7ff95079e390 (unknown)
[2m[36m(pid=9716)[0m     @     0x7fca50507f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9716)[0m     @     0x7fca4fc327db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9716)[0m     @     0x7fca4fc358f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9716)[0m     @     0x7fca4fc35ad3 at::TensorIterator::for_each()
[2m[36m(pid=9725)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9725)[0m *** SIGSEGV (@0x0) received by PID 9725 (TID 0x7f1469b9b700) from PID 0; stack trace: ***
[2m[36m(pid=9725)[0m     @     0x7f1469774390 (unknown)
[2m[36m(pid=9725)[0m     @     0x7ee5696f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9725)[0m     @     0x7ee568e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9725)[0m     @     0x7ee568e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9725)[0m     @     0x7ee568e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=9725)[0m     @     0x7ee568e22d91 at::TensorIterator::for_each()
[2m[36m(pid=9755)[0m     @     0x7f96d83354f5 at::Tensor::copy_()
[2m[36m(pid=9755)[0m     @     0x7f96da8088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9755)[0m     @     0x7f96d83354f5 at::Tensor::copy_()
[2m[36m(pid=9755)[0m     @     0x7f96de3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9755)[0m     @     0x55c8792bdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9755)[0m     @     0x55c879218b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9755)[0m     @     0x55c8792a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9755)[0m     @     0x55c8792a4a20 method_vectorcall
[2m[36m(pid=9755)[0m     @     0x55c879218bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9755)[0m     @     0x55c8792a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9755)[0m     @     0x55c8792a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9755)[0m     @     0x55c879219689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9755)[0m     @     0x55c8792a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9755)[0m     @     0x55c8792a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9755)[0m     @     0x55c879219689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9755)[0m     @     0x55c8792a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9755)[0m     @     0x55c8792a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9755)[0m     @     0x55c879219689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9755)[0m     @     0x55c8792a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9755)[0m     @     0x55c8792a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9755)[0m     @     0x55c879219689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9734)[0m     @     0x7fb3d12b54f5 at::Tensor::copy_()
[2m[36m(pid=9734)[0m     @     0x7fb3d37888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9734)[0m     @     0x7fb3d12b54f5 at::Tensor::copy_()
[2m[36m(pid=9734)[0m     @     0x7fb3d736079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9734)[0m     @     0x5584d1be9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9734)[0m     @     0x5584d1b44b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9734)[0m     @     0x5584d1bcfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9734)[0m     @     0x5584d1bd0a20 method_vectorcall
[2m[36m(pid=9734)[0m     @     0x5584d1b44bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9734)[0m     @     0x5584d1bcfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9734)[0m     @     0x5584d1bd0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9734)[0m     @     0x5584d1b45689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9734)[0m     @     0x5584d1bcfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9734)[0m     @     0x5584d1bd0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9734)[0m     @     0x5584d1b45689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9734)[0m     @     0x5584d1bcfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9734)[0m     @     0x5584d1bd0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9734)[0m     @     0x5584d1b45689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9734)[0m     @     0x5584d1bcfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9734)[0m     @     0x5584d1bd0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9734)[0m     @     0x5584d1b45689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9767)[0m     @     0x7f31134c14f5 at::Tensor::copy_()
[2m[36m(pid=9767)[0m     @     0x7f31159948de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9767)[0m     @     0x7f31134c14f5 at::Tensor::copy_()
[2m[36m(pid=9767)[0m     @     0x7f311956c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9767)[0m     @     0x5613e1ba7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9767)[0m     @     0x5613e1b02b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9767)[0m     @     0x5613e1b8dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9767)[0m     @     0x5613e1b8ea20 method_vectorcall
[2m[36m(pid=9767)[0m     @     0x5613e1b02bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9767)[0m     @     0x5613e1b8dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9767)[0m     @     0x5613e1b8e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9767)[0m     @     0x5613e1b03689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9767)[0m     @     0x5613e1b8dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9767)[0m     @     0x5613e1b8e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9767)[0m     @     0x5613e1b03689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9767)[0m     @     0x5613e1b8dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9767)[0m     @     0x5613e1b8e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9767)[0m     @     0x5613e1b03689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9767)[0m     @     0x5613e1b8dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9767)[0m     @     0x5613e1b8e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9767)[0m     @     0x5613e1b03689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9745)[0m     @     0x7f3e0e164390 (unknown)
[2m[36m(pid=9745)[0m     @     0x7f0f0de24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9745)[0m     @     0x7f0f0d54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9745)[0m     @     0x7f0f0d5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9745)[0m     @     0x7f0f0d552ad3 at::TensorIterator::for_each()
[2m[36m(pid=9754)[0m     @     0x7f9631607f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9754)[0m     @     0x7f9630d327db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9754)[0m     @     0x7f9630d358f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9754)[0m     @     0x7f9630d35ad3 at::TensorIterator::for_each()
[2m[36m(pid=9754)[0m     @     0x7f9630d35d91 at::TensorIterator::for_each()
[2m[36m(pid=9754)[0m     @     0x7f9631618b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9677)[0m     @     0x7fcf8c964390 (unknown)
[2m[36m(pid=9677)[0m     @     0x7fa08c911f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9677)[0m     @     0x7fa08c03c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9677)[0m     @     0x7fa08c03f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9677)[0m     @     0x7fa08c03fad3 at::TensorIterator::for_each()
[2m[36m(pid=9662)[0m     @     0x7f51080b74f5 at::Tensor::copy_()
[2m[36m(pid=9662)[0m     @     0x7f510e16279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9662)[0m     @     0x55fc3b3e1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9662)[0m     @     0x55fc3b33cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9662)[0m     @     0x55fc3b3c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9662)[0m     @     0x55fc3b3c8a20 method_vectorcall
[2m[36m(pid=9662)[0m     @     0x55fc3b33cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9662)[0m     @     0x55fc3b3c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9662)[0m     @     0x55fc3b3c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9662)[0m     @     0x55fc3b33d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9662)[0m     @     0x55fc3b3c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9662)[0m     @     0x55fc3b3c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9662)[0m     @     0x55fc3b33d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9662)[0m     @     0x55fc3b3c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9662)[0m     @     0x55fc3b3c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9662)[0m     @     0x55fc3b33d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9662)[0m     @     0x55fc3b3c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9662)[0m     @     0x55fc3b3c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9662)[0m     @     0x55fc3b33d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9685)[0m     @     0x7f3b6dc02390 (unknown)
[2m[36m(pid=9685)[0m     @     0x7f0c6db9ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9685)[0m     @     0x7f0c6d2ca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9685)[0m     @     0x7f0c6d2cd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9685)[0m     @     0x7f0c6d2cdad3 at::TensorIterator::for_each()
[2m[36m(pid=9685)[0m     @     0x7f0c6d2cdd91 at::TensorIterator::for_each()
[2m[36m(pid=9665)[0m     @     0x7f6797868f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9665)[0m     @     0x7f6796f937db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9665)[0m     @     0x7f6796f968f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9665)[0m     @     0x7f6796f96ad3 at::TensorIterator::for_each()
[2m[36m(pid=9665)[0m     @     0x7f6796f96d91 at::TensorIterator::for_each()
[2m[36m(pid=9665)[0m     @     0x7f6797879b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9720)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=9720)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=9720)[0m *** Aborted at 1604571503 (unix time) try "date -d @1604571503" if you are using GNU date ***
[2m[36m(pid=9720)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9720)[0m *** SIGSEGV (@0x0) received by PID 9720 (TID 0x7f46ad5aa700) from PID 0; stack trace: ***
[2m[36m(pid=9720)[0m     @     0x7f46ad183390 (unknown)
[2m[36m(pid=9720)[0m     @     0x7f17ad0b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9720)[0m     @     0x7f17ac7e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9683)[0m     @     0x7fbc64b42f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9683)[0m     @     0x7fbc6426d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9683)[0m     @     0x7fbc642708f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9683)[0m     @     0x7fbc64270ad3 at::TensorIterator::for_each()
[2m[36m(pid=9683)[0m     @     0x7fbc64270d91 at::TensorIterator::for_each()
[2m[36m(pid=9683)[0m     @     0x7fbc64b53b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9683)[0m     @     0x7fbc64b76c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9770)[0m     @     0x7f43c8a7a390 (unknown)
[2m[36m(pid=9770)[0m     @     0x7f14c8825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9770)[0m     @     0x7f14c7f507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9770)[0m     @     0x7f14c7f538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9770)[0m     @     0x7f14c7f53ad3 at::TensorIterator::for_each()
[2m[36m(pid=9663)[0m     @     0x7f2041e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9663)[0m     @     0x7f204154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9663)[0m     @     0x7f20415528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9663)[0m     @     0x7f2041552ad3 at::TensorIterator::for_each()
[2m[36m(pid=9663)[0m     @     0x7f2041552d91 at::TensorIterator::for_each()
[2m[36m(pid=9663)[0m     @     0x7f2041e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9663)[0m     @     0x7f2041e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9663)[0m     @     0x7f20412faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9681)[0m     @     0x7f95df4718f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9681)[0m     @     0x7f95df471ad3 at::TensorIterator::for_each()
[2m[36m(pid=9681)[0m     @     0x7f95df471d91 at::TensorIterator::for_each()
[2m[36m(pid=9681)[0m     @     0x7f95dfd54b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9681)[0m     @     0x7f95dfd77c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9681)[0m     @     0x7f95df219a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9681)[0m     @     0x7f95df217388 at::native::copy_impl()
[2m[36m(pid=9651)[0m     @     0x7f331e193f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9651)[0m     @     0x7f331d8be7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9651)[0m     @     0x7f331d8c18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9651)[0m     @     0x7f331d8c1ad3 at::TensorIterator::for_each()
[2m[36m(pid=9651)[0m     @     0x7f331d8c1d91 at::TensorIterator::for_each()
[2m[36m(pid=9651)[0m     @     0x7f331e1a4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9651)[0m     @     0x7f331e1c7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9651)[0m     @     0x7f331d669a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9660)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9660)[0m *** SIGSEGV (@0x0) received by PID 9660 (TID 0x7f9300865700) from PID 0; stack trace: ***
[2m[36m(pid=9660)[0m     @     0x7f930043e390 (unknown)
[2m[36m(pid=9658)[0m     @     0x7ef85d7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9658)[0m     @     0x7ef85cf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9658)[0m     @     0x7ef85cf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9658)[0m     @     0x7ef85cf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=9658)[0m     @     0x7ef85cf27d91 at::TensorIterator::for_each()
[2m[36m(pid=9658)[0m     @     0x7ef85d80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9658)[0m     @     0x7ef85d82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9664)[0m     @     0x7fb4874cff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9664)[0m     @     0x7fb486bfa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9664)[0m     @     0x7fb486bfd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9664)[0m     @     0x7fb486bfdad3 at::TensorIterator::for_each()
[2m[36m(pid=9664)[0m     @     0x7fb486bfdd91 at::TensorIterator::for_each()
[2m[36m(pid=9664)[0m     @     0x7fb4874e0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9664)[0m     @     0x7fb487503c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9664)[0m     @     0x7fb4869a5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9730)[0m     @     0x7f3660adaad3 at::TensorIterator::for_each()
[2m[36m(pid=9730)[0m     @     0x7f3660adad91 at::TensorIterator::for_each()
[2m[36m(pid=9730)[0m     @     0x7f36613bdb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9730)[0m     @     0x7f36613e0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9730)[0m     @     0x7f3660882a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9730)[0m     @     0x7f3660880388 at::native::copy_impl()
[2m[36m(pid=9730)[0m     @     0x7f36608825a4 at::native::copy_()
[2m[36m(pid=9667)[0m     @     0x7eff5a0fa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9667)[0m     @     0x7eff5a0faad3 at::TensorIterator::for_each()
[2m[36m(pid=9667)[0m     @     0x7eff5a0fad91 at::TensorIterator::for_each()
[2m[36m(pid=9667)[0m     @     0x7eff5a9ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9667)[0m     @     0x7eff5aa00c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9667)[0m     @     0x7eff59ea2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9667)[0m     @     0x7eff59ea0388 at::native::copy_impl()
[2m[36m(pid=9670)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9670)[0m *** SIGSEGV (@0x0) received by PID 9670 (TID 0x7ff21ffc3700) from PID 0; stack trace: ***
[2m[36m(pid=9670)[0m     @     0x7ff21fb9c390 (unknown)
[2m[36m(pid=9670)[0m     @     0x7fc31f8ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9670)[0m     @     0x7fc31eff77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9670)[0m     @     0x7fc31effa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9670)[0m     @     0x7fc31effaad3 at::TensorIterator::for_each()
[2m[36m(pid=9723)[0m     @     0x7edfc1a93ad3 at::TensorIterator::for_each()
[2m[36m(pid=9723)[0m     @     0x7edfc1a93d91 at::TensorIterator::for_each()
[2m[36m(pid=9723)[0m     @     0x7edfc2376b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9723)[0m     @     0x7edfc2399c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9723)[0m     @     0x7edfc183ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9723)[0m     @     0x7edfc1839388 at::native::copy_impl()
[2m[36m(pid=9769)[0m     @     0x7f0135c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9769)[0m     @     0x7f0135c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=9769)[0m     @     0x7f0135c27d91 at::TensorIterator::for_each()
[2m[36m(pid=9769)[0m     @     0x7f013650ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9769)[0m     @     0x7f013652dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9769)[0m     @     0x7f01359cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9769)[0m     @     0x7f01359cd388 at::native::copy_impl()
[2m[36m(pid=9653)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9653)[0m *** SIGSEGV (@0x0) received by PID 9653 (TID 0x7f1d0f094700) from PID 0; stack trace: ***
[2m[36m(pid=9653)[0m     @     0x7f1d0ec6d390 (unknown)
[2m[36m(pid=9653)[0m     @     0x7eee0ea21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9653)[0m     @     0x7eee0e14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9675)[0m     @     0x7f2576c7f5a4 at::native::copy_()
[2m[36m(pid=9675)[0m     @     0x7f257736a4f5 at::Tensor::copy_()
[2m[36m(pid=9675)[0m     @     0x7f257983d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9675)[0m     @     0x7f257736a4f5 at::Tensor::copy_()
[2m[36m(pid=9675)[0m     @     0x7f257d41579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9675)[0m     @     0x558c03768fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9675)[0m     @     0x558c036c3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9675)[0m     @     0x558c0374ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9675)[0m     @     0x558c0374fa20 method_vectorcall
[2m[36m(pid=9675)[0m     @     0x558c036c3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9675)[0m     @     0x558c0374ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9675)[0m     @     0x558c0374f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9675)[0m     @     0x558c036c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9675)[0m     @     0x558c0374ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9675)[0m     @     0x558c0374f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9675)[0m     @     0x558c036c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9675)[0m     @     0x558c0374ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9675)[0m     @     0x558c0374f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9675)[0m     @     0x558c036c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9675)[0m     @     0x558c0374ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9675)[0m     @     0x558c0374f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9675)[0m     @     0x558c036c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9684)[0m     @     0x7f1e28333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9684)[0m     @     0x7f1e27a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9684)[0m     @     0x7f1e27a618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9684)[0m     @     0x7f1e27a61ad3 at::TensorIterator::for_each()
[2m[36m(pid=9684)[0m     @     0x7f1e27a61d91 at::TensorIterator::for_each()
[2m[36m(pid=9684)[0m     @     0x7f1e28344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9659)[0m     @     0x7f86a00998de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9659)[0m     @     0x7f869dbc64f5 at::Tensor::copy_()
[2m[36m(pid=9659)[0m     @     0x7f86a3c7179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9659)[0m     @     0x556d245dbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9659)[0m     @     0x556d24536b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9659)[0m     @     0x556d245c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9659)[0m     @     0x556d245c2a20 method_vectorcall
[2m[36m(pid=9659)[0m     @     0x556d24536bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9659)[0m     @     0x556d245c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9659)[0m     @     0x556d245c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9659)[0m     @     0x556d24537689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9659)[0m     @     0x556d245c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9659)[0m     @     0x556d245c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9659)[0m     @     0x556d24537689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9659)[0m     @     0x556d245c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9659)[0m     @     0x556d245c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9659)[0m     @     0x556d24537689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9659)[0m     @     0x556d245c1baf _PyEval_EvalCodeWithName
[2m[36m(pid=9659)[0m     @     0x556d245c2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9659)[0m     @     0x556d24537689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9650)[0m     @     0x7f8a3f53cad3 at::TensorIterator::for_each()
[2m[36m(pid=9650)[0m     @     0x7f8a3f53cd91 at::TensorIterator::for_each()
[2m[36m(pid=9650)[0m     @     0x7f8a3fe1fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9650)[0m     @     0x7f8a3fe42c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9650)[0m     @     0x7f8a3f2e4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9650)[0m     @     0x7f8a3f2e2388 at::native::copy_impl()
[2m[36m(pid=9742)[0m     @     0x7f10f9e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9742)[0m     @     0x7f10f954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9742)[0m     @     0x7f10f95528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9742)[0m     @     0x7f10f9552ad3 at::TensorIterator::for_each()
[2m[36m(pid=9742)[0m     @     0x7f10f9552d91 at::TensorIterator::for_each()
[2m[36m(pid=9742)[0m     @     0x7f10f9e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9742)[0m     @     0x7f10f9e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9657)[0m     @     0x7f08b11388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9657)[0m     @     0x7f08b1138ad3 at::TensorIterator::for_each()
[2m[36m(pid=9657)[0m     @     0x7f08b1138d91 at::TensorIterator::for_each()
[2m[36m(pid=9657)[0m     @     0x7f08b1a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9657)[0m     @     0x7f08b1a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9657)[0m     @     0x7f08b0ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9657)[0m     @     0x7f08b0ede388 at::native::copy_impl()
[2m[36m(pid=9671)[0m     @     0x7f95c415f390 (unknown)
[2m[36m(pid=9671)[0m     @     0x7f66c401cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9671)[0m     @     0x7f66c37477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9671)[0m     @     0x7f66c374a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9671)[0m     @     0x7f66c374aad3 at::TensorIterator::for_each()
[2m[36m(pid=9671)[0m     @     0x7f66c374ad91 at::TensorIterator::for_each()
[2m[36m(pid=9671)[0m     @     0x7f66c402db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9722)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9722)[0m *** SIGSEGV (@0x0) received by PID 9722 (TID 0x7f0596df8700) from PID 0; stack trace: ***
[2m[36m(pid=9722)[0m     @     0x7f05969d1390 (unknown)
[2m[36m(pid=9722)[0m     @     0x7ed6967bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9722)[0m     @     0x7ed695ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9722)[0m     @     0x7ed695ee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9731)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9731)[0m *** SIGSEGV (@0x0) received by PID 9731 (TID 0x7fa7daf79700) from PID 0; stack trace: ***
[2m[36m(pid=9731)[0m     @     0x7fa7dab52390 (unknown)
[2m[36m(pid=9731)[0m     @     0x7f78daa21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9731)[0m     @     0x7f78da14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9731)[0m     @     0x7f78da14f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9731)[0m     @     0x7f78da14fad3 at::TensorIterator::for_each()
[2m[36m(pid=9652)[0m     @     0x7f22e1e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9652)[0m     @     0x7f22e1e388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9652)[0m     @     0x7f22e1e38ad3 at::TensorIterator::for_each()
[2m[36m(pid=9652)[0m     @     0x7f22e1e38d91 at::TensorIterator::for_each()
[2m[36m(pid=9652)[0m     @     0x7f22e271bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9652)[0m     @     0x7f22e273ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9740)[0m     @     0x7f5e3e957ad3 at::TensorIterator::for_each()
[2m[36m(pid=9740)[0m     @     0x7f5e3e957d91 at::TensorIterator::for_each()
[2m[36m(pid=9740)[0m     @     0x7f5e3f23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9740)[0m     @     0x7f5e3f25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9740)[0m     @     0x7f5e3e6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9740)[0m     @     0x7f5e3e6fd388 at::native::copy_impl()
[2m[36m(pid=9740)[0m     @     0x7f5e3e6ff5a4 at::native::copy_()
[2m[36m(pid=9647)[0m     @     0x7fb3616bbad3 at::TensorIterator::for_each()
[2m[36m(pid=9647)[0m     @     0x7fb3616bbd91 at::TensorIterator::for_each()
[2m[36m(pid=9647)[0m     @     0x7fb361f9eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9647)[0m     @     0x7fb361fc1c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9647)[0m     @     0x7fb361463a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9647)[0m     @     0x7fb361461388 at::native::copy_impl()
[2m[36m(pid=9647)[0m     @     0x7fb3614635a4 at::native::copy_()
[2m[36m(pid=9714)[0m     @     0x7f351629b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9714)[0m     @     0x7f351629bad3 at::TensorIterator::for_each()
[2m[36m(pid=9714)[0m     @     0x7f351629bd91 at::TensorIterator::for_each()
[2m[36m(pid=9714)[0m     @     0x7f3516b7eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9714)[0m     @     0x7f3516ba1c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9714)[0m     @     0x7f3516043a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9713)[0m     @     0x7f3c5199d390 (unknown)
[2m[36m(pid=9713)[0m     @     0x7f0d517f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9713)[0m     @     0x7f0d50f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9713)[0m     @     0x7f0d50f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9713)[0m     @     0x7f0d50f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=9678)[0m PC: @                0x0 (unknown)
[2m[36m(pid=9678)[0m *** SIGSEGV (@0x0) received by PID 9678 (TID 0x7fb2b8f7e700) from PID 0; stack trace: ***
[2m[36m(pid=9678)[0m     @     0x7fb2b8b57390 (unknown)
[2m[36m(pid=9678)[0m     @     0x7f83b8a36f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9678)[0m     @     0x7f83b81617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9719)[0m     @     0x7f6dac9ff7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9719)[0m     @     0x7f6daca028f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9719)[0m     @     0x7f6daca02ad3 at::TensorIterator::for_each()
[2m[36m(pid=9719)[0m     @     0x7f6daca02d91 at::TensorIterator::for_each()
[2m[36m(pid=9719)[0m     @     0x7f6dad2e5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9719)[0m     @     0x7f6dad308c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9712)[0m     @     0x7fa24a6418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9712)[0m     @     0x7fa24a641ad3 at::TensorIterator::for_each()
[2m[36m(pid=9712)[0m     @     0x7fa24a641d91 at::TensorIterator::for_each()
[2m[36m(pid=9712)[0m     @     0x7fa24af24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9712)[0m     @     0x7fa24af47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9757)[0m     @     0x7f78892b54f5 at::Tensor::copy_()
[2m[36m(pid=9757)[0m     @     0x7f788f36079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9757)[0m     @     0x564ffb71cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9757)[0m     @     0x564ffb677b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9757)[0m     @     0x564ffb702baf _PyEval_EvalCodeWithName
[2m[36m(pid=9757)[0m     @     0x564ffb703a20 method_vectorcall
[2m[36m(pid=9757)[0m     @     0x564ffb677bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9757)[0m     @     0x564ffb702baf _PyEval_EvalCodeWithName
[2m[36m(pid=9757)[0m     @     0x564ffb703643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9757)[0m     @     0x564ffb678689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9757)[0m     @     0x564ffb702baf _PyEval_EvalCodeWithName
[2m[36m(pid=9757)[0m     @     0x564ffb703643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9757)[0m     @     0x564ffb678689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9757)[0m     @     0x564ffb702baf _PyEval_EvalCodeWithName
[2m[36m(pid=9757)[0m     @     0x564ffb703643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9757)[0m     @     0x564ffb678689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9757)[0m     @     0x564ffb702baf _PyEval_EvalCodeWithName
[2m[36m(pid=9757)[0m     @     0x564ffb703643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9757)[0m     @     0x564ffb678689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9733)[0m     @     0x7f588b7b84f5 at::Tensor::copy_()
[2m[36m(pid=9733)[0m     @     0x7f589186379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9733)[0m     @     0x55c8ef4d2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9733)[0m     @     0x55c8ef42db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9733)[0m     @     0x55c8ef4b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9733)[0m     @     0x55c8ef4b9a20 method_vectorcall
[2m[36m(pid=9733)[0m     @     0x55c8ef42dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9733)[0m     @     0x55c8ef4b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9733)[0m     @     0x55c8ef4b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9733)[0m     @     0x55c8ef42e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9733)[0m     @     0x55c8ef4b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9733)[0m     @     0x55c8ef4b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9733)[0m     @     0x55c8ef42e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9733)[0m     @     0x55c8ef4b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9733)[0m     @     0x55c8ef4b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9733)[0m     @     0x55c8ef42e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9733)[0m     @     0x55c8ef4b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9733)[0m     @     0x55c8ef4b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9733)[0m     @     0x55c8ef42e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9711)[0m     @     0x5559b8abc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9711)[0m     @     0x5559b8a31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9711)[0m     @     0x5559b8abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9711)[0m     @     0x5559b8abc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9711)[0m     @     0x5559b8a31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9711)[0m     @     0x5559b8abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9711)[0m     @     0x5559b8abc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9711)[0m     @     0x5559b8a31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9711)[0m     @     0x5559b8abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9711)[0m     @     0x5559b8abc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9711)[0m     @     0x5559b8a31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9744)[0m     @     0x559f01bbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9744)[0m     @     0x559f01bbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9744)[0m     @     0x559f01b34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9744)[0m     @     0x559f01bbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9744)[0m     @     0x559f01bbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9744)[0m     @     0x559f01b34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9744)[0m     @     0x559f01bbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9744)[0m     @     0x559f01bbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9744)[0m     @     0x559f01b34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9744)[0m     @     0x559f01bbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9744)[0m     @     0x559f01bbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9744)[0m     @     0x559f01b34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9724)[0m     @     0x7f6617223d91 at::TensorIterator::for_each()
[2m[36m(pid=9724)[0m     @     0x7f6617b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9724)[0m     @     0x7f6617b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9724)[0m     @     0x7f6616fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9724)[0m     @     0x7f6616fc9388 at::native::copy_impl()
[2m[36m(pid=9724)[0m     @     0x7f6616fcb5a4 at::native::copy_()
[2m[36m(pid=9789)[0m     @     0x7f95a1552d91 at::TensorIterator::for_each()
[2m[36m(pid=9789)[0m     @     0x7f95a1e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9789)[0m     @     0x7f95a1e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9789)[0m     @     0x7f95a12faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9789)[0m     @     0x7f95a12f8388 at::native::copy_impl()
[2m[36m(pid=9789)[0m     @     0x7f95a12fa5a4 at::native::copy_()
[2m[36m(pid=9718)[0m     @     0x7f9d01a0cd91 at::TensorIterator::for_each()
[2m[36m(pid=9718)[0m     @     0x7f9d022efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9718)[0m     @     0x7f9d02312c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9718)[0m     @     0x7f9d017b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9718)[0m     @     0x7f9d017b2388 at::native::copy_impl()
[2m[36m(pid=9718)[0m     @     0x7f9d017b45a4 at::native::copy_()
[2m[36m(pid=9666)[0m     @     0x7f1685443b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9666)[0m     @     0x7f1685466c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9666)[0m     @     0x7f1684908a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9666)[0m     @     0x7f1684906388 at::native::copy_impl()
[2m[36m(pid=9666)[0m     @     0x7f16849085a4 at::native::copy_()
[2m[36m(pid=9746)[0m     @     0x7f19eb0784f5 at::Tensor::copy_()
[2m[36m(pid=9746)[0m     @     0x7f19f112379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9746)[0m     @     0x561fd26b5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9746)[0m     @     0x561fd2610b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9746)[0m     @     0x561fd269bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9746)[0m     @     0x561fd269ca20 method_vectorcall
[2m[36m(pid=9746)[0m     @     0x561fd2610bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9746)[0m     @     0x561fd269bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9746)[0m     @     0x561fd269c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9746)[0m     @     0x561fd2611689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9746)[0m     @     0x561fd269bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9746)[0m     @     0x561fd269c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9746)[0m     @     0x561fd2611689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9746)[0m     @     0x561fd269bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9746)[0m     @     0x561fd269c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9746)[0m     @     0x561fd2611689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9746)[0m     @     0x561fd269bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9746)[0m     @     0x561fd269c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9746)[0m     @     0x561fd2611689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9668)[0m     @     0x55fd72558baf _PyEval_EvalCodeWithName
[2m[36m(pid=9668)[0m     @     0x55fd72559643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9668)[0m     @     0x55fd724ce689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9668)[0m     @     0x55fd72558baf _PyEval_EvalCodeWithName
[2m[36m(pid=9668)[0m     @     0x55fd72559643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9668)[0m     @     0x55fd724ce689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9721)[0m     @     0x560867957643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9721)[0m     @     0x5608678cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9721)[0m     @     0x560867956baf _PyEval_EvalCodeWithName
[2m[36m(pid=9721)[0m     @     0x560867957643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9721)[0m     @     0x5608678cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9721)[0m     @     0x560867956baf _PyEval_EvalCodeWithName
[2m[36m(pid=9721)[0m     @     0x560867957643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9721)[0m     @     0x5608678cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9721)[0m     @     0x560867956baf _PyEval_EvalCodeWithName
[2m[36m(pid=9721)[0m     @     0x560867957643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9721)[0m     @     0x5608678cc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9654)[0m     @     0x7ed4104d24f5 at::Tensor::copy_()
[2m[36m(pid=9654)[0m     @     0x7ed41657d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9654)[0m     @     0x55698bf14fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9654)[0m     @     0x55698be6fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9654)[0m     @     0x55698befabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9654)[0m     @     0x55698befba20 method_vectorcall
[2m[36m(pid=9654)[0m     @     0x55698be6fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9654)[0m     @     0x55698befabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9654)[0m     @     0x55698befb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9654)[0m     @     0x55698be70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9654)[0m     @     0x55698befabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9654)[0m     @     0x55698befb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9654)[0m     @     0x55698be70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9654)[0m     @     0x55698befabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9654)[0m     @     0x55698befb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9654)[0m     @     0x55698be70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9654)[0m     @     0x55698befabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9654)[0m     @     0x55698befb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9654)[0m     @     0x55698be70689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9727)[0m     @     0x7fbdc533bd91 at::TensorIterator::for_each()
[2m[36m(pid=9727)[0m     @     0x7fbdc5c1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9727)[0m     @     0x7fbdc5c41c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9727)[0m     @     0x7fbdc50e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9727)[0m     @     0x7fbdc50e1388 at::native::copy_impl()
[2m[36m(pid=9716)[0m     @     0x7fca4fc35d91 at::TensorIterator::for_each()
[2m[36m(pid=9716)[0m     @     0x7fca50518b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9716)[0m     @     0x7fca5053bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9716)[0m     @     0x7fca4f9dda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9716)[0m     @     0x7fca4f9db388 at::native::copy_impl()
[2m[36m(pid=9725)[0m     @     0x7ee569705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9725)[0m     @     0x7ee569728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9725)[0m     @     0x7ee568bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9725)[0m     @     0x7ee568bc8388 at::native::copy_impl()
[2m[36m(pid=9725)[0m     @     0x7ee568bca5a4 at::native::copy_()
[2m[36m(pid=9745)[0m     @     0x7f0f0d552d91 at::TensorIterator::for_each()
[2m[36m(pid=9745)[0m     @     0x7f0f0de35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9745)[0m     @     0x7f0f0de58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9745)[0m     @     0x7f0f0d2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9745)[0m     @     0x7f0f0d2f8388 at::native::copy_impl()
[2m[36m(pid=9745)[0m     @     0x7f0f0d2fa5a4 at::native::copy_()
[2m[36m(pid=9754)[0m     @     0x7f963163bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9754)[0m     @     0x7f9630adda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9754)[0m     @     0x7f9630adb388 at::native::copy_impl()
[2m[36m(pid=9754)[0m     @     0x7f9630add5a4 at::native::copy_()
[2m[36m(pid=9754)[0m     @     0x7f96311c84f5 at::Tensor::copy_()
[2m[36m(pid=9677)[0m     @     0x7fa08c03fd91 at::TensorIterator::for_each()
[2m[36m(pid=9677)[0m     @     0x7fa08c922b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9677)[0m     @     0x7fa08c945c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9677)[0m     @     0x7fa08bde7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9677)[0m     @     0x7fa08bde5388 at::native::copy_impl()
[2m[36m(pid=9677)[0m     @     0x7fa08bde75a4 at::native::copy_()
[2m[36m(pid=9685)[0m     @     0x7f0c6dbb0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9685)[0m     @     0x7f0c6dbd3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9685)[0m     @     0x7f0c6d075a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9685)[0m     @     0x7f0c6d073388 at::native::copy_impl()
[2m[36m(pid=9685)[0m     @     0x7f0c6d0755a4 at::native::copy_()
[2m[36m(pid=9685)[0m     @     0x7f0c6d7604f5 at::Tensor::copy_()
[2m[36m(pid=9665)[0m     @     0x7f679789cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9665)[0m     @     0x7f6796d3ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9665)[0m     @     0x7f6796d3c388 at::native::copy_impl()
[2m[36m(pid=9665)[0m     @     0x7f6796d3e5a4 at::native::copy_()
[2m[36m(pid=9665)[0m     @     0x7f67974294f5 at::Tensor::copy_()
[2m[36m(pid=9720)[0m     @     0x7f17ac7e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9720)[0m     @     0x7f17ac7e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=9720)[0m     @     0x7f17ac7e3d91 at::TensorIterator::for_each()
[2m[36m(pid=9720)[0m     @     0x7f17ad0c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9720)[0m     @     0x7f17ad0e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9683)[0m     @     0x7fbc64018a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9683)[0m     @     0x7fbc64016388 at::native::copy_impl()
[2m[36m(pid=9683)[0m     @     0x7fbc640185a4 at::native::copy_()
[2m[36m(pid=9683)[0m     @     0x7fbc647034f5 at::Tensor::copy_()
[2m[36m(pid=9683)[0m     @     0x7fbc66bd68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9770)[0m     @     0x7f14c7f53d91 at::TensorIterator::for_each()
[2m[36m(pid=9770)[0m     @     0x7f14c8836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9770)[0m     @     0x7f14c8859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9770)[0m     @     0x7f14c7cfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9770)[0m     @     0x7f14c7cf9388 at::native::copy_impl()
[2m[36m(pid=9770)[0m     @     0x7f14c7cfb5a4 at::native::copy_()
[2m[36m(pid=9663)[0m     @     0x7f20412f8388 at::native::copy_impl()
[2m[36m(pid=9663)[0m     @     0x7f20412fa5a4 at::native::copy_()
[2m[36m(pid=9663)[0m     @     0x7f20419e54f5 at::Tensor::copy_()
[2m[36m(pid=9681)[0m     @     0x7f95df2195a4 at::native::copy_()
[2m[36m(pid=9681)[0m     @     0x7f95df9044f5 at::Tensor::copy_()
[2m[36m(pid=9681)[0m     @     0x7f95e1dd78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9651)[0m     @     0x7f331d667388 at::native::copy_impl()
[2m[36m(pid=9651)[0m     @     0x7f331d6695a4 at::native::copy_()
[2m[36m(pid=9651)[0m     @     0x7f331dd544f5 at::Tensor::copy_()
[2m[36m(pid=9651)[0m     @     0x7f33202278de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9658)[0m     @     0x7ef85cccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9658)[0m     @     0x7ef85cccd388 at::native::copy_impl()
[2m[36m(pid=9658)[0m     @     0x7ef85cccf5a4 at::native::copy_()
[2m[36m(pid=9664)[0m     @     0x7fb4869a3388 at::native::copy_impl()
[2m[36m(pid=9664)[0m     @     0x7fb4869a55a4 at::native::copy_()
[2m[36m(pid=9664)[0m     @     0x7fb4870904f5 at::Tensor::copy_()
[2m[36m(pid=9664)[0m     @     0x7fb4895638de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9730)[0m     @     0x7f3660f6d4f5 at::Tensor::copy_()
[2m[36m(pid=9730)[0m     @     0x7f36634408de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9730)[0m     @     0x7f3660f6d4f5 at::Tensor::copy_()
[2m[36m(pid=9667)[0m     @     0x7eff59ea25a4 at::native::copy_()
[2m[36m(pid=9667)[0m     @     0x7eff5a58d4f5 at::Tensor::copy_()
[2m[36m(pid=9670)[0m     @     0x7fc31effad91 at::TensorIterator::for_each()
[2m[36m(pid=9670)[0m     @     0x7fc31f8ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9670)[0m     @     0x7fc31f900c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9670)[0m     @     0x7fc31eda2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9670)[0m     @     0x7fc31eda0388 at::native::copy_impl()
[2m[36m(pid=9723)[0m     @     0x7edfc183b5a4 at::native::copy_()
[2m[36m(pid=9723)[0m     @     0x7edfc1f264f5 at::Tensor::copy_()
[2m[36m(pid=9723)[0m     @     0x7edfc43f98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9723)[0m     @     0x7edfc1f264f5 at::Tensor::copy_()
[2m[36m(pid=9769)[0m     @     0x7f01359cf5a4 at::native::copy_()
[2m[36m(pid=9769)[0m     @     0x7f01360ba4f5 at::Tensor::copy_()
[2m[36m(pid=9769)[0m     @     0x7f013858d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9769)[0m     @     0x7f01360ba4f5 at::Tensor::copy_()
[2m[36m(pid=9684)[0m     @     0x7f1e28367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9684)[0m     @     0x7f1e27809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9684)[0m     @     0x7f1e27807388 at::native::copy_impl()
[2m[36m(pid=9684)[0m     @     0x7f1e278095a4 at::native::copy_()
[2m[36m(pid=9650)[0m     @     0x7f8a3f2e45a4 at::native::copy_()
[2m[36m(pid=9650)[0m     @     0x7f8a3f9cf4f5 at::Tensor::copy_()
[2m[36m(pid=9650)[0m     @     0x7f8a41ea28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9650)[0m     @     0x7f8a3f9cf4f5 at::Tensor::copy_()
[2m[36m(pid=9742)[0m     @     0x7f10f92faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9742)[0m     @     0x7f10f92f8388 at::native::copy_impl()
[2m[36m(pid=9742)[0m     @     0x7f10f92fa5a4 at::native::copy_()
[2m[36m(pid=9742)[0m     @     0x7f10f99e54f5 at::Tensor::copy_()
[2m[36m(pid=9742)[0m     @     0x7f10fbeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9657)[0m     @     0x7f08b0ee05a4 at::native::copy_()
[2m[36m(pid=9657)[0m     @     0x7f08b15cb4f5 at::Tensor::copy_()
[2m[36m(pid=9657)[0m     @     0x7f08b3a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9657)[0m     @     0x7f08b15cb4f5 at::Tensor::copy_()
[2m[36m(pid=9657)[0m     @     0x7f08b767679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9657)[0m     @     0x55775b3c8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9657)[0m     @     0x55775b323b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9657)[0m     @     0x55775b3aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9657)[0m     @     0x55775b3afa20 method_vectorcall
[2m[36m(pid=9657)[0m     @     0x55775b323bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9657)[0m     @     0x55775b3aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9657)[0m     @     0x55775b3af643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9657)[0m     @     0x55775b324689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9657)[0m     @     0x55775b3aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9657)[0m     @     0x55775b3af643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9657)[0m     @     0x55775b324689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9657)[0m     @     0x55775b3aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9657)[0m     @     0x55775b3af643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9657)[0m     @     0x55775b324689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9657)[0m     @     0x55775b3aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=9657)[0m     @     0x55775b3af643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9657)[0m     @     0x55775b324689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9671)[0m     @     0x7f66c4050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9671)[0m     @     0x7f66c34f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9671)[0m     @     0x7f66c34f0388 at::native::copy_impl()
[2m[36m(pid=9671)[0m     @     0x7f66c34f25a4 at::native::copy_()
[2m[36m(pid=9671)[0m     @     0x7f66c3bdd4f5 at::Tensor::copy_()
[2m[36m(pid=9722)[0m     @     0x7ed695ee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=9731)[0m     @     0x7f78da14fd91 at::TensorIterator::for_each()
[2m[36m(pid=9731)[0m     @     0x7f78daa32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9731)[0m     @     0x7f78daa55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9731)[0m     @     0x7f78d9ef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9731)[0m     @     0x7f78d9ef5388 at::native::copy_impl()
[2m[36m(pid=9731)[0m     @     0x7f78d9ef75a4 at::native::copy_()
[2m[36m(pid=9652)[0m     @     0x7f22e1be0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9652)[0m     @     0x7f22e1bde388 at::native::copy_impl()
[2m[36m(pid=9652)[0m     @     0x7f22e1be05a4 at::native::copy_()
[2m[36m(pid=9652)[0m     @     0x7f22e22cb4f5 at::Tensor::copy_()
[2m[36m(pid=9652)[0m     @     0x7f22e479e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9740)[0m     @     0x7f5e3edea4f5 at::Tensor::copy_()
[2m[36m(pid=9740)[0m     @     0x7f5e412bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9740)[0m     @     0x7f5e3edea4f5 at::Tensor::copy_()
[2m[36m(pid=9740)[0m     @     0x7f5e44e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9740)[0m     @     0x55d62898bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9740)[0m     @     0x55d6288e6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9740)[0m     @     0x55d628971baf _PyEval_EvalCodeWithName
[2m[36m(pid=9740)[0m     @     0x55d628972a20 method_vectorcall
[2m[36m(pid=9740)[0m     @     0x55d6288e6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9740)[0m     @     0x55d628971baf _PyEval_EvalCodeWithName
[2m[36m(pid=9740)[0m     @     0x55d628972643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9740)[0m     @     0x55d6288e7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9740)[0m     @     0x55d628971baf _PyEval_EvalCodeWithName
[2m[36m(pid=9740)[0m     @     0x55d628972643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9740)[0m     @     0x55d6288e7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9740)[0m     @     0x55d628971baf _PyEval_EvalCodeWithName
[2m[36m(pid=9740)[0m     @     0x55d628972643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9740)[0m     @     0x55d6288e7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9740)[0m     @     0x55d628971baf _PyEval_EvalCodeWithName
[2m[36m(pid=9740)[0m     @     0x55d628972643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9740)[0m     @     0x55d6288e7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9647)[0m     @     0x7fb361b4e4f5 at::Tensor::copy_()
[2m[36m(pid=9647)[0m     @     0x7fb3640218de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9647)[0m     @     0x7fb361b4e4f5 at::Tensor::copy_()
[2m[36m(pid=9647)[0m     @     0x7fb367bf979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9647)[0m     @     0x5557238f0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9647)[0m     @     0x55572384bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9647)[0m     @     0x5557238d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=9647)[0m     @     0x5557238d7a20 method_vectorcall
[2m[36m(pid=9647)[0m     @     0x55572384bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9647)[0m     @     0x5557238d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=9647)[0m     @     0x5557238d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9647)[0m     @     0x55572384c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9647)[0m     @     0x5557238d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=9647)[0m     @     0x5557238d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9647)[0m     @     0x55572384c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9647)[0m     @     0x5557238d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=9647)[0m     @     0x5557238d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9647)[0m     @     0x55572384c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9647)[0m     @     0x5557238d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=9647)[0m     @     0x5557238d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9647)[0m     @     0x55572384c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9714)[0m     @     0x7f3516041388 at::native::copy_impl()
[2m[36m(pid=9714)[0m     @     0x7f35160435a4 at::native::copy_()
[2m[36m(pid=9714)[0m     @     0x7f351672e4f5 at::Tensor::copy_()
[2m[36m(pid=9714)[0m     @     0x7f3518c018de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9713)[0m     @     0x7f0d50f27d91 at::TensorIterator::for_each()
[2m[36m(pid=9713)[0m     @     0x7f0d5180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9713)[0m     @     0x7f0d5182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9713)[0m     @     0x7f0d50ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9713)[0m     @     0x7f0d50ccd388 at::native::copy_impl()
[2m[36m(pid=9713)[0m     @     0x7f0d50ccf5a4 at::native::copy_()
[2m[36m(pid=9678)[0m     @     0x7f83b81648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9719)[0m     @     0x7f6dac7aaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9719)[0m     @     0x7f6dac7a8388 at::native::copy_impl()
[2m[36m(pid=9719)[0m     @     0x7f6dac7aa5a4 at::native::copy_()
[2m[36m(pid=9719)[0m     @     0x7f6dace954f5 at::Tensor::copy_()
[2m[36m(pid=9719)[0m     @     0x7f6daf3688de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9712)[0m     @     0x7fa24a3e9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9712)[0m     @     0x7fa24a3e7388 at::native::copy_impl()
[2m[36m(pid=9712)[0m     @     0x7fa24a3e95a4 at::native::copy_()
[2m[36m(pid=9712)[0m     @     0x7fa24aad44f5 at::Tensor::copy_()
[2m[36m(pid=9712)[0m     @     0x7fa24cfa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9724)[0m     @     0x7f66176b64f5 at::Tensor::copy_()
[2m[36m(pid=9724)[0m     @     0x7f6619b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9724)[0m     @     0x7f66176b64f5 at::Tensor::copy_()
[2m[36m(pid=9724)[0m     @     0x7f661d76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9724)[0m     @     0x5622aa717fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9724)[0m     @     0x5622aa672b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9724)[0m     @     0x5622aa6fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9724)[0m     @     0x5622aa6fea20 method_vectorcall
[2m[36m(pid=9724)[0m     @     0x5622aa672bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9724)[0m     @     0x5622aa6fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9724)[0m     @     0x5622aa6fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9724)[0m     @     0x5622aa673689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9724)[0m     @     0x5622aa6fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9724)[0m     @     0x5622aa6fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9724)[0m     @     0x5622aa673689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9724)[0m     @     0x5622aa6fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9724)[0m     @     0x5622aa6fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9724)[0m     @     0x5622aa673689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9724)[0m     @     0x5622aa6fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9724)[0m     @     0x5622aa6fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9724)[0m     @     0x5622aa673689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9789)[0m     @     0x7f95a19e54f5 at::Tensor::copy_()
[2m[36m(pid=9789)[0m     @     0x7f95a3eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9789)[0m     @     0x7f95a19e54f5 at::Tensor::copy_()
[2m[36m(pid=9789)[0m     @     0x7f95a7a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9789)[0m     @     0x55aa9fe79fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9789)[0m     @     0x55aa9fdd4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9789)[0m     @     0x55aa9fe5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9789)[0m     @     0x55aa9fe60a20 method_vectorcall
[2m[36m(pid=9789)[0m     @     0x55aa9fdd4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9789)[0m     @     0x55aa9fe5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9789)[0m     @     0x55aa9fe60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9789)[0m     @     0x55aa9fdd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9789)[0m     @     0x55aa9fe5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9789)[0m     @     0x55aa9fe60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9789)[0m     @     0x55aa9fdd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9789)[0m     @     0x55aa9fe5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9789)[0m     @     0x55aa9fe60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9789)[0m     @     0x55aa9fdd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9789)[0m     @     0x55aa9fe5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9789)[0m     @     0x55aa9fe60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9789)[0m     @     0x55aa9fdd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9718)[0m     @     0x7f9d01e9f4f5 at::Tensor::copy_()
[2m[36m(pid=9718)[0m     @     0x7f9d043728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9666)[0m     @     0x7f1684ff34f5 at::Tensor::copy_()
[2m[36m(pid=9666)[0m     @     0x7f16874c68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9666)[0m     @     0x7f1684ff34f5 at::Tensor::copy_()
[2m[36m(pid=9666)[0m     @     0x7f168b09e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9666)[0m     @     0x55a22f026fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9666)[0m     @     0x55a22ef81b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9666)[0m     @     0x55a22f00cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9666)[0m     @     0x55a22f00da20 method_vectorcall
[2m[36m(pid=9666)[0m     @     0x55a22ef81bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9666)[0m     @     0x55a22f00cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9666)[0m     @     0x55a22f00d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9666)[0m     @     0x55a22ef82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9666)[0m     @     0x55a22f00cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9666)[0m     @     0x55a22f00d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9666)[0m     @     0x55a22ef82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9666)[0m     @     0x55a22f00cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9666)[0m     @     0x55a22f00d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9666)[0m     @     0x55a22ef82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9666)[0m     @     0x55a22f00cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9666)[0m     @     0x55a22f00d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9666)[0m     @     0x55a22ef82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9727)[0m     @     0x7fbdc50e35a4 at::native::copy_()
[2m[36m(pid=9727)[0m     @     0x7fbdc57ce4f5 at::Tensor::copy_()
[2m[36m(pid=9727)[0m     @     0x7fbdc7ca18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9727)[0m     @     0x7fbdc57ce4f5 at::Tensor::copy_()
[2m[36m(pid=9727)[0m     @     0x7fbdcb87979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9727)[0m     @     0x5610b696cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9727)[0m     @     0x5610b68c7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9727)[0m     @     0x5610b6952baf _PyEval_EvalCodeWithName
[2m[36m(pid=9727)[0m     @     0x5610b6953a20 method_vectorcall
[2m[36m(pid=9727)[0m     @     0x5610b68c7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9727)[0m     @     0x5610b6952baf _PyEval_EvalCodeWithName
[2m[36m(pid=9727)[0m     @     0x5610b6953643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9727)[0m     @     0x5610b68c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9727)[0m     @     0x5610b6952baf _PyEval_EvalCodeWithName
[2m[36m(pid=9727)[0m     @     0x5610b6953643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9727)[0m     @     0x5610b68c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9727)[0m     @     0x5610b6952baf _PyEval_EvalCodeWithName
[2m[36m(pid=9727)[0m     @     0x5610b6953643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9727)[0m     @     0x5610b68c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9727)[0m     @     0x5610b6952baf _PyEval_EvalCodeWithName
[2m[36m(pid=9727)[0m     @     0x5610b6953643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9727)[0m     @     0x5610b68c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9716)[0m     @     0x7fca4f9dd5a4 at::native::copy_()
[2m[36m(pid=9716)[0m     @     0x7fca500c84f5 at::Tensor::copy_()
[2m[36m(pid=9716)[0m     @     0x7fca5259b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9725)[0m     @     0x7ee5692b54f5 at::Tensor::copy_()
[2m[36m(pid=9725)[0m     @     0x7ee56b7888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9725)[0m     @     0x7ee5692b54f5 at::Tensor::copy_()
[2m[36m(pid=9725)[0m     @     0x7ee56f36079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9725)[0m     @     0x5557ff896fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9725)[0m     @     0x5557ff7f1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9725)[0m     @     0x5557ff87cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9725)[0m     @     0x5557ff87da20 method_vectorcall
[2m[36m(pid=9725)[0m     @     0x5557ff7f1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9725)[0m     @     0x5557ff87cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9725)[0m     @     0x5557ff87d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9725)[0m     @     0x5557ff7f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9725)[0m     @     0x5557ff87cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9725)[0m     @     0x5557ff87d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9725)[0m     @     0x5557ff7f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9725)[0m     @     0x5557ff87cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9725)[0m     @     0x5557ff87d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9725)[0m     @     0x5557ff7f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9725)[0m     @     0x5557ff87cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9725)[0m     @     0x5557ff87d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9725)[0m     @     0x5557ff7f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9745)[0m     @     0x7f0f0d9e54f5 at::Tensor::copy_()
[2m[36m(pid=9745)[0m     @     0x7f0f0feb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9754)[0m     @     0x7f963369b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9754)[0m     @     0x7f96311c84f5 at::Tensor::copy_()
[2m[36m(pid=9754)[0m     @     0x7f963727379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9754)[0m     @     0x556ad8745fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9754)[0m     @     0x556ad86a0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9754)[0m     @     0x556ad872bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9754)[0m     @     0x556ad872ca20 method_vectorcall
[2m[36m(pid=9754)[0m     @     0x556ad86a0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9754)[0m     @     0x556ad872bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9754)[0m     @     0x556ad872c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9754)[0m     @     0x556ad86a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9754)[0m     @     0x556ad872bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9754)[0m     @     0x556ad872c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9754)[0m     @     0x556ad86a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9754)[0m     @     0x556ad872bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9754)[0m     @     0x556ad872c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9754)[0m     @     0x556ad86a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9754)[0m     @     0x556ad872bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9754)[0m     @     0x556ad872c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9677)[0m     @     0x7fa08c4d24f5 at::Tensor::copy_()
[2m[36m(pid=9677)[0m     @     0x7fa08e9a58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9685)[0m     @     0x7f0c6fc338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9685)[0m     @     0x7f0c6d7604f5 at::Tensor::copy_()
[2m[36m(pid=9685)[0m     @     0x7f0c7380b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9685)[0m     @     0x559c1c60efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9685)[0m     @     0x559c1c569b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9685)[0m     @     0x559c1c5f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9685)[0m     @     0x559c1c5f5a20 method_vectorcall
[2m[36m(pid=9685)[0m     @     0x559c1c569bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9685)[0m     @     0x559c1c5f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9685)[0m     @     0x559c1c5f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9685)[0m     @     0x559c1c56a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9685)[0m     @     0x559c1c5f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9685)[0m     @     0x559c1c5f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9685)[0m     @     0x559c1c56a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9685)[0m     @     0x559c1c5f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9685)[0m     @     0x559c1c5f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9685)[0m     @     0x559c1c56a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9685)[0m     @     0x559c1c5f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9685)[0m     @     0x559c1c5f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9685)[0m     @     0x559c1c56a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9665)[0m     @     0x7f67998fc8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9665)[0m     @     0x7f67974294f5 at::Tensor::copy_()
[2m[36m(pid=9665)[0m     @     0x7f679d4d479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9665)[0m     @     0x55ff0f144fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9665)[0m     @     0x55ff0f09fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9665)[0m     @     0x55ff0f12abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9665)[0m     @     0x55ff0f12ba20 method_vectorcall
[2m[36m(pid=9665)[0m     @     0x55ff0f09fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9665)[0m     @     0x55ff0f12abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9665)[0m     @     0x55ff0f12b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9665)[0m     @     0x55ff0f0a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9665)[0m     @     0x55ff0f12abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9665)[0m     @     0x55ff0f12b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9665)[0m     @     0x55ff0f0a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9665)[0m     @     0x55ff0f12abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9665)[0m     @     0x55ff0f12b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9665)[0m     @     0x55ff0f0a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9665)[0m     @     0x55ff0f12abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9665)[0m     @     0x55ff0f12b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9665)[0m     @     0x55ff0f0a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9720)[0m     @     0x7f17ac58ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9720)[0m     @     0x7f17ac589388 at::native::copy_impl()
[2m[36m(pid=9720)[0m     @     0x7f17ac58b5a4 at::native::copy_()
[2m[36m(pid=9683)[0m     @     0x7fbc647034f5 at::Tensor::copy_()
[2m[36m(pid=9683)[0m     @     0x7fbc6a7ae79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9683)[0m     @     0x5613e7785fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9683)[0m     @     0x5613e76e0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9683)[0m     @     0x5613e776bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9683)[0m     @     0x5613e776ca20 method_vectorcall
[2m[36m(pid=9683)[0m     @     0x5613e76e0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9683)[0m     @     0x5613e776bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9683)[0m     @     0x5613e776c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9683)[0m     @     0x5613e76e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9683)[0m     @     0x5613e776bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9683)[0m     @     0x5613e776c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9683)[0m     @     0x5613e76e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9683)[0m     @     0x5613e776bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9683)[0m     @     0x5613e776c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9683)[0m     @     0x5613e76e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9683)[0m     @     0x5613e776bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9683)[0m     @     0x5613e776c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9683)[0m     @     0x5613e76e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9770)[0m     @     0x7f14c83e64f5 at::Tensor::copy_()
[2m[36m(pid=9770)[0m     @     0x7f14ca8b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9770)[0m     @     0x7f14c83e64f5 at::Tensor::copy_()
[2m[36m(pid=9770)[0m     @     0x7f14ce49179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9770)[0m     @     0x55d22f265fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9770)[0m     @     0x55d22f1c0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9770)[0m     @     0x55d22f24bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9770)[0m     @     0x55d22f24ca20 method_vectorcall
[2m[36m(pid=9770)[0m     @     0x55d22f1c0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9770)[0m     @     0x55d22f24bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9770)[0m     @     0x55d22f24c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9770)[0m     @     0x55d22f1c1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9770)[0m     @     0x55d22f24bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9770)[0m     @     0x55d22f24c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9770)[0m     @     0x55d22f1c1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9770)[0m     @     0x55d22f24bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9770)[0m     @     0x55d22f24c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9770)[0m     @     0x55d22f1c1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9770)[0m     @     0x55d22f24bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9770)[0m     @     0x55d22f24c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9770)[0m     @     0x55d22f1c1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9663)[0m     @     0x7f2043eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9663)[0m     @     0x7f20419e54f5 at::Tensor::copy_()
[2m[36m(pid=9663)[0m     @     0x7f2047a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9663)[0m     @     0x5570c3cfcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9663)[0m     @     0x5570c3c57b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9663)[0m     @     0x5570c3ce2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9663)[0m     @     0x5570c3ce3a20 method_vectorcall
[2m[36m(pid=9663)[0m     @     0x5570c3c57bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9663)[0m     @     0x5570c3ce2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9681)[0m     @     0x7f95df9044f5 at::Tensor::copy_()
[2m[36m(pid=9681)[0m     @     0x7f95e59af79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9681)[0m     @     0x563529d59fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9681)[0m     @     0x563529cb4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9681)[0m     @     0x563529d3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9681)[0m     @     0x563529d40a20 method_vectorcall
[2m[36m(pid=9681)[0m     @     0x563529cb4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9681)[0m     @     0x563529d3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9681)[0m     @     0x563529d40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9681)[0m     @     0x563529cb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9681)[0m     @     0x563529d3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9681)[0m     @     0x563529d40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9681)[0m     @     0x563529cb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9681)[0m     @     0x563529d3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9681)[0m     @     0x563529d40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9681)[0m     @     0x563529cb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9681)[0m     @     0x563529d3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9681)[0m     @     0x563529d40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9681)[0m     @     0x563529cb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9651)[0m     @     0x7f331dd544f5 at::Tensor::copy_()
[2m[36m(pid=9651)[0m     @     0x7f3323dff79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9651)[0m     @     0x556251eb9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9651)[0m     @     0x556251e14b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9651)[0m     @     0x556251e9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9651)[0m     @     0x556251ea0a20 method_vectorcall
[2m[36m(pid=9651)[0m     @     0x556251e14bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9651)[0m     @     0x556251e9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9651)[0m     @     0x556251ea0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9651)[0m     @     0x556251e15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9651)[0m     @     0x556251e9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9651)[0m     @     0x556251ea0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9651)[0m     @     0x556251e15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9651)[0m     @     0x556251e9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9651)[0m     @     0x556251ea0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9651)[0m     @     0x556251e15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9651)[0m     @     0x556251e9fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9651)[0m     @     0x556251ea0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9651)[0m     @     0x556251e15689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9660)[0m     @     0x7f64003e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=9660)[0m     @     0x7f63ffb0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=9658)[0m     @     0x7ef85d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=9658)[0m     @     0x7ef85f88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9658)[0m     @     0x7ef85d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=9658)[0m     @     0x7ef86346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9658)[0m     @     0x558a4cbd1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9658)[0m     @     0x558a4cb2cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9658)[0m     @     0x558a4cbb7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9658)[0m     @     0x558a4cbb8a20 method_vectorcall
[2m[36m(pid=9658)[0m     @     0x558a4cb2cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9658)[0m     @     0x558a4cbb7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9658)[0m     @     0x558a4cbb8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9658)[0m     @     0x558a4cb2d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9658)[0m     @     0x558a4cbb7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9658)[0m     @     0x558a4cbb8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9658)[0m     @     0x558a4cb2d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9664)[0m     @     0x7fb4870904f5 at::Tensor::copy_()
[2m[36m(pid=9664)[0m     @     0x7fb48d13b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9664)[0m     @     0x55f29f2b6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9664)[0m     @     0x55f29f211b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9664)[0m     @     0x55f29f29cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9664)[0m     @     0x55f29f29da20 method_vectorcall
[2m[36m(pid=9664)[0m     @     0x55f29f211bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9664)[0m     @     0x55f29f29cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9664)[0m     @     0x55f29f29d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9664)[0m     @     0x55f29f212689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9664)[0m     @     0x55f29f29cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9664)[0m     @     0x55f29f29d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9664)[0m     @     0x55f29f212689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9664)[0m     @     0x55f29f29cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9664)[0m     @     0x55f29f29d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9664)[0m     @     0x55f29f212689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9664)[0m     @     0x55f29f29cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9664)[0m     @     0x55f29f29d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9664)[0m     @     0x55f29f212689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9730)[0m     @     0x7f366701879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9730)[0m     @     0x55ecc3e93fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9730)[0m     @     0x55ecc3deeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9730)[0m     @     0x55ecc3e79baf _PyEval_EvalCodeWithName
[2m[36m(pid=9730)[0m     @     0x55ecc3e7aa20 method_vectorcall
[2m[36m(pid=9730)[0m     @     0x55ecc3deebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9730)[0m     @     0x55ecc3e79baf _PyEval_EvalCodeWithName
[2m[36m(pid=9730)[0m     @     0x55ecc3e7a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9730)[0m     @     0x55ecc3def689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9730)[0m     @     0x55ecc3e79baf _PyEval_EvalCodeWithName
[2m[36m(pid=9730)[0m     @     0x55ecc3e7a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9730)[0m     @     0x55ecc3def689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9730)[0m     @     0x55ecc3e79baf _PyEval_EvalCodeWithName
[2m[36m(pid=9730)[0m     @     0x55ecc3e7a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9730)[0m     @     0x55ecc3def689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9730)[0m     @     0x55ecc3e79baf _PyEval_EvalCodeWithName
[2m[36m(pid=9730)[0m     @     0x55ecc3e7a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9730)[0m     @     0x55ecc3def689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9667)[0m     @     0x7eff5ca608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9667)[0m     @     0x7eff5a58d4f5 at::Tensor::copy_()
[2m[36m(pid=9667)[0m     @     0x7eff6063879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9667)[0m     @     0x560777f8bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9667)[0m     @     0x560777ee6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9667)[0m     @     0x560777f71baf _PyEval_EvalCodeWithName
[2m[36m(pid=9667)[0m     @     0x560777f72a20 method_vectorcall
[2m[36m(pid=9667)[0m     @     0x560777ee6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9667)[0m     @     0x560777f71baf _PyEval_EvalCodeWithName
[2m[36m(pid=9667)[0m     @     0x560777f72643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9667)[0m     @     0x560777ee7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9667)[0m     @     0x560777f71baf _PyEval_EvalCodeWithName
[2m[36m(pid=9667)[0m     @     0x560777f72643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9667)[0m     @     0x560777ee7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9667)[0m     @     0x560777f71baf _PyEval_EvalCodeWithName
[2m[36m(pid=9667)[0m     @     0x560777f72643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9667)[0m     @     0x560777ee7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9667)[0m     @     0x560777f71baf _PyEval_EvalCodeWithName
[2m[36m(pid=9667)[0m     @     0x560777f72643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9667)[0m     @     0x560777ee7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9670)[0m     @     0x7fc31eda25a4 at::native::copy_()
[2m[36m(pid=9723)[0m     @     0x7edfc7fd179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9723)[0m     @     0x5647407d5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9723)[0m     @     0x564740730b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9723)[0m     @     0x5647407bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9723)[0m     @     0x5647407bca20 method_vectorcall
[2m[36m(pid=9723)[0m     @     0x564740730bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9723)[0m     @     0x5647407bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9723)[0m     @     0x5647407bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9723)[0m     @     0x564740731689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9723)[0m     @     0x5647407bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9723)[0m     @     0x5647407bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9723)[0m     @     0x564740731689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9723)[0m     @     0x5647407bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9723)[0m     @     0x5647407bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9723)[0m     @     0x564740731689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9723)[0m     @     0x5647407bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9723)[0m     @     0x5647407bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9723)[0m     @     0x564740731689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9769)[0m     @     0x7f013c16579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9769)[0m     @     0x56032d90cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9769)[0m     @     0x56032d867b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9769)[0m     @     0x56032d8f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9769)[0m     @     0x56032d8f3a20 method_vectorcall
[2m[36m(pid=9769)[0m     @     0x56032d867bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9769)[0m     @     0x56032d8f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9769)[0m     @     0x56032d8f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9769)[0m     @     0x56032d868689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9769)[0m     @     0x56032d8f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9769)[0m     @     0x56032d8f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9769)[0m     @     0x56032d868689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9769)[0m     @     0x56032d8f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9769)[0m     @     0x56032d8f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9769)[0m     @     0x56032d868689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9769)[0m     @     0x56032d8f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9769)[0m     @     0x56032d8f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9769)[0m     @     0x56032d868689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9653)[0m     @     0x7eee0e14f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9653)[0m     @     0x7eee0e14fad3 at::TensorIterator::for_each()
[2m[36m(pid=9684)[0m     @     0x7f1e27ef44f5 at::Tensor::copy_()
[2m[36m(pid=9684)[0m     @     0x7f1e2a3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9684)[0m     @     0x7f1e27ef44f5 at::Tensor::copy_()
[2m[36m(pid=9650)[0m     @     0x7f8a45a7a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9650)[0m     @     0x556862384fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9650)[0m     @     0x5568622dfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9650)[0m     @     0x55686236abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9650)[0m     @     0x55686236ba20 method_vectorcall
[2m[36m(pid=9650)[0m     @     0x5568622dfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9650)[0m     @     0x55686236abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9650)[0m     @     0x55686236b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9650)[0m     @     0x5568622e0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9650)[0m     @     0x55686236abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9650)[0m     @     0x55686236b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9650)[0m     @     0x5568622e0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9650)[0m     @     0x55686236abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9650)[0m     @     0x55686236b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9650)[0m     @     0x5568622e0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9650)[0m     @     0x55686236abaf _PyEval_EvalCodeWithName
[2m[36m(pid=9650)[0m     @     0x55686236b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9650)[0m     @     0x5568622e0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9742)[0m     @     0x7f10f99e54f5 at::Tensor::copy_()
[2m[36m(pid=9742)[0m     @     0x7f10ffa9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9742)[0m     @     0x5610f7e57fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9742)[0m     @     0x5610f7db2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9742)[0m     @     0x5610f7e3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9742)[0m     @     0x5610f7e3ea20 method_vectorcall
[2m[36m(pid=9742)[0m     @     0x5610f7db2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9671)[0m     @     0x7f66c60b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9652)[0m     @     0x7f22e22cb4f5 at::Tensor::copy_()
[2m[36m(pid=9652)[0m     @     0x7f22e837679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9652)[0m     @     0x55987365dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9652)[0m     @     0x5598735b8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9714)[0m     @     0x7f351672e4f5 at::Tensor::copy_()
[2m[36m(pid=9714)[0m     @     0x7f351c7d979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9714)[0m     @     0x5564aeaa1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9714)[0m     @     0x5564ae9fcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9714)[0m     @     0x5564aea87baf _PyEval_EvalCodeWithName
[2m[36m(pid=9714)[0m     @     0x5564aea88a20 method_vectorcall
[2m[36m(pid=9714)[0m     @     0x5564ae9fcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9714)[0m     @     0x5564aea87baf _PyEval_EvalCodeWithName
[2m[36m(pid=9714)[0m     @     0x5564aea88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9714)[0m     @     0x5564ae9fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9714)[0m     @     0x5564aea87baf _PyEval_EvalCodeWithName
[2m[36m(pid=9714)[0m     @     0x5564aea88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9714)[0m     @     0x5564ae9fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9714)[0m     @     0x5564aea87baf _PyEval_EvalCodeWithName
[2m[36m(pid=9714)[0m     @     0x5564aea88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9714)[0m     @     0x5564ae9fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9714)[0m     @     0x5564aea87baf _PyEval_EvalCodeWithName
[2m[36m(pid=9714)[0m     @     0x5564aea88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9714)[0m     @     0x5564ae9fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9713)[0m     @     0x7f0d513ba4f5 at::Tensor::copy_()
[2m[36m(pid=9678)[0m     @     0x7f83b8164ad3 at::TensorIterator::for_each()
[2m[36m(pid=9719)[0m     @     0x7f6dace954f5 at::Tensor::copy_()
[2m[36m(pid=9719)[0m     @     0x7f6db2f4079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9719)[0m     @     0x5636cfd77fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9719)[0m     @     0x5636cfcd2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9719)[0m     @     0x5636cfd5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9719)[0m     @     0x5636cfd5ea20 method_vectorcall
[2m[36m(pid=9719)[0m     @     0x5636cfcd2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9719)[0m     @     0x5636cfd5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9719)[0m     @     0x5636cfd5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9719)[0m     @     0x5636cfcd3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9719)[0m     @     0x5636cfd5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9719)[0m     @     0x5636cfd5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9719)[0m     @     0x5636cfcd3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9719)[0m     @     0x5636cfd5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9719)[0m     @     0x5636cfd5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9719)[0m     @     0x5636cfcd3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9719)[0m     @     0x5636cfd5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9719)[0m     @     0x5636cfd5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9719)[0m     @     0x5636cfcd3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9712)[0m     @     0x7fa24aad44f5 at::Tensor::copy_()
[2m[36m(pid=9712)[0m     @     0x7fa250b7f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9712)[0m     @     0x5639d4e3bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9712)[0m     @     0x5639d4d96b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9712)[0m     @     0x5639d4e21baf _PyEval_EvalCodeWithName
[2m[36m(pid=9712)[0m     @     0x5639d4e22a20 method_vectorcall
[2m[36m(pid=9712)[0m     @     0x5639d4d96bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9712)[0m     @     0x5639d4e21baf _PyEval_EvalCodeWithName
[2m[36m(pid=9712)[0m     @     0x5639d4e22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9712)[0m     @     0x5639d4d97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9712)[0m     @     0x5639d4e21baf _PyEval_EvalCodeWithName
[2m[36m(pid=9712)[0m     @     0x5639d4e22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9712)[0m     @     0x5639d4d97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9718)[0m     @     0x7f9d01e9f4f5 at::Tensor::copy_()
[2m[36m(pid=9718)[0m     @     0x7f9d07f4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9718)[0m     @     0x5598d710dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9718)[0m     @     0x5598d7068b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9718)[0m     @     0x5598d70f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9718)[0m     @     0x5598d70f4a20 method_vectorcall
[2m[36m(pid=9718)[0m     @     0x5598d7068bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9718)[0m     @     0x5598d70f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9718)[0m     @     0x5598d70f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9718)[0m     @     0x5598d7069689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9718)[0m     @     0x5598d70f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9718)[0m     @     0x5598d70f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9718)[0m     @     0x5598d7069689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9718)[0m     @     0x5598d70f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9718)[0m     @     0x5598d70f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9718)[0m     @     0x5598d7069689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9718)[0m     @     0x5598d70f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=9718)[0m     @     0x5598d70f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9718)[0m     @     0x5598d7069689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9716)[0m     @     0x7fca500c84f5 at::Tensor::copy_()
[2m[36m(pid=9716)[0m     @     0x7fca5617379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9716)[0m     @     0x5630e1a18fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9716)[0m     @     0x5630e1973b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9716)[0m     @     0x5630e19febaf _PyEval_EvalCodeWithName
[2m[36m(pid=9716)[0m     @     0x5630e19ffa20 method_vectorcall
[2m[36m(pid=9716)[0m     @     0x5630e1973bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9716)[0m     @     0x5630e19febaf _PyEval_EvalCodeWithName
[2m[36m(pid=9716)[0m     @     0x5630e19ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9716)[0m     @     0x5630e1974689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9716)[0m     @     0x5630e19febaf _PyEval_EvalCodeWithName
[2m[36m(pid=9716)[0m     @     0x5630e19ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9716)[0m     @     0x5630e1974689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9716)[0m     @     0x5630e19febaf _PyEval_EvalCodeWithName
[2m[36m(pid=9716)[0m     @     0x5630e19ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9716)[0m     @     0x5630e1974689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9716)[0m     @     0x5630e19febaf _PyEval_EvalCodeWithName
[2m[36m(pid=9716)[0m     @     0x5630e19ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9716)[0m     @     0x5630e1974689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9745)[0m     @     0x7f0f0d9e54f5 at::Tensor::copy_()
[2m[36m(pid=9745)[0m     @     0x7f0f13a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9745)[0m     @     0x55a5f3a8cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9745)[0m     @     0x55a5f39e7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9745)[0m     @     0x55a5f3a72baf _PyEval_EvalCodeWithName
[2m[36m(pid=9745)[0m     @     0x55a5f3a73a20 method_vectorcall
[2m[36m(pid=9745)[0m     @     0x55a5f39e7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9745)[0m     @     0x55a5f3a72baf _PyEval_EvalCodeWithName
[2m[36m(pid=9745)[0m     @     0x55a5f3a73643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9745)[0m     @     0x55a5f39e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9745)[0m     @     0x55a5f3a72baf _PyEval_EvalCodeWithName
[2m[36m(pid=9745)[0m     @     0x55a5f3a73643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9745)[0m     @     0x55a5f39e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9745)[0m     @     0x55a5f3a72baf _PyEval_EvalCodeWithName
[2m[36m(pid=9745)[0m     @     0x55a5f3a73643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9745)[0m     @     0x55a5f39e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9745)[0m     @     0x55a5f3a72baf _PyEval_EvalCodeWithName
[2m[36m(pid=9745)[0m     @     0x55a5f3a73643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9745)[0m     @     0x55a5f39e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9754)[0m     @     0x556ad86a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9677)[0m     @     0x7fa08c4d24f5 at::Tensor::copy_()
[2m[36m(pid=9677)[0m     @     0x7fa09257d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9677)[0m     @     0x5594aeb37fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9677)[0m     @     0x5594aea92b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9677)[0m     @     0x5594aeb1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9677)[0m     @     0x5594aeb1ea20 method_vectorcall
[2m[36m(pid=9677)[0m     @     0x5594aea92bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9677)[0m     @     0x5594aeb1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9677)[0m     @     0x5594aeb1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9677)[0m     @     0x5594aea93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9677)[0m     @     0x5594aeb1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9677)[0m     @     0x5594aeb1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9677)[0m     @     0x5594aea93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9677)[0m     @     0x5594aeb1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9677)[0m     @     0x5594aeb1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9677)[0m     @     0x5594aea93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9677)[0m     @     0x5594aeb1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9677)[0m     @     0x5594aeb1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9677)[0m     @     0x5594aea93689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9720)[0m     @     0x7f17acc764f5 at::Tensor::copy_()
[2m[36m(pid=9720)[0m     @     0x7f17af1498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9663)[0m     @     0x5570c3ce3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9663)[0m     @     0x5570c3c58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9663)[0m     @     0x5570c3ce2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9663)[0m     @     0x5570c3ce3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9663)[0m     @     0x5570c3c58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9663)[0m     @     0x5570c3ce2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9663)[0m     @     0x5570c3ce3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9663)[0m     @     0x5570c3c58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9663)[0m     @     0x5570c3ce2baf _PyEval_EvalCodeWithName
[2m[36m(pid=9663)[0m     @     0x5570c3ce3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9663)[0m     @     0x5570c3c58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9660)[0m     @     0x7f63ffb118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=9658)[0m     @     0x558a4cbb7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9658)[0m     @     0x558a4cbb8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9658)[0m     @     0x558a4cb2d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9658)[0m     @     0x558a4cbb7baf _PyEval_EvalCodeWithName
[2m[36m(pid=9658)[0m     @     0x558a4cbb8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9658)[0m     @     0x558a4cb2d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9670)[0m     @     0x7fc31f48d4f5 at::Tensor::copy_()
[2m[36m(pid=9670)[0m     @     0x7fc3219608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9653)[0m     @     0x7eee0e14fd91 at::TensorIterator::for_each()
[2m[36m(pid=9653)[0m     @     0x7eee0ea32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9653)[0m     @     0x7eee0ea55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9653)[0m     @     0x7eee0def7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9653)[0m     @     0x7eee0def5388 at::native::copy_impl()
[2m[36m(pid=9684)[0m     @     0x7f1e2df9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9684)[0m     @     0x557ab3830fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9684)[0m     @     0x557ab378bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9684)[0m     @     0x557ab3816baf _PyEval_EvalCodeWithName
[2m[36m(pid=9684)[0m     @     0x557ab3817a20 method_vectorcall
[2m[36m(pid=9684)[0m     @     0x557ab378bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9684)[0m     @     0x557ab3816baf _PyEval_EvalCodeWithName
[2m[36m(pid=9684)[0m     @     0x557ab3817643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9684)[0m     @     0x557ab378c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9684)[0m     @     0x557ab3816baf _PyEval_EvalCodeWithName
[2m[36m(pid=9684)[0m     @     0x557ab3817643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9684)[0m     @     0x557ab378c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9684)[0m     @     0x557ab3816baf _PyEval_EvalCodeWithName
[2m[36m(pid=9684)[0m     @     0x557ab3817643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9684)[0m     @     0x557ab378c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9684)[0m     @     0x557ab3816baf _PyEval_EvalCodeWithName
[2m[36m(pid=9684)[0m     @     0x557ab3817643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9684)[0m     @     0x557ab378c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9742)[0m     @     0x5610f7e3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9742)[0m     @     0x5610f7e3e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9742)[0m     @     0x5610f7db3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9742)[0m     @     0x5610f7e3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9742)[0m     @     0x5610f7e3e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9742)[0m     @     0x5610f7db3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9742)[0m     @     0x5610f7e3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9742)[0m     @     0x5610f7e3e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9742)[0m     @     0x5610f7db3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9742)[0m     @     0x5610f7e3dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9742)[0m     @     0x5610f7e3e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9742)[0m     @     0x5610f7db3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9671)[0m     @     0x7f66c3bdd4f5 at::Tensor::copy_()
[2m[36m(pid=9671)[0m     @     0x7f66c9c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9671)[0m     @     0x5568e97d5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9671)[0m     @     0x5568e9730b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9671)[0m     @     0x5568e97bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9671)[0m     @     0x5568e97bca20 method_vectorcall
[2m[36m(pid=9671)[0m     @     0x5568e9730bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9671)[0m     @     0x5568e97bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9671)[0m     @     0x5568e97bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9671)[0m     @     0x5568e9731689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9671)[0m     @     0x5568e97bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9671)[0m     @     0x5568e97bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9671)[0m     @     0x5568e9731689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9671)[0m     @     0x5568e97bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9671)[0m     @     0x5568e97bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9671)[0m     @     0x5568e9731689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9671)[0m     @     0x5568e97bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9671)[0m     @     0x5568e97bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9671)[0m     @     0x5568e9731689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9722)[0m     @     0x7ed695ee9d91 at::TensorIterator::for_each()
[2m[36m(pid=9722)[0m     @     0x7ed6967ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9722)[0m     @     0x7ed6967efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9722)[0m     @     0x7ed695c91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9722)[0m     @     0x7ed695c8f388 at::native::copy_impl()
[2m[36m(pid=9731)[0m     @     0x7f78da5e24f5 at::Tensor::copy_()
[2m[36m(pid=9731)[0m     @     0x7f78dcab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9652)[0m     @     0x559873643baf _PyEval_EvalCodeWithName
[2m[36m(pid=9652)[0m     @     0x559873644a20 method_vectorcall
[2m[36m(pid=9652)[0m     @     0x5598735b8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9652)[0m     @     0x559873643baf _PyEval_EvalCodeWithName
[2m[36m(pid=9652)[0m     @     0x559873644643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9652)[0m     @     0x5598735b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9652)[0m     @     0x559873643baf _PyEval_EvalCodeWithName
[2m[36m(pid=9652)[0m     @     0x559873644643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9652)[0m     @     0x5598735b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9652)[0m     @     0x559873643baf _PyEval_EvalCodeWithName
[2m[36m(pid=9652)[0m     @     0x559873644643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9652)[0m     @     0x5598735b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9652)[0m     @     0x559873643baf _PyEval_EvalCodeWithName
[2m[36m(pid=9652)[0m     @     0x559873644643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9652)[0m     @     0x5598735b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9713)[0m     @     0x7f0d5388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9713)[0m     @     0x7f0d513ba4f5 at::Tensor::copy_()
[2m[36m(pid=9713)[0m     @     0x7f0d5746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9713)[0m     @     0x55ed30c75fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9713)[0m     @     0x55ed30bd0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9713)[0m     @     0x55ed30c5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9713)[0m     @     0x55ed30c5ca20 method_vectorcall
[2m[36m(pid=9713)[0m     @     0x55ed30bd0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9713)[0m     @     0x55ed30c5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9713)[0m     @     0x55ed30c5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9713)[0m     @     0x55ed30bd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9713)[0m     @     0x55ed30c5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9713)[0m     @     0x55ed30c5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9713)[0m     @     0x55ed30bd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9713)[0m     @     0x55ed30c5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9713)[0m     @     0x55ed30c5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9713)[0m     @     0x55ed30bd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9713)[0m     @     0x55ed30c5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9713)[0m     @     0x55ed30c5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9713)[0m     @     0x55ed30bd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9678)[0m     @     0x7f83b8164d91 at::TensorIterator::for_each()
[2m[36m(pid=9712)[0m     @     0x5639d4e21baf _PyEval_EvalCodeWithName
[2m[36m(pid=9712)[0m     @     0x5639d4e22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9712)[0m     @     0x5639d4d97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9712)[0m     @     0x5639d4e21baf _PyEval_EvalCodeWithName
[2m[36m(pid=9712)[0m     @     0x5639d4e22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9712)[0m     @     0x5639d4d97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9720)[0m     @     0x7f17acc764f5 at::Tensor::copy_()
[2m[36m(pid=9720)[0m     @     0x7f17b2d2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9720)[0m     @     0x55dc6444bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9720)[0m     @     0x55dc643a6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9720)[0m     @     0x55dc64431baf _PyEval_EvalCodeWithName
[2m[36m(pid=9720)[0m     @     0x55dc64432a20 method_vectorcall
[2m[36m(pid=9720)[0m     @     0x55dc643a6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9720)[0m     @     0x55dc64431baf _PyEval_EvalCodeWithName
[2m[36m(pid=9720)[0m     @     0x55dc64432643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9720)[0m     @     0x55dc643a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9720)[0m     @     0x55dc64431baf _PyEval_EvalCodeWithName
[2m[36m(pid=9720)[0m     @     0x55dc64432643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9720)[0m     @     0x55dc643a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9720)[0m     @     0x55dc64431baf _PyEval_EvalCodeWithName
[2m[36m(pid=9720)[0m     @     0x55dc64432643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9720)[0m     @     0x55dc643a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9720)[0m     @     0x55dc64431baf _PyEval_EvalCodeWithName
[2m[36m(pid=9720)[0m     @     0x55dc64432643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9720)[0m     @     0x55dc643a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9660)[0m     @     0x7f63ffb11ad3 at::TensorIterator::for_each()
[2m[36m(pid=9660)[0m     @     0x7f63ffb11d91 at::TensorIterator::for_each()
[2m[36m(pid=9670)[0m     @     0x7fc31f48d4f5 at::Tensor::copy_()
[2m[36m(pid=9670)[0m     @     0x7fc33828379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9670)[0m     @     0x55ad484d2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9670)[0m     @     0x55ad4842db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9670)[0m     @     0x55ad484b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9670)[0m     @     0x55ad484b9a20 method_vectorcall
[2m[36m(pid=9670)[0m     @     0x55ad4842dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9670)[0m     @     0x55ad484b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9670)[0m     @     0x55ad484b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9670)[0m     @     0x55ad4842e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9670)[0m     @     0x55ad484b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9670)[0m     @     0x55ad484b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9670)[0m     @     0x55ad4842e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9670)[0m     @     0x55ad484b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9670)[0m     @     0x55ad484b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9670)[0m     @     0x55ad4842e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9670)[0m     @     0x55ad484b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=9670)[0m     @     0x55ad484b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9670)[0m     @     0x55ad4842e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9653)[0m     @     0x7eee0def75a4 at::native::copy_()
[2m[36m(pid=9722)[0m     @     0x7ed695c915a4 at::native::copy_()
[2m[36m(pid=9722)[0m     @     0x7ed69637c4f5 at::Tensor::copy_()
[2m[36m(pid=9731)[0m     @     0x7f78da5e24f5 at::Tensor::copy_()
[2m[36m(pid=9731)[0m     @     0x7f78e068d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9731)[0m     @     0x55a510da6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9731)[0m     @     0x55a510d01b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9731)[0m     @     0x55a510d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9731)[0m     @     0x55a510d8da20 method_vectorcall
[2m[36m(pid=9731)[0m     @     0x55a510d01bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9731)[0m     @     0x55a510d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9731)[0m     @     0x55a510d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9731)[0m     @     0x55a510d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9731)[0m     @     0x55a510d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9731)[0m     @     0x55a510d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9731)[0m     @     0x55a510d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9731)[0m     @     0x55a510d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9678)[0m     @     0x7f83b8a47b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9678)[0m     @     0x7f83b8a6ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9678)[0m     @     0x7f83b7f0ca93 at::native::DispatchStub<>::operator()<>()
2020-11-05 10:18:24,167	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.
2020-11-05 10:18:24,178	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.
2020-11-05 10:18:24,178	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.
2020-11-05 10:18:24,179	ERROR trial_runner.py:567 -- Trial PPO_jss_env_3868e_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=9762, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
[2m[36m(pid=9660)[0m     @     0x7f64003f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=9660)[0m     @     0x7f6400417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=9660)[0m     @     0x7f63ff8b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=9660)[0m     @     0x7f63ff8b7388 at::native::copy_impl()
[2m[36m(pid=9660)[0m     @     0x7f63ff8b95a4 at::native::copy_()
[2m[36m(pid=9660)[0m     @     0x7f63fffa44f5 at::Tensor::copy_()
[2m[36m(pid=9660)[0m     @     0x7f64024778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9660)[0m     @     0x7f63fffa44f5 at::Tensor::copy_()
[2m[36m(pid=9660)[0m     @     0x7f640604f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9660)[0m     @     0x55a396cfefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9660)[0m     @     0x55a396c59b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9660)[0m     @     0x55a396ce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9660)[0m     @     0x55a396ce5a20 method_vectorcall
[2m[36m(pid=9660)[0m     @     0x55a396c59bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9660)[0m     @     0x55a396ce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9660)[0m     @     0x55a396ce5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9660)[0m     @     0x55a396c5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9660)[0m     @     0x55a396ce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9660)[0m     @     0x55a396ce5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9660)[0m     @     0x55a396c5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9660)[0m     @     0x55a396ce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9660)[0m     @     0x55a396ce5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9660)[0m     @     0x55a396c5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9660)[0m     @     0x55a396ce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=9660)[0m     @     0x55a396ce5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9660)[0m     @     0x55a396c5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9653)[0m     @     0x7eee0e5e24f5 at::Tensor::copy_()
[2m[36m(pid=9653)[0m     @     0x7eee10ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9653)[0m     @     0x7eee0e5e24f5 at::Tensor::copy_()
[2m[36m(pid=9653)[0m     @     0x7eee1468d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9653)[0m     @     0x55c764d04fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9653)[0m     @     0x55c764c5fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9653)[0m     @     0x55c764ceabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9653)[0m     @     0x55c764ceba20 method_vectorcall
[2m[36m(pid=9653)[0m     @     0x55c764c5fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9653)[0m     @     0x55c764ceabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9653)[0m     @     0x55c764ceb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9653)[0m     @     0x55c764c60689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9653)[0m     @     0x55c764ceabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9653)[0m     @     0x55c764ceb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9653)[0m     @     0x55c764c60689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9653)[0m     @     0x55c764ceabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9653)[0m     @     0x55c764ceb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9653)[0m     @     0x55c764c60689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9653)[0m     @     0x55c764ceabaf _PyEval_EvalCodeWithName
[2m[36m(pid=9653)[0m     @     0x55c764ceb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9653)[0m     @     0x55c764c60689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9722)[0m     @     0x7ed69884f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9722)[0m     @     0x7ed69637c4f5 at::Tensor::copy_()
[2m[36m(pid=9722)[0m     @     0x7ed69c42779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9722)[0m     @     0x55ac23235fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9722)[0m     @     0x55ac23190b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9722)[0m     @     0x55ac2321bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9722)[0m     @     0x55ac2321ca20 method_vectorcall
[2m[36m(pid=9722)[0m     @     0x55ac23190bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9722)[0m     @     0x55ac2321bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9722)[0m     @     0x55ac2321c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9722)[0m     @     0x55ac23191689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9722)[0m     @     0x55ac2321bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9722)[0m     @     0x55ac2321c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9722)[0m     @     0x55ac23191689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9722)[0m     @     0x55ac2321bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9722)[0m     @     0x55ac2321c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9722)[0m     @     0x55ac23191689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9722)[0m     @     0x55ac2321bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9722)[0m     @     0x55ac2321c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9722)[0m     @     0x55ac23191689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9731)[0m     @     0x55a510d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9731)[0m     @     0x55a510d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9731)[0m     @     0x55a510d8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=9731)[0m     @     0x55a510d8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9731)[0m     @     0x55a510d02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9678)[0m     @     0x7f83b7f0a388 at::native::copy_impl()
[2m[36m(pid=9678)[0m     @     0x7f83b7f0c5a4 at::native::copy_()
[2m[36m(pid=9678)[0m     @     0x7f83b85f74f5 at::Tensor::copy_()
[2m[36m(pid=9678)[0m     @     0x7f83baaca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=9678)[0m     @     0x7f83b85f74f5 at::Tensor::copy_()
[2m[36m(pid=9678)[0m     @     0x7f83be6a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=9678)[0m     @     0x562dc24acfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=9678)[0m     @     0x562dc2407b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9678)[0m     @     0x562dc2492baf _PyEval_EvalCodeWithName
[2m[36m(pid=9678)[0m     @     0x562dc2493a20 method_vectorcall
[2m[36m(pid=9678)[0m     @     0x562dc2407bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9678)[0m     @     0x562dc2492baf _PyEval_EvalCodeWithName
[2m[36m(pid=9678)[0m     @     0x562dc2493643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9678)[0m     @     0x562dc2408689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9678)[0m     @     0x562dc2492baf _PyEval_EvalCodeWithName
[2m[36m(pid=9678)[0m     @     0x562dc2493643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9678)[0m     @     0x562dc2408689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9678)[0m     @     0x562dc2492baf _PyEval_EvalCodeWithName
[2m[36m(pid=9678)[0m     @     0x562dc2493643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9678)[0m     @     0x562dc2408689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9678)[0m     @     0x562dc2492baf _PyEval_EvalCodeWithName
[2m[36m(pid=9678)[0m     @     0x562dc2493643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=9678)[0m     @     0x562dc2408689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=9762)[0m E1105 10:18:24.163045  9762 10887 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=170fdfd5d34985a7e0497dac01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=9762)[0m E1105 10:18:24.163230  9762 10887 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=89f63fee54d6858ee0497dac01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=9762)[0m E1105 10:18:24.175282  9762 10887 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=7401512aaa7b6e5d1e7ae67b01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=1e7ae67b01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=9762)[0m E1105 10:18:24.175424  9762 10887 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=71fdc8bab2e5c4d51e7ae67b01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=1e7ae67b01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=9762)[0m E1105 10:18:24.176056  9762 10887 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=d984ee9d41b92c534100f4fd01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4100f4fd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=9762)[0m E1105 10:18:24.176167  9762 10887 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=6c41da4ee8b0b4d04100f4fd01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4100f4fd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[33m(pid=raylet)[0m E1105 10:18:24.161563  9606  9606 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer
[2m[33m(pid=raylet)[0m E1105 10:18:24.175547  9606  9606 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer
[2m[33m(pid=raylet)[0m E1105 10:18:24.175997  9606  9606 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer
[2m[33m(pid=raylet)[0m E1105 10:18:24.180197  9606  9606 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer
2020-11-05 10:18:24,188	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.
== Status ==
Memory usage on this node: 25.5/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.25 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_3868e_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_3868e_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_3868e_00000_0_2020-11-05_10-18-16/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

== Status ==
Memory usage on this node: 25.1/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.25 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_3868e_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_3868e_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_3868e_00000_0_2020-11-05_10-18-16/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

