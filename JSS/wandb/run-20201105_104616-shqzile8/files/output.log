2020-11-05 10:46:20,773	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.01 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_24d72_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=52087)[0m 2020-11-05 10:46:23,524	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=52087)[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: 
[2m[36m(pid=52087)[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.
[2m[36m(pid=52087)[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.
[2m[36m(pid=52087)[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/
[2m[36m(pid=52087)[0m 
[2m[36m(pid=52087)[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
[2m[36m(pid=52090)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52090)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52090)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52090)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52090)[0m *** SIGSEGV (@0x0) received by PID 52090 (TID 0x7fbf23aa9700) from PID 0; stack trace: ***
[2m[36m(pid=52090)[0m     @     0x7fbf23682390 (unknown)
[2m[36m(pid=52090)[0m     @     0x7f902361ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52090)[0m     @     0x7f9022d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52090)[0m     @     0x7f9022d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52090)[0m     @     0x7f9022d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=52090)[0m     @     0x7f9022d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=52084)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52084)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52084)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52084)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52084)[0m *** SIGSEGV (@0x0) received by PID 52084 (TID 0x7fdb03b31700) from PID 0; stack trace: ***
[2m[36m(pid=52084)[0m     @     0x7fdb0370a390 (unknown)
[2m[36m(pid=52084)[0m     @     0x7fac036aef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52084)[0m     @     0x7fac02dd97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52084)[0m     @     0x7fac02ddc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52084)[0m     @     0x7fac02ddcad3 at::TensorIterator::for_each()
[2m[36m(pid=52084)[0m     @     0x7fac02ddcd91 at::TensorIterator::for_each()
[2m[36m(pid=52100)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52100)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52100)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52100)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52100)[0m *** SIGSEGV (@0x0) received by PID 52100 (TID 0x7fdcd8282700) from PID 0; stack trace: ***
[2m[36m(pid=52100)[0m     @     0x7fdcd7e5b390 (unknown)
[2m[36m(pid=52100)[0m     @     0x7fadd7d2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52100)[0m     @     0x7fadd74577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52100)[0m     @     0x7fadd745a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52100)[0m     @     0x7fadd745aad3 at::TensorIterator::for_each()
[2m[36m(pid=52094)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52094)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52094)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52094)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52094)[0m *** SIGSEGV (@0x0) received by PID 52094 (TID 0x7fa59946b700) from PID 0; stack trace: ***
[2m[36m(pid=52094)[0m     @     0x7fa599044390 (unknown)
[2m[36m(pid=52094)[0m     @     0x7f7698f4ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52094)[0m     @     0x7f769867a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52094)[0m     @     0x7f769867d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52094)[0m     @     0x7f769867dad3 at::TensorIterator::for_each()
[2m[36m(pid=52094)[0m     @     0x7f769867dd91 at::TensorIterator::for_each()
[2m[36m(pid=52094)[0m     @     0x7f7698f60b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52094)[0m     @     0x7f7698f83c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52105)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52105)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52105)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52105)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52105)[0m *** SIGSEGV (@0x0) received by PID 52105 (TID 0x7effead98700) from PID 0; stack trace: ***
[2m[36m(pid=52105)[0m     @     0x7effea971390 (unknown)
[2m[36m(pid=52105)[0m     @     0x7ed0ea70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52105)[0m     @     0x7ed0e9e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52105)[0m     @     0x7ed0e9e388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51999)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51999)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51999)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51999)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51999)[0m *** SIGSEGV (@0x0) received by PID 51999 (TID 0x7fa380cc4700) from PID 0; stack trace: ***
[2m[36m(pid=51999)[0m     @     0x7fa38089d390 (unknown)
[2m[36m(pid=51999)[0m     @     0x7f7480838f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51999)[0m     @     0x7f747ff637db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51999)[0m     @     0x7f747ff668f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51999)[0m     @     0x7f747ff66ad3 at::TensorIterator::for_each()
[2m[36m(pid=51998)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51998)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51998)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51998)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51998)[0m *** SIGSEGV (@0x0) received by PID 51998 (TID 0x7f9e5065f700) from PID 0; stack trace: ***
[2m[36m(pid=51998)[0m     @     0x7f9e50238390 (unknown)
[2m[36m(pid=51998)[0m     @     0x7f6f4ff2ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51998)[0m     @     0x7f6f4f65a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51998)[0m     @     0x7f6f4f65d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52048)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52048)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52048)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52048)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52048)[0m *** SIGSEGV (@0x0) received by PID 52048 (TID 0x7fed99e64700) from PID 0; stack trace: ***
[2m[36m(pid=52048)[0m     @     0x7fed99a3d390 (unknown)
[2m[36m(pid=52048)[0m     @     0x7fbe997f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52048)[0m     @     0x7fbe98f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52048)[0m     @     0x7fbe98f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51997)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51997)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51997)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51997)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51997)[0m *** SIGSEGV (@0x0) received by PID 51997 (TID 0x7fecec7d5700) from PID 0; stack trace: ***
[2m[36m(pid=51997)[0m     @     0x7fecec3ae390 (unknown)
[2m[36m(pid=51997)[0m     @     0x7fbdec2def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51997)[0m     @     0x7fbdeba097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51997)[0m     @     0x7fbdeba0c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52102)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52102)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52102)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52102)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52102)[0m *** SIGSEGV (@0x0) received by PID 52102 (TID 0x7fc56eec2700) from PID 0; stack trace: ***
[2m[36m(pid=52102)[0m     @     0x7fc56ea9b390 (unknown)
[2m[36m(pid=52102)[0m     @     0x7f966ea21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52102)[0m     @     0x7f966e14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52102)[0m     @     0x7f966e14f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52102)[0m     @     0x7f966e14fad3 at::TensorIterator::for_each()
[2m[36m(pid=52009)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52009)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52009)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52009)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52009)[0m *** SIGSEGV (@0x0) received by PID 52009 (TID 0x7f7c08ecf700) from PID 0; stack trace: ***
[2m[36m(pid=52009)[0m     @     0x7f7c08aa8390 (unknown)
[2m[36m(pid=52009)[0m     @     0x7f4d08a36f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52009)[0m     @     0x7f4d081617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52009)[0m     @     0x7f4d081648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52058)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52058)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52058)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52058)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52058)[0m *** SIGSEGV (@0x0) received by PID 52058 (TID 0x7f95ec9e6700) from PID 0; stack trace: ***
[2m[36m(pid=52058)[0m     @     0x7f95ec5bf390 (unknown)
[2m[36m(pid=52058)[0m     @     0x7f66ec561f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52058)[0m     @     0x7f66ebc8c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52058)[0m     @     0x7f66ebc8f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52103)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52103)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52103)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52103)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52103)[0m *** SIGSEGV (@0x0) received by PID 52103 (TID 0x7f71bb216700) from PID 0; stack trace: ***
[2m[36m(pid=52103)[0m     @     0x7f71badef390 (unknown)
[2m[36m(pid=52103)[0m     @     0x7f42bad5ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52103)[0m     @     0x7f42ba4897db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52103)[0m     @     0x7f42ba48c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52103)[0m     @     0x7f42ba48cad3 at::TensorIterator::for_each()
[2m[36m(pid=52103)[0m     @     0x7f42ba48cd91 at::TensorIterator::for_each()
[2m[36m(pid=52103)[0m     @     0x7f42bad6fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52064)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52064)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52064)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52064)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52064)[0m *** SIGSEGV (@0x0) received by PID 52064 (TID 0x7fcfb2882700) from PID 0; stack trace: ***
[2m[36m(pid=52064)[0m     @     0x7fcfb245b390 (unknown)
[2m[36m(pid=52064)[0m     @     0x7fa0b234bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52064)[0m     @     0x7fa0b1a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52064)[0m     @     0x7fa0b1a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52064)[0m     @     0x7fa0b1a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=52059)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52059)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52059)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52059)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52059)[0m *** SIGSEGV (@0x0) received by PID 52059 (TID 0x7fb96f26d700) from PID 0; stack trace: ***
[2m[36m(pid=52059)[0m     @     0x7fb96ee46390 (unknown)
[2m[36m(pid=52059)[0m     @     0x7f8a6edf0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52059)[0m     @     0x7f8a6e51b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52059)[0m     @     0x7f8a6e51e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52059)[0m     @     0x7f8a6e51ead3 at::TensorIterator::for_each()
[2m[36m(pid=52059)[0m     @     0x7f8a6e51ed91 at::TensorIterator::for_each()
[2m[36m(pid=52059)[0m     @     0x7f8a6ee01b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52059)[0m     @     0x7f8a6ee24c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51993)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51993)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51993)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51993)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51993)[0m *** SIGSEGV (@0x0) received by PID 51993 (TID 0x7fd261224700) from PID 0; stack trace: ***
[2m[36m(pid=51993)[0m     @     0x7fd260dfd390 (unknown)
[2m[36m(pid=51993)[0m     @     0x7fa360d64f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51993)[0m     @     0x7fa36048f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51993)[0m     @     0x7fa3604928f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52052)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52052)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52052)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52052)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52052)[0m *** SIGSEGV (@0x0) received by PID 52052 (TID 0x7f14b4493700) from PID 0; stack trace: ***
[2m[36m(pid=52052)[0m     @     0x7f14b406c390 (unknown)
[2m[36m(pid=52052)[0m     @     0x7ee5b3eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52052)[0m     @     0x7ee5b35e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52052)[0m     @     0x7ee5b35e48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52000)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52000)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52000)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52000)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52000)[0m *** SIGSEGV (@0x0) received by PID 52000 (TID 0x7f21c89f8700) from PID 0; stack trace: ***
[2m[36m(pid=52000)[0m     @     0x7f21c85d1390 (unknown)
[2m[36m(pid=52000)[0m     @     0x7ef2c8563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52000)[0m     @     0x7ef2c7c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52000)[0m     @     0x7ef2c7c918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52095)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52095)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52095)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52095)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52095)[0m *** SIGSEGV (@0x0) received by PID 52095 (TID 0x7f72fae49700) from PID 0; stack trace: ***
[2m[36m(pid=52095)[0m     @     0x7f72faa22390 (unknown)
[2m[36m(pid=52095)[0m     @     0x7f43fa7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52095)[0m     @     0x7f43f9ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52095)[0m     @     0x7f43f9ee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52095)[0m     @     0x7f43f9ee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=51986)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51986)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51986)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51986)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51986)[0m *** SIGSEGV (@0x0) received by PID 51986 (TID 0x7fa2d1f14700) from PID 0; stack trace: ***
[2m[36m(pid=51986)[0m     @     0x7fa2d1aed390 (unknown)
[2m[36m(pid=51986)[0m     @     0x7f73d1a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51986)[0m     @     0x7f73d11357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51986)[0m     @     0x7f73d11388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51994)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51994)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51994)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51989)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51989)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51989)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51995)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51995)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51995)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52020)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52020)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52020)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52020)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52020)[0m *** SIGSEGV (@0x0) received by PID 52020 (TID 0x7f292bed2700) from PID 0; stack trace: ***
[2m[36m(pid=52020)[0m     @     0x7f292baab390 (unknown)
[2m[36m(pid=52020)[0m     @     0x7efa2ba23f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52020)[0m     @     0x7efa2b14e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52020)[0m     @     0x7efa2b1518f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52001)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52001)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52001)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52010)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52010)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52010)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52010)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52010)[0m *** SIGSEGV (@0x0) received by PID 52010 (TID 0x7ffb5e45c700) from PID 0; stack trace: ***
[2m[36m(pid=52010)[0m     @     0x7ffb5e035390 (unknown)
[2m[36m(pid=52010)[0m     @     0x7fcc5de24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52010)[0m     @     0x7fcc5d54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52010)[0m     @     0x7fcc5d5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52082)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52082)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52082)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52082)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52082)[0m *** SIGSEGV (@0x0) received by PID 52082 (TID 0x7f1208633700) from PID 0; stack trace: ***
[2m[36m(pid=51985)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51985)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51985)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51985)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51985)[0m *** SIGSEGV (@0x0) received by PID 51985 (TID 0x7f7085c9d700) from PID 0; stack trace: ***
[2m[36m(pid=51985)[0m     @     0x7f7085876390 (unknown)
[2m[36m(pid=51985)[0m     @     0x7f41857f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51985)[0m     @     0x7f4184f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51985)[0m     @     0x7f4184f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51985)[0m     @     0x7f4184f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=51984)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51984)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51984)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51991)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51991)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51991)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51991)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52050)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52050)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52050)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52050)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52050)[0m *** SIGSEGV (@0x0) received by PID 52050 (TID 0x7f0a401bb700) from PID 0; stack trace: ***
[2m[36m(pid=52050)[0m     @     0x7f0a3fd94390 (unknown)
[2m[36m(pid=52050)[0m     @     0x7edb3fd1ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52050)[0m     @     0x7edb3f4497db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51990)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51990)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51990)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51990)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51990)[0m *** SIGSEGV (@0x0) received by PID 51990 (TID 0x7f6007bca700) from PID 0; stack trace: ***
[2m[36m(pid=51990)[0m     @     0x7f60077a3390 (unknown)
[2m[36m(pid=51990)[0m     @     0x7f31076aef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51990)[0m     @     0x7f3106dd97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51990)[0m     @     0x7f3106ddc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51990)[0m     @     0x7f3106ddcad3 at::TensorIterator::for_each()
[2m[36m(pid=51990)[0m     @     0x7f3106ddcd91 at::TensorIterator::for_each()
[2m[36m(pid=51990)[0m     @     0x7f31076bfb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51990)[0m     @     0x7f31076e2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52043)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52043)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52043)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52043)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52043)[0m *** SIGSEGV (@0x0) received by PID 52043 (TID 0x7f05d0c50700) from PID 0; stack trace: ***
[2m[36m(pid=52043)[0m     @     0x7f05d0829390 (unknown)
[2m[36m(pid=52043)[0m     @     0x7ed6d0563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52043)[0m     @     0x7ed6cfc8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52043)[0m     @     0x7ed6cfc918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52043)[0m     @     0x7ed6cfc91ad3 at::TensorIterator::for_each()
[2m[36m(pid=52043)[0m     @     0x7ed6cfc91d91 at::TensorIterator::for_each()
[2m[36m(pid=52043)[0m     @     0x7ed6d0574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52043)[0m     @     0x7ed6d0597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52065)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52065)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52065)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52065)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52065)[0m *** SIGSEGV (@0x0) received by PID 52065 (TID 0x7fd9a28cb700) from PID 0; stack trace: ***
[2m[36m(pid=52065)[0m     @     0x7fd9a24a4390 (unknown)
[2m[36m(pid=52065)[0m     @     0x7faaa234bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52065)[0m     @     0x7faaa1a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52065)[0m     @     0x7faaa1a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52065)[0m     @     0x7faaa1a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=52065)[0m     @     0x7faaa1a79d91 at::TensorIterator::for_each()
[2m[36m(pid=52065)[0m     @     0x7faaa235cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52065)[0m     @     0x7faaa237fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51983)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51983)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51983)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=51983)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51983)[0m *** SIGSEGV (@0x0) received by PID 51983 (TID 0x7f0328d81700) from PID 0; stack trace: ***
[2m[36m(pid=51983)[0m     @     0x7f032895a390 (unknown)
[2m[36m(pid=51987)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51987)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51987)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=51987)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51987)[0m *** SIGSEGV (@0x0) received by PID 51987 (TID 0x7f04459fe700) from PID 0; stack trace: ***
[2m[36m(pid=52046)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52046)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52046)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52046)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52046)[0m *** SIGSEGV (@0x0) received by PID 52046 (TID 0x7fa1e46dc700) from PID 0; stack trace: ***
[2m[36m(pid=52003)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52003)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52003)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52003)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52003)[0m *** SIGSEGV (@0x0) received by PID 52003 (TID 0x7f4e45760700) from PID 0; stack trace: ***
[2m[36m(pid=51981)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51981)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51981)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=51981)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51981)[0m *** SIGSEGV (@0x0) received by PID 51981 (TID 0x7fb866689700) from PID 0; stack trace: ***
[2m[36m(pid=52011)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52011)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52011)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52011)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52011)[0m *** SIGSEGV (@0x0) received by PID 52011 (TID 0x7f7174637700) from PID 0; stack trace: ***
[2m[36m(pid=52011)[0m     @     0x7f7174210390 (unknown)
[2m[36m(pid=52115)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52115)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52115)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52115)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52115)[0m *** SIGSEGV (@0x0) received by PID 52115 (TID 0x7f8cfbb74700) from PID 0; stack trace: ***
[2m[36m(pid=52115)[0m     @     0x7f8cfb74d390 (unknown)
[2m[36m(pid=52115)[0m     @     0x7f5dfb61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52115)[0m     @     0x7f5dfad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52115)[0m     @     0x7f5dfad4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52115)[0m     @     0x7f5dfad4dad3 at::TensorIterator::for_each()
[2m[36m(pid=52115)[0m     @     0x7f5dfad4dd91 at::TensorIterator::for_each()
[2m[36m(pid=52115)[0m     @     0x7f5dfb630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52115)[0m     @     0x7f5dfb653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52115)[0m     @     0x7f5dfaaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52115)[0m     @     0x7f5dfaaf3388 at::native::copy_impl()
[2m[36m(pid=52117)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52117)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52117)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52117)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52117)[0m *** SIGSEGV (@0x0) received by PID 52117 (TID 0x7f2a6cf26700) from PID 0; stack trace: ***
[2m[36m(pid=52117)[0m     @     0x7f2a6caff390 (unknown)
[2m[36m(pid=52117)[0m     @     0x7efb6c9e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52117)[0m     @     0x7efb6c1137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52117)[0m     @     0x7efb6c1168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52117)[0m     @     0x7efb6c116ad3 at::TensorIterator::for_each()
[2m[36m(pid=52117)[0m     @     0x7efb6c116d91 at::TensorIterator::for_each()
[2m[36m(pid=52117)[0m     @     0x7efb6c9f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52117)[0m     @     0x7efb6ca1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52117)[0m     @     0x7efb6bebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52117)[0m     @     0x7efb6bebc388 at::native::copy_impl()
[2m[36m(pid=52117)[0m     @     0x7efb6bebe5a4 at::native::copy_()
[2m[36m(pid=52075)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52075)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52075)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52075)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52075)[0m *** SIGSEGV (@0x0) received by PID 52075 (TID 0x7f2225ca6700) from PID 0; stack trace: ***
[2m[36m(pid=52075)[0m     @     0x7f222587f390 (unknown)
[2m[36m(pid=52075)[0m     @     0x7ef3257f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52075)[0m     @     0x7ef324f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52075)[0m     @     0x7ef324f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52075)[0m     @     0x7ef324f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=52075)[0m     @     0x7ef324f27d91 at::TensorIterator::for_each()
[2m[36m(pid=52075)[0m     @     0x7ef32580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52075)[0m     @     0x7ef32582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52075)[0m     @     0x7ef324ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52075)[0m     @     0x7ef324ccd388 at::native::copy_impl()
[2m[36m(pid=52075)[0m     @     0x7ef324ccf5a4 at::native::copy_()
[2m[36m(pid=52079)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52079)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52079)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52079)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52079)[0m *** SIGSEGV (@0x0) received by PID 52079 (TID 0x7f37ded52700) from PID 0; stack trace: ***
[2m[36m(pid=52079)[0m     @     0x7f37de92b390 (unknown)
[2m[36m(pid=52079)[0m     @     0x7f08de8baf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52079)[0m     @     0x7f08ddfe57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52079)[0m     @     0x7f08ddfe88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52079)[0m     @     0x7f08ddfe8ad3 at::TensorIterator::for_each()
[2m[36m(pid=52079)[0m     @     0x7f08ddfe8d91 at::TensorIterator::for_each()
[2m[36m(pid=52079)[0m     @     0x7f08de8cbb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52079)[0m     @     0x7f08de8eec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52079)[0m     @     0x7f08ddd90a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52079)[0m     @     0x7f08ddd8e388 at::native::copy_impl()
[2m[36m(pid=52014)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52014)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52014)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52014)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52014)[0m *** SIGSEGV (@0x0) received by PID 52014 (TID 0x7f5d905da700) from PID 0; stack trace: ***
[2m[36m(pid=52014)[0m     @     0x7f5d901b3390 (unknown)
[2m[36m(pid=52014)[0m     @     0x7f2e900cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52014)[0m     @     0x7f2e8f7f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52014)[0m     @     0x7f2e8f7fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52014)[0m     @     0x7f2e8f7fbad3 at::TensorIterator::for_each()
[2m[36m(pid=52014)[0m     @     0x7f2e8f7fbd91 at::TensorIterator::for_each()
[2m[36m(pid=52014)[0m     @     0x7f2e900deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52014)[0m     @     0x7f2e90101c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51982)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51982)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51982)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51982)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51982)[0m *** SIGSEGV (@0x0) received by PID 51982 (TID 0x7ff63872e700) from PID 0; stack trace: ***
[2m[36m(pid=51982)[0m     @     0x7ff638307390 (unknown)
[2m[36m(pid=51982)[0m     @     0x7fc7382b1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51982)[0m     @     0x7fc7379dc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51982)[0m     @     0x7fc7379df8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51982)[0m     @     0x7fc7379dfad3 at::TensorIterator::for_each()
[2m[36m(pid=51982)[0m     @     0x7fc7379dfd91 at::TensorIterator::for_each()
[2m[36m(pid=51982)[0m     @     0x7fc7382c2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51982)[0m     @     0x7fc7382e5c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51982)[0m     @     0x7fc737787a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51982)[0m     @     0x7fc737785388 at::native::copy_impl()
[2m[36m(pid=52097)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52097)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52097)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52097)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52097)[0m *** SIGSEGV (@0x0) received by PID 52097 (TID 0x7fa8c2f1d700) from PID 0; stack trace: ***
[2m[36m(pid=52097)[0m     @     0x7fa8c2af6390 (unknown)
[2m[36m(pid=52097)[0m     @     0x7f79c2aa4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52097)[0m     @     0x7f79c21cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52097)[0m     @     0x7f79c21d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52097)[0m     @     0x7f79c21d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=52097)[0m     @     0x7f79c21d2d91 at::TensorIterator::for_each()
[2m[36m(pid=52097)[0m     @     0x7f79c2ab5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52097)[0m     @     0x7f79c2ad8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52097)[0m     @     0x7f79c1f7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52097)[0m     @     0x7f79c1f78388 at::native::copy_impl()
[2m[36m(pid=52097)[0m     @     0x7f79c1f7a5a4 at::native::copy_()
[2m[36m(pid=52078)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52078)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52078)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52078)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52078)[0m *** SIGSEGV (@0x0) received by PID 52078 (TID 0x7f227efac700) from PID 0; stack trace: ***
[2m[36m(pid=52078)[0m     @     0x7f227eb85390 (unknown)
[2m[36m(pid=52078)[0m     @     0x7ef37eb21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52078)[0m     @     0x7ef37e24c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52078)[0m     @     0x7ef37e24f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52078)[0m     @     0x7ef37e24fad3 at::TensorIterator::for_each()
[2m[36m(pid=52078)[0m     @     0x7ef37e24fd91 at::TensorIterator::for_each()
[2m[36m(pid=52078)[0m     @     0x7ef37eb32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52078)[0m     @     0x7ef37eb55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52078)[0m     @     0x7ef37dff7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52078)[0m     @     0x7ef37dff5388 at::native::copy_impl()
[2m[36m(pid=52078)[0m     @     0x7ef37dff75a4 at::native::copy_()
[2m[36m(pid=52078)[0m     @     0x7ef37e6e24f5 at::Tensor::copy_()
[2m[36m(pid=52072)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52072)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52072)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52072)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52072)[0m *** SIGSEGV (@0x0) received by PID 52072 (TID 0x7f612e676700) from PID 0; stack trace: ***
[2m[36m(pid=52072)[0m     @     0x7f612e24f390 (unknown)
[2m[36m(pid=52072)[0m     @     0x7f322e13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52072)[0m     @     0x7f322d8657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52072)[0m     @     0x7f322d8688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52072)[0m     @     0x7f322d868ad3 at::TensorIterator::for_each()
[2m[36m(pid=52072)[0m     @     0x7f322d868d91 at::TensorIterator::for_each()
[2m[36m(pid=52072)[0m     @     0x7f322e14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52072)[0m     @     0x7f322e16ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52072)[0m     @     0x7f322d610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52107)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52107)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52107)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52107)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52107)[0m *** SIGSEGV (@0x0) received by PID 52107 (TID 0x7f37a546d700) from PID 0; stack trace: ***
[2m[36m(pid=52107)[0m     @     0x7f37a5046390 (unknown)
[2m[36m(pid=52107)[0m     @     0x7f08a4ea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52107)[0m     @     0x7f08a45cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52107)[0m     @     0x7f08a45d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52107)[0m     @     0x7f08a45d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=52107)[0m     @     0x7f08a45d2d91 at::TensorIterator::for_each()
[2m[36m(pid=52107)[0m     @     0x7f08a4eb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52107)[0m     @     0x7f08a4ed8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52107)[0m     @     0x7f08a437aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52107)[0m     @     0x7f08a4378388 at::native::copy_impl()
[2m[36m(pid=52107)[0m     @     0x7f08a437a5a4 at::native::copy_()
[2m[36m(pid=52107)[0m     @     0x7f08a4a654f5 at::Tensor::copy_()
[2m[36m(pid=52111)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52111)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52111)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52111)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52111)[0m *** SIGSEGV (@0x0) received by PID 52111 (TID 0x7fc5c4e01700) from PID 0; stack trace: ***
[2m[36m(pid=52111)[0m     @     0x7fc5c49da390 (unknown)
[2m[36m(pid=52111)[0m     @     0x7f96c4825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52111)[0m     @     0x7f96c3f507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52111)[0m     @     0x7f96c3f538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52111)[0m     @     0x7f96c3f53ad3 at::TensorIterator::for_each()
[2m[36m(pid=52111)[0m     @     0x7f96c3f53d91 at::TensorIterator::for_each()
[2m[36m(pid=52111)[0m     @     0x7f96c4836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52111)[0m     @     0x7f96c4859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52111)[0m     @     0x7f96c3cfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52111)[0m     @     0x7f96c3cf9388 at::native::copy_impl()
[2m[36m(pid=52111)[0m     @     0x7f96c3cfb5a4 at::native::copy_()
[2m[36m(pid=52111)[0m     @     0x7f96c43e64f5 at::Tensor::copy_()
[2m[36m(pid=52092)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52092)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52092)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52092)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52092)[0m *** SIGSEGV (@0x0) received by PID 52092 (TID 0x7f3e18da9700) from PID 0; stack trace: ***
[2m[36m(pid=52092)[0m     @     0x7f3e18982390 (unknown)
[2m[36m(pid=52092)[0m     @     0x7f0f18774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52092)[0m     @     0x7f0f17e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52092)[0m     @     0x7f0f17ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52092)[0m     @     0x7f0f17ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=52092)[0m     @     0x7f0f17ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=52092)[0m     @     0x7f0f18785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52092)[0m     @     0x7f0f187a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52092)[0m     @     0x7f0f17c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52092)[0m     @     0x7f0f17c48388 at::native::copy_impl()
[2m[36m(pid=52092)[0m     @     0x7f0f17c4a5a4 at::native::copy_()
[2m[36m(pid=52055)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52055)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52055)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52055)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52055)[0m *** SIGSEGV (@0x0) received by PID 52055 (TID 0x7f591eae4700) from PID 0; stack trace: ***
[2m[36m(pid=52055)[0m     @     0x7f591e6bd390 (unknown)
[2m[36m(pid=52055)[0m     @     0x7f2a1e567f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52055)[0m     @     0x7f2a1dc927db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52055)[0m     @     0x7f2a1dc958f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52055)[0m     @     0x7f2a1dc95ad3 at::TensorIterator::for_each()
[2m[36m(pid=52055)[0m     @     0x7f2a1dc95d91 at::TensorIterator::for_each()
[2m[36m(pid=52055)[0m     @     0x7f2a1e578b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52055)[0m     @     0x7f2a1e59bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52055)[0m     @     0x7f2a1da3da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52055)[0m     @     0x7f2a1da3b388 at::native::copy_impl()
[2m[36m(pid=52055)[0m     @     0x7f2a1da3d5a4 at::native::copy_()
[2m[36m(pid=52055)[0m     @     0x7f2a1e1284f5 at::Tensor::copy_()
[2m[36m(pid=52054)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52054)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52054)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52054)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52054)[0m *** SIGSEGV (@0x0) received by PID 52054 (TID 0x7f9b37502700) from PID 0; stack trace: ***
[2m[36m(pid=52054)[0m     @     0x7f9b370db390 (unknown)
[2m[36m(pid=52054)[0m     @     0x7f6c36f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52054)[0m     @     0x7f6c3663e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52054)[0m     @     0x7f6c366418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52054)[0m     @     0x7f6c36641ad3 at::TensorIterator::for_each()
[2m[36m(pid=52054)[0m     @     0x7f6c36641d91 at::TensorIterator::for_each()
[2m[36m(pid=52054)[0m     @     0x7f6c36f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52054)[0m     @     0x7f6c36f47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52054)[0m     @     0x7f6c363e9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52054)[0m     @     0x7f6c363e7388 at::native::copy_impl()
[2m[36m(pid=52054)[0m     @     0x7f6c363e95a4 at::native::copy_()
[2m[36m(pid=52054)[0m     @     0x7f6c36ad44f5 at::Tensor::copy_()
[2m[36m(pid=52054)[0m     @     0x7f6c38fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52074)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52074)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52074)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52074)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52074)[0m *** SIGSEGV (@0x0) received by PID 52074 (TID 0x7fb6be7e7700) from PID 0; stack trace: ***
[2m[36m(pid=52074)[0m     @     0x7fb6be3c0390 (unknown)
[2m[36m(pid=52074)[0m     @     0x7f87be34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52074)[0m     @     0x7f87bda767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52074)[0m     @     0x7f87bda798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52074)[0m     @     0x7f87bda79ad3 at::TensorIterator::for_each()
[2m[36m(pid=52074)[0m     @     0x7f87bda79d91 at::TensorIterator::for_each()
[2m[36m(pid=52074)[0m     @     0x7f87be35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52074)[0m     @     0x7f87be37fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52074)[0m     @     0x7f87bd821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52074)[0m     @     0x7f87bd81f388 at::native::copy_impl()
[2m[36m(pid=52074)[0m     @     0x7f87bd8215a4 at::native::copy_()
[2m[36m(pid=51996)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=51996)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=51996)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=51996)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51996)[0m *** SIGSEGV (@0x0) received by PID 51996 (TID 0x7fd043afb700) from PID 0; stack trace: ***
[2m[36m(pid=51996)[0m     @     0x7fd0436d4390 (unknown)
[2m[36m(pid=51996)[0m     @     0x7fa14361ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51996)[0m     @     0x7fa142d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51996)[0m     @     0x7fa142d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51996)[0m     @     0x7fa142d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=51996)[0m     @     0x7fa142d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=51996)[0m     @     0x7fa143630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51996)[0m     @     0x7fa143653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51996)[0m     @     0x7fa142af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51996)[0m     @     0x7fa142af3388 at::native::copy_impl()
[2m[36m(pid=51996)[0m     @     0x7fa142af55a4 at::native::copy_()
[2m[36m(pid=52044)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52044)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52044)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52044)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52044)[0m *** SIGSEGV (@0x0) received by PID 52044 (TID 0x7f020ec4a700) from PID 0; stack trace: ***
[2m[36m(pid=52044)[0m     @     0x7f020e823390 (unknown)
[2m[36m(pid=52044)[0m     @     0x7ed30e7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52044)[0m     @     0x7ed30dee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52044)[0m     @     0x7ed30dee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52044)[0m     @     0x7ed30dee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=52044)[0m     @     0x7ed30dee9d91 at::TensorIterator::for_each()
[2m[36m(pid=52044)[0m     @     0x7ed30e7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52044)[0m     @     0x7ed30e7efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52044)[0m     @     0x7ed30dc91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52044)[0m     @     0x7ed30dc8f388 at::native::copy_impl()
[2m[36m(pid=52008)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52008)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52008)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52008)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52008)[0m *** SIGSEGV (@0x0) received by PID 52008 (TID 0x7fef74a64700) from PID 0; stack trace: ***
[2m[36m(pid=52008)[0m     @     0x7fef7463d390 (unknown)
[2m[36m(pid=52008)[0m     @     0x7fc0745e1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52008)[0m     @     0x7fc073d0c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52008)[0m     @     0x7fc073d0f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52008)[0m     @     0x7fc073d0fad3 at::TensorIterator::for_each()
[2m[36m(pid=52008)[0m     @     0x7fc073d0fd91 at::TensorIterator::for_each()
[2m[36m(pid=52008)[0m     @     0x7fc0745f2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52008)[0m     @     0x7fc074615c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52116)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52116)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52116)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52116)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52116)[0m *** SIGSEGV (@0x0) received by PID 52116 (TID 0x7fd2c5690700) from PID 0; stack trace: ***
[2m[36m(pid=52116)[0m     @     0x7fd2c5269390 (unknown)
[2m[36m(pid=52116)[0m     @     0x7fa3c50b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52116)[0m     @     0x7fa3c47e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52116)[0m     @     0x7fa3c47e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52116)[0m     @     0x7fa3c47e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=52116)[0m     @     0x7fa3c47e3d91 at::TensorIterator::for_each()
[2m[36m(pid=52116)[0m     @     0x7fa3c50c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52116)[0m     @     0x7fa3c50e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52116)[0m     @     0x7fa3c458ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52116)[0m     @     0x7fa3c4589388 at::native::copy_impl()
[2m[36m(pid=52090)[0m     @     0x7f9023630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52090)[0m     @     0x7f9023653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52090)[0m     @     0x7f9022af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52090)[0m     @     0x7f9022af3388 at::native::copy_impl()
[2m[36m(pid=52090)[0m     @     0x7f9022af55a4 at::native::copy_()
[2m[36m(pid=52090)[0m     @     0x7f90231e04f5 at::Tensor::copy_()
[2m[36m(pid=52084)[0m     @     0x7fac036bfb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52084)[0m     @     0x7fac036e2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52084)[0m     @     0x7fac02b84a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52084)[0m     @     0x7fac02b82388 at::native::copy_impl()
[2m[36m(pid=52084)[0m     @     0x7fac02b845a4 at::native::copy_()
[2m[36m(pid=52084)[0m     @     0x7fac0326f4f5 at::Tensor::copy_()
[2m[36m(pid=52100)[0m     @     0x7fadd745ad91 at::TensorIterator::for_each()
[2m[36m(pid=52100)[0m     @     0x7fadd7d3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52100)[0m     @     0x7fadd7d60c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52100)[0m     @     0x7fadd7202a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52100)[0m     @     0x7fadd7200388 at::native::copy_impl()
[2m[36m(pid=52094)[0m     @     0x7f7698425a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52094)[0m     @     0x7f7698423388 at::native::copy_impl()
[2m[36m(pid=52094)[0m     @     0x7f76984255a4 at::native::copy_()
[2m[36m(pid=52094)[0m     @     0x7f7698b104f5 at::Tensor::copy_()
[2m[36m(pid=52105)[0m     @     0x7ed0e9e38ad3 at::TensorIterator::for_each()
[2m[36m(pid=52105)[0m     @     0x7ed0e9e38d91 at::TensorIterator::for_each()
[2m[36m(pid=52105)[0m     @     0x7ed0ea71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52105)[0m     @     0x7ed0ea73ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52105)[0m     @     0x7ed0e9be0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52105)[0m     @     0x7ed0e9bde388 at::native::copy_impl()
[2m[36m(pid=51999)[0m     @     0x7f747ff66d91 at::TensorIterator::for_each()
[2m[36m(pid=51999)[0m     @     0x7f7480849b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51999)[0m     @     0x7f748086cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51999)[0m     @     0x7f747fd0ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51999)[0m     @     0x7f747fd0c388 at::native::copy_impl()
[2m[36m(pid=52007)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52007)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52007)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52007)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52007)[0m *** SIGSEGV (@0x0) received by PID 52007 (TID 0x7fe587811700) from PID 0; stack trace: ***
[2m[36m(pid=52007)[0m     @     0x7fe5873ea390 (unknown)
[2m[36m(pid=52007)[0m     @     0x7fb687229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52007)[0m     @     0x7fb6869547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52104)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52104)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52104)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52104)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52104)[0m *** SIGSEGV (@0x0) received by PID 52104 (TID 0x7f043bfc9700) from PID 0; stack trace: ***
[2m[36m(pid=51998)[0m     @     0x7f6f4f65dad3 at::TensorIterator::for_each()
[2m[36m(pid=51998)[0m     @     0x7f6f4f65dd91 at::TensorIterator::for_each()
[2m[36m(pid=51998)[0m     @     0x7f6f4ff40b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51998)[0m     @     0x7f6f4ff63c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52057)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52057)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52057)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52057)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52057)[0m *** SIGSEGV (@0x0) received by PID 52057 (TID 0x7f088a5de700) from PID 0; stack trace: ***
[2m[36m(pid=52057)[0m     @     0x7f088a1b7390 (unknown)
[2m[36m(pid=52056)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52056)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52056)[0m *** Aborted at 1604573188 (unix time) try "date -d @1604573188" if you are using GNU date ***
[2m[36m(pid=52056)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52056)[0m *** SIGSEGV (@0x0) received by PID 52056 (TID 0x7f2fe0583700) from PID 0; stack trace: ***
[2m[36m(pid=52056)[0m     @     0x7f2fe015c390 (unknown)
[2m[36m(pid=52056)[0m     @     0x7f00e00cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52056)[0m     @     0x7f00df7f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52056)[0m     @     0x7f00df7fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52077)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52077)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52077)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52077)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52077)[0m *** SIGSEGV (@0x0) received by PID 52077 (TID 0x7f681baff700) from PID 0; stack trace: ***
[2m[36m(pid=52077)[0m     @     0x7f681b6d8390 (unknown)
[2m[36m(pid=52048)[0m     @     0x7fbe98f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=52048)[0m     @     0x7fbe98f27d91 at::TensorIterator::for_each()
[2m[36m(pid=52048)[0m     @     0x7fbe9980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52048)[0m     @     0x7fbe9982dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52068)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52068)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52068)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52068)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52068)[0m *** SIGSEGV (@0x0) received by PID 52068 (TID 0x7f60946f2700) from PID 0; stack trace: ***
[2m[36m(pid=52068)[0m     @     0x7f60942cb390 (unknown)
[2m[36m(pid=52068)[0m     @     0x7f3194286f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52068)[0m     @     0x7f31939b17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52073)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52073)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52073)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52060)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52060)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52060)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52060)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52060)[0m *** SIGSEGV (@0x0) received by PID 52060 (TID 0x7f9e2a9ae700) from PID 0; stack trace: ***
[2m[36m(pid=52060)[0m     @     0x7f9e2a587390 (unknown)
[2m[36m(pid=52016)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52016)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52016)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52016)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52016)[0m *** SIGSEGV (@0x0) received by PID 52016 (TID 0x7ff983625700) from PID 0; stack trace: ***
[2m[36m(pid=52016)[0m     @     0x7ff9831fe390 (unknown)
[2m[36m(pid=52081)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52081)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52081)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52081)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52081)[0m *** SIGSEGV (@0x0) received by PID 52081 (TID 0x7f979aadd700) from PID 0; stack trace: ***
[2m[36m(pid=52081)[0m     @     0x7f979a6b6390 (unknown)
[2m[36m(pid=52081)[0m     @     0x7f689a4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52081)[0m     @     0x7f6899c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52053)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52053)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52053)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52053)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52053)[0m *** SIGSEGV (@0x0) received by PID 52053 (TID 0x7fe5a8fae700) from PID 0; stack trace: ***
[2m[36m(pid=52053)[0m     @     0x7fe5a8b87390 (unknown)
[2m[36m(pid=52053)[0m     @     0x7fb6a8a36f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51997)[0m     @     0x7fbdeba0cad3 at::TensorIterator::for_each()
[2m[36m(pid=51997)[0m     @     0x7fbdeba0cd91 at::TensorIterator::for_each()
[2m[36m(pid=51997)[0m     @     0x7fbdec2efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51997)[0m     @     0x7fbdec312c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52102)[0m     @     0x7f966e14fd91 at::TensorIterator::for_each()
[2m[36m(pid=52102)[0m     @     0x7f966ea32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52102)[0m     @     0x7f966ea55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52102)[0m     @     0x7f966def7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52102)[0m     @     0x7f966def5388 at::native::copy_impl()
[2m[36m(pid=52009)[0m     @     0x7f4d08164ad3 at::TensorIterator::for_each()
[2m[36m(pid=52009)[0m     @     0x7f4d08164d91 at::TensorIterator::for_each()
[2m[36m(pid=52009)[0m     @     0x7f4d08a47b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52009)[0m     @     0x7f4d08a6ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52009)[0m     @     0x7f4d07f0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52009)[0m     @     0x7f4d07f0a388 at::native::copy_impl()
[2m[36m(pid=52058)[0m     @     0x7f66ebc8fad3 at::TensorIterator::for_each()
[2m[36m(pid=52058)[0m     @     0x7f66ebc8fd91 at::TensorIterator::for_each()
[2m[36m(pid=52058)[0m     @     0x7f66ec572b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52058)[0m     @     0x7f66ec595c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52058)[0m     @     0x7f66eba37a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52058)[0m     @     0x7f66eba35388 at::native::copy_impl()
[2m[36m(pid=52103)[0m     @     0x7f42bad92c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52103)[0m     @     0x7f42ba234a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52103)[0m     @     0x7f42ba232388 at::native::copy_impl()
[2m[36m(pid=52103)[0m     @     0x7f42ba2345a4 at::native::copy_()
[2m[36m(pid=52103)[0m     @     0x7f42ba91f4f5 at::Tensor::copy_()
[2m[36m(pid=52064)[0m     @     0x7fa0b1a79d91 at::TensorIterator::for_each()
[2m[36m(pid=52064)[0m     @     0x7fa0b235cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52064)[0m     @     0x7fa0b237fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52064)[0m     @     0x7fa0b1821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52064)[0m     @     0x7fa0b181f388 at::native::copy_impl()
[2m[36m(pid=52064)[0m     @     0x7fa0b18215a4 at::native::copy_()
[2m[36m(pid=52059)[0m     @     0x7f8a6e2c6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52059)[0m     @     0x7f8a6e2c4388 at::native::copy_impl()
[2m[36m(pid=52059)[0m     @     0x7f8a6e2c65a4 at::native::copy_()
[2m[36m(pid=52059)[0m     @     0x7f8a6e9b14f5 at::Tensor::copy_()
[2m[36m(pid=52059)[0m     @     0x7f8a70e848de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51993)[0m     @     0x7fa360492ad3 at::TensorIterator::for_each()
[2m[36m(pid=51993)[0m     @     0x7fa360492d91 at::TensorIterator::for_each()
[2m[36m(pid=51993)[0m     @     0x7fa360d75b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51993)[0m     @     0x7fa360d98c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51993)[0m     @     0x7fa36023aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51993)[0m     @     0x7fa360238388 at::native::copy_impl()
[2m[36m(pid=52052)[0m     @     0x7ee5b35e4ad3 at::TensorIterator::for_each()
[2m[36m(pid=52052)[0m     @     0x7ee5b35e4d91 at::TensorIterator::for_each()
[2m[36m(pid=52052)[0m     @     0x7ee5b3ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52052)[0m     @     0x7ee5b3eeac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52052)[0m     @     0x7ee5b338ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52052)[0m     @     0x7ee5b338a388 at::native::copy_impl()
[2m[36m(pid=52000)[0m     @     0x7ef2c7c91ad3 at::TensorIterator::for_each()
[2m[36m(pid=52000)[0m     @     0x7ef2c7c91d91 at::TensorIterator::for_each()
[2m[36m(pid=52000)[0m     @     0x7ef2c8574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52000)[0m     @     0x7ef2c8597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52000)[0m     @     0x7ef2c7a39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52000)[0m     @     0x7ef2c7a37388 at::native::copy_impl()
[2m[36m(pid=52051)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52051)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52051)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52051)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52051)[0m *** SIGSEGV (@0x0) received by PID 52051 (TID 0x7f1fbf4e6700) from PID 0; stack trace: ***
[2m[36m(pid=52051)[0m     @     0x7f1fbf0bf390 (unknown)
[2m[36m(pid=52051)[0m     @     0x7ef0bf037f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52051)[0m     @     0x7ef0be7627db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52095)[0m     @     0x7f43f9ee9d91 at::TensorIterator::for_each()
[2m[36m(pid=52095)[0m     @     0x7f43fa7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52095)[0m     @     0x7f43fa7efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52095)[0m     @     0x7f43f9c91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52095)[0m     @     0x7f43f9c8f388 at::native::copy_impl()
[2m[36m(pid=52095)[0m     @     0x7f43f9c915a4 at::native::copy_()
[2m[36m(pid=52095)[0m     @     0x7f43fa37c4f5 at::Tensor::copy_()
[2m[36m(pid=52114)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52114)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52114)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52114)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52114)[0m *** SIGSEGV (@0x0) received by PID 52114 (TID 0x7f7845dec700) from PID 0; stack trace: ***
[2m[36m(pid=52114)[0m     @     0x7f78459c5390 (unknown)
[2m[36m(pid=52114)[0m     @     0x7f49457f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52114)[0m     @     0x7f4944f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51986)[0m     @     0x7f73d1138ad3 at::TensorIterator::for_each()
[2m[36m(pid=51986)[0m     @     0x7f73d1138d91 at::TensorIterator::for_each()
[2m[36m(pid=51986)[0m     @     0x7f73d1a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51986)[0m     @     0x7f73d1a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51986)[0m     @     0x7f73d0ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51986)[0m     @     0x7f73d0ede388 at::native::copy_impl()
[2m[36m(pid=51986)[0m     @     0x7f73d0ee05a4 at::native::copy_()
[2m[36m(pid=52098)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52098)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52098)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52098)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52098)[0m *** SIGSEGV (@0x0) received by PID 52098 (TID 0x7f4788292700) from PID 0; stack trace: ***
[2m[36m(pid=52006)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52006)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52006)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52006)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52006)[0m *** SIGSEGV (@0x0) received by PID 52006 (TID 0x7f4fd145f700) from PID 0; stack trace: ***
[2m[36m(pid=52006)[0m     @     0x7f4fd1038390 (unknown)
[2m[36m(pid=52006)[0m     @     0x7f20d0f4ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52006)[0m     @     0x7f20d067a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52093)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52093)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52093)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52093)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52093)[0m *** SIGSEGV (@0x0) received by PID 52093 (TID 0x7f57ec262700) from PID 0; stack trace: ***
[2m[36m(pid=52093)[0m     @     0x7f57ebe3b390 (unknown)
[2m[36m(pid=52093)[0m     @     0x7f28eb9c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52093)[0m     @     0x7f28eb0f07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51994)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51994)[0m *** SIGSEGV (@0x0) received by PID 51994 (TID 0x7fe42a1e7700) from PID 0; stack trace: ***
[2m[36m(pid=51994)[0m     @     0x7fe429dc0390 (unknown)
[2m[36m(pid=51994)[0m     @     0x7fb529d52f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51994)[0m     @     0x7fb52947d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51994)[0m     @     0x7fb5294808f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51994)[0m     @     0x7fb529480ad3 at::TensorIterator::for_each()
[2m[36m(pid=52049)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52049)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52049)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52049)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52049)[0m *** SIGSEGV (@0x0) received by PID 52049 (TID 0x7ffa4122b700) from PID 0; stack trace: ***
[2m[36m(pid=52049)[0m     @     0x7ffa40e04390 (unknown)
[2m[36m(pid=52062)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52062)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52062)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52062)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52062)[0m *** SIGSEGV (@0x0) received by PID 52062 (TID 0x7fae89f85700) from PID 0; stack trace: ***
[2m[36m(pid=52062)[0m     @     0x7fae89b5e390 (unknown)
[2m[36m(pid=52062)[0m     @     0x7f7f89a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52062)[0m     @     0x7f7f891357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52062)[0m     @     0x7f7f891388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51989)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51989)[0m *** SIGSEGV (@0x0) received by PID 51989 (TID 0x7f45fc592700) from PID 0; stack trace: ***
[2m[36m(pid=51989)[0m     @     0x7f45fc16b390 (unknown)
[2m[36m(pid=51989)[0m     @     0x7f16fc0cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51989)[0m     @     0x7f16fb7f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51989)[0m     @     0x7f16fb7fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51989)[0m     @     0x7f16fb7fbad3 at::TensorIterator::for_each()
[2m[36m(pid=51989)[0m     @     0x7f16fb7fbd91 at::TensorIterator::for_each()
[2m[36m(pid=51995)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51995)[0m *** SIGSEGV (@0x0) received by PID 51995 (TID 0x7f43bc7ec700) from PID 0; stack trace: ***
[2m[36m(pid=51995)[0m     @     0x7f43bc3c5390 (unknown)
[2m[36m(pid=51995)[0m     @     0x7f14bc333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51995)[0m     @     0x7f14bba5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51995)[0m     @     0x7f14bba618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51995)[0m     @     0x7f14bba61ad3 at::TensorIterator::for_each()
[2m[36m(pid=52020)[0m     @     0x7efa2b151ad3 at::TensorIterator::for_each()
[2m[36m(pid=52020)[0m     @     0x7efa2b151d91 at::TensorIterator::for_each()
[2m[36m(pid=52020)[0m     @     0x7efa2ba34b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52020)[0m     @     0x7efa2ba57c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52020)[0m     @     0x7efa2aef9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52020)[0m     @     0x7efa2aef7388 at::native::copy_impl()
[2m[36m(pid=52015)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52015)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52015)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52015)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52015)[0m *** SIGSEGV (@0x0) received by PID 52015 (TID 0x7f27e3a55700) from PID 0; stack trace: ***
[2m[36m(pid=52015)[0m     @     0x7f27e362e390 (unknown)
[2m[36m(pid=52015)[0m     @     0x7ef8e343af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52015)[0m     @     0x7ef8e2b657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52015)[0m     @     0x7ef8e2b688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52001)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52001)[0m *** SIGSEGV (@0x0) received by PID 52001 (TID 0x7f568c686700) from PID 0; stack trace: ***
[2m[36m(pid=52001)[0m     @     0x7f568c25f390 (unknown)
[2m[36m(pid=52001)[0m     @     0x7f278c01cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52001)[0m     @     0x7f278b7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52001)[0m     @     0x7f278b74a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52001)[0m     @     0x7f278b74aad3 at::TensorIterator::for_each()
[2m[36m(pid=52010)[0m     @     0x7fcc5d552ad3 at::TensorIterator::for_each()
[2m[36m(pid=52010)[0m     @     0x7fcc5d552d91 at::TensorIterator::for_each()
[2m[36m(pid=52010)[0m     @     0x7fcc5de35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52010)[0m     @     0x7fcc5de58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52010)[0m     @     0x7fcc5d2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52010)[0m     @     0x7fcc5d2f8388 at::native::copy_impl()
[2m[36m(pid=52082)[0m     @     0x7f120820c390 (unknown)
[2m[36m(pid=52082)[0m     @     0x7ee30801cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52082)[0m     @     0x7ee3077477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52082)[0m     @     0x7ee30774a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52082)[0m     @     0x7ee30774aad3 at::TensorIterator::for_each()
[2m[36m(pid=52063)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=52063)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=52063)[0m *** Aborted at 1604573189 (unix time) try "date -d @1604573189" if you are using GNU date ***
[2m[36m(pid=52063)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52063)[0m *** SIGSEGV (@0x0) received by PID 52063 (TID 0x7f7cbe81b700) from PID 0; stack trace: ***
[2m[36m(pid=52063)[0m     @     0x7f7cbe3f4390 (unknown)
[2m[36m(pid=52063)[0m     @     0x7f4dbe34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52063)[0m     @     0x7f4dbda767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51985)[0m     @     0x7f4184f27d91 at::TensorIterator::for_each()
[2m[36m(pid=51985)[0m     @     0x7f418580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51985)[0m     @     0x7f418582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51985)[0m     @     0x7f4184ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51985)[0m     @     0x7f4184ccd388 at::native::copy_impl()
[2m[36m(pid=51985)[0m     @     0x7f4184ccf5a4 at::native::copy_()
[2m[36m(pid=51984)[0m PC: @                0x0 (unknown)
[2m[36m(pid=51984)[0m *** SIGSEGV (@0x0) received by PID 51984 (TID 0x7f3a9440a700) from PID 0; stack trace: ***
[2m[36m(pid=51984)[0m     @     0x7f3a93fe3390 (unknown)
[2m[36m(pid=51984)[0m     @     0x7f0b93d2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51984)[0m     @     0x7f0b934577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51984)[0m     @     0x7f0b9345a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51984)[0m     @     0x7f0b9345aad3 at::TensorIterator::for_each()
[2m[36m(pid=51991)[0m *** SIGSEGV (@0x0) received by PID 51991 (TID 0x7f6b44b00700) from PID 0; stack trace: ***
[2m[36m(pid=51991)[0m     @     0x7f6b446d9390 (unknown)
[2m[36m(pid=51991)[0m     @     0x7f3c4467af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51991)[0m     @     0x7f3c43da57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51991)[0m     @     0x7f3c43da88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51991)[0m     @     0x7f3c43da8ad3 at::TensorIterator::for_each()
[2m[36m(pid=52050)[0m     @     0x7edb3f44c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52050)[0m     @     0x7edb3f44cad3 at::TensorIterator::for_each()
[2m[36m(pid=51990)[0m     @     0x7f3106b84a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51990)[0m     @     0x7f3106b82388 at::native::copy_impl()
[2m[36m(pid=51990)[0m     @     0x7f3106b845a4 at::native::copy_()
[2m[36m(pid=52043)[0m     @     0x7ed6cfa39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52043)[0m     @     0x7ed6cfa37388 at::native::copy_impl()
[2m[36m(pid=52043)[0m     @     0x7ed6cfa395a4 at::native::copy_()
[2m[36m(pid=52065)[0m     @     0x7faaa1821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52065)[0m     @     0x7faaa181f388 at::native::copy_impl()
[2m[36m(pid=52065)[0m     @     0x7faaa18215a4 at::native::copy_()
[2m[36m(pid=51983)[0m     @     0x7ed4288f0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51983)[0m     @     0x7ed42801b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51983)[0m     @     0x7ed42801e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51987)[0m     @     0x7f04455d7390 (unknown)
[2m[36m(pid=51987)[0m     @     0x7ed545564f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51987)[0m     @     0x7ed544c8f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51987)[0m     @     0x7ed544c928f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52046)[0m     @     0x7fa1e42b5390 (unknown)
[2m[36m(pid=52046)[0m     @     0x7f72e4250f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52046)[0m     @     0x7f72e397b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52003)[0m     @     0x7f4e45339390 (unknown)
[2m[36m(pid=52003)[0m     @     0x7f1f4528af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52003)[0m     @     0x7f1f449b57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52003)[0m     @     0x7f1f449b88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51981)[0m     @     0x7fb866262390 (unknown)
[2m[36m(pid=51981)[0m     @     0x7f8965f8df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=51981)[0m     @     0x7f89656b87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52011)[0m     @     0x7f427401cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52011)[0m     @     0x7f42737477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52011)[0m     @     0x7f427374a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52115)[0m     @     0x7f5dfaaf55a4 at::native::copy_()
[2m[36m(pid=52115)[0m     @     0x7f5dfb1e04f5 at::Tensor::copy_()
[2m[36m(pid=52115)[0m     @     0x7f5dfd6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52115)[0m     @     0x7f5dfb1e04f5 at::Tensor::copy_()
[2m[36m(pid=52117)[0m     @     0x7efb6c5a94f5 at::Tensor::copy_()
[2m[36m(pid=52117)[0m     @     0x7efb6ea7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52075)[0m     @     0x7ef3253ba4f5 at::Tensor::copy_()
[2m[36m(pid=52075)[0m     @     0x7ef32788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52075)[0m     @     0x7ef3253ba4f5 at::Tensor::copy_()
[2m[36m(pid=52075)[0m     @     0x7ef32b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52075)[0m     @     0x5555aa67cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52075)[0m     @     0x5555aa5d7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52075)[0m     @     0x5555aa662baf _PyEval_EvalCodeWithName
[2m[36m(pid=52075)[0m     @     0x5555aa663a20 method_vectorcall
[2m[36m(pid=52075)[0m     @     0x5555aa5d7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52075)[0m     @     0x5555aa662baf _PyEval_EvalCodeWithName
[2m[36m(pid=52075)[0m     @     0x5555aa663643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52075)[0m     @     0x5555aa5d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52075)[0m     @     0x5555aa662baf _PyEval_EvalCodeWithName
[2m[36m(pid=52075)[0m     @     0x5555aa663643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52075)[0m     @     0x5555aa5d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52075)[0m     @     0x5555aa662baf _PyEval_EvalCodeWithName
[2m[36m(pid=52075)[0m     @     0x5555aa663643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52075)[0m     @     0x5555aa5d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52075)[0m     @     0x5555aa662baf _PyEval_EvalCodeWithName
[2m[36m(pid=52075)[0m     @     0x5555aa663643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52075)[0m     @     0x5555aa5d8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52079)[0m     @     0x7f08ddd905a4 at::native::copy_()
[2m[36m(pid=52079)[0m     @     0x7f08de47b4f5 at::Tensor::copy_()
[2m[36m(pid=52079)[0m     @     0x7f08e094e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52079)[0m     @     0x7f08de47b4f5 at::Tensor::copy_()
[2m[36m(pid=52079)[0m     @     0x7f08e452679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52079)[0m     @     0x55dc2093bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52079)[0m     @     0x55dc20896b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52079)[0m     @     0x55dc20921baf _PyEval_EvalCodeWithName
[2m[36m(pid=52079)[0m     @     0x55dc20922a20 method_vectorcall
[2m[36m(pid=52079)[0m     @     0x55dc20896bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52014)[0m     @     0x7f2e8f5a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52014)[0m     @     0x7f2e8f5a1388 at::native::copy_impl()
[2m[36m(pid=52014)[0m     @     0x7f2e8f5a35a4 at::native::copy_()
[2m[36m(pid=52014)[0m     @     0x7f2e8fc8e4f5 at::Tensor::copy_()
[2m[36m(pid=51982)[0m     @     0x7fc7377875a4 at::native::copy_()
[2m[36m(pid=51982)[0m     @     0x7fc737e724f5 at::Tensor::copy_()
[2m[36m(pid=51982)[0m     @     0x7fc73a3458de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51982)[0m     @     0x7fc737e724f5 at::Tensor::copy_()
[2m[36m(pid=52097)[0m     @     0x7f79c26654f5 at::Tensor::copy_()
[2m[36m(pid=52097)[0m     @     0x7f79c4b388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52097)[0m     @     0x7f79c26654f5 at::Tensor::copy_()
[2m[36m(pid=52097)[0m     @     0x7f79c871079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52097)[0m     @     0x564c9ea31fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52097)[0m     @     0x564c9e98cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52097)[0m     @     0x564c9ea17baf _PyEval_EvalCodeWithName
[2m[36m(pid=52097)[0m     @     0x564c9ea18a20 method_vectorcall
[2m[36m(pid=52097)[0m     @     0x564c9e98cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52097)[0m     @     0x564c9ea17baf _PyEval_EvalCodeWithName
[2m[36m(pid=52097)[0m     @     0x564c9ea18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52097)[0m     @     0x564c9e98d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52097)[0m     @     0x564c9ea17baf _PyEval_EvalCodeWithName
[2m[36m(pid=52097)[0m     @     0x564c9ea18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52097)[0m     @     0x564c9e98d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52097)[0m     @     0x564c9ea17baf _PyEval_EvalCodeWithName
[2m[36m(pid=52097)[0m     @     0x564c9ea18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52097)[0m     @     0x564c9e98d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52097)[0m     @     0x564c9ea17baf _PyEval_EvalCodeWithName
[2m[36m(pid=52097)[0m     @     0x564c9ea18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52097)[0m     @     0x564c9e98d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52078)[0m     @     0x7ef380bb58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52078)[0m     @     0x7ef37e6e24f5 at::Tensor::copy_()
[2m[36m(pid=52078)[0m     @     0x7ef38478d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52078)[0m     @     0x5600c6264fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52078)[0m     @     0x5600c61bfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52078)[0m     @     0x5600c624abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52078)[0m     @     0x5600c624ba20 method_vectorcall
[2m[36m(pid=52078)[0m     @     0x5600c61bfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52078)[0m     @     0x5600c624abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52078)[0m     @     0x5600c624b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52078)[0m     @     0x5600c61c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52078)[0m     @     0x5600c624abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52078)[0m     @     0x5600c624b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52078)[0m     @     0x5600c61c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52078)[0m     @     0x5600c624abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52078)[0m     @     0x5600c624b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52078)[0m     @     0x5600c61c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52078)[0m     @     0x5600c624abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52078)[0m     @     0x5600c624b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52078)[0m     @     0x5600c61c0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52072)[0m     @     0x7f322d60e388 at::native::copy_impl()
[2m[36m(pid=52072)[0m     @     0x7f322d6105a4 at::native::copy_()
[2m[36m(pid=52072)[0m     @     0x7f322dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=52072)[0m     @     0x7f32301ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52107)[0m     @     0x7f08a6f388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52107)[0m     @     0x7f08a4a654f5 at::Tensor::copy_()
[2m[36m(pid=52107)[0m     @     0x7f08aab1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52107)[0m     @     0x564028b80fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52107)[0m     @     0x564028adbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52107)[0m     @     0x564028b66baf _PyEval_EvalCodeWithName
[2m[36m(pid=52107)[0m     @     0x564028b67a20 method_vectorcall
[2m[36m(pid=52107)[0m     @     0x564028adbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52107)[0m     @     0x564028b66baf _PyEval_EvalCodeWithName
[2m[36m(pid=52107)[0m     @     0x564028b67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52107)[0m     @     0x564028adc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52107)[0m     @     0x564028b66baf _PyEval_EvalCodeWithName
[2m[36m(pid=52107)[0m     @     0x564028b67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52107)[0m     @     0x564028adc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52107)[0m     @     0x564028b66baf _PyEval_EvalCodeWithName
[2m[36m(pid=52107)[0m     @     0x564028b67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52107)[0m     @     0x564028adc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52107)[0m     @     0x564028b66baf _PyEval_EvalCodeWithName
[2m[36m(pid=52107)[0m     @     0x564028b67643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52107)[0m     @     0x564028adc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52111)[0m     @     0x7f96c68b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52111)[0m     @     0x7f96c43e64f5 at::Tensor::copy_()
[2m[36m(pid=52111)[0m     @     0x7f96ca49179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52111)[0m     @     0x55e8dae9dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52111)[0m     @     0x55e8dadf8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52111)[0m     @     0x55e8dae83baf _PyEval_EvalCodeWithName
[2m[36m(pid=52111)[0m     @     0x55e8dae84a20 method_vectorcall
[2m[36m(pid=52111)[0m     @     0x55e8dadf8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52111)[0m     @     0x55e8dae83baf _PyEval_EvalCodeWithName
[2m[36m(pid=52111)[0m     @     0x55e8dae84643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52111)[0m     @     0x55e8dadf9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52111)[0m     @     0x55e8dae83baf _PyEval_EvalCodeWithName
[2m[36m(pid=52111)[0m     @     0x55e8dae84643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52111)[0m     @     0x55e8dadf9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52111)[0m     @     0x55e8dae83baf _PyEval_EvalCodeWithName
[2m[36m(pid=52111)[0m     @     0x55e8dae84643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52111)[0m     @     0x55e8dadf9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52111)[0m     @     0x55e8dae83baf _PyEval_EvalCodeWithName
[2m[36m(pid=52111)[0m     @     0x55e8dae84643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52111)[0m     @     0x55e8dadf9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52092)[0m     @     0x7f0f183354f5 at::Tensor::copy_()
[2m[36m(pid=52092)[0m     @     0x7f0f1a8088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52092)[0m     @     0x7f0f183354f5 at::Tensor::copy_()
[2m[36m(pid=52092)[0m     @     0x7f0f1e3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52092)[0m     @     0x55e4a808bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52092)[0m     @     0x55e4a7fe6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52092)[0m     @     0x55e4a8071baf _PyEval_EvalCodeWithName
[2m[36m(pid=52092)[0m     @     0x55e4a8072a20 method_vectorcall
[2m[36m(pid=52092)[0m     @     0x55e4a7fe6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52092)[0m     @     0x55e4a8071baf _PyEval_EvalCodeWithName
[2m[36m(pid=52092)[0m     @     0x55e4a8072643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52092)[0m     @     0x55e4a7fe7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52092)[0m     @     0x55e4a8071baf _PyEval_EvalCodeWithName
[2m[36m(pid=52092)[0m     @     0x55e4a8072643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52092)[0m     @     0x55e4a7fe7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52092)[0m     @     0x55e4a8071baf _PyEval_EvalCodeWithName
[2m[36m(pid=52092)[0m     @     0x55e4a8072643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52092)[0m     @     0x55e4a7fe7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52092)[0m     @     0x55e4a8071baf _PyEval_EvalCodeWithName
[2m[36m(pid=52092)[0m     @     0x55e4a8072643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52092)[0m     @     0x55e4a7fe7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52055)[0m     @     0x7f2a205fb8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52055)[0m     @     0x7f2a1e1284f5 at::Tensor::copy_()
[2m[36m(pid=52055)[0m     @     0x7f2a241d379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52055)[0m     @     0x55c7e6aaefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52055)[0m     @     0x55c7e6a09b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52055)[0m     @     0x55c7e6a94baf _PyEval_EvalCodeWithName
[2m[36m(pid=52055)[0m     @     0x55c7e6a95a20 method_vectorcall
[2m[36m(pid=52055)[0m     @     0x55c7e6a09bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52055)[0m     @     0x55c7e6a94baf _PyEval_EvalCodeWithName
[2m[36m(pid=52055)[0m     @     0x55c7e6a95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52055)[0m     @     0x55c7e6a0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52055)[0m     @     0x55c7e6a94baf _PyEval_EvalCodeWithName
[2m[36m(pid=52055)[0m     @     0x55c7e6a95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52055)[0m     @     0x55c7e6a0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52055)[0m     @     0x55c7e6a94baf _PyEval_EvalCodeWithName
[2m[36m(pid=52055)[0m     @     0x55c7e6a95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52055)[0m     @     0x55c7e6a0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52055)[0m     @     0x55c7e6a94baf _PyEval_EvalCodeWithName
[2m[36m(pid=52055)[0m     @     0x55c7e6a95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52055)[0m     @     0x55c7e6a0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52054)[0m     @     0x7f6c36ad44f5 at::Tensor::copy_()
[2m[36m(pid=52054)[0m     @     0x7f6c3cb7f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52054)[0m     @     0x55cf46231fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52054)[0m     @     0x55cf4618cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52054)[0m     @     0x55cf46217baf _PyEval_EvalCodeWithName
[2m[36m(pid=52054)[0m     @     0x55cf46218a20 method_vectorcall
[2m[36m(pid=52054)[0m     @     0x55cf4618cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52054)[0m     @     0x55cf46217baf _PyEval_EvalCodeWithName
[2m[36m(pid=52054)[0m     @     0x55cf46218643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52054)[0m     @     0x55cf4618d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52054)[0m     @     0x55cf46217baf _PyEval_EvalCodeWithName
[2m[36m(pid=52054)[0m     @     0x55cf46218643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52054)[0m     @     0x55cf4618d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52054)[0m     @     0x55cf46217baf _PyEval_EvalCodeWithName
[2m[36m(pid=52054)[0m     @     0x55cf46218643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52054)[0m     @     0x55cf4618d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52054)[0m     @     0x55cf46217baf _PyEval_EvalCodeWithName
[2m[36m(pid=52054)[0m     @     0x55cf46218643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52054)[0m     @     0x55cf4618d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52074)[0m     @     0x7f87bdf0c4f5 at::Tensor::copy_()
[2m[36m(pid=52074)[0m     @     0x7f87c03df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52074)[0m     @     0x7f87bdf0c4f5 at::Tensor::copy_()
[2m[36m(pid=52074)[0m     @     0x7f87c3fb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52074)[0m     @     0x5579e3354fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52074)[0m     @     0x5579e32afb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52074)[0m     @     0x5579e333abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52074)[0m     @     0x5579e333ba20 method_vectorcall
[2m[36m(pid=52074)[0m     @     0x5579e32afbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52074)[0m     @     0x5579e333abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52074)[0m     @     0x5579e333b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52074)[0m     @     0x5579e32b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52074)[0m     @     0x5579e333abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52074)[0m     @     0x5579e333b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52074)[0m     @     0x5579e32b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52074)[0m     @     0x5579e333abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52074)[0m     @     0x5579e333b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52074)[0m     @     0x5579e32b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52074)[0m     @     0x5579e333abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52074)[0m     @     0x5579e333b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52074)[0m     @     0x5579e32b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51996)[0m     @     0x7fa1431e04f5 at::Tensor::copy_()
[2m[36m(pid=51996)[0m     @     0x7fa1456b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51996)[0m     @     0x7fa1431e04f5 at::Tensor::copy_()
[2m[36m(pid=51996)[0m     @     0x7fa14928b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51996)[0m     @     0x5652f3199fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51996)[0m     @     0x5652f30f4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51996)[0m     @     0x5652f317fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51996)[0m     @     0x5652f3180a20 method_vectorcall
[2m[36m(pid=51996)[0m     @     0x5652f30f4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51996)[0m     @     0x5652f317fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51996)[0m     @     0x5652f3180643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51996)[0m     @     0x5652f30f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51996)[0m     @     0x5652f317fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51996)[0m     @     0x5652f3180643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51996)[0m     @     0x5652f30f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51996)[0m     @     0x5652f317fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51996)[0m     @     0x5652f3180643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51996)[0m     @     0x5652f30f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51996)[0m     @     0x5652f317fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51996)[0m     @     0x5652f3180643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51996)[0m     @     0x5652f30f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52044)[0m     @     0x7ed30dc915a4 at::native::copy_()
[2m[36m(pid=52044)[0m     @     0x7ed30e37c4f5 at::Tensor::copy_()
[2m[36m(pid=52044)[0m     @     0x7ed31084f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52044)[0m     @     0x7ed30e37c4f5 at::Tensor::copy_()
[2m[36m(pid=52044)[0m     @     0x7ed31442779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52044)[0m     @     0x558cd833ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52044)[0m     @     0x558cd829ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52044)[0m     @     0x558cd8325baf _PyEval_EvalCodeWithName
[2m[36m(pid=52044)[0m     @     0x558cd8326a20 method_vectorcall
[2m[36m(pid=52044)[0m     @     0x558cd829abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52044)[0m     @     0x558cd8325baf _PyEval_EvalCodeWithName
[2m[36m(pid=52044)[0m     @     0x558cd8326643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52044)[0m     @     0x558cd829b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52044)[0m     @     0x558cd8325baf _PyEval_EvalCodeWithName
[2m[36m(pid=52044)[0m     @     0x558cd8326643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52008)[0m     @     0x7fc073ab7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52008)[0m     @     0x7fc073ab5388 at::native::copy_impl()
[2m[36m(pid=52008)[0m     @     0x7fc073ab75a4 at::native::copy_()
[2m[36m(pid=52008)[0m     @     0x7fc0741a24f5 at::Tensor::copy_()
[2m[36m(pid=52116)[0m     @     0x7fa3c458b5a4 at::native::copy_()
[2m[36m(pid=52116)[0m     @     0x7fa3c4c764f5 at::Tensor::copy_()
[2m[36m(pid=52116)[0m     @     0x7fa3c71498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52116)[0m     @     0x7fa3c4c764f5 at::Tensor::copy_()
[2m[36m(pid=52116)[0m     @     0x7fa3cad2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52116)[0m     @     0x55814f4cafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52116)[0m     @     0x55814f425b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52116)[0m     @     0x55814f4b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=52116)[0m     @     0x55814f4b1a20 method_vectorcall
[2m[36m(pid=52090)[0m     @     0x7f90256b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52090)[0m     @     0x7f90231e04f5 at::Tensor::copy_()
[2m[36m(pid=52090)[0m     @     0x7f902928b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52090)[0m     @     0x5633c9275fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52090)[0m     @     0x5633c91d0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52090)[0m     @     0x5633c925bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52090)[0m     @     0x5633c925ca20 method_vectorcall
[2m[36m(pid=52090)[0m     @     0x5633c91d0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52090)[0m     @     0x5633c925bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52090)[0m     @     0x5633c925c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52090)[0m     @     0x5633c91d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52090)[0m     @     0x5633c925bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52090)[0m     @     0x5633c925c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52090)[0m     @     0x5633c91d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52090)[0m     @     0x5633c925bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52090)[0m     @     0x5633c925c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52090)[0m     @     0x5633c91d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52090)[0m     @     0x5633c925bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52090)[0m     @     0x5633c925c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52090)[0m     @     0x5633c91d1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52084)[0m     @     0x7fac057428de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52084)[0m     @     0x7fac0326f4f5 at::Tensor::copy_()
[2m[36m(pid=52084)[0m     @     0x7fac0931a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52084)[0m     @     0x55c6ac982fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52084)[0m     @     0x55c6ac8ddb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52084)[0m     @     0x55c6ac968baf _PyEval_EvalCodeWithName
[2m[36m(pid=52084)[0m     @     0x55c6ac969a20 method_vectorcall
[2m[36m(pid=52084)[0m     @     0x55c6ac8ddbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52084)[0m     @     0x55c6ac968baf _PyEval_EvalCodeWithName
[2m[36m(pid=52084)[0m     @     0x55c6ac969643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52084)[0m     @     0x55c6ac8de689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52084)[0m     @     0x55c6ac968baf _PyEval_EvalCodeWithName
[2m[36m(pid=52084)[0m     @     0x55c6ac969643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52084)[0m     @     0x55c6ac8de689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52084)[0m     @     0x55c6ac968baf _PyEval_EvalCodeWithName
[2m[36m(pid=52084)[0m     @     0x55c6ac969643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52084)[0m     @     0x55c6ac8de689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52084)[0m     @     0x55c6ac968baf _PyEval_EvalCodeWithName
[2m[36m(pid=52084)[0m     @     0x55c6ac969643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52084)[0m     @     0x55c6ac8de689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52100)[0m     @     0x7fadd72025a4 at::native::copy_()
[2m[36m(pid=52100)[0m     @     0x7fadd78ed4f5 at::Tensor::copy_()
[2m[36m(pid=52100)[0m     @     0x7fadd9dc08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52100)[0m     @     0x7fadd78ed4f5 at::Tensor::copy_()
[2m[36m(pid=52100)[0m     @     0x7faddd99879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52100)[0m     @     0x5603380ccfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52100)[0m     @     0x560338027b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52100)[0m     @     0x5603380b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52100)[0m     @     0x5603380b3a20 method_vectorcall
[2m[36m(pid=52094)[0m     @     0x7f769afe38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52094)[0m     @     0x7f7698b104f5 at::Tensor::copy_()
[2m[36m(pid=52094)[0m     @     0x7f769ebbb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52094)[0m     @     0x561018241fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52094)[0m     @     0x56101819cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52094)[0m     @     0x561018227baf _PyEval_EvalCodeWithName
[2m[36m(pid=52094)[0m     @     0x561018228a20 method_vectorcall
[2m[36m(pid=52094)[0m     @     0x56101819cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52094)[0m     @     0x561018227baf _PyEval_EvalCodeWithName
[2m[36m(pid=52094)[0m     @     0x561018228643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52094)[0m     @     0x56101819d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52094)[0m     @     0x561018227baf _PyEval_EvalCodeWithName
[2m[36m(pid=52094)[0m     @     0x561018228643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52094)[0m     @     0x56101819d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52094)[0m     @     0x561018227baf _PyEval_EvalCodeWithName
[2m[36m(pid=52094)[0m     @     0x561018228643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52094)[0m     @     0x56101819d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52094)[0m     @     0x561018227baf _PyEval_EvalCodeWithName
[2m[36m(pid=52094)[0m     @     0x561018228643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52094)[0m     @     0x56101819d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52105)[0m     @     0x7ed0e9be05a4 at::native::copy_()
[2m[36m(pid=52105)[0m     @     0x7ed0ea2cb4f5 at::Tensor::copy_()
[2m[36m(pid=52105)[0m     @     0x7ed0ec79e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51999)[0m     @     0x7f747fd0e5a4 at::native::copy_()
[2m[36m(pid=51999)[0m     @     0x7f74803f94f5 at::Tensor::copy_()
[2m[36m(pid=51999)[0m     @     0x7f74828cc8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51999)[0m     @     0x7f74803f94f5 at::Tensor::copy_()
[2m[36m(pid=51999)[0m     @     0x7f74864a479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51999)[0m     @     0x5641894fafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51999)[0m     @     0x564189455b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51999)[0m     @     0x5641894e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=51999)[0m     @     0x5641894e1a20 method_vectorcall
[2m[36m(pid=51999)[0m     @     0x564189455bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51999)[0m     @     0x5641894e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=51999)[0m     @     0x5641894e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51999)[0m     @     0x564189456689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51999)[0m     @     0x5641894e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=51999)[0m     @     0x5641894e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51999)[0m     @     0x564189456689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51999)[0m     @     0x5641894e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=51999)[0m     @     0x5641894e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51999)[0m     @     0x564189456689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51999)[0m     @     0x5641894e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=51999)[0m     @     0x5641894e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51999)[0m     @     0x564189456689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52007)[0m     @     0x7fb6869578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52007)[0m     @     0x7fb686957ad3 at::TensorIterator::for_each()
[2m[36m(pid=52007)[0m     @     0x7fb686957d91 at::TensorIterator::for_each()
[2m[36m(pid=52007)[0m     @     0x7fb68723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52007)[0m     @     0x7fb68725dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52104)[0m     @     0x7f043bba2390 (unknown)
[2m[36m(pid=52104)[0m     @     0x7ed53b9c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52104)[0m     @     0x7ed53b0f07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=51998)[0m     @     0x7f6f4f405a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51998)[0m     @     0x7f6f4f403388 at::native::copy_impl()
[2m[36m(pid=51998)[0m     @     0x7f6f4f4055a4 at::native::copy_()
[2m[36m(pid=51998)[0m     @     0x7f6f4faf04f5 at::Tensor::copy_()
[2m[36m(pid=51998)[0m     @     0x7f6f51fc38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52057)[0m     @     0x7ed98a13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52057)[0m     @     0x7ed9898657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52057)[0m     @     0x7ed9898688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52057)[0m     @     0x7ed989868ad3 at::TensorIterator::for_each()
[2m[36m(pid=52057)[0m     @     0x7ed989868d91 at::TensorIterator::for_each()
[2m[36m(pid=52056)[0m     @     0x7f00df7fbad3 at::TensorIterator::for_each()
[2m[36m(pid=52056)[0m     @     0x7f00df7fbd91 at::TensorIterator::for_each()
[2m[36m(pid=52056)[0m     @     0x7f00e00deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52056)[0m     @     0x7f00e0101c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52077)[0m     @     0x7f391b681f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52077)[0m     @     0x7f391adac7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52077)[0m     @     0x7f391adaf8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52077)[0m     @     0x7f391adafad3 at::TensorIterator::for_each()
[2m[36m(pid=52077)[0m     @     0x7f391adafd91 at::TensorIterator::for_each()
[2m[36m(pid=52077)[0m     @     0x7f391b692b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52048)[0m     @     0x7fbe98ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52048)[0m     @     0x7fbe98ccd388 at::native::copy_impl()
[2m[36m(pid=52048)[0m     @     0x7fbe98ccf5a4 at::native::copy_()
[2m[36m(pid=52048)[0m     @     0x7fbe993ba4f5 at::Tensor::copy_()
[2m[36m(pid=52048)[0m     @     0x7fbe9b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52068)[0m     @     0x7f31939b48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52068)[0m     @     0x7f31939b4ad3 at::TensorIterator::for_each()
[2m[36m(pid=52068)[0m     @     0x7f31939b4d91 at::TensorIterator::for_each()
[2m[36m(pid=52068)[0m     @     0x7f3194297b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52068)[0m     @     0x7f31942bac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52073)[0m PC: @                0x0 (unknown)
[2m[36m(pid=52073)[0m *** SIGSEGV (@0x0) received by PID 52073 (TID 0x7f95ef3a7700) from PID 0; stack trace: ***
[2m[36m(pid=52073)[0m     @     0x7f95eef80390 (unknown)
[2m[36m(pid=52073)[0m     @     0x7f66eeee6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52060)[0m     @     0x7f6f2a4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52060)[0m     @     0x7f6f29c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52060)[0m     @     0x7f6f29c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52016)[0m     @     0x7fca83115f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52016)[0m     @     0x7fca828407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52016)[0m     @     0x7fca828438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52016)[0m     @     0x7fca82843ad3 at::TensorIterator::for_each()
[2m[36m(pid=52016)[0m     @     0x7fca82843d91 at::TensorIterator::for_each()
[2m[36m(pid=52016)[0m     @     0x7fca83126b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52016)[0m     @     0x7fca83149c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52081)[0m     @     0x7f6899c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52081)[0m     @     0x7f6899c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=52053)[0m     @     0x7fb6a81617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52053)[0m     @     0x7fb6a81648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52053)[0m     @     0x7fb6a8164ad3 at::TensorIterator::for_each()
[2m[36m(pid=52053)[0m     @     0x7fb6a8164d91 at::TensorIterator::for_each()
[2m[36m(pid=51997)[0m     @     0x7fbdeb7b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51997)[0m     @     0x7fbdeb7b2388 at::native::copy_impl()
[2m[36m(pid=51997)[0m     @     0x7fbdeb7b45a4 at::native::copy_()
[2m[36m(pid=51997)[0m     @     0x7fbdebe9f4f5 at::Tensor::copy_()
[2m[36m(pid=51997)[0m     @     0x7fbdee3728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52102)[0m     @     0x7f966def75a4 at::native::copy_()
[2m[36m(pid=52102)[0m     @     0x7f966e5e24f5 at::Tensor::copy_()
[2m[36m(pid=52102)[0m     @     0x7f9670ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52102)[0m     @     0x7f966e5e24f5 at::Tensor::copy_()
[2m[36m(pid=52009)[0m     @     0x7f4d07f0c5a4 at::native::copy_()
[2m[36m(pid=52009)[0m     @     0x7f4d085f74f5 at::Tensor::copy_()
[2m[36m(pid=52009)[0m     @     0x7f4d0aaca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52009)[0m     @     0x7f4d085f74f5 at::Tensor::copy_()
[2m[36m(pid=52058)[0m     @     0x7f66eba375a4 at::native::copy_()
[2m[36m(pid=52058)[0m     @     0x7f66ec1224f5 at::Tensor::copy_()
[2m[36m(pid=52058)[0m     @     0x7f66ee5f58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52103)[0m     @     0x7f42bcdf28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52103)[0m     @     0x7f42ba91f4f5 at::Tensor::copy_()
[2m[36m(pid=52103)[0m     @     0x7f42c09ca79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52103)[0m     @     0x55bc99002fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52103)[0m     @     0x55bc98f5db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52103)[0m     @     0x55bc98fe8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52103)[0m     @     0x55bc98fe9a20 method_vectorcall
[2m[36m(pid=52103)[0m     @     0x55bc98f5dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52103)[0m     @     0x55bc98fe8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52103)[0m     @     0x55bc98fe9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52103)[0m     @     0x55bc98f5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52103)[0m     @     0x55bc98fe8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52103)[0m     @     0x55bc98fe9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52103)[0m     @     0x55bc98f5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52103)[0m     @     0x55bc98fe8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52103)[0m     @     0x55bc98fe9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52103)[0m     @     0x55bc98f5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52103)[0m     @     0x55bc98fe8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52103)[0m     @     0x55bc98fe9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52103)[0m     @     0x55bc98f5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52064)[0m     @     0x7fa0b1f0c4f5 at::Tensor::copy_()
[2m[36m(pid=52064)[0m     @     0x7fa0b43df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52064)[0m     @     0x7fa0b1f0c4f5 at::Tensor::copy_()
[2m[36m(pid=52064)[0m     @     0x7fa0b7fb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52064)[0m     @     0x5600bdf4afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52064)[0m     @     0x5600bdea5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52064)[0m     @     0x5600bdf30baf _PyEval_EvalCodeWithName
[2m[36m(pid=52064)[0m     @     0x5600bdf31a20 method_vectorcall
[2m[36m(pid=52064)[0m     @     0x5600bdea5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52064)[0m     @     0x5600bdf30baf _PyEval_EvalCodeWithName
[2m[36m(pid=52064)[0m     @     0x5600bdf31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52064)[0m     @     0x5600bdea6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52064)[0m     @     0x5600bdf30baf _PyEval_EvalCodeWithName
[2m[36m(pid=52064)[0m     @     0x5600bdf31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52064)[0m     @     0x5600bdea6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52064)[0m     @     0x5600bdf30baf _PyEval_EvalCodeWithName
[2m[36m(pid=52064)[0m     @     0x5600bdf31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52064)[0m     @     0x5600bdea6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52064)[0m     @     0x5600bdf30baf _PyEval_EvalCodeWithName
[2m[36m(pid=52064)[0m     @     0x5600bdf31643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52064)[0m     @     0x5600bdea6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52059)[0m     @     0x7f8a6e9b14f5 at::Tensor::copy_()
[2m[36m(pid=52059)[0m     @     0x7f8a74a5c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52059)[0m     @     0x562d18f72fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52059)[0m     @     0x562d18ecdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52059)[0m     @     0x562d18f58baf _PyEval_EvalCodeWithName
[2m[36m(pid=52059)[0m     @     0x562d18f59a20 method_vectorcall
[2m[36m(pid=52059)[0m     @     0x562d18ecdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52059)[0m     @     0x562d18f58baf _PyEval_EvalCodeWithName
[2m[36m(pid=52059)[0m     @     0x562d18f59643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52059)[0m     @     0x562d18ece689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52059)[0m     @     0x562d18f58baf _PyEval_EvalCodeWithName
[2m[36m(pid=52059)[0m     @     0x562d18f59643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52059)[0m     @     0x562d18ece689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52059)[0m     @     0x562d18f58baf _PyEval_EvalCodeWithName
[2m[36m(pid=52059)[0m     @     0x562d18f59643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52059)[0m     @     0x562d18ece689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52059)[0m     @     0x562d18f58baf _PyEval_EvalCodeWithName
[2m[36m(pid=52059)[0m     @     0x562d18f59643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52059)[0m     @     0x562d18ece689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51993)[0m     @     0x7fa36023a5a4 at::native::copy_()
[2m[36m(pid=51993)[0m     @     0x7fa3609254f5 at::Tensor::copy_()
[2m[36m(pid=51993)[0m     @     0x7fa362df88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51993)[0m     @     0x7fa3609254f5 at::Tensor::copy_()
[2m[36m(pid=52052)[0m     @     0x7ee5b338c5a4 at::native::copy_()
[2m[36m(pid=52052)[0m     @     0x7ee5b3a774f5 at::Tensor::copy_()
[2m[36m(pid=52052)[0m     @     0x7ee5b5f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52052)[0m     @     0x7ee5b3a774f5 at::Tensor::copy_()
[2m[36m(pid=52000)[0m     @     0x7ef2c7a395a4 at::native::copy_()
[2m[36m(pid=52000)[0m     @     0x7ef2c81244f5 at::Tensor::copy_()
[2m[36m(pid=52000)[0m     @     0x7ef2ca5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52051)[0m     @     0x7ef0be7658f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52051)[0m     @     0x7ef0be765ad3 at::TensorIterator::for_each()
[2m[36m(pid=52051)[0m     @     0x7ef0be765d91 at::TensorIterator::for_each()
[2m[36m(pid=52051)[0m     @     0x7ef0bf048b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52095)[0m     @     0x7f43fc84f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52095)[0m     @     0x7f43fa37c4f5 at::Tensor::copy_()
[2m[36m(pid=52095)[0m     @     0x7f440042779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52095)[0m     @     0x562053a46fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52095)[0m     @     0x5620539a1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52095)[0m     @     0x562053a2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52095)[0m     @     0x562053a2da20 method_vectorcall
[2m[36m(pid=52095)[0m     @     0x5620539a1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52095)[0m     @     0x562053a2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52095)[0m     @     0x562053a2d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52095)[0m     @     0x5620539a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52095)[0m     @     0x562053a2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52095)[0m     @     0x562053a2d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52095)[0m     @     0x5620539a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52095)[0m     @     0x562053a2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52095)[0m     @     0x562053a2d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52095)[0m     @     0x5620539a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52095)[0m     @     0x562053a2cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52095)[0m     @     0x562053a2d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52095)[0m     @     0x5620539a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52114)[0m     @     0x7f4944f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52114)[0m     @     0x7f4944f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=52114)[0m     @     0x7f4944f27d91 at::TensorIterator::for_each()
[2m[36m(pid=51986)[0m     @     0x7f73d15cb4f5 at::Tensor::copy_()
[2m[36m(pid=51986)[0m     @     0x7f73d3a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51986)[0m     @     0x7f73d15cb4f5 at::Tensor::copy_()
[2m[36m(pid=51986)[0m     @     0x7f73d767679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51986)[0m     @     0x5653dc5f8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52098)[0m     @     0x7f4787e6b390 (unknown)
[2m[36m(pid=52098)[0m     @     0x7f1887ddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52098)[0m     @     0x7f18875097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52006)[0m     @     0x7f20d067d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52006)[0m     @     0x7f20d067dad3 at::TensorIterator::for_each()
[2m[36m(pid=52006)[0m     @     0x7f20d067dd91 at::TensorIterator::for_each()
[2m[36m(pid=52006)[0m     @     0x7f20d0f60b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52006)[0m     @     0x7f20d0f83c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52093)[0m     @     0x7f28eb0f38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52093)[0m     @     0x7f28eb0f3ad3 at::TensorIterator::for_each()
[2m[36m(pid=52093)[0m     @     0x7f28eb0f3d91 at::TensorIterator::for_each()
[2m[36m(pid=52093)[0m     @     0x7f28eb9d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52093)[0m     @     0x7f28eb9f9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51994)[0m     @     0x7fb529480d91 at::TensorIterator::for_each()
[2m[36m(pid=51994)[0m     @     0x7fb529d63b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51994)[0m     @     0x7fb529d86c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51994)[0m     @     0x7fb529228a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51994)[0m     @     0x7fb529226388 at::native::copy_impl()
[2m[36m(pid=52049)[0m     @     0x7fcb40da5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=52049)[0m     @     0x7fcb404d07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52049)[0m     @     0x7fcb404d38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52049)[0m     @     0x7fcb404d3ad3 at::TensorIterator::for_each()
[2m[36m(pid=52062)[0m     @     0x7f7f89138ad3 at::TensorIterator::for_each()
[2m[36m(pid=52062)[0m     @     0x7f7f89138d91 at::TensorIterator::for_each()
[2m[36m(pid=52062)[0m     @     0x7f7f89a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52062)[0m     @     0x7f7f89a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52062)[0m     @     0x7f7f88ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51989)[0m     @     0x7f16fc0deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51989)[0m     @     0x7f16fc101c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51989)[0m     @     0x7f16fb5a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51995)[0m     @     0x7f14bba61d91 at::TensorIterator::for_each()
[2m[36m(pid=51995)[0m     @     0x7f14bc344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51995)[0m     @     0x7f14bc367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51995)[0m     @     0x7f14bb809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51995)[0m     @     0x7f14bb807388 at::native::copy_impl()
[2m[36m(pid=51995)[0m     @     0x7f14bb8095a4 at::native::copy_()
[2m[36m(pid=52020)[0m     @     0x7efa2aef95a4 at::native::copy_()
[2m[36m(pid=52020)[0m     @     0x7efa2b5e44f5 at::Tensor::copy_()
[2m[36m(pid=52020)[0m     @     0x7efa2dab78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52020)[0m     @     0x7efa2b5e44f5 at::Tensor::copy_()
[2m[36m(pid=52020)[0m     @     0x7efa3168f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52020)[0m     @     0x55a0ffe18fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52020)[0m     @     0x55a0ffd73b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52020)[0m     @     0x55a0ffdfebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52020)[0m     @     0x55a0ffdffa20 method_vectorcall
[2m[36m(pid=52020)[0m     @     0x55a0ffd73bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52020)[0m     @     0x55a0ffdfebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52020)[0m     @     0x55a0ffdff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52020)[0m     @     0x55a0ffd74689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52020)[0m     @     0x55a0ffdfebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52020)[0m     @     0x55a0ffdff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52020)[0m     @     0x55a0ffd74689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52020)[0m     @     0x55a0ffdfebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52020)[0m     @     0x55a0ffdff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52020)[0m     @     0x55a0ffd74689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52020)[0m     @     0x55a0ffdfebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52020)[0m     @     0x55a0ffdff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52020)[0m     @     0x55a0ffd74689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52015)[0m     @     0x7ef8e2b68ad3 at::TensorIterator::for_each()
[2m[36m(pid=52015)[0m     @     0x7ef8e2b68d91 at::TensorIterator::for_each()
[2m[36m(pid=52015)[0m     @     0x7ef8e344bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52015)[0m     @     0x7ef8e346ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52015)[0m     @     0x7ef8e2910a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52015)[0m     @     0x7ef8e290e388 at::native::copy_impl()
[2m[36m(pid=52001)[0m     @     0x7f278b74ad91 at::TensorIterator::for_each()
[2m[36m(pid=52001)[0m     @     0x7f278c02db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52001)[0m     @     0x7f278c050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52001)[0m     @     0x7f278b4f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52001)[0m     @     0x7f278b4f0388 at::native::copy_impl()
[2m[36m(pid=52001)[0m     @     0x7f278b4f25a4 at::native::copy_()
[2m[36m(pid=52010)[0m     @     0x7fcc5d2fa5a4 at::native::copy_()
[2m[36m(pid=52010)[0m     @     0x7fcc5d9e54f5 at::Tensor::copy_()
[2m[36m(pid=52010)[0m     @     0x7fcc5feb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52010)[0m     @     0x7fcc5d9e54f5 at::Tensor::copy_()
[2m[36m(pid=52010)[0m     @     0x7fcc63a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52010)[0m     @     0x55fc6bc17fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52010)[0m     @     0x55fc6bb72b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52010)[0m     @     0x55fc6bbfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52010)[0m     @     0x55fc6bbfea20 method_vectorcall
[2m[36m(pid=52010)[0m     @     0x55fc6bb72bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52010)[0m     @     0x55fc6bbfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52010)[0m     @     0x55fc6bbfe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52010)[0m     @     0x55fc6bb73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52010)[0m     @     0x55fc6bbfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52010)[0m     @     0x55fc6bbfe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52010)[0m     @     0x55fc6bb73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52010)[0m     @     0x55fc6bbfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52010)[0m     @     0x55fc6bbfe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52010)[0m     @     0x55fc6bb73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52010)[0m     @     0x55fc6bbfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52010)[0m     @     0x55fc6bbfe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52010)[0m     @     0x55fc6bb73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52082)[0m     @     0x7ee30774ad91 at::TensorIterator::for_each()
[2m[36m(pid=52082)[0m     @     0x7ee30802db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52082)[0m     @     0x7ee308050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52082)[0m     @     0x7ee3074f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52082)[0m     @     0x7ee3074f0388 at::native::copy_impl()
[2m[36m(pid=52082)[0m     @     0x7ee3074f25a4 at::native::copy_()
[2m[36m(pid=52082)[0m     @     0x7ee307bdd4f5 at::Tensor::copy_()
[2m[36m(pid=52063)[0m     @     0x7f4dbda798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52063)[0m     @     0x7f4dbda79ad3 at::TensorIterator::for_each()
[2m[36m(pid=52063)[0m     @     0x7f4dbda79d91 at::TensorIterator::for_each()
[2m[36m(pid=52063)[0m     @     0x7f4dbe35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52063)[0m     @     0x7f4dbe37fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51985)[0m     @     0x7f41853ba4f5 at::Tensor::copy_()
[2m[36m(pid=51985)[0m     @     0x7f418788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51985)[0m     @     0x7f41853ba4f5 at::Tensor::copy_()
[2m[36m(pid=51985)[0m     @     0x7f418b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51985)[0m     @     0x55a991159fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51985)[0m     @     0x55a9910b4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51985)[0m     @     0x55a99113fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51985)[0m     @     0x55a991140a20 method_vectorcall
[2m[36m(pid=51985)[0m     @     0x55a9910b4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51985)[0m     @     0x55a99113fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51985)[0m     @     0x55a991140643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51985)[0m     @     0x55a9910b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51985)[0m     @     0x55a99113fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51985)[0m     @     0x55a991140643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51985)[0m     @     0x55a9910b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51985)[0m     @     0x55a99113fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51985)[0m     @     0x55a991140643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51985)[0m     @     0x55a9910b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51985)[0m     @     0x55a99113fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51985)[0m     @     0x55a991140643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51985)[0m     @     0x55a9910b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51984)[0m     @     0x7f0b9345ad91 at::TensorIterator::for_each()
[2m[36m(pid=51984)[0m     @     0x7f0b93d3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51984)[0m     @     0x7f0b93d60c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51984)[0m     @     0x7f0b93202a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51984)[0m     @     0x7f0b93200388 at::native::copy_impl()
[2m[36m(pid=51984)[0m     @     0x7f0b932025a4 at::native::copy_()
[2m[36m(pid=51991)[0m     @     0x7f3c43da8d91 at::TensorIterator::for_each()
[2m[36m(pid=51991)[0m     @     0x7f3c4468bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51991)[0m     @     0x7f3c446aec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51991)[0m     @     0x7f3c43b50a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51991)[0m     @     0x7f3c43b4e388 at::native::copy_impl()
[2m[36m(pid=51991)[0m     @     0x7f3c43b505a4 at::native::copy_()
[2m[36m(pid=51991)[0m     @     0x7f3c4423b4f5 at::Tensor::copy_()
[2m[36m(pid=52050)[0m     @     0x7edb3f44cd91 at::TensorIterator::for_each()
[2m[36m(pid=52050)[0m     @     0x7edb3fd2fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52050)[0m     @     0x7edb3fd52c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52050)[0m     @     0x7edb3f1f4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52050)[0m     @     0x7edb3f1f2388 at::native::copy_impl()
[2m[36m(pid=52050)[0m     @     0x7edb3f1f45a4 at::native::copy_()
[2m[36m(pid=51990)[0m     @     0x7f310726f4f5 at::Tensor::copy_()
[2m[36m(pid=51990)[0m     @     0x7f31097428de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51990)[0m     @     0x7f310726f4f5 at::Tensor::copy_()
[2m[36m(pid=51990)[0m     @     0x7f310d31a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51990)[0m     @     0x55d97e72cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51990)[0m     @     0x55d97e687b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51990)[0m     @     0x55d97e712baf _PyEval_EvalCodeWithName
[2m[36m(pid=51990)[0m     @     0x55d97e713a20 method_vectorcall
[2m[36m(pid=51990)[0m     @     0x55d97e687bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51990)[0m     @     0x55d97e712baf _PyEval_EvalCodeWithName
[2m[36m(pid=51990)[0m     @     0x55d97e713643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51990)[0m     @     0x55d97e688689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51990)[0m     @     0x55d97e712baf _PyEval_EvalCodeWithName
[2m[36m(pid=51990)[0m     @     0x55d97e713643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51990)[0m     @     0x55d97e688689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51990)[0m     @     0x55d97e712baf _PyEval_EvalCodeWithName
[2m[36m(pid=51990)[0m     @     0x55d97e713643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51990)[0m     @     0x55d97e688689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51990)[0m     @     0x55d97e712baf _PyEval_EvalCodeWithName
[2m[36m(pid=51990)[0m     @     0x55d97e713643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51990)[0m     @     0x55d97e688689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52043)[0m     @     0x7ed6d01244f5 at::Tensor::copy_()
[2m[36m(pid=52043)[0m     @     0x7ed6d25f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52043)[0m     @     0x7ed6d01244f5 at::Tensor::copy_()
[2m[36m(pid=52043)[0m     @     0x7ed6d61cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52043)[0m     @     0x5591a121dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52043)[0m     @     0x5591a1178b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52043)[0m     @     0x5591a1203baf _PyEval_EvalCodeWithName
[2m[36m(pid=52043)[0m     @     0x5591a1204a20 method_vectorcall
[2m[36m(pid=52043)[0m     @     0x5591a1178bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52043)[0m     @     0x5591a1203baf _PyEval_EvalCodeWithName
[2m[36m(pid=52043)[0m     @     0x5591a1204643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52043)[0m     @     0x5591a1179689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52043)[0m     @     0x5591a1203baf _PyEval_EvalCodeWithName
[2m[36m(pid=52043)[0m     @     0x5591a1204643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52043)[0m     @     0x5591a1179689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52043)[0m     @     0x5591a1203baf _PyEval_EvalCodeWithName
[2m[36m(pid=52043)[0m     @     0x5591a1204643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52043)[0m     @     0x5591a1179689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52043)[0m     @     0x5591a1203baf _PyEval_EvalCodeWithName
[2m[36m(pid=52043)[0m     @     0x5591a1204643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52043)[0m     @     0x5591a1179689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52065)[0m     @     0x7faaa1f0c4f5 at::Tensor::copy_()
[2m[36m(pid=52065)[0m     @     0x7faaa43df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52065)[0m     @     0x7faaa1f0c4f5 at::Tensor::copy_()
[2m[36m(pid=52065)[0m     @     0x7faaa7fb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52065)[0m     @     0x56289111ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52065)[0m     @     0x56289107ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52065)[0m     @     0x562891105baf _PyEval_EvalCodeWithName
[2m[36m(pid=52065)[0m     @     0x562891106a20 method_vectorcall
[2m[36m(pid=52065)[0m     @     0x56289107abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52065)[0m     @     0x562891105baf _PyEval_EvalCodeWithName
[2m[36m(pid=52065)[0m     @     0x562891106643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52065)[0m     @     0x56289107b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52065)[0m     @     0x562891105baf _PyEval_EvalCodeWithName
[2m[36m(pid=52065)[0m     @     0x562891106643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52065)[0m     @     0x56289107b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52065)[0m     @     0x562891105baf _PyEval_EvalCodeWithName
[2m[36m(pid=52065)[0m     @     0x562891106643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52065)[0m     @     0x56289107b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52065)[0m     @     0x562891105baf _PyEval_EvalCodeWithName
[2m[36m(pid=52065)[0m     @     0x562891106643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52065)[0m     @     0x56289107b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51983)[0m     @     0x7ed42801ead3 at::TensorIterator::for_each()
[2m[36m(pid=51983)[0m     @     0x7ed42801ed91 at::TensorIterator::for_each()
[2m[36m(pid=51983)[0m     @     0x7ed428901b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51983)[0m     @     0x7ed428924c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51983)[0m     @     0x7ed427dc6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51983)[0m     @     0x7ed427dc4388 at::native::copy_impl()
[2m[36m(pid=51987)[0m     @     0x7ed544c92ad3 at::TensorIterator::for_each()
[2m[36m(pid=51987)[0m     @     0x7ed544c92d91 at::TensorIterator::for_each()
[2m[36m(pid=51987)[0m     @     0x7ed545575b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51987)[0m     @     0x7ed545598c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51987)[0m     @     0x7ed544a3aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=51987)[0m     @     0x7ed544a38388 at::native::copy_impl()
[2m[36m(pid=52046)[0m     @     0x7f72e397e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52046)[0m     @     0x7f72e397ead3 at::TensorIterator::for_each()
[2m[36m(pid=52046)[0m     @     0x7f72e397ed91 at::TensorIterator::for_each()
[2m[36m(pid=52046)[0m     @     0x7f72e4261b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52003)[0m     @     0x7f1f449b8ad3 at::TensorIterator::for_each()
[2m[36m(pid=52003)[0m     @     0x7f1f449b8d91 at::TensorIterator::for_each()
[2m[36m(pid=52003)[0m     @     0x7f1f4529bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52003)[0m     @     0x7f1f452bec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52003)[0m     @     0x7f1f44760a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52003)[0m     @     0x7f1f4475e388 at::native::copy_impl()
[2m[36m(pid=51981)[0m     @     0x7f89656bb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=51981)[0m     @     0x7f89656bbad3 at::TensorIterator::for_each()
[2m[36m(pid=51981)[0m     @     0x7f89656bbd91 at::TensorIterator::for_each()
[2m[36m(pid=51981)[0m     @     0x7f8965f9eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51981)[0m     @     0x7f8965fc1c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=51981)[0m     @     0x7f8965463a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52011)[0m     @     0x7f427374aad3 at::TensorIterator::for_each()
[2m[36m(pid=52011)[0m     @     0x7f427374ad91 at::TensorIterator::for_each()
[2m[36m(pid=52011)[0m     @     0x7f427402db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52011)[0m     @     0x7f4274050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52011)[0m     @     0x7f42734f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52011)[0m     @     0x7f42734f0388 at::native::copy_impl()
[2m[36m(pid=52115)[0m     @     0x7f5e0128b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52115)[0m     @     0x55bff08b5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52115)[0m     @     0x55bff0810b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52115)[0m     @     0x55bff089bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52115)[0m     @     0x55bff089ca20 method_vectorcall
[2m[36m(pid=52115)[0m     @     0x55bff0810bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52115)[0m     @     0x55bff089bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52115)[0m     @     0x55bff089c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52115)[0m     @     0x55bff0811689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52115)[0m     @     0x55bff089bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52115)[0m     @     0x55bff089c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52115)[0m     @     0x55bff0811689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52115)[0m     @     0x55bff089bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52115)[0m     @     0x55bff089c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52115)[0m     @     0x55bff0811689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52115)[0m     @     0x55bff089bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52115)[0m     @     0x55bff089c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52115)[0m     @     0x55bff0811689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52117)[0m     @     0x7efb6c5a94f5 at::Tensor::copy_()
[2m[36m(pid=52117)[0m     @     0x7efb7265479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52117)[0m     @     0x55b1f402ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52117)[0m     @     0x55b1f3f8ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52117)[0m     @     0x55b1f4015baf _PyEval_EvalCodeWithName
[2m[36m(pid=52117)[0m     @     0x55b1f4016a20 method_vectorcall
[2m[36m(pid=52117)[0m     @     0x55b1f3f8abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52117)[0m     @     0x55b1f4015baf _PyEval_EvalCodeWithName
[2m[36m(pid=52117)[0m     @     0x55b1f4016643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52117)[0m     @     0x55b1f3f8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52117)[0m     @     0x55b1f4015baf _PyEval_EvalCodeWithName
[2m[36m(pid=52117)[0m     @     0x55b1f4016643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52117)[0m     @     0x55b1f3f8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52117)[0m     @     0x55b1f4015baf _PyEval_EvalCodeWithName
[2m[36m(pid=52117)[0m     @     0x55b1f4016643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52117)[0m     @     0x55b1f3f8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52117)[0m     @     0x55b1f4015baf _PyEval_EvalCodeWithName
[2m[36m(pid=52117)[0m     @     0x55b1f4016643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52117)[0m     @     0x55b1f3f8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52079)[0m     @     0x55dc20921baf _PyEval_EvalCodeWithName
[2m[36m(pid=52079)[0m     @     0x55dc20922643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52079)[0m     @     0x55dc20897689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52079)[0m     @     0x55dc20921baf _PyEval_EvalCodeWithName
[2m[36m(pid=52079)[0m     @     0x55dc20922643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52079)[0m     @     0x55dc20897689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52079)[0m     @     0x55dc20921baf _PyEval_EvalCodeWithName
[2m[36m(pid=52079)[0m     @     0x55dc20922643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52079)[0m     @     0x55dc20897689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52079)[0m     @     0x55dc20921baf _PyEval_EvalCodeWithName
[2m[36m(pid=52079)[0m     @     0x55dc20922643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52079)[0m     @     0x55dc20897689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52014)[0m     @     0x7f2e921618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52014)[0m     @     0x7f2e8fc8e4f5 at::Tensor::copy_()
[2m[36m(pid=52014)[0m     @     0x7f2e95d3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52014)[0m     @     0x5598c22a4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52014)[0m     @     0x5598c21ffb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52014)[0m     @     0x5598c228abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52014)[0m     @     0x5598c228ba20 method_vectorcall
[2m[36m(pid=52014)[0m     @     0x5598c21ffbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52014)[0m     @     0x5598c228abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52014)[0m     @     0x5598c228b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52014)[0m     @     0x5598c2200689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52014)[0m     @     0x5598c228abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52014)[0m     @     0x5598c228b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52014)[0m     @     0x5598c2200689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52014)[0m     @     0x5598c228abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52014)[0m     @     0x5598c228b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52014)[0m     @     0x5598c2200689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52014)[0m     @     0x5598c228abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52014)[0m     @     0x5598c228b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52014)[0m     @     0x5598c2200689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51982)[0m     @     0x7fc73df1d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51982)[0m     @     0x560d96695fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51982)[0m     @     0x560d965f0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51982)[0m     @     0x560d9667bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51982)[0m     @     0x560d9667ca20 method_vectorcall
[2m[36m(pid=51982)[0m     @     0x560d965f0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51982)[0m     @     0x560d9667bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51982)[0m     @     0x560d9667c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51982)[0m     @     0x560d965f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51982)[0m     @     0x560d9667bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51982)[0m     @     0x560d9667c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51982)[0m     @     0x560d965f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51982)[0m     @     0x560d9667bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51982)[0m     @     0x560d9667c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51982)[0m     @     0x560d965f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51982)[0m     @     0x560d9667bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51982)[0m     @     0x560d9667c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51982)[0m     @     0x560d965f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52072)[0m     @     0x7f322dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=52072)[0m     @     0x7f3233da679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52072)[0m     @     0x55a2ab86dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52072)[0m     @     0x55a2ab7c8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52072)[0m     @     0x55a2ab853baf _PyEval_EvalCodeWithName
[2m[36m(pid=52072)[0m     @     0x55a2ab854a20 method_vectorcall
[2m[36m(pid=52072)[0m     @     0x55a2ab7c8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52072)[0m     @     0x55a2ab853baf _PyEval_EvalCodeWithName
[2m[36m(pid=52072)[0m     @     0x55a2ab854643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52072)[0m     @     0x55a2ab7c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52072)[0m     @     0x55a2ab853baf _PyEval_EvalCodeWithName
[2m[36m(pid=52072)[0m     @     0x55a2ab854643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52072)[0m     @     0x55a2ab7c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52072)[0m     @     0x55a2ab853baf _PyEval_EvalCodeWithName
[2m[36m(pid=52072)[0m     @     0x55a2ab854643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52072)[0m     @     0x55a2ab7c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52072)[0m     @     0x55a2ab853baf _PyEval_EvalCodeWithName
[2m[36m(pid=52072)[0m     @     0x55a2ab854643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52072)[0m     @     0x55a2ab7c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52044)[0m     @     0x558cd829b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52044)[0m     @     0x558cd8325baf _PyEval_EvalCodeWithName
[2m[36m(pid=52044)[0m     @     0x558cd8326643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52044)[0m     @     0x558cd829b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52044)[0m     @     0x558cd8325baf _PyEval_EvalCodeWithName
[2m[36m(pid=52044)[0m     @     0x558cd8326643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52044)[0m     @     0x558cd829b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52008)[0m     @     0x7fc0766758de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52008)[0m     @     0x7fc0741a24f5 at::Tensor::copy_()
[2m[36m(pid=52008)[0m     @     0x7fc07a24d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52008)[0m     @     0x55d7dd31cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52008)[0m     @     0x55d7dd277b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52008)[0m     @     0x55d7dd302baf _PyEval_EvalCodeWithName
[2m[36m(pid=52008)[0m     @     0x55d7dd303a20 method_vectorcall
[2m[36m(pid=52008)[0m     @     0x55d7dd277bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52008)[0m     @     0x55d7dd302baf _PyEval_EvalCodeWithName
[2m[36m(pid=52008)[0m     @     0x55d7dd303643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52008)[0m     @     0x55d7dd278689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52008)[0m     @     0x55d7dd302baf _PyEval_EvalCodeWithName
[2m[36m(pid=52008)[0m     @     0x55d7dd303643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52008)[0m     @     0x55d7dd278689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52008)[0m     @     0x55d7dd302baf _PyEval_EvalCodeWithName
[2m[36m(pid=52008)[0m     @     0x55d7dd303643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52008)[0m     @     0x55d7dd278689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52008)[0m     @     0x55d7dd302baf _PyEval_EvalCodeWithName
[2m[36m(pid=52008)[0m     @     0x55d7dd303643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52008)[0m     @     0x55d7dd278689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52116)[0m     @     0x55814f425bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52116)[0m     @     0x55814f4b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=52116)[0m     @     0x55814f4b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52116)[0m     @     0x55814f426689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52116)[0m     @     0x55814f4b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=52116)[0m     @     0x55814f4b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52116)[0m     @     0x55814f426689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52116)[0m     @     0x55814f4b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=52116)[0m     @     0x55814f4b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52116)[0m     @     0x55814f426689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52116)[0m     @     0x55814f4b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=52116)[0m     @     0x55814f4b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52116)[0m     @     0x55814f426689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52100)[0m     @     0x560338027bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52100)[0m     @     0x5603380b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52100)[0m     @     0x5603380b3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52100)[0m     @     0x560338028689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52100)[0m     @     0x5603380b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52100)[0m     @     0x5603380b3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52100)[0m     @     0x560338028689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52100)[0m     @     0x5603380b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52100)[0m     @     0x5603380b3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52100)[0m     @     0x560338028689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52100)[0m     @     0x5603380b2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52100)[0m     @     0x5603380b3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52100)[0m     @     0x560338028689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52105)[0m     @     0x7ed0ea2cb4f5 at::Tensor::copy_()
[2m[36m(pid=52105)[0m     @     0x7ed0f037679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52105)[0m     @     0x5600c809ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52105)[0m     @     0x5600c7ffab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52105)[0m     @     0x5600c8085baf _PyEval_EvalCodeWithName
[2m[36m(pid=52105)[0m     @     0x5600c8086a20 method_vectorcall
[2m[36m(pid=52105)[0m     @     0x5600c7ffabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52105)[0m     @     0x5600c8085baf _PyEval_EvalCodeWithName
[2m[36m(pid=52105)[0m     @     0x5600c8086643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52105)[0m     @     0x5600c7ffb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52105)[0m     @     0x5600c8085baf _PyEval_EvalCodeWithName
[2m[36m(pid=52105)[0m     @     0x5600c8086643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52105)[0m     @     0x5600c7ffb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52105)[0m     @     0x5600c8085baf _PyEval_EvalCodeWithName
[2m[36m(pid=52105)[0m     @     0x5600c8086643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52105)[0m     @     0x5600c7ffb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52105)[0m     @     0x5600c8085baf _PyEval_EvalCodeWithName
[2m[36m(pid=52105)[0m     @     0x5600c8086643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52105)[0m     @     0x5600c7ffb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52007)[0m     @     0x7fb6866ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52007)[0m     @     0x7fb6866fd388 at::native::copy_impl()
[2m[36m(pid=52007)[0m     @     0x7fb6866ff5a4 at::native::copy_()
[2m[36m(pid=52104)[0m     @     0x7ed53b0f38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52104)[0m     @     0x7ed53b0f3ad3 at::TensorIterator::for_each()
[2m[36m(pid=51998)[0m     @     0x7f6f4faf04f5 at::Tensor::copy_()
[2m[36m(pid=51998)[0m     @     0x7f6f55b9b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51998)[0m     @     0x5569ebbb1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51998)[0m     @     0x5569ebb0cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51998)[0m     @     0x5569ebb97baf _PyEval_EvalCodeWithName
[2m[36m(pid=51998)[0m     @     0x5569ebb98a20 method_vectorcall
[2m[36m(pid=51998)[0m     @     0x5569ebb0cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51998)[0m     @     0x5569ebb97baf _PyEval_EvalCodeWithName
[2m[36m(pid=51998)[0m     @     0x5569ebb98643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51998)[0m     @     0x5569ebb0d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51998)[0m     @     0x5569ebb97baf _PyEval_EvalCodeWithName
[2m[36m(pid=51998)[0m     @     0x5569ebb98643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51998)[0m     @     0x5569ebb0d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51998)[0m     @     0x5569ebb97baf _PyEval_EvalCodeWithName
[2m[36m(pid=51998)[0m     @     0x5569ebb98643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51998)[0m     @     0x5569ebb0d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51998)[0m     @     0x5569ebb97baf _PyEval_EvalCodeWithName
[2m[36m(pid=51998)[0m     @     0x5569ebb98643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51998)[0m     @     0x5569ebb0d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52057)[0m     @     0x7ed98a14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52057)[0m     @     0x7ed98a16ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52057)[0m     @     0x7ed989610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52057)[0m     @     0x7ed98960e388 at::native::copy_impl()
[2m[36m(pid=52057)[0m     @     0x7ed9896105a4 at::native::copy_()
[2m[36m(pid=52056)[0m     @     0x7f00df5a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52056)[0m     @     0x7f00df5a1388 at::native::copy_impl()
[2m[36m(pid=52056)[0m     @     0x7f00df5a35a4 at::native::copy_()
[2m[36m(pid=52077)[0m     @     0x7f391b6b5c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52077)[0m     @     0x7f391ab57a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52077)[0m     @     0x7f391ab55388 at::native::copy_impl()
[2m[36m(pid=52077)[0m     @     0x7f391ab575a4 at::native::copy_()
[2m[36m(pid=52048)[0m     @     0x7fbe993ba4f5 at::Tensor::copy_()
[2m[36m(pid=52048)[0m     @     0x7fbe9f46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52048)[0m     @     0x560fbcbddfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52048)[0m     @     0x560fbcb38b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52048)[0m     @     0x560fbcbc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52048)[0m     @     0x560fbcbc4a20 method_vectorcall
[2m[36m(pid=52048)[0m     @     0x560fbcb38bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52048)[0m     @     0x560fbcbc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52048)[0m     @     0x560fbcbc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52048)[0m     @     0x560fbcb39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52048)[0m     @     0x560fbcbc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52048)[0m     @     0x560fbcbc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52048)[0m     @     0x560fbcb39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52048)[0m     @     0x560fbcbc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52048)[0m     @     0x560fbcbc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52048)[0m     @     0x560fbcb39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52048)[0m     @     0x560fbcbc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52048)[0m     @     0x560fbcbc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52048)[0m     @     0x560fbcb39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52068)[0m     @     0x7f319375ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52068)[0m     @     0x7f319375a388 at::native::copy_impl()
[2m[36m(pid=52068)[0m     @     0x7f319375c5a4 at::native::copy_()
[2m[36m(pid=52073)[0m     @     0x7f66ee6117db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=52073)[0m     @     0x7f66ee6148f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52060)[0m     @     0x7f6f29c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=52060)[0m     @     0x7f6f29c27d91 at::TensorIterator::for_each()
[2m[36m(pid=52060)[0m     @     0x7f6f2a50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52060)[0m     @     0x7f6f2a52dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52016)[0m     @     0x7fca825eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52016)[0m     @     0x7fca825e9388 at::native::copy_impl()
[2m[36m(pid=52016)[0m     @     0x7fca825eb5a4 at::native::copy_()
[2m[36m(pid=52081)[0m     @     0x7f6899c27d91 at::TensorIterator::for_each()
[2m[36m(pid=52081)[0m     @     0x7f689a50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52081)[0m     @     0x7f689a52dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52053)[0m     @     0x7fb6a8a47b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52053)[0m     @     0x7fb6a8a6ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52053)[0m     @     0x7fb6a7f0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52053)[0m     @     0x7fb6a7f0a388 at::native::copy_impl()
[2m[36m(pid=51997)[0m     @     0x7fbdebe9f4f5 at::Tensor::copy_()
[2m[36m(pid=51997)[0m     @     0x7fbdf1f4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51997)[0m     @     0x559c2a0affd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51997)[0m     @     0x559c2a00ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51997)[0m     @     0x559c2a095baf _PyEval_EvalCodeWithName
[2m[36m(pid=51997)[0m     @     0x559c2a096a20 method_vectorcall
[2m[36m(pid=51997)[0m     @     0x559c2a00abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51997)[0m     @     0x559c2a095baf _PyEval_EvalCodeWithName
[2m[36m(pid=51997)[0m     @     0x559c2a096643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51997)[0m     @     0x559c2a00b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51997)[0m     @     0x559c2a095baf _PyEval_EvalCodeWithName
[2m[36m(pid=51997)[0m     @     0x559c2a096643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51997)[0m     @     0x559c2a00b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51997)[0m     @     0x559c2a095baf _PyEval_EvalCodeWithName
[2m[36m(pid=51997)[0m     @     0x559c2a096643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51997)[0m     @     0x559c2a00b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51997)[0m     @     0x559c2a095baf _PyEval_EvalCodeWithName
[2m[36m(pid=51997)[0m     @     0x559c2a096643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51997)[0m     @     0x559c2a00b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52102)[0m     @     0x7f967468d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52102)[0m     @     0x55dcd9828fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52102)[0m     @     0x55dcd9783b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52102)[0m     @     0x55dcd980ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52102)[0m     @     0x55dcd980fa20 method_vectorcall
[2m[36m(pid=52102)[0m     @     0x55dcd9783bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52102)[0m     @     0x55dcd980ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52102)[0m     @     0x55dcd980f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52102)[0m     @     0x55dcd9784689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52102)[0m     @     0x55dcd980ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52102)[0m     @     0x55dcd980f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52102)[0m     @     0x55dcd9784689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52102)[0m     @     0x55dcd980ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52102)[0m     @     0x55dcd980f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52102)[0m     @     0x55dcd9784689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52102)[0m     @     0x55dcd980ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=52102)[0m     @     0x55dcd980f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52102)[0m     @     0x55dcd9784689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52009)[0m     @     0x7f4d0e6a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52009)[0m     @     0x558707020fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52009)[0m     @     0x558706f7bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52009)[0m     @     0x558707006baf _PyEval_EvalCodeWithName
[2m[36m(pid=52009)[0m     @     0x558707007a20 method_vectorcall
[2m[36m(pid=52009)[0m     @     0x558706f7bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52009)[0m     @     0x558707006baf _PyEval_EvalCodeWithName
[2m[36m(pid=52009)[0m     @     0x558707007643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52009)[0m     @     0x558706f7c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52009)[0m     @     0x558707006baf _PyEval_EvalCodeWithName
[2m[36m(pid=52009)[0m     @     0x558707007643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52009)[0m     @     0x558706f7c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52009)[0m     @     0x558707006baf _PyEval_EvalCodeWithName
[2m[36m(pid=52009)[0m     @     0x558707007643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52009)[0m     @     0x558706f7c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52009)[0m     @     0x558707006baf _PyEval_EvalCodeWithName
[2m[36m(pid=52009)[0m     @     0x558707007643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52009)[0m     @     0x558706f7c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52058)[0m     @     0x7f66ec1224f5 at::Tensor::copy_()
[2m[36m(pid=52058)[0m     @     0x7f66f21cd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52058)[0m     @     0x55a1c4915fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52058)[0m     @     0x55a1c4870b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52058)[0m     @     0x55a1c48fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52058)[0m     @     0x55a1c48fca20 method_vectorcall
[2m[36m(pid=52058)[0m     @     0x55a1c4870bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52058)[0m     @     0x55a1c48fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52058)[0m     @     0x55a1c48fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52058)[0m     @     0x55a1c4871689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52058)[0m     @     0x55a1c48fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52058)[0m     @     0x55a1c48fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52058)[0m     @     0x55a1c4871689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52058)[0m     @     0x55a1c48fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52058)[0m     @     0x55a1c48fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52058)[0m     @     0x55a1c4871689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52058)[0m     @     0x55a1c48fbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52058)[0m     @     0x55a1c48fc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52058)[0m     @     0x55a1c4871689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51993)[0m     @     0x7fa3669d079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51993)[0m     @     0x5558a6fecfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51993)[0m     @     0x5558a6f47b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51993)[0m     @     0x5558a6fd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=51993)[0m     @     0x5558a6fd3a20 method_vectorcall
[2m[36m(pid=51993)[0m     @     0x5558a6f47bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51993)[0m     @     0x5558a6fd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=51993)[0m     @     0x5558a6fd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51993)[0m     @     0x5558a6f48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51993)[0m     @     0x5558a6fd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=51993)[0m     @     0x5558a6fd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51993)[0m     @     0x5558a6f48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51993)[0m     @     0x5558a6fd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=51993)[0m     @     0x5558a6fd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51993)[0m     @     0x5558a6f48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51993)[0m     @     0x5558a6fd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=51993)[0m     @     0x5558a6fd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51993)[0m     @     0x5558a6f48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52052)[0m     @     0x7ee5b9b2279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52052)[0m     @     0x556f828b5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52052)[0m     @     0x556f82810b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52052)[0m     @     0x556f8289bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52052)[0m     @     0x556f8289ca20 method_vectorcall
[2m[36m(pid=52052)[0m     @     0x556f82810bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52052)[0m     @     0x556f8289bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52052)[0m     @     0x556f8289c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52052)[0m     @     0x556f82811689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52052)[0m     @     0x556f8289bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52052)[0m     @     0x556f8289c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52052)[0m     @     0x556f82811689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52052)[0m     @     0x556f8289bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52052)[0m     @     0x556f8289c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52052)[0m     @     0x556f82811689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52052)[0m     @     0x556f8289bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52052)[0m     @     0x556f8289c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52052)[0m     @     0x556f82811689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52000)[0m     @     0x7ef2c81244f5 at::Tensor::copy_()
[2m[36m(pid=52000)[0m     @     0x7ef2ce1cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52000)[0m     @     0x562461273fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52000)[0m     @     0x5624611ceb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52000)[0m     @     0x562461259baf _PyEval_EvalCodeWithName
[2m[36m(pid=52000)[0m     @     0x56246125aa20 method_vectorcall
[2m[36m(pid=52000)[0m     @     0x5624611cebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52000)[0m     @     0x562461259baf _PyEval_EvalCodeWithName
[2m[36m(pid=52000)[0m     @     0x56246125a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52000)[0m     @     0x5624611cf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52000)[0m     @     0x562461259baf _PyEval_EvalCodeWithName
[2m[36m(pid=52000)[0m     @     0x56246125a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52000)[0m     @     0x5624611cf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52000)[0m     @     0x562461259baf _PyEval_EvalCodeWithName
[2m[36m(pid=52000)[0m     @     0x56246125a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52000)[0m     @     0x5624611cf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52000)[0m     @     0x562461259baf _PyEval_EvalCodeWithName
[2m[36m(pid=52000)[0m     @     0x56246125a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52000)[0m     @     0x5624611cf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52051)[0m     @     0x7ef0bf06bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52051)[0m     @     0x7ef0be50da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52051)[0m     @     0x7ef0be50b388 at::native::copy_impl()
[2m[36m(pid=52051)[0m     @     0x7ef0be50d5a4 at::native::copy_()
[2m[36m(pid=52114)[0m     @     0x7f494580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52114)[0m     @     0x7f494582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52114)[0m     @     0x7f4944ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52114)[0m     @     0x7f4944ccd388 at::native::copy_impl()
[2m[36m(pid=52114)[0m     @     0x7f4944ccf5a4 at::native::copy_()
[2m[36m(pid=51986)[0m     @     0x5653dc553b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51986)[0m     @     0x5653dc5debaf _PyEval_EvalCodeWithName
[2m[36m(pid=51986)[0m     @     0x5653dc5dfa20 method_vectorcall
[2m[36m(pid=51986)[0m     @     0x5653dc553bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51986)[0m     @     0x5653dc5debaf _PyEval_EvalCodeWithName
[2m[36m(pid=51986)[0m     @     0x5653dc5df643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51986)[0m     @     0x5653dc554689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51986)[0m     @     0x5653dc5debaf _PyEval_EvalCodeWithName
[2m[36m(pid=51986)[0m     @     0x5653dc5df643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51986)[0m     @     0x5653dc554689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51986)[0m     @     0x5653dc5debaf _PyEval_EvalCodeWithName
[2m[36m(pid=51986)[0m     @     0x5653dc5df643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51986)[0m     @     0x5653dc554689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51986)[0m     @     0x5653dc5debaf _PyEval_EvalCodeWithName
[2m[36m(pid=51986)[0m     @     0x5653dc5df643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51986)[0m     @     0x5653dc554689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52006)[0m     @     0x7f20d0425a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52006)[0m     @     0x7f20d0423388 at::native::copy_impl()
[2m[36m(pid=52006)[0m     @     0x7f20d04255a4 at::native::copy_()
[2m[36m(pid=52006)[0m     @     0x7f20d0b104f5 at::Tensor::copy_()
[2m[36m(pid=52093)[0m     @     0x7f28eae9ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52093)[0m     @     0x7f28eae99388 at::native::copy_impl()
[2m[36m(pid=52093)[0m     @     0x7f28eae9b5a4 at::native::copy_()
[2m[36m(pid=52093)[0m     @     0x7f28eb5864f5 at::Tensor::copy_()
[2m[36m(pid=51994)[0m     @     0x7fb5292285a4 at::native::copy_()
[2m[36m(pid=51994)[0m     @     0x7fb5299134f5 at::Tensor::copy_()
[2m[36m(pid=51994)[0m     @     0x7fb52bde68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52049)[0m     @     0x7fcb404d3d91 at::TensorIterator::for_each()
[2m[36m(pid=52049)[0m     @     0x7fcb40db6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52049)[0m     @     0x7fcb40dd9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52049)[0m     @     0x7fcb4027ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52049)[0m     @     0x7fcb40279388 at::native::copy_impl()
[2m[36m(pid=52062)[0m     @     0x7f7f88ede388 at::native::copy_impl()
[2m[36m(pid=52062)[0m     @     0x7f7f88ee05a4 at::native::copy_()
[2m[36m(pid=51989)[0m     @     0x7f16fb5a1388 at::native::copy_impl()
[2m[36m(pid=51989)[0m     @     0x7f16fb5a35a4 at::native::copy_()
[2m[36m(pid=51995)[0m     @     0x7f14bbef44f5 at::Tensor::copy_()
[2m[36m(pid=51995)[0m     @     0x7f14be3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51995)[0m     @     0x7f14bbef44f5 at::Tensor::copy_()
[2m[36m(pid=52015)[0m     @     0x7ef8e29105a4 at::native::copy_()
[2m[36m(pid=52015)[0m     @     0x7ef8e2ffb4f5 at::Tensor::copy_()
[2m[36m(pid=52015)[0m     @     0x7ef8e54ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52001)[0m     @     0x7f278bbdd4f5 at::Tensor::copy_()
[2m[36m(pid=52001)[0m     @     0x7f278e0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52082)[0m     @     0x7ee30a0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52082)[0m     @     0x7ee307bdd4f5 at::Tensor::copy_()
[2m[36m(pid=52082)[0m     @     0x7ee30dc8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52082)[0m     @     0x560aa72b4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52082)[0m     @     0x560aa720fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52082)[0m     @     0x560aa729abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52082)[0m     @     0x560aa729ba20 method_vectorcall
[2m[36m(pid=52082)[0m     @     0x560aa720fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52082)[0m     @     0x560aa729abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52082)[0m     @     0x560aa729b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52082)[0m     @     0x560aa7210689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52082)[0m     @     0x560aa729abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52082)[0m     @     0x560aa729b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52082)[0m     @     0x560aa7210689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52082)[0m     @     0x560aa729abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52082)[0m     @     0x560aa729b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52082)[0m     @     0x560aa7210689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52063)[0m     @     0x7f4dbd821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52063)[0m     @     0x7f4dbd81f388 at::native::copy_impl()
[2m[36m(pid=52063)[0m     @     0x7f4dbd8215a4 at::native::copy_()
[2m[36m(pid=51984)[0m     @     0x7f0b938ed4f5 at::Tensor::copy_()
[2m[36m(pid=51984)[0m     @     0x7f0b95dc08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51984)[0m     @     0x7f0b938ed4f5 at::Tensor::copy_()
[2m[36m(pid=51991)[0m     @     0x7f3c4670e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51991)[0m     @     0x7f3c4423b4f5 at::Tensor::copy_()
[2m[36m(pid=51991)[0m     @     0x7f3c4a2e679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51991)[0m     @     0x564c3767bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51991)[0m     @     0x564c375d6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51991)[0m     @     0x564c37661baf _PyEval_EvalCodeWithName
[2m[36m(pid=51991)[0m     @     0x564c37662a20 method_vectorcall
[2m[36m(pid=51991)[0m     @     0x564c375d6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51991)[0m     @     0x564c37661baf _PyEval_EvalCodeWithName
[2m[36m(pid=51991)[0m     @     0x564c37662643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51991)[0m     @     0x564c375d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51991)[0m     @     0x564c37661baf _PyEval_EvalCodeWithName
[2m[36m(pid=51991)[0m     @     0x564c37662643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51991)[0m     @     0x564c375d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51991)[0m     @     0x564c37661baf _PyEval_EvalCodeWithName
[2m[36m(pid=51991)[0m     @     0x564c37662643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51991)[0m     @     0x564c375d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51991)[0m     @     0x564c37661baf _PyEval_EvalCodeWithName
[2m[36m(pid=51991)[0m     @     0x564c37662643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51991)[0m     @     0x564c375d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52050)[0m     @     0x7edb3f8df4f5 at::Tensor::copy_()
[2m[36m(pid=52050)[0m     @     0x7edb41db28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51983)[0m     @     0x7ed427dc65a4 at::native::copy_()
[2m[36m(pid=51983)[0m     @     0x7ed4284b14f5 at::Tensor::copy_()
[2m[36m(pid=51983)[0m     @     0x7ed42a9848de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51987)[0m     @     0x7ed544a3a5a4 at::native::copy_()
[2m[36m(pid=51987)[0m     @     0x7ed5451254f5 at::Tensor::copy_()
[2m[36m(pid=51987)[0m     @     0x7ed5475f88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52046)[0m     @     0x7f72e4284c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52046)[0m     @     0x7f72e3726a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52046)[0m     @     0x7f72e3724388 at::native::copy_impl()
[2m[36m(pid=52046)[0m     @     0x7f72e37265a4 at::native::copy_()
[2m[36m(pid=52003)[0m     @     0x7f1f447605a4 at::native::copy_()
[2m[36m(pid=52003)[0m     @     0x7f1f44e4b4f5 at::Tensor::copy_()
[2m[36m(pid=52003)[0m     @     0x7f1f4731e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51981)[0m     @     0x7f8965461388 at::native::copy_impl()
[2m[36m(pid=51981)[0m     @     0x7f89654635a4 at::native::copy_()
[2m[36m(pid=51981)[0m     @     0x7f8965b4e4f5 at::Tensor::copy_()
[2m[36m(pid=52011)[0m     @     0x7f42734f25a4 at::native::copy_()
[2m[36m(pid=52011)[0m     @     0x7f4273bdd4f5 at::Tensor::copy_()
[2m[36m(pid=52011)[0m     @     0x7f42760b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52007)[0m     @     0x7fb686dea4f5 at::Tensor::copy_()
[2m[36m(pid=52007)[0m     @     0x7fb6892bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52007)[0m     @     0x7fb686dea4f5 at::Tensor::copy_()
[2m[36m(pid=52007)[0m     @     0x7fb68ce9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52104)[0m     @     0x7ed53b0f3d91 at::TensorIterator::for_each()
[2m[36m(pid=52104)[0m     @     0x7ed53b9d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52104)[0m     @     0x7ed53b9f9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52104)[0m     @     0x7ed53ae9ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52104)[0m     @     0x7ed53ae99388 at::native::copy_impl()
[2m[36m(pid=52057)[0m     @     0x7ed989cfb4f5 at::Tensor::copy_()
[2m[36m(pid=52057)[0m     @     0x7ed98c1ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52056)[0m     @     0x7f00dfc8e4f5 at::Tensor::copy_()
[2m[36m(pid=52056)[0m     @     0x7f00e21618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52056)[0m     @     0x7f00dfc8e4f5 at::Tensor::copy_()
[2m[36m(pid=52056)[0m     @     0x7f00e5d3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52056)[0m     @     0x56353d3dcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52056)[0m     @     0x56353d337b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52056)[0m     @     0x56353d3c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52056)[0m     @     0x56353d3c3a20 method_vectorcall
[2m[36m(pid=52056)[0m     @     0x56353d337bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52056)[0m     @     0x56353d3c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52056)[0m     @     0x56353d3c3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52056)[0m     @     0x56353d338689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52077)[0m     @     0x7f391b2424f5 at::Tensor::copy_()
[2m[36m(pid=52077)[0m     @     0x7f391d7158de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52077)[0m     @     0x7f391b2424f5 at::Tensor::copy_()
[2m[36m(pid=52077)[0m     @     0x7f39212ed79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52077)[0m     @     0x55f3bc3d9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52077)[0m     @     0x55f3bc334b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52077)[0m     @     0x55f3bc3bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52077)[0m     @     0x55f3bc3c0a20 method_vectorcall
[2m[36m(pid=52077)[0m     @     0x55f3bc334bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52077)[0m     @     0x55f3bc3bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52077)[0m     @     0x55f3bc3c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52077)[0m     @     0x55f3bc335689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52077)[0m     @     0x55f3bc3bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52077)[0m     @     0x55f3bc3c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52077)[0m     @     0x55f3bc335689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52077)[0m     @     0x55f3bc3bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52077)[0m     @     0x55f3bc3c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52068)[0m     @     0x7f3193e474f5 at::Tensor::copy_()
[2m[36m(pid=52068)[0m     @     0x7f319631a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52068)[0m     @     0x7f3193e474f5 at::Tensor::copy_()
[2m[36m(pid=52068)[0m     @     0x7f3199ef279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52068)[0m     @     0x55d01bff2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52068)[0m     @     0x55d01bf4db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52068)[0m     @     0x55d01bfd8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52068)[0m     @     0x55d01bfd9a20 method_vectorcall
[2m[36m(pid=52068)[0m     @     0x55d01bf4dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52068)[0m     @     0x55d01bfd8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52073)[0m     @     0x7f66ee614ad3 at::TensorIterator::for_each()
[2m[36m(pid=52060)[0m     @     0x7f6f299cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52060)[0m     @     0x7f6f299cd388 at::native::copy_impl()
[2m[36m(pid=52060)[0m     @     0x7f6f299cf5a4 at::native::copy_()
[2m[36m(pid=52016)[0m     @     0x7fca82cd64f5 at::Tensor::copy_()
[2m[36m(pid=52016)[0m     @     0x7fca851a98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52016)[0m     @     0x7fca82cd64f5 at::Tensor::copy_()
[2m[36m(pid=52016)[0m     @     0x7fca88d8179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52016)[0m     @     0x562e8ef10fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52016)[0m     @     0x562e8ee6bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52016)[0m     @     0x562e8eef6baf _PyEval_EvalCodeWithName
[2m[36m(pid=52016)[0m     @     0x562e8eef7a20 method_vectorcall
[2m[36m(pid=52016)[0m     @     0x562e8ee6bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52016)[0m     @     0x562e8eef6baf _PyEval_EvalCodeWithName
[2m[36m(pid=52016)[0m     @     0x562e8eef7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52016)[0m     @     0x562e8ee6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52016)[0m     @     0x562e8eef6baf _PyEval_EvalCodeWithName
[2m[36m(pid=52016)[0m     @     0x562e8eef7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52016)[0m     @     0x562e8ee6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52016)[0m     @     0x562e8eef6baf _PyEval_EvalCodeWithName
[2m[36m(pid=52016)[0m     @     0x562e8eef7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52016)[0m     @     0x562e8ee6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52016)[0m     @     0x562e8eef6baf _PyEval_EvalCodeWithName
[2m[36m(pid=52016)[0m     @     0x562e8eef7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52016)[0m     @     0x562e8ee6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52081)[0m     @     0x7f68999cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52081)[0m     @     0x7f68999cd388 at::native::copy_impl()
[2m[36m(pid=52081)[0m     @     0x7f68999cf5a4 at::native::copy_()
[2m[36m(pid=52053)[0m     @     0x7fb6a7f0c5a4 at::native::copy_()
[2m[36m(pid=52053)[0m     @     0x7fb6a85f74f5 at::Tensor::copy_()
[2m[36m(pid=52053)[0m     @     0x7fb6aaaca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52051)[0m     @     0x7ef0bebf84f5 at::Tensor::copy_()
[2m[36m(pid=52051)[0m     @     0x7ef0c10cb8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52114)[0m     @     0x7f49453ba4f5 at::Tensor::copy_()
[2m[36m(pid=52114)[0m     @     0x7f494788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52114)[0m     @     0x7f49453ba4f5 at::Tensor::copy_()
[2m[36m(pid=52098)[0m     @     0x7f188750c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=52006)[0m     @     0x7f20d2fe38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52006)[0m     @     0x7f20d0b104f5 at::Tensor::copy_()
[2m[36m(pid=52006)[0m     @     0x7f20d6bbb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52006)[0m     @     0x5623eabcdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52006)[0m     @     0x5623eab28b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52006)[0m     @     0x5623eabb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52006)[0m     @     0x5623eabb4a20 method_vectorcall
[2m[36m(pid=52006)[0m     @     0x5623eab28bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52006)[0m     @     0x5623eabb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52006)[0m     @     0x5623eabb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52006)[0m     @     0x5623eab29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52006)[0m     @     0x5623eabb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52006)[0m     @     0x5623eabb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52006)[0m     @     0x5623eab29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52006)[0m     @     0x5623eabb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52093)[0m     @     0x7f28eda598de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52093)[0m     @     0x7f28eb5864f5 at::Tensor::copy_()
[2m[36m(pid=52093)[0m     @     0x7f28f163179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52093)[0m     @     0x5654ad1bbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52093)[0m     @     0x5654ad116b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52093)[0m     @     0x5654ad1a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52093)[0m     @     0x5654ad1a2a20 method_vectorcall
[2m[36m(pid=52093)[0m     @     0x5654ad116bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52093)[0m     @     0x5654ad1a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52093)[0m     @     0x5654ad1a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52093)[0m     @     0x5654ad117689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52093)[0m     @     0x5654ad1a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52093)[0m     @     0x5654ad1a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52093)[0m     @     0x5654ad117689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52093)[0m     @     0x5654ad1a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52093)[0m     @     0x5654ad1a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52093)[0m     @     0x5654ad117689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52093)[0m     @     0x5654ad1a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=51994)[0m     @     0x7fb5299134f5 at::Tensor::copy_()
[2m[36m(pid=51994)[0m     @     0x7fb52f9be79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51994)[0m     @     0x55cc7d269fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51994)[0m     @     0x55cc7d1c4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51994)[0m     @     0x55cc7d24fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51994)[0m     @     0x55cc7d250a20 method_vectorcall
[2m[36m(pid=51994)[0m     @     0x55cc7d1c4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51994)[0m     @     0x55cc7d24fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51994)[0m     @     0x55cc7d250643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51994)[0m     @     0x55cc7d1c5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51994)[0m     @     0x55cc7d24fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51994)[0m     @     0x55cc7d250643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51994)[0m     @     0x55cc7d1c5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51994)[0m     @     0x55cc7d24fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51994)[0m     @     0x55cc7d250643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51994)[0m     @     0x55cc7d1c5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51994)[0m     @     0x55cc7d24fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51994)[0m     @     0x55cc7d250643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51994)[0m     @     0x55cc7d1c5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52049)[0m     @     0x7fcb4027b5a4 at::native::copy_()
[2m[36m(pid=52049)[0m     @     0x7fcb409664f5 at::Tensor::copy_()
[2m[36m(pid=52049)[0m     @     0x7fcb42e398de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52062)[0m     @     0x7f7f895cb4f5 at::Tensor::copy_()
[2m[36m(pid=52062)[0m     @     0x7f7f8ba9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52062)[0m     @     0x7f7f895cb4f5 at::Tensor::copy_()
[2m[36m(pid=51989)[0m     @     0x7f16fbc8e4f5 at::Tensor::copy_()
[2m[36m(pid=51995)[0m     @     0x7f14c1f9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51995)[0m     @     0x55a2b1802fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51995)[0m     @     0x55a2b175db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51995)[0m     @     0x55a2b17e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=51995)[0m     @     0x55a2b17e9a20 method_vectorcall
[2m[36m(pid=51995)[0m     @     0x55a2b175dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51995)[0m     @     0x55a2b17e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=51995)[0m     @     0x55a2b17e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51995)[0m     @     0x55a2b175e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51995)[0m     @     0x55a2b17e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=51995)[0m     @     0x55a2b17e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51995)[0m     @     0x55a2b175e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51995)[0m     @     0x55a2b17e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=51995)[0m     @     0x55a2b17e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51995)[0m     @     0x55a2b175e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51995)[0m     @     0x55a2b17e8baf _PyEval_EvalCodeWithName
[2m[36m(pid=51995)[0m     @     0x55a2b17e9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51995)[0m     @     0x55a2b175e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52015)[0m     @     0x7ef8e2ffb4f5 at::Tensor::copy_()
[2m[36m(pid=52015)[0m     @     0x7ef8e90a679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52015)[0m     @     0x5565a0d90fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52015)[0m     @     0x5565a0cebb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52015)[0m     @     0x5565a0d76baf _PyEval_EvalCodeWithName
[2m[36m(pid=52015)[0m     @     0x5565a0d77a20 method_vectorcall
[2m[36m(pid=52015)[0m     @     0x5565a0cebbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52015)[0m     @     0x5565a0d76baf _PyEval_EvalCodeWithName
[2m[36m(pid=52015)[0m     @     0x5565a0d77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52015)[0m     @     0x5565a0cec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52015)[0m     @     0x5565a0d76baf _PyEval_EvalCodeWithName
[2m[36m(pid=52015)[0m     @     0x5565a0d77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52015)[0m     @     0x5565a0cec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52015)[0m     @     0x5565a0d76baf _PyEval_EvalCodeWithName
[2m[36m(pid=52015)[0m     @     0x5565a0d77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52015)[0m     @     0x5565a0cec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52015)[0m     @     0x5565a0d76baf _PyEval_EvalCodeWithName
[2m[36m(pid=52015)[0m     @     0x5565a0d77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52015)[0m     @     0x5565a0cec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52001)[0m     @     0x7f278bbdd4f5 at::Tensor::copy_()
[2m[36m(pid=52001)[0m     @     0x7f2791c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52001)[0m     @     0x55eb476bbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52001)[0m     @     0x55eb47616b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52001)[0m     @     0x55eb476a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52001)[0m     @     0x55eb476a2a20 method_vectorcall
[2m[36m(pid=52001)[0m     @     0x55eb47616bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52001)[0m     @     0x55eb476a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52001)[0m     @     0x55eb476a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52001)[0m     @     0x55eb47617689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52001)[0m     @     0x55eb476a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52001)[0m     @     0x55eb476a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52001)[0m     @     0x55eb47617689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52001)[0m     @     0x55eb476a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52001)[0m     @     0x55eb476a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52001)[0m     @     0x55eb47617689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52001)[0m     @     0x55eb476a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52001)[0m     @     0x55eb476a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52001)[0m     @     0x55eb47617689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52082)[0m     @     0x560aa729abaf _PyEval_EvalCodeWithName
[2m[36m(pid=52082)[0m     @     0x560aa729b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52082)[0m     @     0x560aa7210689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52063)[0m     @     0x7f4dbdf0c4f5 at::Tensor::copy_()
[2m[36m(pid=52063)[0m     @     0x7f4dc03df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51984)[0m     @     0x7f0b9999879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51984)[0m     @     0x55c4d5989fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51984)[0m     @     0x55c4d58e4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51984)[0m     @     0x55c4d596fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51984)[0m     @     0x55c4d5970a20 method_vectorcall
[2m[36m(pid=51984)[0m     @     0x55c4d58e4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51984)[0m     @     0x55c4d596fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51984)[0m     @     0x55c4d5970643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51984)[0m     @     0x55c4d58e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51984)[0m     @     0x55c4d596fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51984)[0m     @     0x55c4d5970643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51984)[0m     @     0x55c4d58e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51984)[0m     @     0x55c4d596fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51984)[0m     @     0x55c4d5970643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51984)[0m     @     0x55c4d58e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51984)[0m     @     0x55c4d596fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=51984)[0m     @     0x55c4d5970643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51984)[0m     @     0x55c4d58e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52050)[0m     @     0x7edb3f8df4f5 at::Tensor::copy_()
[2m[36m(pid=52050)[0m     @     0x7edb4598a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52050)[0m     @     0x55ebd940efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52050)[0m     @     0x55ebd9369b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52050)[0m     @     0x55ebd93f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=52050)[0m     @     0x55ebd93f5a20 method_vectorcall
[2m[36m(pid=52050)[0m     @     0x55ebd9369bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52050)[0m     @     0x55ebd93f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=52050)[0m     @     0x55ebd93f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52050)[0m     @     0x55ebd936a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52050)[0m     @     0x55ebd93f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=52050)[0m     @     0x55ebd93f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52050)[0m     @     0x55ebd936a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52050)[0m     @     0x55ebd93f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=52050)[0m     @     0x55ebd93f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52050)[0m     @     0x55ebd936a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52050)[0m     @     0x55ebd93f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=52050)[0m     @     0x55ebd93f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52050)[0m     @     0x55ebd936a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51983)[0m     @     0x7ed4284b14f5 at::Tensor::copy_()
[2m[36m(pid=51983)[0m     @     0x7ed42e55c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51983)[0m     @     0x5560cec7dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51983)[0m     @     0x5560cebd8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51983)[0m     @     0x5560cec63baf _PyEval_EvalCodeWithName
[2m[36m(pid=51983)[0m     @     0x5560cec64a20 method_vectorcall
[2m[36m(pid=51983)[0m     @     0x5560cebd8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51983)[0m     @     0x5560cec63baf _PyEval_EvalCodeWithName
[2m[36m(pid=51983)[0m     @     0x5560cec64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51983)[0m     @     0x5560cebd9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51983)[0m     @     0x5560cec63baf _PyEval_EvalCodeWithName
[2m[36m(pid=51983)[0m     @     0x5560cec64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51983)[0m     @     0x5560cebd9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51983)[0m     @     0x5560cec63baf _PyEval_EvalCodeWithName
[2m[36m(pid=51983)[0m     @     0x5560cec64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51983)[0m     @     0x5560cebd9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51983)[0m     @     0x5560cec63baf _PyEval_EvalCodeWithName
[2m[36m(pid=51983)[0m     @     0x5560cec64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51983)[0m     @     0x5560cebd9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51987)[0m     @     0x7ed5451254f5 at::Tensor::copy_()
[2m[36m(pid=51987)[0m     @     0x7ed54b1d079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51987)[0m     @     0x55e59959dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51987)[0m     @     0x55e5994f8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52003)[0m     @     0x7f1f44e4b4f5 at::Tensor::copy_()
[2m[36m(pid=52003)[0m     @     0x7f1f4aef679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52003)[0m     @     0x55700a55efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52003)[0m     @     0x55700a4b9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52003)[0m     @     0x55700a544baf _PyEval_EvalCodeWithName
[2m[36m(pid=52003)[0m     @     0x55700a545a20 method_vectorcall
[2m[36m(pid=52003)[0m     @     0x55700a4b9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52003)[0m     @     0x55700a544baf _PyEval_EvalCodeWithName
[2m[36m(pid=52003)[0m     @     0x55700a545643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52003)[0m     @     0x55700a4ba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52003)[0m     @     0x55700a544baf _PyEval_EvalCodeWithName
[2m[36m(pid=52003)[0m     @     0x55700a545643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51981)[0m     @     0x7f89680218de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52011)[0m     @     0x7f4273bdd4f5 at::Tensor::copy_()
[2m[36m(pid=52011)[0m     @     0x7f4279c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52011)[0m     @     0x55c216835fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52011)[0m     @     0x55c216790b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52011)[0m     @     0x55c21681bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52011)[0m     @     0x55c21681ca20 method_vectorcall
[2m[36m(pid=52011)[0m     @     0x55c216790bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52011)[0m     @     0x55c21681bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52011)[0m     @     0x55c21681c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52011)[0m     @     0x55c216791689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52011)[0m     @     0x55c21681bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52011)[0m     @     0x55c21681c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52011)[0m     @     0x55c216791689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52011)[0m     @     0x55c21681bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52011)[0m     @     0x55c21681c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52011)[0m     @     0x55c216791689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52011)[0m     @     0x55c21681bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52011)[0m     @     0x55c21681c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52011)[0m     @     0x55c216791689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52007)[0m     @     0x5649a8b83fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52007)[0m     @     0x5649a8adeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52007)[0m     @     0x5649a8b69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52007)[0m     @     0x5649a8b6aa20 method_vectorcall
[2m[36m(pid=52007)[0m     @     0x5649a8adebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52007)[0m     @     0x5649a8b69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52007)[0m     @     0x5649a8b6a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52007)[0m     @     0x5649a8adf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52007)[0m     @     0x5649a8b69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52007)[0m     @     0x5649a8b6a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52007)[0m     @     0x5649a8adf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52007)[0m     @     0x5649a8b69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52007)[0m     @     0x5649a8b6a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52007)[0m     @     0x5649a8adf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52007)[0m     @     0x5649a8b69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52007)[0m     @     0x5649a8b6a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52007)[0m     @     0x5649a8adf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52104)[0m     @     0x7ed53ae9b5a4 at::native::copy_()
[2m[36m(pid=52057)[0m     @     0x7ed989cfb4f5 at::Tensor::copy_()
[2m[36m(pid=52057)[0m     @     0x7ed98fda679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52057)[0m     @     0x55759d08efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52057)[0m     @     0x55759cfe9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52057)[0m     @     0x55759d074baf _PyEval_EvalCodeWithName
[2m[36m(pid=52057)[0m     @     0x55759d075a20 method_vectorcall
[2m[36m(pid=52057)[0m     @     0x55759cfe9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52057)[0m     @     0x55759d074baf _PyEval_EvalCodeWithName
[2m[36m(pid=52057)[0m     @     0x55759d075643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52057)[0m     @     0x55759cfea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52057)[0m     @     0x55759d074baf _PyEval_EvalCodeWithName
[2m[36m(pid=52057)[0m     @     0x55759d075643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52057)[0m     @     0x55759cfea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52057)[0m     @     0x55759d074baf _PyEval_EvalCodeWithName
[2m[36m(pid=52057)[0m     @     0x55759d075643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52057)[0m     @     0x55759cfea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52057)[0m     @     0x55759d074baf _PyEval_EvalCodeWithName
[2m[36m(pid=52057)[0m     @     0x55759d075643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52057)[0m     @     0x55759cfea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52056)[0m     @     0x56353d3c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52056)[0m     @     0x56353d3c3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52056)[0m     @     0x56353d338689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52056)[0m     @     0x56353d3c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52056)[0m     @     0x56353d3c3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52056)[0m     @     0x56353d338689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52056)[0m     @     0x56353d3c2baf _PyEval_EvalCodeWithName
[2m[36m(pid=52056)[0m     @     0x56353d3c3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52056)[0m     @     0x56353d338689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52077)[0m     @     0x55f3bc335689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52077)[0m     @     0x55f3bc3bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52077)[0m     @     0x55f3bc3c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52077)[0m     @     0x55f3bc335689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52068)[0m     @     0x55d01bfd9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52068)[0m     @     0x55d01bf4e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52068)[0m     @     0x55d01bfd8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52068)[0m     @     0x55d01bfd9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52068)[0m     @     0x55d01bf4e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52068)[0m     @     0x55d01bfd8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52068)[0m     @     0x55d01bfd9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52068)[0m     @     0x55d01bf4e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52068)[0m     @     0x55d01bfd8baf _PyEval_EvalCodeWithName
[2m[36m(pid=52068)[0m     @     0x55d01bfd9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52068)[0m     @     0x55d01bf4e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52073)[0m     @     0x7f66ee614d91 at::TensorIterator::for_each()
[2m[36m(pid=52073)[0m     @     0x7f66eeef7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=52073)[0m     @     0x7f66eef1ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52060)[0m     @     0x7f6f2a0ba4f5 at::Tensor::copy_()
[2m[36m(pid=52060)[0m     @     0x7f6f2c58d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52060)[0m     @     0x7f6f2a0ba4f5 at::Tensor::copy_()
[2m[36m(pid=52060)[0m     @     0x7f6f3016579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52060)[0m     @     0x559afb4affd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52060)[0m     @     0x559afb40ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52060)[0m     @     0x559afb495baf _PyEval_EvalCodeWithName
[2m[36m(pid=52060)[0m     @     0x559afb496a20 method_vectorcall
[2m[36m(pid=52060)[0m     @     0x559afb40abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52060)[0m     @     0x559afb495baf _PyEval_EvalCodeWithName
[2m[36m(pid=52060)[0m     @     0x559afb496643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52060)[0m     @     0x559afb40b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52060)[0m     @     0x559afb495baf _PyEval_EvalCodeWithName
[2m[36m(pid=52060)[0m     @     0x559afb496643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52060)[0m     @     0x559afb40b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52060)[0m     @     0x559afb495baf _PyEval_EvalCodeWithName
[2m[36m(pid=52060)[0m     @     0x559afb496643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52060)[0m     @     0x559afb40b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52060)[0m     @     0x559afb495baf _PyEval_EvalCodeWithName
[2m[36m(pid=52060)[0m     @     0x559afb496643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52060)[0m     @     0x559afb40b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52081)[0m     @     0x7f689a0ba4f5 at::Tensor::copy_()
[2m[36m(pid=52081)[0m     @     0x7f689c58d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52081)[0m     @     0x7f689a0ba4f5 at::Tensor::copy_()
[2m[36m(pid=52081)[0m     @     0x7f68a016579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52081)[0m     @     0x55e9749b0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52081)[0m     @     0x55e97490bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52081)[0m     @     0x55e974996baf _PyEval_EvalCodeWithName
[2m[36m(pid=52081)[0m     @     0x55e974997a20 method_vectorcall
[2m[36m(pid=52081)[0m     @     0x55e97490bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52081)[0m     @     0x55e974996baf _PyEval_EvalCodeWithName
[2m[36m(pid=52081)[0m     @     0x55e974997643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52081)[0m     @     0x55e97490c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52081)[0m     @     0x55e974996baf _PyEval_EvalCodeWithName
[2m[36m(pid=52081)[0m     @     0x55e974997643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52081)[0m     @     0x55e97490c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52053)[0m     @     0x7fb6a85f74f5 at::Tensor::copy_()
[2m[36m(pid=52053)[0m     @     0x7fb6ae6a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52053)[0m     @     0x557d12efdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52053)[0m     @     0x557d12e58b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52053)[0m     @     0x557d12ee3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52053)[0m     @     0x557d12ee4a20 method_vectorcall
[2m[36m(pid=52053)[0m     @     0x557d12e58bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52053)[0m     @     0x557d12ee3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52053)[0m     @     0x557d12ee4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52053)[0m     @     0x557d12e59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52053)[0m     @     0x557d12ee3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52053)[0m     @     0x557d12ee4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52053)[0m     @     0x557d12e59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52053)[0m     @     0x557d12ee3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52053)[0m     @     0x557d12ee4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52053)[0m     @     0x557d12e59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52053)[0m     @     0x557d12ee3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52053)[0m     @     0x557d12ee4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52053)[0m     @     0x557d12e59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52051)[0m     @     0x7ef0bebf84f5 at::Tensor::copy_()
[2m[36m(pid=52051)[0m     @     0x7ef0c4ca379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52051)[0m     @     0x5562ee440fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52051)[0m     @     0x5562ee39bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52051)[0m     @     0x5562ee426baf _PyEval_EvalCodeWithName
[2m[36m(pid=52051)[0m     @     0x5562ee427a20 method_vectorcall
[2m[36m(pid=52051)[0m     @     0x5562ee39bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52051)[0m     @     0x5562ee426baf _PyEval_EvalCodeWithName
[2m[36m(pid=52051)[0m     @     0x5562ee427643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52051)[0m     @     0x5562ee39c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52051)[0m     @     0x5562ee426baf _PyEval_EvalCodeWithName
[2m[36m(pid=52051)[0m     @     0x5562ee427643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52051)[0m     @     0x5562ee39c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52051)[0m     @     0x5562ee426baf _PyEval_EvalCodeWithName
[2m[36m(pid=52051)[0m     @     0x5562ee427643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52051)[0m     @     0x5562ee39c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52051)[0m     @     0x5562ee426baf _PyEval_EvalCodeWithName
[2m[36m(pid=52051)[0m     @     0x5562ee427643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52051)[0m     @     0x5562ee39c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52114)[0m     @     0x7f494b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52114)[0m     @     0x55c2d52b2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52114)[0m     @     0x55c2d520db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52114)[0m     @     0x55c2d5298baf _PyEval_EvalCodeWithName
[2m[36m(pid=52114)[0m     @     0x55c2d5299a20 method_vectorcall
[2m[36m(pid=52114)[0m     @     0x55c2d520dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52114)[0m     @     0x55c2d5298baf _PyEval_EvalCodeWithName
[2m[36m(pid=52114)[0m     @     0x55c2d5299643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52114)[0m     @     0x55c2d520e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52114)[0m     @     0x55c2d5298baf _PyEval_EvalCodeWithName
[2m[36m(pid=52114)[0m     @     0x55c2d5299643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52114)[0m     @     0x55c2d520e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52114)[0m     @     0x55c2d5298baf _PyEval_EvalCodeWithName
[2m[36m(pid=52114)[0m     @     0x55c2d5299643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52114)[0m     @     0x55c2d520e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52114)[0m     @     0x55c2d5298baf _PyEval_EvalCodeWithName
[2m[36m(pid=52114)[0m     @     0x55c2d5299643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52114)[0m     @     0x55c2d520e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52098)[0m     @     0x7f188750cad3 at::TensorIterator::for_each()
[2m[36m(pid=52006)[0m     @     0x5623eabb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52006)[0m     @     0x5623eab29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52006)[0m     @     0x5623eabb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=52006)[0m     @     0x5623eabb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52006)[0m     @     0x5623eab29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52093)[0m     @     0x5654ad1a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52093)[0m     @     0x5654ad117689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52049)[0m     @     0x7fcb409664f5 at::Tensor::copy_()
[2m[36m(pid=52049)[0m     @     0x7fcb46a1179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52049)[0m     @     0x55d647930fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52049)[0m     @     0x55d64788bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52049)[0m     @     0x55d647916baf _PyEval_EvalCodeWithName
[2m[36m(pid=52049)[0m     @     0x55d647917a20 method_vectorcall
[2m[36m(pid=52049)[0m     @     0x55d64788bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52049)[0m     @     0x55d647916baf _PyEval_EvalCodeWithName
[2m[36m(pid=52049)[0m     @     0x55d647917643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52049)[0m     @     0x55d64788c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52049)[0m     @     0x55d647916baf _PyEval_EvalCodeWithName
[2m[36m(pid=52049)[0m     @     0x55d647917643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52049)[0m     @     0x55d64788c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52049)[0m     @     0x55d647916baf _PyEval_EvalCodeWithName
[2m[36m(pid=52049)[0m     @     0x55d647917643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52049)[0m     @     0x55d64788c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52049)[0m     @     0x55d647916baf _PyEval_EvalCodeWithName
[2m[36m(pid=52049)[0m     @     0x55d647917643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52049)[0m     @     0x55d64788c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52062)[0m     @     0x7f7f8f67679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52062)[0m     @     0x55c12b651fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52062)[0m     @     0x55c12b5acb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52062)[0m     @     0x55c12b637baf _PyEval_EvalCodeWithName
[2m[36m(pid=52062)[0m     @     0x55c12b638a20 method_vectorcall
[2m[36m(pid=52062)[0m     @     0x55c12b5acbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52062)[0m     @     0x55c12b637baf _PyEval_EvalCodeWithName
[2m[36m(pid=52062)[0m     @     0x55c12b638643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52062)[0m     @     0x55c12b5ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52062)[0m     @     0x55c12b637baf _PyEval_EvalCodeWithName
[2m[36m(pid=52062)[0m     @     0x55c12b638643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52062)[0m     @     0x55c12b5ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52062)[0m     @     0x55c12b637baf _PyEval_EvalCodeWithName
[2m[36m(pid=52062)[0m     @     0x55c12b638643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52062)[0m     @     0x55c12b5ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52062)[0m     @     0x55c12b637baf _PyEval_EvalCodeWithName
[2m[36m(pid=52062)[0m     @     0x55c12b638643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52062)[0m     @     0x55c12b5ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52063)[0m     @     0x7f4dbdf0c4f5 at::Tensor::copy_()
[2m[36m(pid=52063)[0m     @     0x7f4dc3fb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52063)[0m     @     0x556a91bcbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52063)[0m     @     0x556a91b26b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52063)[0m     @     0x556a91bb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52063)[0m     @     0x556a91bb2a20 method_vectorcall
[2m[36m(pid=52063)[0m     @     0x556a91b26bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52063)[0m     @     0x556a91bb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52063)[0m     @     0x556a91bb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52063)[0m     @     0x556a91b27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52063)[0m     @     0x556a91bb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52063)[0m     @     0x556a91bb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52063)[0m     @     0x556a91b27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52063)[0m     @     0x556a91bb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52063)[0m     @     0x556a91bb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52063)[0m     @     0x556a91b27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52063)[0m     @     0x556a91bb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=52063)[0m     @     0x556a91bb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52063)[0m     @     0x556a91b27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51987)[0m     @     0x55e599583baf _PyEval_EvalCodeWithName
[2m[36m(pid=51987)[0m     @     0x55e599584a20 method_vectorcall
[2m[36m(pid=51987)[0m     @     0x55e5994f8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51987)[0m     @     0x55e599583baf _PyEval_EvalCodeWithName
[2m[36m(pid=51987)[0m     @     0x55e599584643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51987)[0m     @     0x55e5994f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51987)[0m     @     0x55e599583baf _PyEval_EvalCodeWithName
[2m[36m(pid=51987)[0m     @     0x55e599584643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51987)[0m     @     0x55e5994f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51987)[0m     @     0x55e599583baf _PyEval_EvalCodeWithName
[2m[36m(pid=51987)[0m     @     0x55e599584643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51987)[0m     @     0x55e5994f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51987)[0m     @     0x55e599583baf _PyEval_EvalCodeWithName
[2m[36m(pid=51987)[0m     @     0x55e599584643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51987)[0m     @     0x55e5994f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52046)[0m     @     0x7f72e3e114f5 at::Tensor::copy_()
[2m[36m(pid=52046)[0m     @     0x7f72e62e48de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52003)[0m     @     0x55700a4ba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52003)[0m     @     0x55700a544baf _PyEval_EvalCodeWithName
[2m[36m(pid=52003)[0m     @     0x55700a545643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52003)[0m     @     0x55700a4ba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52003)[0m     @     0x55700a544baf _PyEval_EvalCodeWithName
[2m[36m(pid=52003)[0m     @     0x55700a545643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52003)[0m     @     0x55700a4ba689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51981)[0m     @     0x7f8965b4e4f5 at::Tensor::copy_()
[2m[36m(pid=51981)[0m     @     0x7f896bbf979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51981)[0m     @     0x556b559cdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51981)[0m     @     0x556b55928b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51981)[0m     @     0x556b559b3baf _PyEval_EvalCodeWithName
[2m[36m(pid=51981)[0m     @     0x556b559b4a20 method_vectorcall
[2m[36m(pid=51981)[0m     @     0x556b55928bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51981)[0m     @     0x556b559b3baf _PyEval_EvalCodeWithName
[2m[36m(pid=51981)[0m     @     0x556b559b4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51981)[0m     @     0x556b55929689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51981)[0m     @     0x556b559b3baf _PyEval_EvalCodeWithName
[2m[36m(pid=51981)[0m     @     0x556b559b4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51981)[0m     @     0x556b55929689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51981)[0m     @     0x556b559b3baf _PyEval_EvalCodeWithName
[2m[36m(pid=51981)[0m     @     0x556b559b4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51981)[0m     @     0x556b55929689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51981)[0m     @     0x556b559b3baf _PyEval_EvalCodeWithName
[2m[36m(pid=51981)[0m     @     0x556b559b4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51981)[0m     @     0x556b55929689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52104)[0m     @     0x7ed53b5864f5 at::Tensor::copy_()
[2m[36m(pid=52073)[0m     @     0x7f66ee3bca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52073)[0m     @     0x7f66ee3ba388 at::native::copy_impl()
[2m[36m(pid=52081)[0m     @     0x55e974996baf _PyEval_EvalCodeWithName
[2m[36m(pid=52081)[0m     @     0x55e974997643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52081)[0m     @     0x55e97490c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52081)[0m     @     0x55e974996baf _PyEval_EvalCodeWithName
[2m[36m(pid=52081)[0m     @     0x55e974997643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52081)[0m     @     0x55e97490c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52098)[0m     @     0x7f188750cd91 at::TensorIterator::for_each()
[2m[36m(pid=52098)[0m     @     0x7f1887defb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=51989)[0m     @     0x7f16fe1618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51989)[0m     @     0x7f16fbc8e4f5 at::Tensor::copy_()
[2m[36m(pid=52046)[0m     @     0x7f72e3e114f5 at::Tensor::copy_()
[2m[36m(pid=52046)[0m     @     0x7f72e9ebc79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52046)[0m     @     0x5608ae8cffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52046)[0m     @     0x5608ae82ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52046)[0m     @     0x5608ae8b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=52046)[0m     @     0x5608ae8b6a20 method_vectorcall
[2m[36m(pid=52104)[0m     @     0x7ed53da598de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=52073)[0m     @     0x7f66ee3bc5a4 at::native::copy_()
[2m[36m(pid=52073)[0m     @     0x7f66eeaa74f5 at::Tensor::copy_()
[2m[36m(pid=52073)[0m     @     0x7f66f0f7a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=51989)[0m     @     0x7f1701d3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=51989)[0m     @     0x55f92d06dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=51989)[0m     @     0x55f92cfc8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51989)[0m     @     0x55f92d053baf _PyEval_EvalCodeWithName
[2m[36m(pid=51989)[0m     @     0x55f92d054a20 method_vectorcall
[2m[36m(pid=51989)[0m     @     0x55f92cfc8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51989)[0m     @     0x55f92d053baf _PyEval_EvalCodeWithName
[2m[36m(pid=51989)[0m     @     0x55f92d054643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51989)[0m     @     0x55f92cfc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51989)[0m     @     0x55f92d053baf _PyEval_EvalCodeWithName
[2m[36m(pid=51989)[0m     @     0x55f92d054643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51989)[0m     @     0x55f92cfc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51989)[0m     @     0x55f92d053baf _PyEval_EvalCodeWithName
[2m[36m(pid=51989)[0m     @     0x55f92d054643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51989)[0m     @     0x55f92cfc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=51989)[0m     @     0x55f92d053baf _PyEval_EvalCodeWithName
[2m[36m(pid=51989)[0m     @     0x55f92d054643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=51989)[0m     @     0x55f92cfc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52046)[0m     @     0x5608ae82abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52046)[0m     @     0x5608ae8b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=52046)[0m     @     0x5608ae8b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52046)[0m     @     0x5608ae82b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52046)[0m     @     0x5608ae8b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=52046)[0m     @     0x5608ae8b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52046)[0m     @     0x5608ae82b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52046)[0m     @     0x5608ae8b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=52046)[0m     @     0x5608ae8b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52046)[0m     @     0x5608ae82b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52046)[0m     @     0x5608ae8b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=52046)[0m     @     0x5608ae8b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52046)[0m     @     0x5608ae82b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52104)[0m     @     0x7ed53b5864f5 at::Tensor::copy_()
[2m[36m(pid=52104)[0m     @     0x7ed54163179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52104)[0m     @     0x55ca85f83fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52104)[0m     @     0x55ca85edeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52104)[0m     @     0x55ca85f69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52104)[0m     @     0x55ca85f6aa20 method_vectorcall
[2m[36m(pid=52104)[0m     @     0x55ca85edebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52104)[0m     @     0x55ca85f69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52104)[0m     @     0x55ca85f6a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52104)[0m     @     0x55ca85edf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52104)[0m     @     0x55ca85f69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52104)[0m     @     0x55ca85f6a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52104)[0m     @     0x55ca85edf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52104)[0m     @     0x55ca85f69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52104)[0m     @     0x55ca85f6a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52104)[0m     @     0x55ca85edf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52104)[0m     @     0x55ca85f69baf _PyEval_EvalCodeWithName
[2m[36m(pid=52104)[0m     @     0x55ca85f6a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52104)[0m     @     0x55ca85edf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52073)[0m     @     0x7f66eeaa74f5 at::Tensor::copy_()
[2m[36m(pid=52073)[0m     @     0x7f66f4b5279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52073)[0m     @     0x55e43e895fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52073)[0m     @     0x55e43e7f0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52073)[0m     @     0x55e43e87bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52073)[0m     @     0x55e43e87ca20 method_vectorcall
[2m[36m(pid=52073)[0m     @     0x55e43e7f0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52073)[0m     @     0x55e43e87bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52073)[0m     @     0x55e43e87c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52073)[0m     @     0x55e43e7f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52073)[0m     @     0x55e43e87bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52073)[0m     @     0x55e43e87c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52073)[0m     @     0x55e43e7f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52073)[0m     @     0x55e43e87bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52098)[0m     @     0x7f1887e12c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=52098)[0m     @     0x7f18872b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=52098)[0m     @     0x7f18872b2388 at::native::copy_impl()
[2m[36m(pid=52073)[0m     @     0x55e43e87c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52073)[0m     @     0x55e43e7f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52073)[0m     @     0x55e43e87bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52073)[0m     @     0x55e43e87c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52073)[0m     @     0x55e43e7f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52098)[0m     @     0x7f18872b45a4 at::native::copy_()
[2m[36m(pid=52098)[0m     @     0x7f188799f4f5 at::Tensor::copy_()
[2m[36m(pid=52098)[0m     @     0x7f1889e728de torch::autograd::VariableType::(anonymous namespace)::copy_()
2020-11-05 10:46:29,280	ERROR trial_runner.py:567 -- Trial PPO_jss_env_24d72_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=52087, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
2020-11-05 10:46:29,286	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.
2020-11-05 10:46:29,287	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.
2020-11-05 10:46:29,287	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff90aded9101000000.
[2m[36m(pid=52087)[0m E1105 10:46:29.266132 52087 53240 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=bf6cd9795b8b23124e242e9f01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4e242e9f01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=52087)[0m E1105 10:46:29.266340 52087 53240 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=c5da4173a1c517cf4e242e9f01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4e242e9f01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=52087)[0m E1105 10:46:29.273954 52087 53240 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=170fdfd5d34985a7e0497dac01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=52087)[0m E1105 10:46:29.274091 52087 53240 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=89f63fee54d6858ee0497dac01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[33m(pid=raylet)[0m E1105 10:46:29.264389 51940 51940 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer
[2m[36m(pid=52098)[0m     @     0x7f188799f4f5 at::Tensor::copy_()
[2m[36m(pid=52098)[0m     @     0x7f188da4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=52098)[0m     @     0x55716edc9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=52098)[0m     @     0x55716ed24b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52098)[0m     @     0x55716edafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52098)[0m     @     0x55716edb0a20 method_vectorcall
[2m[36m(pid=52098)[0m     @     0x55716ed24bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52098)[0m     @     0x55716edafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52098)[0m     @     0x55716edb0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52098)[0m     @     0x55716ed25689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52098)[0m     @     0x55716edafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52098)[0m     @     0x55716edb0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52098)[0m     @     0x55716ed25689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52098)[0m     @     0x55716edafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52098)[0m     @     0x55716edb0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52098)[0m     @     0x55716ed25689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52098)[0m     @     0x55716edafbaf _PyEval_EvalCodeWithName
[2m[36m(pid=52098)[0m     @     0x55716edb0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=52098)[0m     @     0x55716ed25689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=52087)[0m E1105 10:46:29.284859 52087 53240 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=37f0cff2c5fdc1c790aded9101000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=90aded9101000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=52087)[0m E1105 10:46:29.284982 52087 53240 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=ff02fc67a478da9090aded9101000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=90aded9101000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
== Status ==
Memory usage on this node: 24.0/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.01 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_24d72_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_24d72_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_24d72_00000_0_2020-11-05_10-46-22/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+
2020-11-05 10:46:29,299	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.

== Status ==
Memory usage on this node: 23.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.01 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_24d72_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_24d72_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_24d72_00000_0_2020-11-05_10-46-22/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+
[2m[33m(pid=raylet)[0m E1105 10:46:29.278182 51940 51940 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer

[2m[33m(pid=raylet)[0m E1105 10:46:29.288966 51940 51940 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer
[2m[33m(pid=raylet)[0m E1105 10:46:29.294332 51940 51940 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer
Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_24d72_00000])
